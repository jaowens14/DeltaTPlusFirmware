/**
 * @file    st7789s.c
 * @brief   ST7789S LCD Driver Implementation for STM32 HAL
 * @author  Adapted from vendor example
 */

#include "st7789s.h"

/* Private macros */
#define LCD_CS_LOW()    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET)
#define LCD_CS_HIGH()   HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET)
#define LCD_DC_LOW()    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET)
#define LCD_DC_HIGH()   HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET)
#define LCD_RST_LOW()   HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET)
#define LCD_RST_HIGH()  HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET)

/**
 * @brief Write command to LCD
 * @param cmd: Command byte to send
 */
void LCD_WriteCommand(uint8_t cmd)
{
    LCD_CS_LOW();
    LCD_DC_LOW();  // Command mode (RS=0 in original)
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
    LCD_CS_HIGH();
}

/**
 * @brief Write data to LCD
 * @param data: Data byte to send
 */
void LCD_WriteData(uint8_t data)
{
    LCD_CS_LOW();
    LCD_DC_HIGH(); // Data mode (RS=1 in original)
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
    LCD_CS_HIGH();
}

/**
 * @brief Write multiple data bytes to LCD
 * @param data: Pointer to data array
 * @param len: Number of bytes to send
 */
void LCD_WriteDataMultiple(uint8_t *data, uint16_t len)
{
    LCD_CS_LOW();
    LCD_DC_HIGH(); // Data mode
    HAL_SPI_Transmit(&hspi1, data, len, HAL_MAX_DELAY);
    LCD_CS_HIGH();
}

/**
 * @brief Write display data (16-bit color data)
 * @param data_high: High byte of 16-bit data
 * @param data_low: Low byte of 16-bit data
 */
void LCD_WriteDisplayData(uint8_t data_high, uint8_t data_low)
{
    uint8_t data[2] = {data_high, data_low};
    LCD_CS_LOW();
    LCD_DC_HIGH(); // Data mode
    HAL_SPI_Transmit(&hspi1, data, 2, HAL_MAX_DELAY);
    LCD_CS_HIGH();
}

/**
 * @brief Initialize ST7789S LCD
 */
void LCD_Init(void)
{
    // Hardware reset sequence
    LCD_RST_HIGH();
    HAL_Delay(1);
    LCD_RST_LOW();
    HAL_Delay(10);
    LCD_RST_HIGH();
    HAL_Delay(120);

    // LCD initialization sequence
    LCD_WriteCommand(0x3A); // Pixel Format Set
    LCD_WriteData(0x05);    // 16-bit/pixel

    LCD_WriteCommand(0x36); // Memory Access Control
    LCD_WriteData(0x00);

    // ST7789S Frame rate setting
    LCD_WriteCommand(0xB2); // Porch Setting
    LCD_WriteData(0x05);
    LCD_WriteData(0x05);
    LCD_WriteData(0x00);
    LCD_WriteData(0x33);
    LCD_WriteData(0x33);

    LCD_WriteCommand(0xB7); // Gate Control
    LCD_WriteData(0x35);

    // ST7789S Power setting
    LCD_WriteCommand(0xBB); // VCOM Setting
    LCD_WriteData(0x3F);

    LCD_WriteCommand(0xC0); // LCM Control
    LCD_WriteData(0x2C);

    LCD_WriteCommand(0xC2); // VDV and VRH Command Enable
    LCD_WriteData(0x01);

    LCD_WriteCommand(0xC3); // VRH Set
    LCD_WriteData(0x0F);

    LCD_WriteCommand(0xC4); // VDV Set
    LCD_WriteData(0x20);

    LCD_WriteCommand(0xC6); // Frame Rate Control in Normal Mode
    LCD_WriteData(0x11);

    LCD_WriteCommand(0xD0); // Power Control 1
    LCD_WriteData(0xA4);
    LCD_WriteData(0xA1);

    LCD_WriteCommand(0xE8); // Power Control 1
    LCD_WriteData(0x03);

    LCD_WriteCommand(0xE9); // Equalize time control
    LCD_WriteData(0x09);
    LCD_WriteData(0x09);
    LCD_WriteData(0x08);

    // ST7789S gamma setting
    LCD_WriteCommand(0xE0); // Positive Voltage Gamma Control
    LCD_WriteData(0xD0);
    LCD_WriteData(0x05);
    LCD_WriteData(0x09);
    LCD_WriteData(0x09);
    LCD_WriteData(0x08);
    LCD_WriteData(0x14);
    LCD_WriteData(0x28);
    LCD_WriteData(0x33);
    LCD_WriteData(0x3F);
    LCD_WriteData(0x07);
    LCD_WriteData(0x13);
    LCD_WriteData(0x14);
    LCD_WriteData(0x28);
    LCD_WriteData(0x30);

    LCD_WriteCommand(0xE1); // Negative Voltage Gamma Control
    LCD_WriteData(0xD0);
    LCD_WriteData(0x05);
    LCD_WriteData(0x09);
    LCD_WriteData(0x09);
    LCD_WriteData(0x08);
    LCD_WriteData(0x03);
    LCD_WriteData(0x24);
    LCD_WriteData(0x32);
    LCD_WriteData(0x32);
    LCD_WriteData(0x3B);
    LCD_WriteData(0x38);
    LCD_WriteData(0x14);
    LCD_WriteData(0x13);
    LCD_WriteData(0x28);
    LCD_WriteData(0x2F);

    LCD_WriteCommand(0x21); // Display Inversion On

    LCD_WriteCommand(0x2A); // Column Address Set
    LCD_WriteData(0x00);
    LCD_WriteData(0x00);
    LCD_WriteData(0x00);
    LCD_WriteData(0xEF); // 239 (240 pixels)

    LCD_WriteCommand(0x2B); // Row Address Set
    LCD_WriteData(0x00);
    LCD_WriteData(0x00);
    LCD_WriteData(0x01);
    LCD_WriteData(0x3F); // 319 (320 pixels)

    LCD_WriteCommand(0x11); // Sleep Out
    HAL_Delay(120);

    LCD_WriteCommand(0x29); // Display On
    LCD_WriteCommand(0x2C); // Memory Write
}

/**
 * @brief Enter sleep mode
 */
void LCD_EnterSleep(void)
{
    LCD_WriteCommand(0x28); // Display Off
    HAL_Delay(20);
    LCD_WriteCommand(0x10); // Sleep In
}

/**
 * @brief Exit sleep mode
 */
void LCD_ExitSleep(void)
{
    LCD_WriteCommand(0x11); // Sleep Out
    HAL_Delay(120);
    LCD_WriteCommand(0x29); // Display On
}

/**
 * @brief Set drawing window/area
 * @param x0: Start column
 * @param y0: Start row
 * @param x1: End column
 * @param y1: End row
 */
void LCD_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
    LCD_WriteCommand(0x2A); // Column Address Set
    LCD_WriteData(x0 >> 8);
    LCD_WriteData(x0 & 0xFF);
    LCD_WriteData(x1 >> 8);
    LCD_WriteData(x1 & 0xFF);

    LCD_WriteCommand(0x2B); // Row Address Set
    LCD_WriteData(y0 >> 8);
    LCD_WriteData(y0 & 0xFF);
    LCD_WriteData(y1 >> 8);
    LCD_WriteData(y1 & 0xFF);

    LCD_WriteCommand(0x2C); // Memory Write
}

/**
 * @brief Fill entire screen with a color
 * @param color: 16-bit RGB565 color
 */
void LCD_FillScreen(uint16_t color)
{
    LCD_SetWindow(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);

    uint8_t color_bytes[2] = {color >> 8, color & 0xFF};

    LCD_CS_LOW();
    LCD_DC_HIGH(); // Data mode

    for(uint32_t i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
    }

    LCD_CS_HIGH();
}

/**
 * @brief Draw a single pixel
 * @param x: X coordinate
 * @param y: Y coordinate
 * @param color: 16-bit RGB565 color
 */
void LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
    if(x >= LCD_WIDTH || y >= LCD_HEIGHT) return; // Bounds check

    LCD_SetWindow(x, y, x, y);
    LCD_WriteDisplayData(color >> 8, color & 0xFF);
}

/**
 * @brief Fill a rectangular area with color
 * @param x: X coordinate
 * @param y: Y coordinate
 * @param width: Rectangle width
 * @param height: Rectangle height
 * @param color: 16-bit RGB565 color
 */
void LCD_FillRect(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
    if(x >= LCD_WIDTH || y >= LCD_HEIGHT) return; // Bounds check

    // Limit rectangle to screen bounds
    if(x + width > LCD_WIDTH) width = LCD_WIDTH - x;
    if(y + height > LCD_HEIGHT) height = LCD_HEIGHT - y;

    LCD_SetWindow(x, y, x + width - 1, y + height - 1);

    uint8_t color_bytes[2] = {color >> 8, color & 0xFF};

    LCD_CS_LOW();
    LCD_DC_HIGH(); // Data mode

    for(uint32_t i = 0; i < width * height; i++) {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
    }

    LCD_CS_HIGH();
}

/**
 * @brief Convert RGB888 to RGB565
 * @param r: Red component (0-255)
 * @param g: Green component (0-255)
 * @param b: Blue component (0-255)
 * @return 16-bit RGB565 color
 */
uint16_t LCD_RGB565(uint8_t r, uint8_t g, uint8_t b)
{
    return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
}
