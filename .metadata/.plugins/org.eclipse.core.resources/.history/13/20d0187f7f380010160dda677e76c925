/**
 * @file stm32_max31856.h
 *
 * C header for MAX31856 SPI thermocouple amplifier driver.
 * Adapted from Adafruit's C++ driver for use with STM32 HAL.
 */

#ifndef STM32_MAX31856_H
#define STM32_MAX31856_H

#include <stdint.h>
#include <stdbool.h>
#include <math.h>
#include <spi.h>

// ---- Register Definitions ----
#define MAX31856_CR0_REG         0x00
#define MAX31856_CR0_AUTOCONVERT 0x80
#define MAX31856_CR0_1SHOT       0x40
#define MAX31856_CR0_OCFAULT1    0x20
#define MAX31856_CR0_OCFAULT0    0x10
#define MAX31856_CR0_CJ          0x08
#define MAX31856_CR0_FAULT       0x04
#define MAX31856_CR0_FAULTCLR    0x02

#define MAX31856_CR1_REG         0x01
#define MAX31856_MASK_REG        0x02
#define MAX31856_CJHF_REG        0x03
#define MAX31856_CJLF_REG        0x04
#define MAX31856_LTHFTH_REG      0x05
#define MAX31856_LTHFTL_REG      0x06
#define MAX31856_LTLFTH_REG      0x07
#define MAX31856_LTLFTL_REG      0x08
#define MAX31856_CJTO_REG        0x09
#define MAX31856_CJTH_REG        0x0A
#define MAX31856_CJTL_REG        0x0B
#define MAX31856_LTCBH_REG       0x0C
#define MAX31856_LTCBM_REG       0x0D
#define MAX31856_LTCBL_REG       0x0E
#define MAX31856_SR_REG          0x0F

#define MAX31856_FAULT_CJRANGE   0x80
#define MAX31856_FAULT_TCRANGE   0x40
#define MAX31856_FAULT_CJHIGH    0x20
#define MAX31856_FAULT_CJLOW     0x10
#define MAX31856_FAULT_TCHIGH    0x08
#define MAX31856_FAULT_TCLOW     0x04
#define MAX31856_FAULT_OVUV      0x02
#define MAX31856_FAULT_OPEN      0x01

// ---- Type Definitions ----
typedef enum {
    MAX31856_NOISE_FILTER_50HZ,
    MAX31856_NOISE_FILTER_60HZ
} max31856_noise_filter_t;

typedef enum {
    MAX31856_TCTYPE_B = 0b0000,
    MAX31856_TCTYPE_E = 0b0001,
    MAX31856_TCTYPE_J = 0b0010,
    MAX31856_TCTYPE_K = 0b0011,
    MAX31856_TCTYPE_N = 0b0100,
    MAX31856_TCTYPE_R = 0b0101,
    MAX31856_TCTYPE_S = 0b0110,
    MAX31856_TCTYPE_T = 0b0111,
    MAX31856_VMODE_G8 = 0b1000,
    MAX31856_VMODE_G32 = 0b1100,
} max31856_thermocoupletype_t;

typedef enum {
    MAX31856_ONESHOT,
    MAX31856_ONESHOT_NOWAIT,
    MAX31856_CONTINUOUS
} max31856_conversion_mode_t;

// ---- Device Handle ----
typedef struct {
    SPI_HandleTypeDef *hspi;
    GPIO_TypeDef *cs_port;
    uint16_t cs_pin;
    bool initialized;
    max31856_conversion_mode_t conversionMode;
} STM32_MAX31856;

// ---- Function Prototypes ----
#ifdef __cplusplus
extern "C" {
#endif

void STM32_MAX31856_Init(STM32_MAX31856 *dev, SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin);

bool STM32_MAX31856_Begin(STM32_MAX31856 *dev);

void STM32_MAX31856_SetConversionMode(STM32_MAX31856 *dev, max31856_conversion_mode_t mode);
max31856_conversion_mode_t STM32_MAX31856_GetConversionMode(STM32_MAX31856 *dev);

void STM32_MAX31856_SetThermocoupleType(STM32_MAX31856 *dev, max31856_thermocoupletype_t type);
max31856_thermocoupletype_t STM32_MAX31856_GetThermocoupleType(STM32_MAX31856 *dev);

uint8_t STM32_MAX31856_ReadFault(STM32_MAX31856 *dev);

void STM32_MAX31856_TriggerOneShot(STM32_MAX31856 *dev);
bool STM32_MAX31856_ConversionComplete(STM32_MAX31856 *dev);

float STM32_MAX31856_ReadCJTemperature(STM32_MAX31856 *dev);
float STM32_MAX31856_ReadThermocoupleTemperature(STM32_MAX31856 *dev);

void STM32_MAX31856_SetTempFaultThresholds(STM32_MAX31856 *dev, float flow, float fhigh);
void STM32_MAX31856_SetColdJunctionFaultThresholds(STM32_MAX31856 *dev, int8_t low, int8_t high);
void STM32_MAX31856_SetNoiseFilter(STM32_MAX31856 *dev, max31856_noise_filter_t noiseFilter);

#ifdef __cplusplus
}
#endif

#endif // STM32_MAX31856_H
