
DeltaTPlus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012808  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018bc  08012948  08012948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014204  08014204  00015204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801420c  0801420c  0001520c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014210  08014210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000017c  20000008  08014214  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000184  08014390  00016184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001bc  080143c5  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002004  200001d0  080143d6  000161d0  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200021d4  080143d6  000161d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00017000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00017000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080143d6  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0003e893  00000000  00000000  00016a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000093ca  00000000  00000000  0005532a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003550  00000000  00000000  0005e6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000028a0  00000000  00000000  00061c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00015566  00000000  00000000  000644e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00046daf  00000000  00000000  00079a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00103745  00000000  00000000  000c07fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001c3f42  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e5a0  00000000  00000000  001c3f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006e  00000000  00000000  001d2528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d0 	.word	0x200001d0
 800015c:	00000000 	.word	0x00000000
 8000160:	08012930 	.word	0x08012930

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d4 	.word	0x200001d4
 800017c:	08012930 	.word	0x08012930

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80009cc:	b5b0      	push	{r4, r5, r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80009d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <APPD_EnableCPU2+0x34>)
 80009d4:	1d3c      	adds	r4, r7, #4
 80009d6:	461d      	mov	r5, r3
 80009d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009e0:	c403      	stmia	r4!, {r0, r1}
 80009e2:	8022      	strh	r2, [r4, #0]
 80009e4:	3402      	adds	r4, #2
 80009e6:	0c13      	lsrs	r3, r2, #16
 80009e8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80009ea:	f00d fd49 	bl	800e480 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4618      	mov	r0, r3
 80009f2:	f00c ffda 	bl	800d9aa <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80009f6:	bf00      	nop
}
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bdb0      	pop	{r4, r5, r7, pc}
 80009fe:	bf00      	nop
 8000a00:	08012948 	.word	0x08012948

08000a04 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	607a      	str	r2, [r7, #4]
 8000a10:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000a12:	897a      	ldrh	r2, [r7, #10]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68f9      	ldr	r1, [r7, #12]
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 fb39 	bl	8002090 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000a1e:	bf00      	nop
}
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <LL_C2_PWR_SetPowerMode+0x28>)
 8000a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a36:	f023 0207 	bic.w	r2, r3, #7
 8000a3a:	4905      	ldr	r1, [pc, #20]	@ (8000a50 <LL_C2_PWR_SetPowerMode+0x28>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	58000400 	.word	0x58000400

08000a54 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <LL_EXTI_EnableIT_32_63+0x24>)
 8000a5e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000a62:	4905      	ldr	r1, [pc, #20]	@ (8000a78 <LL_EXTI_EnableIT_32_63+0x24>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	58000800 	.word	0x58000800

08000a7c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000a8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a96:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	cafecafe 	.word	0xcafecafe

08000ab8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000aca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	608b      	str	r3, [r1, #8]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000aec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000b38:	d101      	bne.n	8000b3e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000b5e:	d101      	bne.n	8000b64 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000b7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b94:	68fb      	ldr	r3, [r7, #12]
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <LL_DBGMCU_GetDeviceID+0x18>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e0042000 	.word	0xe0042000

08000bc0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <LL_DBGMCU_GetRevisionID+0x18>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	0c1b      	lsrs	r3, r3, #16
 8000bca:	b29b      	uxth	r3, r3
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e0042000 	.word	0xe0042000

08000bdc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	041b      	lsls	r3, r3, #16
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	605a      	str	r2, [r3, #4]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	431a      	orrs	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	605a      	str	r2, [r3, #4]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	695a      	ldr	r2, [r3, #20]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	041b      	lsls	r3, r3, #16
 8000c34:	431a      	orrs	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	615a      	str	r2, [r3, #20]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	695a      	ldr	r2, [r3, #20]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	615a      	str	r2, [r3, #20]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	609a      	str	r2, [r3, #8]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	619a      	str	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <LL_LPM_EnableSleep+0x1c>)
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <LL_LPM_EnableSleep+0x1c>)
 8000caa:	f023 0304 	bic.w	r3, r3, #4
 8000cae:	6113      	str	r3, [r2, #16]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	22ff      	movs	r2, #255	@ 0xff
 8000ccc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	22ca      	movs	r2, #202	@ 0xca
 8000ce6:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2253      	movs	r2, #83	@ 0x53
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f023 0207 	bic.w	r2, r3, #7
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	609a      	str	r2, [r3, #8]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <MX_APPE_Config+0x18>)
 8000d26:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d2a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000d2c:	f000 f824 	bl	8000d78 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000d30:	f000 f864 	bl	8000dfc <Config_HSE>

  return;
 8000d34:	bf00      	nop
}
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	58004000 	.word	0x58004000

08000d3c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000d40:	f000 f870 	bl	8000e24 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000d44:	f000 f888 	bl	8000e58 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000d48:	4903      	ldr	r1, [pc, #12]	@ (8000d58 <MX_APPE_Init+0x1c>)
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 ffae 	bl	8001cac <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000d50:	f000 f890 	bl	8000e74 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000d54:	bf00      	nop
}
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000320 	.word	0x20000320

08000d5c <Init_Smps>:

void Init_Smps(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000d60:	bf00      	nop
}
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <Init_Exti>:

void Init_Exti(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000d6e:	2050      	movs	r0, #80	@ 0x50
 8000d70:	f7ff fe70 	bl	8000a54 <LL_EXTI_EnableIT_32_63>

  return;
 8000d74:	bf00      	nop
}
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000d7c:	f000 f804 	bl	8000d88 <Reset_BackupDomain>

  Reset_IPCC();
 8000d80:	f000 f81a 	bl	8000db8 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000d84:	bf00      	nop
}
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000d8c:	f7ff feca 	bl	8000b24 <LL_RCC_IsActiveFlag_PINRST>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00d      	beq.n	8000db2 <Reset_BackupDomain+0x2a>
 8000d96:	f7ff fed8 	bl	8000b4a <LL_RCC_IsActiveFlag_SFTRST>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d108      	bne.n	8000db2 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000da0:	f004 fd60 	bl	8005864 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000da4:	f004 fd5e 	bl	8005864 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000da8:	f7ff fe9a 	bl	8000ae0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000dac:	f7ff fea9 	bl	8000b02 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
}
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000dbc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000dc0:	f7ff fed6 	bl	8000b70 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000dc4:	213f      	movs	r1, #63	@ 0x3f
 8000dc6:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <Reset_IPCC+0x40>)
 8000dc8:	f7ff ff4e 	bl	8000c68 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000dcc:	213f      	movs	r1, #63	@ 0x3f
 8000dce:	480a      	ldr	r0, [pc, #40]	@ (8000df8 <Reset_IPCC+0x40>)
 8000dd0:	f7ff ff58 	bl	8000c84 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000dd4:	213f      	movs	r1, #63	@ 0x3f
 8000dd6:	4808      	ldr	r0, [pc, #32]	@ (8000df8 <Reset_IPCC+0x40>)
 8000dd8:	f7ff ff00 	bl	8000bdc <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000ddc:	213f      	movs	r1, #63	@ 0x3f
 8000dde:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <Reset_IPCC+0x40>)
 8000de0:	f7ff ff1f 	bl	8000c22 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000de4:	213f      	movs	r1, #63	@ 0x3f
 8000de6:	4804      	ldr	r0, [pc, #16]	@ (8000df8 <Reset_IPCC+0x40>)
 8000de8:	f7ff ff0a 	bl	8000c00 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000dec:	213f      	movs	r1, #63	@ 0x3f
 8000dee:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <Reset_IPCC+0x40>)
 8000df0:	f7ff ff29 	bl	8000c46 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000df4:	bf00      	nop
}
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	58000c00 	.word	0x58000c00

08000dfc <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f00d fc90 	bl	800e728 <OTP_Read>
 8000e08:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d005      	beq.n	8000e1c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	799b      	ldrb	r3, [r3, #6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fe31 	bl	8000a7c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
}
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <System_Init>:

static void System_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  Init_Smps();
 8000e28:	f7ff ff98 	bl	8000d5c <Init_Smps>

  Init_Exti();
 8000e2c:	f7ff ff9d 	bl	8000d6a <Init_Exti>

  Init_Rtc();
 8000e30:	f000 f802 	bl	8000e38 <Init_Rtc>

  return;
 8000e34:	bf00      	nop
}
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <Init_Rtc+0x1c>)
 8000e3e:	f7ff ff4c 	bl	8000cda <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000e42:	2100      	movs	r1, #0
 8000e44:	4803      	ldr	r0, [pc, #12]	@ (8000e54 <Init_Rtc+0x1c>)
 8000e46:	f7ff ff58 	bl	8000cfa <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000e4a:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <Init_Rtc+0x1c>)
 8000e4c:	f7ff ff38 	bl	8000cc0 <LL_RTC_EnableWriteProtection>

  return;
 8000e50:	bf00      	nop
}
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40002800 	.word	0x40002800

08000e58 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000e5c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000e60:	f7ff fe2a 	bl	8000ab8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000e64:	f010 fb00 	bl	8011468 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000e68:	2004      	movs	r0, #4
 8000e6a:	f7ff fddd 	bl	8000a28 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000e6e:	bf00      	nop
}
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000e7a:	f00d f94b 	bl	800e114 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000e7e:	4a11      	ldr	r2, [pc, #68]	@ (8000ec4 <appe_Tl_Init+0x50>)
 8000e80:	2100      	movs	r1, #0
 8000e82:	2004      	movs	r0, #4
 8000e84:	f010 fc2e 	bl	80116e4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <appe_Tl_Init+0x54>)
 8000e8a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <appe_Tl_Init+0x58>)
 8000e8e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000e90:	463b      	mov	r3, r7
 8000e92:	4619      	mov	r1, r3
 8000e94:	480e      	ldr	r0, [pc, #56]	@ (8000ed0 <appe_Tl_Init+0x5c>)
 8000e96:	f00c ffff 	bl	800de98 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <appe_Tl_Init+0x60>)
 8000e9c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <appe_Tl_Init+0x64>)
 8000ea0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <appe_Tl_Init+0x68>)
 8000ea4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000ea6:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000eaa:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f00d fa71 	bl	800e398 <TL_MM_Init>

  TL_Enable();
 8000eb6:	f00d f927 	bl	800e108 <TL_Enable>

  return;
 8000eba:	bf00      	nop
}
 8000ebc:	3720      	adds	r7, #32
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	0800ded1 	.word	0x0800ded1
 8000ec8:	20030734 	.word	0x20030734
 8000ecc:	08000ee1 	.word	0x08000ee1
 8000ed0:	08000ef9 	.word	0x08000ef9
 8000ed4:	2003094c 	.word	0x2003094c
 8000ed8:	20030840 	.word	0x20030840
 8000edc:	200301f8 	.word	0x200301f8

08000ee0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000eea:	bf00      	nop
}
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	330b      	adds	r3, #11
 8000f06:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000f12:	2b07      	cmp	r3, #7
 8000f14:	f200 80d0 	bhi.w	80010b8 <APPE_SysUserEvtRx+0x1c0>
 8000f18:	a201      	add	r2, pc, #4	@ (adr r2, 8000f20 <APPE_SysUserEvtRx+0x28>)
 8000f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1e:	bf00      	nop
 8000f20:	08000f41 	.word	0x08000f41
 8000f24:	08000fd3 	.word	0x08000fd3
 8000f28:	08000ff5 	.word	0x08000ff5
 8000f2c:	080010b9 	.word	0x080010b9
 8000f30:	08001039 	.word	0x08001039
 8000f34:	0800105d 	.word	0x0800105d
 8000f38:	08001079 	.word	0x08001079
 8000f3c:	0800109d 	.word	0x0800109d
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00c fd5d 	bl	800da04 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000f4a:	485e      	ldr	r0, [pc, #376]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 8000f4c:	f00d fb24 	bl	800e598 <DbgTraceGetFileName>
 8000f50:	4601      	mov	r1, r0
 8000f52:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 8000f56:	4a5c      	ldr	r2, [pc, #368]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8000f58:	485c      	ldr	r0, [pc, #368]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8000f5a:	f010 fdb1 	bl	8011ac0 <iprintf>
 8000f5e:	7b3b      	ldrb	r3, [r7, #12]
 8000f60:	4619      	mov	r1, r3
 8000f62:	7b7b      	ldrb	r3, [r7, #13]
 8000f64:	461a      	mov	r2, r3
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	4859      	ldr	r0, [pc, #356]	@ (80010d0 <APPE_SysUserEvtRx+0x1d8>)
 8000f6a:	f010 fda9 	bl	8011ac0 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000f6e:	4855      	ldr	r0, [pc, #340]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 8000f70:	f00d fb12 	bl	800e598 <DbgTraceGetFileName>
 8000f74:	4601      	mov	r1, r0
 8000f76:	f240 136b 	movw	r3, #363	@ 0x16b
 8000f7a:	4a53      	ldr	r2, [pc, #332]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8000f7c:	4853      	ldr	r0, [pc, #332]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8000f7e:	f010 fd9f 	bl	8011ac0 <iprintf>
 8000f82:	7c3b      	ldrb	r3, [r7, #16]
 8000f84:	4619      	mov	r1, r3
 8000f86:	4853      	ldr	r0, [pc, #332]	@ (80010d4 <APPE_SysUserEvtRx+0x1dc>)
 8000f88:	f010 fd9a 	bl	8011ac0 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000f8c:	484d      	ldr	r0, [pc, #308]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 8000f8e:	f00d fb03 	bl	800e598 <DbgTraceGetFileName>
 8000f92:	4601      	mov	r1, r0
 8000f94:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8000f98:	4a4b      	ldr	r2, [pc, #300]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8000f9a:	484c      	ldr	r0, [pc, #304]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8000f9c:	f010 fd90 	bl	8011ac0 <iprintf>
 8000fa0:	7dbb      	ldrb	r3, [r7, #22]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	7e3b      	ldrb	r3, [r7, #24]
 8000faa:	484b      	ldr	r0, [pc, #300]	@ (80010d8 <APPE_SysUserEvtRx+0x1e0>)
 8000fac:	f010 fd88 	bl	8011ac0 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8000fb0:	4844      	ldr	r0, [pc, #272]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 8000fb2:	f00d faf1 	bl	800e598 <DbgTraceGetFileName>
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8000fbc:	4a42      	ldr	r2, [pc, #264]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8000fbe:	4843      	ldr	r0, [pc, #268]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8000fc0:	f010 fd7e 	bl	8011ac0 <iprintf>
 8000fc4:	4845      	ldr	r0, [pc, #276]	@ (80010dc <APPE_SysUserEvtRx+0x1e4>)
 8000fc6:	f010 fd7b 	bl	8011ac0 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f8e0 	bl	8001190 <APPE_SysEvtReadyProcessing>
    break;
 8000fd0:	e073      	b.n	80010ba <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8000fd2:	483c      	ldr	r0, [pc, #240]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 8000fd4:	f00d fae0 	bl	800e598 <DbgTraceGetFileName>
 8000fd8:	4601      	mov	r1, r0
 8000fda:	f240 1373 	movw	r3, #371	@ 0x173
 8000fde:	4a3a      	ldr	r2, [pc, #232]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8000fe0:	483a      	ldr	r0, [pc, #232]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8000fe2:	f010 fd6d 	bl	8011ac0 <iprintf>
 8000fe6:	483e      	ldr	r0, [pc, #248]	@ (80010e0 <APPE_SysUserEvtRx+0x1e8>)
 8000fe8:	f010 fd6a 	bl	8011ac0 <iprintf>
    APPE_SysEvtError(pPayload);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f885 	bl	80010fc <APPE_SysEvtError>
    break;
 8000ff2:	e062      	b.n	80010ba <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8000ff4:	4833      	ldr	r0, [pc, #204]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 8000ff6:	f00d facf 	bl	800e598 <DbgTraceGetFileName>
 8000ffa:	4601      	mov	r1, r0
 8000ffc:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8001000:	4a31      	ldr	r2, [pc, #196]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8001002:	4832      	ldr	r0, [pc, #200]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8001004:	f010 fd5c 	bl	8011ac0 <iprintf>
 8001008:	4836      	ldr	r0, [pc, #216]	@ (80010e4 <APPE_SysUserEvtRx+0x1ec>)
 800100a:	f010 fdc9 	bl	8011ba0 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800100e:	482d      	ldr	r0, [pc, #180]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 8001010:	f00d fac2 	bl	800e598 <DbgTraceGetFileName>
 8001014:	4601      	mov	r1, r0
 8001016:	f240 1379 	movw	r3, #377	@ 0x179
 800101a:	4a2b      	ldr	r2, [pc, #172]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 800101c:	482b      	ldr	r0, [pc, #172]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 800101e:	f010 fd4f 	bl	8011ac0 <iprintf>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3302      	adds	r3, #2
 8001026:	6819      	ldr	r1, [r3, #0]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	3302      	adds	r3, #2
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	461a      	mov	r2, r3
 8001030:	482d      	ldr	r0, [pc, #180]	@ (80010e8 <APPE_SysUserEvtRx+0x1f0>)
 8001032:	f010 fd45 	bl	8011ac0 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001036:	e040      	b.n	80010ba <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001038:	4822      	ldr	r0, [pc, #136]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 800103a:	f00d faad 	bl	800e598 <DbgTraceGetFileName>
 800103e:	4601      	mov	r1, r0
 8001040:	f240 137f 	movw	r3, #383	@ 0x17f
 8001044:	4a20      	ldr	r2, [pc, #128]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8001046:	4821      	ldr	r0, [pc, #132]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8001048:	f010 fd3a 	bl	8011ac0 <iprintf>
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	3302      	adds	r3, #2
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4619      	mov	r1, r3
 8001054:	4825      	ldr	r0, [pc, #148]	@ (80010ec <APPE_SysUserEvtRx+0x1f4>)
 8001056:	f010 fd33 	bl	8011ac0 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 800105a:	e02e      	b.n	80010ba <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800105c:	4819      	ldr	r0, [pc, #100]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 800105e:	f00d fa9b 	bl	800e598 <DbgTraceGetFileName>
 8001062:	4601      	mov	r1, r0
 8001064:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8001068:	4a17      	ldr	r2, [pc, #92]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 800106a:	4818      	ldr	r0, [pc, #96]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 800106c:	f010 fd28 	bl	8011ac0 <iprintf>
 8001070:	481f      	ldr	r0, [pc, #124]	@ (80010f0 <APPE_SysUserEvtRx+0x1f8>)
 8001072:	f010 fd25 	bl	8011ac0 <iprintf>
    break;
 8001076:	e020      	b.n	80010ba <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001078:	4812      	ldr	r0, [pc, #72]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 800107a:	f00d fa8d 	bl	800e598 <DbgTraceGetFileName>
 800107e:	4601      	mov	r1, r0
 8001080:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 8001084:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8001086:	4811      	ldr	r0, [pc, #68]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8001088:	f010 fd1a 	bl	8011ac0 <iprintf>
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	3302      	adds	r3, #2
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4619      	mov	r1, r3
 8001094:	4817      	ldr	r0, [pc, #92]	@ (80010f4 <APPE_SysUserEvtRx+0x1fc>)
 8001096:	f010 fd13 	bl	8011ac0 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 800109a:	e00e      	b.n	80010ba <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 800109c:	4809      	ldr	r0, [pc, #36]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 800109e:	f00d fa7b 	bl	800e598 <DbgTraceGetFileName>
 80010a2:	4601      	mov	r1, r0
 80010a4:	f240 138d 	movw	r3, #397	@ 0x18d
 80010a8:	4a07      	ldr	r2, [pc, #28]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 80010aa:	4808      	ldr	r0, [pc, #32]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 80010ac:	f010 fd08 	bl	8011ac0 <iprintf>
 80010b0:	4811      	ldr	r0, [pc, #68]	@ (80010f8 <APPE_SysUserEvtRx+0x200>)
 80010b2:	f010 fd05 	bl	8011ac0 <iprintf>
    break;
 80010b6:	e000      	b.n	80010ba <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80010b8:	bf00      	nop
  }

  return;
 80010ba:	bf00      	nop
}
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	08012964 	.word	0x08012964
 80010c8:	08014078 	.word	0x08014078
 80010cc:	0801297c 	.word	0x0801297c
 80010d0:	08012990 	.word	0x08012990
 80010d4:	080129b4 	.word	0x080129b4
 80010d8:	080129d0 	.word	0x080129d0
 80010dc:	080129e8 	.word	0x080129e8
 80010e0:	08012a08 	.word	0x08012a08
 80010e4:	08012a2c 	.word	0x08012a2c
 80010e8:	08012a7c 	.word	0x08012a7c
 80010ec:	08012aa4 	.word	0x08012aa4
 80010f0:	08012ae0 	.word	0x08012ae0
 80010f4:	08012b04 	.word	0x08012b04
 80010f8:	08012b40 	.word	0x08012b40

080010fc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	330b      	adds	r3, #11
 800110a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3302      	adds	r3, #2
 8001110:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001112:	4819      	ldr	r0, [pc, #100]	@ (8001178 <APPE_SysEvtError+0x7c>)
 8001114:	f00d fa40 	bl	800e598 <DbgTraceGetFileName>
 8001118:	4601      	mov	r1, r0
 800111a:	f240 13a5 	movw	r3, #421	@ 0x1a5
 800111e:	4a17      	ldr	r2, [pc, #92]	@ (800117c <APPE_SysEvtError+0x80>)
 8001120:	4817      	ldr	r0, [pc, #92]	@ (8001180 <APPE_SysEvtError+0x84>)
 8001122:	f010 fccd 	bl	8011ac0 <iprintf>
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	4815      	ldr	r0, [pc, #84]	@ (8001184 <APPE_SysEvtError+0x88>)
 800112e:	f010 fcc7 	bl	8011ac0 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10d      	bne.n	8001156 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800113a:	480f      	ldr	r0, [pc, #60]	@ (8001178 <APPE_SysEvtError+0x7c>)
 800113c:	f00d fa2c 	bl	800e598 <DbgTraceGetFileName>
 8001140:	4601      	mov	r1, r0
 8001142:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8001146:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <APPE_SysEvtError+0x80>)
 8001148:	480d      	ldr	r0, [pc, #52]	@ (8001180 <APPE_SysEvtError+0x84>)
 800114a:	f010 fcb9 	bl	8011ac0 <iprintf>
 800114e:	480e      	ldr	r0, [pc, #56]	@ (8001188 <APPE_SysEvtError+0x8c>)
 8001150:	f010 fd26 	bl	8011ba0 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001154:	e00d      	b.n	8001172 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001156:	4808      	ldr	r0, [pc, #32]	@ (8001178 <APPE_SysEvtError+0x7c>)
 8001158:	f00d fa1e 	bl	800e598 <DbgTraceGetFileName>
 800115c:	4601      	mov	r1, r0
 800115e:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8001162:	4a06      	ldr	r2, [pc, #24]	@ (800117c <APPE_SysEvtError+0x80>)
 8001164:	4806      	ldr	r0, [pc, #24]	@ (8001180 <APPE_SysEvtError+0x84>)
 8001166:	f010 fcab 	bl	8011ac0 <iprintf>
 800116a:	4808      	ldr	r0, [pc, #32]	@ (800118c <APPE_SysEvtError+0x90>)
 800116c:	f010 fd18 	bl	8011ba0 <puts>
  return;
 8001170:	bf00      	nop
}
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	08012964 	.word	0x08012964
 800117c:	0801408c 	.word	0x0801408c
 8001180:	0801297c 	.word	0x0801297c
 8001184:	08012b64 	.word	0x08012b64
 8001188:	08012b94 	.word	0x08012b94
 800118c:	08012bd0 	.word	0x08012bd0

08001190 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	330b      	adds	r3, #11
 80011b4:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3302      	adds	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d146      	bne.n	8001252 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80011c4:	4836      	ldr	r0, [pc, #216]	@ (80012a0 <APPE_SysEvtReadyProcessing+0x110>)
 80011c6:	f00d f9e7 	bl	800e598 <DbgTraceGetFileName>
 80011ca:	4601      	mov	r1, r0
 80011cc:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 80011d0:	4a34      	ldr	r2, [pc, #208]	@ (80012a4 <APPE_SysEvtReadyProcessing+0x114>)
 80011d2:	4835      	ldr	r0, [pc, #212]	@ (80012a8 <APPE_SysEvtReadyProcessing+0x118>)
 80011d4:	f010 fc74 	bl	8011ac0 <iprintf>
 80011d8:	4834      	ldr	r0, [pc, #208]	@ (80012ac <APPE_SysEvtReadyProcessing+0x11c>)
 80011da:	f010 fce1 	bl	8011ba0 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80011de:	f7ff fbf5 	bl	80009cc <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80011e2:	230f      	movs	r3, #15
 80011e4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80011e6:	237f      	movs	r3, #127	@ 0x7f
 80011e8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80011ea:	f7ff fce9 	bl	8000bc0 <LL_DBGMCU_GetRevisionID>
 80011ee:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80011f0:	482b      	ldr	r0, [pc, #172]	@ (80012a0 <APPE_SysEvtReadyProcessing+0x110>)
 80011f2:	f00d f9d1 	bl	800e598 <DbgTraceGetFileName>
 80011f6:	4601      	mov	r1, r0
 80011f8:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 80011fc:	4a29      	ldr	r2, [pc, #164]	@ (80012a4 <APPE_SysEvtReadyProcessing+0x114>)
 80011fe:	482a      	ldr	r0, [pc, #168]	@ (80012a8 <APPE_SysEvtReadyProcessing+0x118>)
 8001200:	f010 fc5e 	bl	8011ac0 <iprintf>
 8001204:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001206:	482a      	ldr	r0, [pc, #168]	@ (80012b0 <APPE_SysEvtReadyProcessing+0x120>)
 8001208:	f010 fc5a 	bl	8011ac0 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 800120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120e:	b29b      	uxth	r3, r3
 8001210:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001212:	f7ff fcc7 	bl	8000ba4 <LL_DBGMCU_GetDeviceID>
 8001216:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001218:	4821      	ldr	r0, [pc, #132]	@ (80012a0 <APPE_SysEvtReadyProcessing+0x110>)
 800121a:	f00d f9bd 	bl	800e598 <DbgTraceGetFileName>
 800121e:	4601      	mov	r1, r0
 8001220:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8001224:	4a1f      	ldr	r2, [pc, #124]	@ (80012a4 <APPE_SysEvtReadyProcessing+0x114>)
 8001226:	4820      	ldr	r0, [pc, #128]	@ (80012a8 <APPE_SysEvtReadyProcessing+0x118>)
 8001228:	f010 fc4a 	bl	8011ac0 <iprintf>
 800122c:	6a39      	ldr	r1, [r7, #32]
 800122e:	4821      	ldr	r0, [pc, #132]	@ (80012b4 <APPE_SysEvtReadyProcessing+0x124>)
 8001230:	f010 fc46 	bl	8011ac0 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	b29b      	uxth	r3, r3
 8001238:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	4618      	mov	r0, r3
 8001240:	f00c fbca 	bl	800d9d8 <SHCI_C2_Config>

    APP_BLE_Init();
 8001244:	f00d ff44 	bl	800f0d0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001248:	2100      	movs	r1, #0
 800124a:	2001      	movs	r0, #1
 800124c:	f010 f91e 	bl	801148c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001250:	e022      	b.n	8001298 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d110      	bne.n	800127c <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800125a:	4811      	ldr	r0, [pc, #68]	@ (80012a0 <APPE_SysEvtReadyProcessing+0x110>)
 800125c:	f00d f99c 	bl	800e598 <DbgTraceGetFileName>
 8001260:	4601      	mov	r1, r0
 8001262:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 8001266:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <APPE_SysEvtReadyProcessing+0x114>)
 8001268:	480f      	ldr	r0, [pc, #60]	@ (80012a8 <APPE_SysEvtReadyProcessing+0x118>)
 800126a:	f010 fc29 	bl	8011ac0 <iprintf>
 800126e:	4812      	ldr	r0, [pc, #72]	@ (80012b8 <APPE_SysEvtReadyProcessing+0x128>)
 8001270:	f010 fc26 	bl	8011ac0 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
  return;
 800127a:	e00d      	b.n	8001298 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 800127c:	4808      	ldr	r0, [pc, #32]	@ (80012a0 <APPE_SysEvtReadyProcessing+0x110>)
 800127e:	f00d f98b 	bl	800e598 <DbgTraceGetFileName>
 8001282:	4601      	mov	r1, r0
 8001284:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8001288:	4a06      	ldr	r2, [pc, #24]	@ (80012a4 <APPE_SysEvtReadyProcessing+0x114>)
 800128a:	4807      	ldr	r0, [pc, #28]	@ (80012a8 <APPE_SysEvtReadyProcessing+0x118>)
 800128c:	f010 fc18 	bl	8011ac0 <iprintf>
 8001290:	480a      	ldr	r0, [pc, #40]	@ (80012bc <APPE_SysEvtReadyProcessing+0x12c>)
 8001292:	f010 fc15 	bl	8011ac0 <iprintf>
  return;
 8001296:	bf00      	nop
}
 8001298:	3728      	adds	r7, #40	@ 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08012964 	.word	0x08012964
 80012a4:	080140a0 	.word	0x080140a0
 80012a8:	0801297c 	.word	0x0801297c
 80012ac:	08012c08 	.word	0x08012c08
 80012b0:	08012c24 	.word	0x08012c24
 80012b4:	08012c48 	.word	0x08012c48
 80012b8:	08012c68 	.word	0x08012c68
 80012bc:	08012c9c 	.word	0x08012c9c

080012c0 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f001 fe82 	bl	8002fd0 <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d00a      	beq.n	80012f0 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80012da:	f001 fe91 	bl	8003000 <HAL_GetTickFreq>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e8:	e002      	b.n	80012f0 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80012ea:	f7ff fcd9 	bl	8000ca0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80012ee:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80012f0:	f001 fe6e 	bl	8002fd0 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8f4      	bhi.n	80012ea <HAL_Delay+0x2a>
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800130e:	f04f 30ff 	mov.w	r0, #4294967295
 8001312:	f010 f8eb 	bl	80114ec <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}

0800131a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800131e:	bf00      	nop
}
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001330:	2100      	movs	r1, #0
 8001332:	2004      	movs	r0, #4
 8001334:	f010 f9f8 	bl	8011728 <UTIL_SEQ_SetTask>
  return;
 8001338:	bf00      	nop
}
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001348:	2002      	movs	r0, #2
 800134a:	f010 fa59 	bl	8011800 <UTIL_SEQ_SetEvt>
  return;
 800134e:	bf00      	nop
}
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800135e:	2002      	movs	r0, #2
 8001360:	f010 fa6e 	bl	8011840 <UTIL_SEQ_WaitEvt>
  return;
 8001364:	bf00      	nop
}
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <LL_AHB1_GRP1_EnableClock>:
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001374:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001378:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800137a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4313      	orrs	r3, r2
 8001382:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001388:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001390:	68fb      	ldr	r3, [r7, #12]
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013a2:	2004      	movs	r0, #4
 80013a4:	f7ff ffe2 	bl	800136c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a8:	2001      	movs	r0, #1
 80013aa:	f7ff ffdf 	bl	800136c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	210f      	movs	r1, #15
 80013b2:	200b      	movs	r0, #11
 80013b4:	f001 ff6b 	bl	800328e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b8:	200b      	movs	r0, #11
 80013ba:	f001 ff82 	bl	80032c2 <HAL_NVIC_EnableIRQ>

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <LL_AHB2_GRP1_EnableClock>:
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4013      	ands	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	2004      	movs	r0, #4
 800140a:	f7ff ffda 	bl	80013c2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2002      	movs	r0, #2
 8001410:	f7ff ffd7 	bl	80013c2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff ffd4 	bl	80013c2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800141a:	2200      	movs	r2, #0
 800141c:	f240 111f 	movw	r1, #287	@ 0x11f
 8001420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001424:	f002 fb28 	bl	8003a78 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001428:	f240 131f 	movw	r3, #287	@ 0x11f
 800142c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001442:	f002 f9a9 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP1_DRDY_Pin PA10 */
  GPIO_InitStruct.Pin = TEMP1_DRDY_Pin|GPIO_PIN_10;
 8001446:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800144a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145c:	f002 f99c 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001460:	2304      	movs	r3, #4
 8001462:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	4803      	ldr	r0, [pc, #12]	@ (8001480 <MX_GPIO_Init+0x8c>)
 8001472:	f002 f991 	bl	8003798 <HAL_GPIO_Init>

}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	48000400 	.word	0x48000400

08001484 <LL_EXTI_EnableIT_0_31>:
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <LL_EXTI_EnableIT_0_31+0x24>)
 800148e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001492:	4905      	ldr	r1, [pc, #20]	@ (80014a8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4313      	orrs	r3, r2
 8001498:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	58000800 	.word	0x58000800

080014ac <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4904      	ldr	r1, [pc, #16]	@ (80014cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]

}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	58000800 	.word	0x58000800

080014d0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014d6:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <ReadRtcSsrValue+0x3c>)
 80014d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014da:	b29b      	uxth	r3, r3
 80014dc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014de:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <ReadRtcSsrValue+0x3c>)
 80014e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80014e6:	e005      	b.n	80014f4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014ec:	4b07      	ldr	r3, [pc, #28]	@ (800150c <ReadRtcSsrValue+0x3c>)
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d1f5      	bne.n	80014e8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80014fc:	683b      	ldr	r3, [r7, #0]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40002800 	.word	0x40002800

08001510 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	460a      	mov	r2, r1
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	4613      	mov	r3, r2
 800151e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001520:	79ba      	ldrb	r2, [r7, #6]
 8001522:	491d      	ldr	r1, [pc, #116]	@ (8001598 <LinkTimerAfter+0x88>)
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	3315      	adds	r3, #21
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	2b06      	cmp	r3, #6
 8001538:	d009      	beq.n	800154e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	4916      	ldr	r1, [pc, #88]	@ (8001598 <LinkTimerAfter+0x88>)
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	3314      	adds	r3, #20
 800154a:	79fa      	ldrb	r2, [r7, #7]
 800154c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800154e:	79fa      	ldrb	r2, [r7, #7]
 8001550:	4911      	ldr	r1, [pc, #68]	@ (8001598 <LinkTimerAfter+0x88>)
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	3315      	adds	r3, #21
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001562:	79fa      	ldrb	r2, [r7, #7]
 8001564:	490c      	ldr	r1, [pc, #48]	@ (8001598 <LinkTimerAfter+0x88>)
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	3314      	adds	r3, #20
 8001572:	79ba      	ldrb	r2, [r7, #6]
 8001574:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001576:	79ba      	ldrb	r2, [r7, #6]
 8001578:	4907      	ldr	r1, [pc, #28]	@ (8001598 <LinkTimerAfter+0x88>)
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	3315      	adds	r3, #21
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	701a      	strb	r2, [r3, #0]

  return;
 800158a:	bf00      	nop
}
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200001ec 	.word	0x200001ec

0800159c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	460a      	mov	r2, r1
 80015a6:	71fb      	strb	r3, [r7, #7]
 80015a8:	4613      	mov	r3, r2
 80015aa:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80015ac:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <LinkTimerBefore+0xb8>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	79ba      	ldrb	r2, [r7, #6]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d032      	beq.n	800161e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80015b8:	79ba      	ldrb	r2, [r7, #6]
 80015ba:	4927      	ldr	r1, [pc, #156]	@ (8001658 <LinkTimerBefore+0xbc>)
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	440b      	add	r3, r1
 80015c6:	3314      	adds	r3, #20
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	4922      	ldr	r1, [pc, #136]	@ (8001658 <LinkTimerBefore+0xbc>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	3315      	adds	r3, #21
 80015dc:	79fa      	ldrb	r2, [r7, #7]
 80015de:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80015e0:	79fa      	ldrb	r2, [r7, #7]
 80015e2:	491d      	ldr	r1, [pc, #116]	@ (8001658 <LinkTimerBefore+0xbc>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	3315      	adds	r3, #21
 80015f0:	79ba      	ldrb	r2, [r7, #6]
 80015f2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80015f4:	79fa      	ldrb	r2, [r7, #7]
 80015f6:	4918      	ldr	r1, [pc, #96]	@ (8001658 <LinkTimerBefore+0xbc>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	3314      	adds	r3, #20
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001608:	79ba      	ldrb	r2, [r7, #6]
 800160a:	4913      	ldr	r1, [pc, #76]	@ (8001658 <LinkTimerBefore+0xbc>)
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	3314      	adds	r3, #20
 8001618:	79fa      	ldrb	r2, [r7, #7]
 800161a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800161c:	e014      	b.n	8001648 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800161e:	79fa      	ldrb	r2, [r7, #7]
 8001620:	490d      	ldr	r1, [pc, #52]	@ (8001658 <LinkTimerBefore+0xbc>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	3315      	adds	r3, #21
 800162e:	79ba      	ldrb	r2, [r7, #6]
 8001630:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001632:	79ba      	ldrb	r2, [r7, #6]
 8001634:	4908      	ldr	r1, [pc, #32]	@ (8001658 <LinkTimerBefore+0xbc>)
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	3314      	adds	r3, #20
 8001642:	79fa      	ldrb	r2, [r7, #7]
 8001644:	701a      	strb	r2, [r3, #0]
  return;
 8001646:	bf00      	nop
}
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	2000027c 	.word	0x2000027c
 8001658:	200001ec 	.word	0x200001ec

0800165c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001666:	4b4e      	ldr	r3, [pc, #312]	@ (80017a0 <linkTimer+0x144>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b06      	cmp	r3, #6
 800166e:	d118      	bne.n	80016a2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001670:	4b4b      	ldr	r3, [pc, #300]	@ (80017a0 <linkTimer+0x144>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b4b      	ldr	r3, [pc, #300]	@ (80017a4 <linkTimer+0x148>)
 8001678:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800167a:	4a49      	ldr	r2, [pc, #292]	@ (80017a0 <linkTimer+0x144>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001680:	79fa      	ldrb	r2, [r7, #7]
 8001682:	4949      	ldr	r1, [pc, #292]	@ (80017a8 <linkTimer+0x14c>)
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	440b      	add	r3, r1
 800168e:	3315      	adds	r3, #21
 8001690:	2206      	movs	r2, #6
 8001692:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001694:	4b45      	ldr	r3, [pc, #276]	@ (80017ac <linkTimer+0x150>)
 8001696:	f04f 32ff 	mov.w	r2, #4294967295
 800169a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	81fb      	strh	r3, [r7, #14]
 80016a0:	e078      	b.n	8001794 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80016a2:	f000 f909 	bl	80018b8 <ReturnTimeElapsed>
 80016a6:	4603      	mov	r3, r0
 80016a8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80016aa:	79fa      	ldrb	r2, [r7, #7]
 80016ac:	493e      	ldr	r1, [pc, #248]	@ (80017a8 <linkTimer+0x14c>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	3308      	adds	r3, #8
 80016ba:	6819      	ldr	r1, [r3, #0]
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	79fa      	ldrb	r2, [r7, #7]
 80016c0:	4419      	add	r1, r3
 80016c2:	4839      	ldr	r0, [pc, #228]	@ (80017a8 <linkTimer+0x14c>)
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4403      	add	r3, r0
 80016ce:	3308      	adds	r3, #8
 80016d0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80016d2:	79fa      	ldrb	r2, [r7, #7]
 80016d4:	4934      	ldr	r1, [pc, #208]	@ (80017a8 <linkTimer+0x14c>)
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	3308      	adds	r3, #8
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80016e6:	4b2e      	ldr	r3, [pc, #184]	@ (80017a0 <linkTimer+0x144>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4619      	mov	r1, r3
 80016ee:	4a2e      	ldr	r2, [pc, #184]	@ (80017a8 <linkTimer+0x14c>)
 80016f0:	460b      	mov	r3, r1
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	440b      	add	r3, r1
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	4413      	add	r3, r2
 80016fa:	3308      	adds	r3, #8
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	429a      	cmp	r2, r3
 8001702:	d337      	bcc.n	8001774 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001704:	4b26      	ldr	r3, [pc, #152]	@ (80017a0 <linkTimer+0x144>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800170a:	7b7a      	ldrb	r2, [r7, #13]
 800170c:	4926      	ldr	r1, [pc, #152]	@ (80017a8 <linkTimer+0x14c>)
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	3315      	adds	r3, #21
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800171e:	e013      	b.n	8001748 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001720:	7b7a      	ldrb	r2, [r7, #13]
 8001722:	4921      	ldr	r1, [pc, #132]	@ (80017a8 <linkTimer+0x14c>)
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	3315      	adds	r3, #21
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001734:	7b7a      	ldrb	r2, [r7, #13]
 8001736:	491c      	ldr	r1, [pc, #112]	@ (80017a8 <linkTimer+0x14c>)
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	3315      	adds	r3, #21
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001748:	7b3b      	ldrb	r3, [r7, #12]
 800174a:	2b06      	cmp	r3, #6
 800174c:	d00b      	beq.n	8001766 <linkTimer+0x10a>
 800174e:	7b3a      	ldrb	r2, [r7, #12]
 8001750:	4915      	ldr	r1, [pc, #84]	@ (80017a8 <linkTimer+0x14c>)
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	3308      	adds	r3, #8
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	429a      	cmp	r2, r3
 8001764:	d2dc      	bcs.n	8001720 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001766:	7b7a      	ldrb	r2, [r7, #13]
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fecf 	bl	8001510 <LinkTimerAfter>
 8001772:	e00f      	b.n	8001794 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001774:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <linkTimer+0x144>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff0c 	bl	800159c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <linkTimer+0x144>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <linkTimer+0x148>)
 800178c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800178e:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <linkTimer+0x144>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001794:	89fb      	ldrh	r3, [r7, #14]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2000027c 	.word	0x2000027c
 80017a4:	2000027d 	.word	0x2000027d
 80017a8:	200001ec 	.word	0x200001ec
 80017ac:	20000280 	.word	0x20000280

080017b0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	460a      	mov	r2, r1
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	4613      	mov	r3, r2
 80017be:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80017c0:	4b39      	ldr	r3, [pc, #228]	@ (80018a8 <UnlinkTimer+0xf8>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	79fa      	ldrb	r2, [r7, #7]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d111      	bne.n	80017f0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80017cc:	4b36      	ldr	r3, [pc, #216]	@ (80018a8 <UnlinkTimer+0xf8>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b36      	ldr	r3, [pc, #216]	@ (80018ac <UnlinkTimer+0xfc>)
 80017d4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80017d6:	79fa      	ldrb	r2, [r7, #7]
 80017d8:	4935      	ldr	r1, [pc, #212]	@ (80018b0 <UnlinkTimer+0x100>)
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	3315      	adds	r3, #21
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b2f      	ldr	r3, [pc, #188]	@ (80018a8 <UnlinkTimer+0xf8>)
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	e03e      	b.n	800186e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80017f0:	79fa      	ldrb	r2, [r7, #7]
 80017f2:	492f      	ldr	r1, [pc, #188]	@ (80018b0 <UnlinkTimer+0x100>)
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	3314      	adds	r3, #20
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001804:	79fa      	ldrb	r2, [r7, #7]
 8001806:	492a      	ldr	r1, [pc, #168]	@ (80018b0 <UnlinkTimer+0x100>)
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	3315      	adds	r3, #21
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001818:	79f9      	ldrb	r1, [r7, #7]
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	4824      	ldr	r0, [pc, #144]	@ (80018b0 <UnlinkTimer+0x100>)
 800181e:	460b      	mov	r3, r1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	440b      	add	r3, r1
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4403      	add	r3, r0
 8001828:	3315      	adds	r3, #21
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b2d8      	uxtb	r0, r3
 800182e:	4920      	ldr	r1, [pc, #128]	@ (80018b0 <UnlinkTimer+0x100>)
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	3315      	adds	r3, #21
 800183c:	4602      	mov	r2, r0
 800183e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001840:	7bbb      	ldrb	r3, [r7, #14]
 8001842:	2b06      	cmp	r3, #6
 8001844:	d013      	beq.n	800186e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001846:	79f9      	ldrb	r1, [r7, #7]
 8001848:	7bba      	ldrb	r2, [r7, #14]
 800184a:	4819      	ldr	r0, [pc, #100]	@ (80018b0 <UnlinkTimer+0x100>)
 800184c:	460b      	mov	r3, r1
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	440b      	add	r3, r1
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4403      	add	r3, r0
 8001856:	3314      	adds	r3, #20
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b2d8      	uxtb	r0, r3
 800185c:	4914      	ldr	r1, [pc, #80]	@ (80018b0 <UnlinkTimer+0x100>)
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	3314      	adds	r3, #20
 800186a:	4602      	mov	r2, r0
 800186c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	490f      	ldr	r1, [pc, #60]	@ (80018b0 <UnlinkTimer+0x100>)
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	330c      	adds	r3, #12
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <UnlinkTimer+0xf8>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b06      	cmp	r3, #6
 800188a:	d107      	bne.n	800189c <UnlinkTimer+0xec>
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d104      	bne.n	800189c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <UnlinkTimer+0x104>)
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	601a      	str	r2, [r3, #0]
  }

  return;
 800189a:	bf00      	nop
 800189c:	bf00      	nop
}
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	2000027c 	.word	0x2000027c
 80018ac:	2000027d 	.word	0x2000027d
 80018b0:	200001ec 	.word	0x200001ec
 80018b4:	20000280 	.word	0x20000280

080018b8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80018be:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <ReturnTimeElapsed+0x70>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c6:	d026      	beq.n	8001916 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80018c8:	f7ff fe02 	bl	80014d0 <ReadRtcSsrValue>
 80018cc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80018ce:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <ReturnTimeElapsed+0x70>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d805      	bhi.n	80018e4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80018d8:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <ReturnTimeElapsed+0x70>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	e00a      	b.n	80018fa <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <ReturnTimeElapsed+0x74>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80018f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <ReturnTimeElapsed+0x70>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80018fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <ReturnTimeElapsed+0x78>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001908:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <ReturnTimeElapsed+0x7c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	40d3      	lsrs	r3, r2
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	e001      	b.n	800191a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	b29b      	uxth	r3, r3
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000280 	.word	0x20000280
 800192c:	20000288 	.word	0x20000288
 8001930:	20000286 	.word	0x20000286
 8001934:	20000285 	.word	0x20000285

08001938 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d108      	bne.n	800195a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001948:	f7ff fdc2 	bl	80014d0 <ReadRtcSsrValue>
 800194c:	4603      	mov	r3, r0
 800194e:	4a21      	ldr	r2, [pc, #132]	@ (80019d4 <RestartWakeupCounter+0x9c>)
 8001950:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001952:	2003      	movs	r0, #3
 8001954:	f001 fcdd 	bl	8003312 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001958:	e039      	b.n	80019ce <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d803      	bhi.n	8001968 <RestartWakeupCounter+0x30>
 8001960:	4b1d      	ldr	r3, [pc, #116]	@ (80019d8 <RestartWakeupCounter+0xa0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d002      	beq.n	800196e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	3b01      	subs	r3, #1
 800196c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800196e:	bf00      	nop
 8001970:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <RestartWakeupCounter+0xa4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f8      	beq.n	8001970 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <RestartWakeupCounter+0xa4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <RestartWakeupCounter+0xa4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800198e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001990:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <RestartWakeupCounter+0xa8>)
 8001992:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001996:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001998:	2003      	movs	r0, #3
 800199a:	f001 fcc8 	bl	800332e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800199e:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <RestartWakeupCounter+0xac>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	0c1b      	lsrs	r3, r3, #16
 80019a4:	041b      	lsls	r3, r3, #16
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	490e      	ldr	r1, [pc, #56]	@ (80019e4 <RestartWakeupCounter+0xac>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80019ae:	f7ff fd8f 	bl	80014d0 <ReadRtcSsrValue>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a07      	ldr	r2, [pc, #28]	@ (80019d4 <RestartWakeupCounter+0x9c>)
 80019b6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <RestartWakeupCounter+0xa4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <RestartWakeupCounter+0xa4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019c6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80019c8:	f3af 8000 	nop.w
  return ;
 80019cc:	bf00      	nop
}
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000280 	.word	0x20000280
 80019d8:	20000285 	.word	0x20000285
 80019dc:	20000320 	.word	0x20000320
 80019e0:	58000800 	.word	0x58000800
 80019e4:	40002800 	.word	0x40002800

080019e8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80019ee:	4b45      	ldr	r3, [pc, #276]	@ (8001b04 <RescheduleTimerList+0x11c>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019fa:	d107      	bne.n	8001a0c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80019fc:	bf00      	nop
 80019fe:	4b42      	ldr	r3, [pc, #264]	@ (8001b08 <RescheduleTimerList+0x120>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f8      	bne.n	80019fe <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001a0c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b08 <RescheduleTimerList+0x120>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	4b3d      	ldr	r3, [pc, #244]	@ (8001b08 <RescheduleTimerList+0x120>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a1a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b0c <RescheduleTimerList+0x124>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	493a      	ldr	r1, [pc, #232]	@ (8001b10 <RescheduleTimerList+0x128>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	3308      	adds	r3, #8
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001a36:	f7ff ff3f 	bl	80018b8 <ReturnTimeElapsed>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d205      	bcs.n	8001a52 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a4a:	4b32      	ldr	r3, [pc, #200]	@ (8001b14 <RescheduleTimerList+0x12c>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	e04d      	b.n	8001aee <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	4a30      	ldr	r2, [pc, #192]	@ (8001b18 <RescheduleTimerList+0x130>)
 8001a56:	8812      	ldrh	r2, [r2, #0]
 8001a58:	b292      	uxth	r2, r2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d906      	bls.n	8001a72 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001a64:	4b2c      	ldr	r3, [pc, #176]	@ (8001b18 <RescheduleTimerList+0x130>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b14 <RescheduleTimerList+0x12c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e03d      	b.n	8001aee <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a7c:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <RescheduleTimerList+0x12c>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a82:	e034      	b.n	8001aee <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	4922      	ldr	r1, [pc, #136]	@ (8001b10 <RescheduleTimerList+0x128>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	3308      	adds	r3, #8
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d20a      	bcs.n	8001ab2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	491c      	ldr	r1, [pc, #112]	@ (8001b10 <RescheduleTimerList+0x128>)
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3308      	adds	r3, #8
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e013      	b.n	8001ada <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	4916      	ldr	r1, [pc, #88]	@ (8001b10 <RescheduleTimerList+0x128>)
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	3308      	adds	r3, #8
 8001ac2:	6819      	ldr	r1, [r3, #0]
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	1ac9      	subs	r1, r1, r3
 8001aca:	4811      	ldr	r0, [pc, #68]	@ (8001b10 <RescheduleTimerList+0x128>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4403      	add	r3, r0
 8001ad6:	3308      	adds	r3, #8
 8001ad8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	490c      	ldr	r1, [pc, #48]	@ (8001b10 <RescheduleTimerList+0x128>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3315      	adds	r3, #21
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	2b06      	cmp	r3, #6
 8001af2:	d1c7      	bne.n	8001a84 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001af4:	89bb      	ldrh	r3, [r7, #12]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff1e 	bl	8001938 <RestartWakeupCounter>

  return ;
 8001afc:	bf00      	nop
}
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40002800 	.word	0x40002800
 8001b08:	20000320 	.word	0x20000320
 8001b0c:	2000027c 	.word	0x2000027c
 8001b10:	200001ec 	.word	0x200001ec
 8001b14:	20000284 	.word	0x20000284
 8001b18:	2000028a 	.word	0x2000028a

08001b1c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	@ 0x28
 8001b20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b22:	f3ef 8310 	mrs	r3, PRIMASK
 8001b26:	617b      	str	r3, [r7, #20]
  return(result);
 8001b28:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b30:	4b59      	ldr	r3, [pc, #356]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	22ca      	movs	r2, #202	@ 0xca
 8001b36:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b38:	4b57      	ldr	r3, [pc, #348]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2253      	movs	r2, #83	@ 0x53
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001b40:	4b55      	ldr	r3, [pc, #340]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	4b54      	ldr	r3, [pc, #336]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b4e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001b50:	4b52      	ldr	r3, [pc, #328]	@ (8001c9c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001b58:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b5c:	4950      	ldr	r1, [pc, #320]	@ (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	440b      	add	r3, r1
 8001b68:	330c      	adds	r3, #12
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d16e      	bne.n	8001c50 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001b72:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b76:	494a      	ldr	r1, [pc, #296]	@ (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001b86:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b8a:	4945      	ldr	r1, [pc, #276]	@ (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	3310      	adds	r3, #16
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001b9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ca4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d04c      	beq.n	8001c40 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001ba6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001baa:	493d      	ldr	r1, [pc, #244]	@ (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	330d      	adds	r3, #13
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d124      	bne.n	8001c0a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fdf2 	bl	80017b0 <UnlinkTimer>
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bce:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f383 8810 	msr	PRIMASK, r3
}
 8001bd6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001bd8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001bdc:	4930      	ldr	r1, [pc, #192]	@ (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	3304      	adds	r3, #4
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f9b8 	bl	8001f68 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bf8:	4b27      	ldr	r3, [pc, #156]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	22ca      	movs	r2, #202	@ 0xca
 8001bfe:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c00:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2253      	movs	r2, #83	@ 0x53
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c08:	e012      	b.n	8001c30 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f383 8810 	msr	PRIMASK, r3
}
 8001c14:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001c16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f920 	bl	8001e60 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c20:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	22ca      	movs	r2, #202	@ 0xca
 8001c26:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c28:	4b1b      	ldr	r3, [pc, #108]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2253      	movs	r2, #83	@ 0x53
 8001c2e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001c30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	4619      	mov	r1, r3
 8001c38:	69b8      	ldr	r0, [r7, #24]
 8001c3a:	f000 fa1b 	bl	8002074 <HW_TS_RTC_Int_AppNot>
 8001c3e:	e022      	b.n	8001c86 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001c40:	f7ff fed2 	bl	80019e8 <RescheduleTimerList>
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f383 8810 	msr	PRIMASK, r3
}
 8001c4e:	e01a      	b.n	8001c86 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c50:	bf00      	nop
 8001c52:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f8      	beq.n	8001c52 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c60:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001c70:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001c74:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f383 8810 	msr	PRIMASK, r3
}
 8001c84:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c86:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	22ff      	movs	r2, #255	@ 0xff
 8001c8c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001c8e:	bf00      	nop
}
 8001c90:	3728      	adds	r7, #40	@ 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000320 	.word	0x20000320
 8001c9c:	2000027c 	.word	0x2000027c
 8001ca0:	200001ec 	.word	0x200001ec
 8001ca4:	20000284 	.word	0x20000284
 8001ca8:	58000800 	.word	0x58000800

08001cac <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001cb8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e34 <HW_TS_Init+0x188>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	22ca      	movs	r2, #202	@ 0xca
 8001cbe:	625a      	str	r2, [r3, #36]	@ 0x24
 8001cc0:	4b5c      	ldr	r3, [pc, #368]	@ (8001e34 <HW_TS_Init+0x188>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2253      	movs	r2, #83	@ 0x53
 8001cc6:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001cc8:	4b5b      	ldr	r3, [pc, #364]	@ (8001e38 <HW_TS_Init+0x18c>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4a5a      	ldr	r2, [pc, #360]	@ (8001e38 <HW_TS_Init+0x18c>)
 8001cce:	f043 0320 	orr.w	r3, r3, #32
 8001cd2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001cd4:	4b58      	ldr	r3, [pc, #352]	@ (8001e38 <HW_TS_Init+0x18c>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f1c3 0304 	rsb	r3, r3, #4
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4b55      	ldr	r3, [pc, #340]	@ (8001e3c <HW_TS_Init+0x190>)
 8001ce8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001cea:	4b53      	ldr	r3, [pc, #332]	@ (8001e38 <HW_TS_Init+0x18c>)
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001cf2:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001cf6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	fa92 f2a2 	rbit	r2, r2
 8001cfe:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	2a00      	cmp	r2, #0
 8001d08:	d101      	bne.n	8001d0e <HW_TS_Init+0x62>
  {
    return 32U;
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	e003      	b.n	8001d16 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	fab2 f282 	clz	r2, r2
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	40d3      	lsrs	r3, r2
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b48      	ldr	r3, [pc, #288]	@ (8001e40 <HW_TS_Init+0x194>)
 8001d20:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001d22:	4b45      	ldr	r3, [pc, #276]	@ (8001e38 <HW_TS_Init+0x18c>)
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b44      	ldr	r3, [pc, #272]	@ (8001e44 <HW_TS_Init+0x198>)
 8001d34:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001d36:	4b43      	ldr	r3, [pc, #268]	@ (8001e44 <HW_TS_Init+0x198>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	4a40      	ldr	r2, [pc, #256]	@ (8001e40 <HW_TS_Init+0x194>)
 8001d3e:	7812      	ldrb	r2, [r2, #0]
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d48:	4a3c      	ldr	r2, [pc, #240]	@ (8001e3c <HW_TS_Init+0x190>)
 8001d4a:	7812      	ldrb	r2, [r2, #0]
 8001d4c:	40d3      	lsrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d904      	bls.n	8001d64 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e48 <HW_TS_Init+0x19c>)
 8001d5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d60:	801a      	strh	r2, [r3, #0]
 8001d62:	e003      	b.n	8001d6c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	4b37      	ldr	r3, [pc, #220]	@ (8001e48 <HW_TS_Init+0x19c>)
 8001d6a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d6c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001d70:	f7ff fb9c 	bl	80014ac <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d74:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001d78:	f7ff fb84 	bl	8001484 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d13d      	bne.n	8001dfe <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d82:	4b32      	ldr	r3, [pc, #200]	@ (8001e4c <HW_TS_Init+0x1a0>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d88:	4b31      	ldr	r3, [pc, #196]	@ (8001e50 <HW_TS_Init+0x1a4>)
 8001d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	77fb      	strb	r3, [r7, #31]
 8001d94:	e00c      	b.n	8001db0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001d96:	7ffa      	ldrb	r2, [r7, #31]
 8001d98:	492e      	ldr	r1, [pc, #184]	@ (8001e54 <HW_TS_Init+0x1a8>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	330c      	adds	r3, #12
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001daa:	7ffb      	ldrb	r3, [r7, #31]
 8001dac:	3301      	adds	r3, #1
 8001dae:	77fb      	strb	r3, [r7, #31]
 8001db0:	7ffb      	ldrb	r3, [r7, #31]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d9ef      	bls.n	8001d96 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001db6:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <HW_TS_Init+0x1ac>)
 8001db8:	2206      	movs	r2, #6
 8001dba:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e34 <HW_TS_Init+0x188>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <HW_TS_Init+0x188>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dca:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001dcc:	4b19      	ldr	r3, [pc, #100]	@ (8001e34 <HW_TS_Init+0x188>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b17      	ldr	r3, [pc, #92]	@ (8001e34 <HW_TS_Init+0x188>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001ddc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001dde:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <HW_TS_Init+0x1b0>)
 8001de0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001de4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001de6:	2003      	movs	r0, #3
 8001de8:	f001 faa1 	bl	800332e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <HW_TS_Init+0x188>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <HW_TS_Init+0x188>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	e009      	b.n	8001e12 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <HW_TS_Init+0x188>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f001 fa80 	bl	8003312 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <HW_TS_Init+0x188>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	22ff      	movs	r2, #255	@ 0xff
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2103      	movs	r1, #3
 8001e1e:	2003      	movs	r0, #3
 8001e20:	f001 fa35 	bl	800328e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e24:	2003      	movs	r0, #3
 8001e26:	f001 fa4c 	bl	80032c2 <HAL_NVIC_EnableIRQ>

  return;
 8001e2a:	bf00      	nop
}
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000320 	.word	0x20000320
 8001e38:	40002800 	.word	0x40002800
 8001e3c:	20000285 	.word	0x20000285
 8001e40:	20000286 	.word	0x20000286
 8001e44:	20000288 	.word	0x20000288
 8001e48:	2000028a 	.word	0x2000028a
 8001e4c:	20000284 	.word	0x20000284
 8001e50:	20000280 	.word	0x20000280
 8001e54:	200001ec 	.word	0x200001ec
 8001e58:	2000027c 	.word	0x2000027c
 8001e5c:	58000800 	.word	0x58000800

08001e60 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e70:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e74:	b672      	cpsid	i
}
 8001e76:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f001 fa30 	bl	80032de <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e7e:	4b34      	ldr	r3, [pc, #208]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	22ca      	movs	r2, #202	@ 0xca
 8001e84:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e86:	4b32      	ldr	r3, [pc, #200]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2253      	movs	r2, #83	@ 0x53
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001e8e:	79fa      	ldrb	r2, [r7, #7]
 8001e90:	4930      	ldr	r1, [pc, #192]	@ (8001f54 <HW_TS_Stop+0xf4>)
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d142      	bne.n	8001f2c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fc80 	bl	80017b0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001eb0:	4b29      	ldr	r3, [pc, #164]	@ (8001f58 <HW_TS_Stop+0xf8>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	2b06      	cmp	r3, #6
 8001eba:	d12f      	bne.n	8001f1c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ebc:	4b27      	ldr	r3, [pc, #156]	@ (8001f5c <HW_TS_Stop+0xfc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ec8:	d107      	bne.n	8001eda <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001eca:	bf00      	nop
 8001ecc:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f8      	bne.n	8001ecc <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001eda:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001eea:	bf00      	nop
 8001eec:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f8      	beq.n	8001eec <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001f0a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f0c:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <HW_TS_Stop+0x100>)
 8001f0e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001f12:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f14:	2003      	movs	r0, #3
 8001f16:	f001 fa0a 	bl	800332e <HAL_NVIC_ClearPendingIRQ>
 8001f1a:	e007      	b.n	8001f2c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <HW_TS_Stop+0x104>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	7cfa      	ldrb	r2, [r7, #19]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001f28:	f7ff fd5e 	bl	80019e8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f2c:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	22ff      	movs	r2, #255	@ 0xff
 8001f32:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f34:	2003      	movs	r0, #3
 8001f36:	f001 f9c4 	bl	80032c2 <HAL_NVIC_EnableIRQ>
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f383 8810 	msr	PRIMASK, r3
}
 8001f44:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001f46:	bf00      	nop
}
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000320 	.word	0x20000320
 8001f54:	200001ec 	.word	0x200001ec
 8001f58:	2000027c 	.word	0x2000027c
 8001f5c:	40002800 	.word	0x40002800
 8001f60:	58000800 	.word	0x58000800
 8001f64:	2000027d 	.word	0x2000027d

08001f68 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001f74:	79fa      	ldrb	r2, [r7, #7]
 8001f76:	493b      	ldr	r1, [pc, #236]	@ (8002064 <HW_TS_Start+0xfc>)
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	330c      	adds	r3, #12
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d103      	bne.n	8001f94 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff66 	bl	8001e60 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f94:	f3ef 8310 	mrs	r3, PRIMASK
 8001f98:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f9e:	b672      	cpsid	i
}
 8001fa0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001fa2:	2003      	movs	r0, #3
 8001fa4:	f001 f99b 	bl	80032de <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	@ (8002068 <HW_TS_Start+0x100>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	22ca      	movs	r2, #202	@ 0xca
 8001fae:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002068 <HW_TS_Start+0x100>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2253      	movs	r2, #83	@ 0x53
 8001fb6:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001fb8:	79fa      	ldrb	r2, [r7, #7]
 8001fba:	492a      	ldr	r1, [pc, #168]	@ (8002064 <HW_TS_Start+0xfc>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	330c      	adds	r3, #12
 8001fc8:	2202      	movs	r2, #2
 8001fca:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001fcc:	79fa      	ldrb	r2, [r7, #7]
 8001fce:	4925      	ldr	r1, [pc, #148]	@ (8002064 <HW_TS_Start+0xfc>)
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3308      	adds	r3, #8
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001fe0:	79fa      	ldrb	r2, [r7, #7]
 8001fe2:	4920      	ldr	r1, [pc, #128]	@ (8002064 <HW_TS_Start+0xfc>)
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	3304      	adds	r3, #4
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fb30 	bl	800165c <linkTimer>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002000:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <HW_TS_Start+0x104>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002006:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <HW_TS_Start+0x108>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	7c7a      	ldrb	r2, [r7, #17]
 800200e:	429a      	cmp	r2, r3
 8002010:	d002      	beq.n	8002018 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002012:	f7ff fce9 	bl	80019e8 <RescheduleTimerList>
 8002016:	e013      	b.n	8002040 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002018:	79fa      	ldrb	r2, [r7, #7]
 800201a:	4912      	ldr	r1, [pc, #72]	@ (8002064 <HW_TS_Start+0xfc>)
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	3308      	adds	r3, #8
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	8a7b      	ldrh	r3, [r7, #18]
 800202c:	79fa      	ldrb	r2, [r7, #7]
 800202e:	1ac9      	subs	r1, r1, r3
 8002030:	480c      	ldr	r0, [pc, #48]	@ (8002064 <HW_TS_Start+0xfc>)
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4403      	add	r3, r0
 800203c:	3308      	adds	r3, #8
 800203e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002040:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <HW_TS_Start+0x100>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	22ff      	movs	r2, #255	@ 0xff
 8002046:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002048:	2003      	movs	r0, #3
 800204a:	f001 f93a 	bl	80032c2 <HAL_NVIC_EnableIRQ>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f383 8810 	msr	PRIMASK, r3
}
 8002058:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800205a:	bf00      	nop
}
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200001ec 	.word	0x200001ec
 8002068:	20000320 	.word	0x20000320
 800206c:	2000027c 	.word	0x2000027c
 8002070:	2000027d 	.word	0x2000027d

08002074 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	460b      	mov	r3, r1
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4798      	blx	r3

  return;
 8002086:	bf00      	nop
}
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	4603      	mov	r3, r0
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	4613      	mov	r3, r2
 80020a0:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10e      	bne.n	80020ce <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80020b0:	4a17      	ldr	r2, [pc, #92]	@ (8002110 <HW_UART_Transmit_DMA+0x80>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80020b6:	4b17      	ldr	r3, [pc, #92]	@ (8002114 <HW_UART_Transmit_DMA+0x84>)
 80020b8:	4a17      	ldr	r2, [pc, #92]	@ (8002118 <HW_UART_Transmit_DMA+0x88>)
 80020ba:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80020bc:	89bb      	ldrh	r3, [r7, #12]
 80020be:	461a      	mov	r2, r3
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	4814      	ldr	r0, [pc, #80]	@ (8002114 <HW_UART_Transmit_DMA+0x84>)
 80020c4:	f005 fed4 	bl	8007e70 <HAL_UART_Transmit_DMA>
 80020c8:	4603      	mov	r3, r0
 80020ca:	75fb      	strb	r3, [r7, #23]
            break;
 80020cc:	e000      	b.n	80020d0 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80020ce:	bf00      	nop
    }

    switch (hal_status)
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d816      	bhi.n	8002104 <HW_UART_Transmit_DMA+0x74>
 80020d6:	a201      	add	r2, pc, #4	@ (adr r2, 80020dc <HW_UART_Transmit_DMA+0x4c>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020f3 	.word	0x080020f3
 80020e4:	080020f9 	.word	0x080020f9
 80020e8:	080020ff 	.word	0x080020ff
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80020ec:	2300      	movs	r3, #0
 80020ee:	75bb      	strb	r3, [r7, #22]
            break;
 80020f0:	e009      	b.n	8002106 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75bb      	strb	r3, [r7, #22]
            break;
 80020f6:	e006      	b.n	8002106 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80020f8:	2302      	movs	r3, #2
 80020fa:	75bb      	strb	r3, [r7, #22]
            break;
 80020fc:	e003      	b.n	8002106 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80020fe:	2303      	movs	r3, #3
 8002100:	75bb      	strb	r3, [r7, #22]
            break;
 8002102:	e000      	b.n	8002106 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002104:	bf00      	nop
    }

    return hw_status;
 8002106:	7dbb      	ldrb	r3, [r7, #22]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000028c 	.word	0x2000028c
 8002114:	200003ac 	.word	0x200003ac
 8002118:	40013800 	.word	0x40013800

0800211c <LL_AHB2_GRP1_EnableClock>:
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002128:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800212a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4313      	orrs	r3, r2
 8002132:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002138:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4013      	ands	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002140:	68fb      	ldr	r3, [r7, #12]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800215a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800215c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4313      	orrs	r3, r2
 8002164:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4013      	ands	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002184:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <MX_I2C1_Init+0x74>)
 8002186:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <MX_I2C1_Init+0x78>)
 8002188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800218a:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <MX_I2C1_Init+0x74>)
 800218c:	4a1b      	ldr	r2, [pc, #108]	@ (80021fc <MX_I2C1_Init+0x7c>)
 800218e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002190:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <MX_I2C1_Init+0x74>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002196:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <MX_I2C1_Init+0x74>)
 8002198:	2201      	movs	r2, #1
 800219a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800219c:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <MX_I2C1_Init+0x74>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021a2:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <MX_I2C1_Init+0x74>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021a8:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <MX_I2C1_Init+0x74>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021ae:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <MX_I2C1_Init+0x74>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	@ (80021f4 <MX_I2C1_Init+0x74>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021ba:	480e      	ldr	r0, [pc, #56]	@ (80021f4 <MX_I2C1_Init+0x74>)
 80021bc:	f001 fc98 	bl	8003af0 <HAL_I2C_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021c6:	f000 f9ab 	bl	8002520 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021ca:	2100      	movs	r1, #0
 80021cc:	4809      	ldr	r0, [pc, #36]	@ (80021f4 <MX_I2C1_Init+0x74>)
 80021ce:	f001 fd2a 	bl	8003c26 <HAL_I2CEx_ConfigAnalogFilter>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021d8:	f000 f9a2 	bl	8002520 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021dc:	2100      	movs	r1, #0
 80021de:	4805      	ldr	r0, [pc, #20]	@ (80021f4 <MX_I2C1_Init+0x74>)
 80021e0:	f001 fd6c 	bl	8003cbc <HAL_I2CEx_ConfigDigitalFilter>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021ea:	f000 f999 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000290 	.word	0x20000290
 80021f8:	40005400 	.word	0x40005400
 80021fc:	00b07cb4 	.word	0x00b07cb4

08002200 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b09c      	sub	sp, #112	@ 0x70
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	2250      	movs	r2, #80	@ 0x50
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f00f fd9d 	bl	8011d60 <memset>
  if(i2cHandle->Instance==I2C1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a17      	ldr	r2, [pc, #92]	@ (8002288 <HAL_I2C_MspInit+0x88>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d126      	bne.n	800227e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002230:	2304      	movs	r3, #4
 8002232:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002234:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	4618      	mov	r0, r3
 8002240:	f004 fe30 	bl	8006ea4 <HAL_RCCEx_PeriphCLKConfig>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800224a:	f000 f969 	bl	8002520 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2002      	movs	r0, #2
 8002250:	f7ff ff64 	bl	800211c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002254:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002258:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800225a:	2312      	movs	r3, #18
 800225c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002266:	2304      	movs	r3, #4
 8002268:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800226e:	4619      	mov	r1, r3
 8002270:	4806      	ldr	r0, [pc, #24]	@ (800228c <HAL_I2C_MspInit+0x8c>)
 8002272:	f001 fa91 	bl	8003798 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002276:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800227a:	f7ff ff68 	bl	800214e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800227e:	bf00      	nop
 8002280:	3770      	adds	r7, #112	@ 0x70
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40005400 	.word	0x40005400
 800228c:	48000400 	.word	0x48000400

08002290 <LL_AHB3_GRP1_EnableClock>:
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800229c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800229e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80022a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4013      	ands	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022b4:	68fb      	ldr	r3, [r7, #12]
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80022c8:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <MX_IPCC_Init+0x20>)
 80022ca:	4a07      	ldr	r2, [pc, #28]	@ (80022e8 <MX_IPCC_Init+0x24>)
 80022cc:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80022ce:	4805      	ldr	r0, [pc, #20]	@ (80022e4 <MX_IPCC_Init+0x20>)
 80022d0:	f001 fd40 	bl	8003d54 <HAL_IPCC_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80022da:	f000 f921 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200002e4 	.word	0x200002e4
 80022e8:	58000c00 	.word	0x58000c00

080022ec <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002330 <HAL_IPCC_MspInit+0x44>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d113      	bne.n	8002326 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80022fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002302:	f7ff ffc5 	bl	8002290 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	202c      	movs	r0, #44	@ 0x2c
 800230c:	f000 ffbf 	bl	800328e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002310:	202c      	movs	r0, #44	@ 0x2c
 8002312:	f000 ffd6 	bl	80032c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	202d      	movs	r0, #45	@ 0x2d
 800231c:	f000 ffb7 	bl	800328e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002320:	202d      	movs	r0, #45	@ 0x2d
 8002322:	f000 ffce 	bl	80032c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	58000c00 	.word	0x58000c00

08002334 <LL_RCC_LSE_SetDriveCapability>:
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800233c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002344:	f023 0218 	bic.w	r2, r3, #24
 8002348:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(const HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_RLR_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	3220      	adds	r2, #32
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	4a05      	ldr	r2, [pc, #20]	@ (800238c <LL_HSEM_1StepLock+0x2c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d001      	beq.n	800237e <LL_HSEM_1StepLock+0x1e>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <LL_HSEM_1StepLock+0x20>
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	80000400 	.word	0x80000400

08002390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b090      	sub	sp, #64	@ 0x40
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002396:	f000 fdad 	bl	8002ef4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800239a:	f7fe fcc1 	bl	8000d20 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800239e:	f000 f823 	bl	80023e8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80023a2:	f000 f897 	bl	80024d4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80023a6:	f7ff ff8d 	bl	80022c4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023aa:	f7ff f823 	bl	80013f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80023ae:	f7fe fff6 	bl	800139e <MX_DMA_Init>
  MX_I2C1_Init();
 80023b2:	f7ff fee5 	bl	8002180 <MX_I2C1_Init>
  MX_RTC_Init();
 80023b6:	f000 f8eb 	bl	8002590 <MX_RTC_Init>
  MX_SPI1_Init();
 80023ba:	f000 fb8b 	bl	8002ad4 <MX_SPI1_Init>
  MX_USB_Device_Init();
 80023be:	f00e fb19 	bl	80109f4 <MX_USB_Device_Init>
  MX_RF_Init();
 80023c2:	f000 f8b3 	bl	800252c <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80023c6:	2201      	movs	r2, #1
 80023c8:	2101      	movs	r1, #1
 80023ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ce:	f001 fb53 	bl	8003a78 <HAL_GPIO_WritePin>
  //snprintf(buff, sizeof(buff), "Hello world\r\n");
  //CDC_Transmit_FS((uint8_t*)buff, strlen(buff));
  //LCD_BasicCommTest(); // Just wake up display


  LCD_Init();
 80023d2:	f000 f98d 	bl	80026f0 <LCD_Init>
  LCD_FillScreen(LCD_COLOR_RED);
 80023d6:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80023da:	f000 fad9 	bl	8002990 <LCD_FillScreen>
  //LCD_FillRect(50, 50, 100, 100, LCD_COLOR_RED);
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80023de:	f7fe fcad 	bl	8000d3c <MX_APPE_Init>
  while (1)
  {
	  //CDC_Transmit_FS((uint8_t*)buff, strlen(buff));
	  //HAL_Delay(500);
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80023e2:	f7fe ff92 	bl	800130a <MX_APPE_Process>
 80023e6:	e7fc      	b.n	80023e2 <main+0x52>

080023e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b09a      	sub	sp, #104	@ 0x68
 80023ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ee:	f107 0320 	add.w	r3, r7, #32
 80023f2:	2248      	movs	r2, #72	@ 0x48
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f00f fcb2 	bl	8011d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	60da      	str	r2, [r3, #12]
 8002408:	611a      	str	r2, [r3, #16]
 800240a:	615a      	str	r2, [r3, #20]
 800240c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800241c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f023 0303 	bic.w	r3, r3, #3
 8002428:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002432:	f003 fa17 	bl	8005864 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8002436:	2010      	movs	r0, #16
 8002438:	f7ff ff7c 	bl	8002334 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800243c:	4b24      	ldr	r3, [pc, #144]	@ (80024d0 <SystemClock_Config+0xe8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002444:	4a22      	ldr	r2, [pc, #136]	@ (80024d0 <SystemClock_Config+0xe8>)
 8002446:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <SystemClock_Config+0xe8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002458:	2327      	movs	r3, #39	@ 0x27
 800245a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800245c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002460:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002462:	2301      	movs	r3, #1
 8002464:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002466:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800246a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800246c:	2301      	movs	r3, #1
 800246e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002470:	2340      	movs	r3, #64	@ 0x40
 8002472:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002474:	2300      	movs	r3, #0
 8002476:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002478:	2360      	movs	r3, #96	@ 0x60
 800247a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800247c:	2300      	movs	r3, #0
 800247e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002480:	f107 0320 	add.w	r3, r7, #32
 8002484:	4618      	mov	r0, r3
 8002486:	f003 fd79 	bl	8005f7c <HAL_RCC_OscConfig>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002490:	f000 f846 	bl	8002520 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002494:	236f      	movs	r3, #111	@ 0x6f
 8002496:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002498:	2302      	movs	r3, #2
 800249a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2101      	movs	r1, #1
 80024b4:	4618      	mov	r0, r3
 80024b6:	f004 f8d5 	bl	8006664 <HAL_RCC_ClockConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80024c0:	f000 f82e 	bl	8002520 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80024c4:	f004 fe64 	bl	8007190 <HAL_RCCEx_EnableMSIPLLMode>
}
 80024c8:	bf00      	nop
 80024ca:	3768      	adds	r7, #104	@ 0x68
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	58000400 	.word	0x58000400

080024d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b094      	sub	sp, #80	@ 0x50
 80024d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024da:	463b      	mov	r3, r7
 80024dc:	2250      	movs	r2, #80	@ 0x50
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00f fc3d 	bl	8011d60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80024e6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80024ea:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80024ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024f0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80024f2:	2302      	movs	r3, #2
 80024f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80024f6:	2310      	movs	r3, #16
 80024f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fa:	463b      	mov	r3, r7
 80024fc:	4618      	mov	r0, r3
 80024fe:	f004 fcd1 	bl	8006ea4 <HAL_RCCEx_PeriphCLKConfig>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002508:	f000 f80a 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock(HSEM, 5); // this here to keep across regens
 800250c:	2105      	movs	r1, #5
 800250e:	4803      	ldr	r0, [pc, #12]	@ (800251c <PeriphCommonClock_Config+0x48>)
 8002510:	f7ff ff26 	bl	8002360 <LL_HSEM_1StepLock>
  /* USER CODE END Smps */
}
 8002514:	bf00      	nop
 8002516:	3750      	adds	r7, #80	@ 0x50
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	58001400 	.word	0x58001400

08002520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002524:	b672      	cpsid	i
}
 8002526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <Error_Handler+0x8>

0800252c <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <LL_RCC_EnableRTC>:
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800253e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002546:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800254a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800254e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_APB1_GRP1_EnableClock>:
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002568:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800256a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4313      	orrs	r3, r2
 8002572:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002578:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002580:	68fb      	ldr	r3, [r7, #12]
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002594:	4b16      	ldr	r3, [pc, #88]	@ (80025f0 <MX_RTC_Init+0x60>)
 8002596:	4a17      	ldr	r2, [pc, #92]	@ (80025f4 <MX_RTC_Init+0x64>)
 8002598:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800259a:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <MX_RTC_Init+0x60>)
 800259c:	2200      	movs	r2, #0
 800259e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80025a0:	4b13      	ldr	r3, [pc, #76]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025a2:	220f      	movs	r2, #15
 80025a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80025a6:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025a8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80025ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025ae:	4b10      	ldr	r3, [pc, #64]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025b4:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80025ba:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025bc:	2200      	movs	r2, #0
 80025be:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80025c0:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025c6:	480a      	ldr	r0, [pc, #40]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025c8:	f004 fef9 	bl	80073be <HAL_RTC_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80025d2:	f7ff ffa5 	bl	8002520 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	4805      	ldr	r0, [pc, #20]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025dc:	f004 fffe 	bl	80075dc <HAL_RTCEx_SetWakeUpTimer_IT>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80025e6:	f7ff ff9b 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000320 	.word	0x20000320
 80025f4:	40002800 	.word	0x40002800

080025f8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b096      	sub	sp, #88	@ 0x58
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	2250      	movs	r2, #80	@ 0x50
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f00f fba9 	bl	8011d60 <memset>
  if(rtcHandle->Instance==RTC)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a12      	ldr	r2, [pc, #72]	@ (800265c <HAL_RTC_MspInit+0x64>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d11d      	bne.n	8002654 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002618:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800261c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800261e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002622:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002624:	f107 0308 	add.w	r3, r7, #8
 8002628:	4618      	mov	r0, r3
 800262a:	f004 fc3b 	bl	8006ea4 <HAL_RCCEx_PeriphCLKConfig>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002634:	f7ff ff74 	bl	8002520 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002638:	f7ff ff7f 	bl	800253a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800263c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002640:	f7ff ff8c 	bl	800255c <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	2003      	movs	r0, #3
 800264a:	f000 fe20 	bl	800328e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800264e:	2003      	movs	r0, #3
 8002650:	f000 fe37 	bl	80032c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002654:	bf00      	nop
 8002656:	3758      	adds	r7, #88	@ 0x58
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40002800 	.word	0x40002800

08002660 <LCD_WriteCommand>:
/**
 * @brief Write command to LCD
 * @param cmd: Command byte to send
 */
void LCD_WriteCommand(uint8_t cmd)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW();
 800266a:	2200      	movs	r2, #0
 800266c:	2108      	movs	r1, #8
 800266e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002672:	f001 fa01 	bl	8003a78 <HAL_GPIO_WritePin>
    LCD_DC_LOW();  // Command mode (RS=0 in original)
 8002676:	2200      	movs	r2, #0
 8002678:	2104      	movs	r1, #4
 800267a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800267e:	f001 f9fb 	bl	8003a78 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8002682:	1df9      	adds	r1, r7, #7
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	2201      	movs	r2, #1
 800268a:	4806      	ldr	r0, [pc, #24]	@ (80026a4 <LCD_WriteCommand+0x44>)
 800268c:	f005 f915 	bl	80078ba <HAL_SPI_Transmit>
    LCD_CS_HIGH();
 8002690:	2201      	movs	r2, #1
 8002692:	2108      	movs	r1, #8
 8002694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002698:	f001 f9ee 	bl	8003a78 <HAL_GPIO_WritePin>
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000344 	.word	0x20000344

080026a8 <LCD_WriteData>:
/**
 * @brief Write data to LCD
 * @param data: Data byte to send
 */
void LCD_WriteData(uint8_t data)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW();
 80026b2:	2200      	movs	r2, #0
 80026b4:	2108      	movs	r1, #8
 80026b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ba:	f001 f9dd 	bl	8003a78 <HAL_GPIO_WritePin>
    LCD_DC_HIGH(); // Data mode (RS=1 in original)
 80026be:	2201      	movs	r2, #1
 80026c0:	2104      	movs	r1, #4
 80026c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026c6:	f001 f9d7 	bl	8003a78 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80026ca:	1df9      	adds	r1, r7, #7
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295
 80026d0:	2201      	movs	r2, #1
 80026d2:	4806      	ldr	r0, [pc, #24]	@ (80026ec <LCD_WriteData+0x44>)
 80026d4:	f005 f8f1 	bl	80078ba <HAL_SPI_Transmit>
    LCD_CS_HIGH();
 80026d8:	2201      	movs	r2, #1
 80026da:	2108      	movs	r1, #8
 80026dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026e0:	f001 f9ca 	bl	8003a78 <HAL_GPIO_WritePin>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000344 	.word	0x20000344

080026f0 <LCD_Init>:

/**
 * @brief Initialize ST7789V LCD
 */
void LCD_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
    // Ensure CS is high initially
    LCD_CS_HIGH();
 80026f4:	2201      	movs	r2, #1
 80026f6:	2108      	movs	r1, #8
 80026f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026fc:	f001 f9bc 	bl	8003a78 <HAL_GPIO_WritePin>

    // Hardware reset sequence - ST7789V needs longer reset
    LCD_RST_HIGH();
 8002700:	2201      	movs	r2, #1
 8002702:	2102      	movs	r1, #2
 8002704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002708:	f001 f9b6 	bl	8003a78 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800270c:	200a      	movs	r0, #10
 800270e:	f7fe fdd7 	bl	80012c0 <HAL_Delay>
    LCD_RST_LOW();
 8002712:	2200      	movs	r2, #0
 8002714:	2102      	movs	r1, #2
 8002716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800271a:	f001 f9ad 	bl	8003a78 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800271e:	2032      	movs	r0, #50	@ 0x32
 8002720:	f7fe fdce 	bl	80012c0 <HAL_Delay>
    LCD_RST_HIGH();
 8002724:	2201      	movs	r2, #1
 8002726:	2102      	movs	r1, #2
 8002728:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800272c:	f001 f9a4 	bl	8003a78 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 8002730:	2078      	movs	r0, #120	@ 0x78
 8002732:	f7fe fdc5 	bl	80012c0 <HAL_Delay>

    // Software reset for ST7789V
    LCD_WriteCommand(0x01); // Software Reset
 8002736:	2001      	movs	r0, #1
 8002738:	f7ff ff92 	bl	8002660 <LCD_WriteCommand>
    HAL_Delay(150);
 800273c:	2096      	movs	r0, #150	@ 0x96
 800273e:	f7fe fdbf 	bl	80012c0 <HAL_Delay>

    // Sleep out first
    LCD_WriteCommand(0x11); // Sleep Out
 8002742:	2011      	movs	r0, #17
 8002744:	f7ff ff8c 	bl	8002660 <LCD_WriteCommand>
    HAL_Delay(120);
 8002748:	2078      	movs	r0, #120	@ 0x78
 800274a:	f7fe fdb9 	bl	80012c0 <HAL_Delay>

    // ST7789V specific initialization
    LCD_WriteCommand(0x36); // Memory Access Control
 800274e:	2036      	movs	r0, #54	@ 0x36
 8002750:	f7ff ff86 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x00);    // Normal orientation
 8002754:	2000      	movs	r0, #0
 8002756:	f7ff ffa7 	bl	80026a8 <LCD_WriteData>

    LCD_WriteCommand(0x3A); // Pixel Format Set
 800275a:	203a      	movs	r0, #58	@ 0x3a
 800275c:	f7ff ff80 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x05);    // 16-bit RGB565
 8002760:	2005      	movs	r0, #5
 8002762:	f7ff ffa1 	bl	80026a8 <LCD_WriteData>

    // ST7789V Porch Setting
    LCD_WriteCommand(0xB2);
 8002766:	20b2      	movs	r0, #178	@ 0xb2
 8002768:	f7ff ff7a 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x0C);
 800276c:	200c      	movs	r0, #12
 800276e:	f7ff ff9b 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x0C);
 8002772:	200c      	movs	r0, #12
 8002774:	f7ff ff98 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x00);
 8002778:	2000      	movs	r0, #0
 800277a:	f7ff ff95 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x33);
 800277e:	2033      	movs	r0, #51	@ 0x33
 8002780:	f7ff ff92 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x33);
 8002784:	2033      	movs	r0, #51	@ 0x33
 8002786:	f7ff ff8f 	bl	80026a8 <LCD_WriteData>

    // ST7789V Gate Control
    LCD_WriteCommand(0xB7);
 800278a:	20b7      	movs	r0, #183	@ 0xb7
 800278c:	f7ff ff68 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x35);
 8002790:	2035      	movs	r0, #53	@ 0x35
 8002792:	f7ff ff89 	bl	80026a8 <LCD_WriteData>

    // ST7789V VCOM Setting
    LCD_WriteCommand(0xBB);
 8002796:	20bb      	movs	r0, #187	@ 0xbb
 8002798:	f7ff ff62 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x19);
 800279c:	2019      	movs	r0, #25
 800279e:	f7ff ff83 	bl	80026a8 <LCD_WriteData>

    // ST7789V LCM Control
    LCD_WriteCommand(0xC0);
 80027a2:	20c0      	movs	r0, #192	@ 0xc0
 80027a4:	f7ff ff5c 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x2C);
 80027a8:	202c      	movs	r0, #44	@ 0x2c
 80027aa:	f7ff ff7d 	bl	80026a8 <LCD_WriteData>

    // ST7789V VDV and VRH Command Enable
    LCD_WriteCommand(0xC2);
 80027ae:	20c2      	movs	r0, #194	@ 0xc2
 80027b0:	f7ff ff56 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x01);
 80027b4:	2001      	movs	r0, #1
 80027b6:	f7ff ff77 	bl	80026a8 <LCD_WriteData>

    // ST7789V VRH Set
    LCD_WriteCommand(0xC3);
 80027ba:	20c3      	movs	r0, #195	@ 0xc3
 80027bc:	f7ff ff50 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x12);
 80027c0:	2012      	movs	r0, #18
 80027c2:	f7ff ff71 	bl	80026a8 <LCD_WriteData>

    // ST7789V VDV Set
    LCD_WriteCommand(0xC4);
 80027c6:	20c4      	movs	r0, #196	@ 0xc4
 80027c8:	f7ff ff4a 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x20);
 80027cc:	2020      	movs	r0, #32
 80027ce:	f7ff ff6b 	bl	80026a8 <LCD_WriteData>

    // ST7789V Frame Rate Control
    LCD_WriteCommand(0xC6);
 80027d2:	20c6      	movs	r0, #198	@ 0xc6
 80027d4:	f7ff ff44 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x0F);
 80027d8:	200f      	movs	r0, #15
 80027da:	f7ff ff65 	bl	80026a8 <LCD_WriteData>

    // ST7789V Power Control 1
    LCD_WriteCommand(0xD0);
 80027de:	20d0      	movs	r0, #208	@ 0xd0
 80027e0:	f7ff ff3e 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0xA4);
 80027e4:	20a4      	movs	r0, #164	@ 0xa4
 80027e6:	f7ff ff5f 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0xA1);
 80027ea:	20a1      	movs	r0, #161	@ 0xa1
 80027ec:	f7ff ff5c 	bl	80026a8 <LCD_WriteData>

    // ST7789V Positive Voltage Gamma Control
    LCD_WriteCommand(0xE0);
 80027f0:	20e0      	movs	r0, #224	@ 0xe0
 80027f2:	f7ff ff35 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0xD0);
 80027f6:	20d0      	movs	r0, #208	@ 0xd0
 80027f8:	f7ff ff56 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x04);
 80027fc:	2004      	movs	r0, #4
 80027fe:	f7ff ff53 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x0D);
 8002802:	200d      	movs	r0, #13
 8002804:	f7ff ff50 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x11);
 8002808:	2011      	movs	r0, #17
 800280a:	f7ff ff4d 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x13);
 800280e:	2013      	movs	r0, #19
 8002810:	f7ff ff4a 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x2B);
 8002814:	202b      	movs	r0, #43	@ 0x2b
 8002816:	f7ff ff47 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x3F);
 800281a:	203f      	movs	r0, #63	@ 0x3f
 800281c:	f7ff ff44 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x54);
 8002820:	2054      	movs	r0, #84	@ 0x54
 8002822:	f7ff ff41 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x4C);
 8002826:	204c      	movs	r0, #76	@ 0x4c
 8002828:	f7ff ff3e 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x18);
 800282c:	2018      	movs	r0, #24
 800282e:	f7ff ff3b 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x0D);
 8002832:	200d      	movs	r0, #13
 8002834:	f7ff ff38 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x0B);
 8002838:	200b      	movs	r0, #11
 800283a:	f7ff ff35 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x1F);
 800283e:	201f      	movs	r0, #31
 8002840:	f7ff ff32 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x23);
 8002844:	2023      	movs	r0, #35	@ 0x23
 8002846:	f7ff ff2f 	bl	80026a8 <LCD_WriteData>

    // ST7789V Negative Voltage Gamma Control
    LCD_WriteCommand(0xE1);
 800284a:	20e1      	movs	r0, #225	@ 0xe1
 800284c:	f7ff ff08 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0xD0);
 8002850:	20d0      	movs	r0, #208	@ 0xd0
 8002852:	f7ff ff29 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x04);
 8002856:	2004      	movs	r0, #4
 8002858:	f7ff ff26 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x0C);
 800285c:	200c      	movs	r0, #12
 800285e:	f7ff ff23 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x11);
 8002862:	2011      	movs	r0, #17
 8002864:	f7ff ff20 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x13);
 8002868:	2013      	movs	r0, #19
 800286a:	f7ff ff1d 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x2C);
 800286e:	202c      	movs	r0, #44	@ 0x2c
 8002870:	f7ff ff1a 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x3F);
 8002874:	203f      	movs	r0, #63	@ 0x3f
 8002876:	f7ff ff17 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x44);
 800287a:	2044      	movs	r0, #68	@ 0x44
 800287c:	f7ff ff14 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x51);
 8002880:	2051      	movs	r0, #81	@ 0x51
 8002882:	f7ff ff11 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x2F);
 8002886:	202f      	movs	r0, #47	@ 0x2f
 8002888:	f7ff ff0e 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x1F);
 800288c:	201f      	movs	r0, #31
 800288e:	f7ff ff0b 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x1F);
 8002892:	201f      	movs	r0, #31
 8002894:	f7ff ff08 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x20);
 8002898:	2020      	movs	r0, #32
 800289a:	f7ff ff05 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x23);
 800289e:	2023      	movs	r0, #35	@ 0x23
 80028a0:	f7ff ff02 	bl	80026a8 <LCD_WriteData>

    // ST7789V Display Inversion - try both ON and OFF
    LCD_WriteCommand(0x21); // Display Inversion On
 80028a4:	2021      	movs	r0, #33	@ 0x21
 80028a6:	f7ff fedb 	bl	8002660 <LCD_WriteCommand>
    // LCD_WriteCommand(0x20); // Use this instead if colors are inverted

    // Set display area - ST7789V might have offset
    LCD_WriteCommand(0x2A); // Column Address Set
 80028aa:	202a      	movs	r0, #42	@ 0x2a
 80028ac:	f7ff fed8 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x00);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7ff fef9 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7ff fef6 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x00);
 80028bc:	2000      	movs	r0, #0
 80028be:	f7ff fef3 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0xEF); // 239
 80028c2:	20ef      	movs	r0, #239	@ 0xef
 80028c4:	f7ff fef0 	bl	80026a8 <LCD_WriteData>

    LCD_WriteCommand(0x2B); // Row Address Set
 80028c8:	202b      	movs	r0, #43	@ 0x2b
 80028ca:	f7ff fec9 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x00);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7ff feea 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x00);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7ff fee7 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x01);
 80028da:	2001      	movs	r0, #1
 80028dc:	f7ff fee4 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x3F); // 319
 80028e0:	203f      	movs	r0, #63	@ 0x3f
 80028e2:	f7ff fee1 	bl	80026a8 <LCD_WriteData>

    // Final commands
    LCD_WriteCommand(0x29); // Display On
 80028e6:	2029      	movs	r0, #41	@ 0x29
 80028e8:	f7ff feba 	bl	8002660 <LCD_WriteCommand>
    HAL_Delay(50);
 80028ec:	2032      	movs	r0, #50	@ 0x32
 80028ee:	f7fe fce7 	bl	80012c0 <HAL_Delay>
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <LCD_SetWindow>:
 * @param y0: Start row
 * @param x1: End column
 * @param y1: End row
 */
void LCD_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80028f6:	b590      	push	{r4, r7, lr}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4604      	mov	r4, r0
 80028fe:	4608      	mov	r0, r1
 8002900:	4611      	mov	r1, r2
 8002902:	461a      	mov	r2, r3
 8002904:	4623      	mov	r3, r4
 8002906:	80fb      	strh	r3, [r7, #6]
 8002908:	4603      	mov	r3, r0
 800290a:	80bb      	strh	r3, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	807b      	strh	r3, [r7, #2]
 8002910:	4613      	mov	r3, r2
 8002912:	803b      	strh	r3, [r7, #0]
    LCD_WriteCommand(0x2A); // Column Address Set
 8002914:	202a      	movs	r0, #42	@ 0x2a
 8002916:	f7ff fea3 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(x0 >> 8);
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	b29b      	uxth	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fec0 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(x0 & 0xFF);
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff febb 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(x1 >> 8);
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	b29b      	uxth	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff feb4 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(x1 & 0xFF);
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff feaf 	bl	80026a8 <LCD_WriteData>

    LCD_WriteCommand(0x2B); // Row Address Set
 800294a:	202b      	movs	r0, #43	@ 0x2b
 800294c:	f7ff fe88 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(y0 >> 8);
 8002950:	88bb      	ldrh	r3, [r7, #4]
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	b29b      	uxth	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fea5 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(y0 & 0xFF);
 800295e:	88bb      	ldrh	r3, [r7, #4]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fea0 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(y1 >> 8);
 8002968:	883b      	ldrh	r3, [r7, #0]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	b29b      	uxth	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fe99 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(y1 & 0xFF);
 8002976:	883b      	ldrh	r3, [r7, #0]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fe94 	bl	80026a8 <LCD_WriteData>

    LCD_WriteCommand(0x2C); // Memory Write
 8002980:	202c      	movs	r0, #44	@ 0x2c
 8002982:	f7ff fe6d 	bl	8002660 <LCD_WriteCommand>
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bd90      	pop	{r4, r7, pc}
	...

08002990 <LCD_FillScreen>:
/**
 * @brief Fill entire screen with a color
 * @param color: 16-bit RGB565 color
 */
void LCD_FillScreen(uint16_t color)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8002996:	af00      	add	r7, sp, #0
 8002998:	4602      	mov	r2, r0
 800299a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800299e:	f2a3 430a 	subw	r3, r3, #1034	@ 0x40a
 80029a2:	801a      	strh	r2, [r3, #0]
    LCD_SetWindow(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 80029a4:	f240 133f 	movw	r3, #319	@ 0x13f
 80029a8:	22ef      	movs	r2, #239	@ 0xef
 80029aa:	2100      	movs	r1, #0
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7ff ffa2 	bl	80028f6 <LCD_SetWindow>

    // Create a buffer with multiple pixels
    uint8_t buffer[1024]; // 512 pixels worth
    for(int i = 0; i < 1024; i += 2) {
 80029b2:	2300      	movs	r3, #0
 80029b4:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 80029b8:	e023      	b.n	8002a02 <LCD_FillScreen+0x72>
        buffer[i] = color >> 8;
 80029ba:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80029be:	f2a3 430a 	subw	r3, r3, #1034	@ 0x40a
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	0a1b      	lsrs	r3, r3, #8
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	b2d9      	uxtb	r1, r3
 80029ca:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80029ce:	f5a3 6281 	sub.w	r2, r3, #1032	@ 0x408
 80029d2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 80029d6:	4413      	add	r3, r2
 80029d8:	460a      	mov	r2, r1
 80029da:	701a      	strb	r2, [r3, #0]
        buffer[i+1] = color & 0xFF;
 80029dc:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 80029e0:	3301      	adds	r3, #1
 80029e2:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 80029e6:	f2a2 420a 	subw	r2, r2, #1034	@ 0x40a
 80029ea:	8812      	ldrh	r2, [r2, #0]
 80029ec:	b2d1      	uxtb	r1, r2
 80029ee:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 80029f2:	f5a2 6281 	sub.w	r2, r2, #1032	@ 0x408
 80029f6:	54d1      	strb	r1, [r2, r3]
    for(int i = 0; i < 1024; i += 2) {
 80029f8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 80029fc:	3302      	adds	r3, #2
 80029fe:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8002a02:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8002a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a0a:	dbd6      	blt.n	80029ba <LCD_FillScreen+0x2a>
    }

    LCD_CS_LOW();
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2108      	movs	r1, #8
 8002a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a14:	f001 f830 	bl	8003a78 <HAL_GPIO_WritePin>
    LCD_DC_HIGH();
 8002a18:	2201      	movs	r2, #1
 8002a1a:	2104      	movs	r1, #4
 8002a1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a20:	f001 f82a 	bl	8003a78 <HAL_GPIO_WritePin>

    // Send buffer multiple times instead of pixel by pixel
    for(uint32_t i = 0; i < (LCD_WIDTH * LCD_HEIGHT * 2); i += 1024) {
 8002a24:	2300      	movs	r3, #0
 8002a26:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
 8002a2a:	e00e      	b.n	8002a4a <LCD_FillScreen+0xba>
        HAL_SPI_Transmit(&hspi1, buffer, 1024, HAL_MAX_DELAY);
 8002a2c:	f107 0108 	add.w	r1, r7, #8
 8002a30:	f04f 33ff 	mov.w	r3, #4294967295
 8002a34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a38:	480c      	ldr	r0, [pc, #48]	@ (8002a6c <LCD_FillScreen+0xdc>)
 8002a3a:	f004 ff3e 	bl	80078ba <HAL_SPI_Transmit>
    for(uint32_t i = 0; i < (LCD_WIDTH * LCD_HEIGHT * 2); i += 1024) {
 8002a3e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8002a42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a46:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
 8002a4a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8002a4e:	f5b3 3f16 	cmp.w	r3, #153600	@ 0x25800
 8002a52:	d3eb      	bcc.n	8002a2c <LCD_FillScreen+0x9c>
    }

    LCD_CS_HIGH();
 8002a54:	2201      	movs	r2, #1
 8002a56:	2108      	movs	r1, #8
 8002a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a5c:	f001 f80c 	bl	8003a78 <HAL_GPIO_WritePin>
}
 8002a60:	bf00      	nop
 8002a62:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000344 	.word	0x20000344

08002a70 <LL_AHB2_GRP1_EnableClock>:
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4013      	ands	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a94:	68fb      	ldr	r3, [r7, #12]
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ab0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002aba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002abe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002ada:	4a1c      	ldr	r2, [pc, #112]	@ (8002b4c <MX_SPI1_Init+0x78>)
 8002adc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ade:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002ae0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002ae4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ae6:	4b18      	ldr	r3, [pc, #96]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aec:	4b16      	ldr	r3, [pc, #88]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002aee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002af2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002af4:	4b14      	ldr	r3, [pc, #80]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002afa:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b00:	4b11      	ldr	r3, [pc, #68]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b08:	4b0f      	ldr	r3, [pc, #60]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b14:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b20:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002b22:	2207      	movs	r2, #7
 8002b24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b26:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b2c:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002b2e:	2208      	movs	r2, #8
 8002b30:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b32:	4805      	ldr	r0, [pc, #20]	@ (8002b48 <MX_SPI1_Init+0x74>)
 8002b34:	f004 fe1e 	bl	8007774 <HAL_SPI_Init>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002b3e:	f7ff fcef 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000344 	.word	0x20000344
 8002b4c:	40013000 	.word	0x40013000

08002b50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b58:	f107 030c 	add.w	r3, r7, #12
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	60da      	str	r2, [r3, #12]
 8002b66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8002bac <HAL_SPI_MspInit+0x5c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d117      	bne.n	8002ba2 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b72:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002b76:	f7ff ff94 	bl	8002aa2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f7ff ff78 	bl	8002a70 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b80:	23e0      	movs	r3, #224	@ 0xe0
 8002b82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b90:	2305      	movs	r3, #5
 8002b92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b94:	f107 030c 	add.w	r3, r7, #12
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b9e:	f000 fdfb 	bl	8003798 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40013000 	.word	0x40013000

08002bb0 <LL_AHB3_GRP1_EnableClock>:
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
}
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002be6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002bea:	f7ff ffe1 	bl	8002bb0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	202e      	movs	r0, #46	@ 0x2e
 8002bf4:	f000 fb4b 	bl	800328e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002bf8:	202e      	movs	r0, #46	@ 0x2e
 8002bfa:	f000 fb62 	bl	80032c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c06:	bf00      	nop
 8002c08:	e7fd      	b.n	8002c06 <NMI_Handler+0x4>

08002c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c0e:	bf00      	nop
 8002c10:	e7fd      	b.n	8002c0e <HardFault_Handler+0x4>

08002c12 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c16:	bf00      	nop
 8002c18:	e7fd      	b.n	8002c16 <MemManage_Handler+0x4>

08002c1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c1e:	bf00      	nop
 8002c20:	e7fd      	b.n	8002c1e <BusFault_Handler+0x4>

08002c22 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c26:	bf00      	nop
 8002c28:	e7fd      	b.n	8002c26 <UsageFault_Handler+0x4>

08002c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c58:	f000 f9a6 	bl	8002fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002c64:	f7fe ff5a 	bl	8001b1c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002c70:	4802      	ldr	r0, [pc, #8]	@ (8002c7c <DMA1_Channel1_IRQHandler+0x10>)
 8002c72:	f000 fca3 	bl	80035bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000478 	.word	0x20000478

08002c80 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c84:	4802      	ldr	r0, [pc, #8]	@ (8002c90 <USB_LP_IRQHandler+0x10>)
 8002c86:	f001 f9db 	bl	8004040 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20001aec 	.word	0x20001aec

08002c94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c98:	4802      	ldr	r0, [pc, #8]	@ (8002ca4 <USART1_IRQHandler+0x10>)
 8002c9a:	f005 f969 	bl	8007f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200003ac 	.word	0x200003ac

08002ca8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002cac:	f00d fce8 	bl	8010680 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002cb8:	f00d fd18 	bl	80106ec <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002cc4:	f000 fef0 	bl	8003aa8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	e00a      	b.n	8002cf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cde:	f3af 8000 	nop.w
 8002ce2:	4601      	mov	r1, r0
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	60ba      	str	r2, [r7, #8]
 8002cea:	b2ca      	uxtb	r2, r1
 8002cec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	dbf0      	blt.n	8002cde <_read+0x12>
  }

  return len;
 8002cfc:	687b      	ldr	r3, [r7, #4]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d2e:	605a      	str	r2, [r3, #4]
  return 0;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <_isatty>:

int _isatty(int file)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d78:	4a14      	ldr	r2, [pc, #80]	@ (8002dcc <_sbrk+0x5c>)
 8002d7a:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <_sbrk+0x60>)
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d84:	4b13      	ldr	r3, [pc, #76]	@ (8002dd4 <_sbrk+0x64>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d102      	bne.n	8002d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d8c:	4b11      	ldr	r3, [pc, #68]	@ (8002dd4 <_sbrk+0x64>)
 8002d8e:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <_sbrk+0x68>)
 8002d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d92:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d207      	bcs.n	8002db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da0:	f00f f842 	bl	8011e28 <__errno>
 8002da4:	4603      	mov	r3, r0
 8002da6:	220c      	movs	r2, #12
 8002da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	e009      	b.n	8002dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db0:	4b08      	ldr	r3, [pc, #32]	@ (8002dd4 <_sbrk+0x64>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002db6:	4b07      	ldr	r3, [pc, #28]	@ (8002dd4 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	4a05      	ldr	r2, [pc, #20]	@ (8002dd4 <_sbrk+0x64>)
 8002dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20030000 	.word	0x20030000
 8002dd0:	00000800 	.word	0x00000800
 8002dd4:	200003a8 	.word	0x200003a8
 8002dd8:	200021d8 	.word	0x200021d8

08002ddc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002de0:	4b24      	ldr	r3, [pc, #144]	@ (8002e74 <SystemInit+0x98>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de6:	4a23      	ldr	r2, [pc, #140]	@ (8002e74 <SystemInit+0x98>)
 8002de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e04:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002e08:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e14:	4b18      	ldr	r3, [pc, #96]	@ (8002e78 <SystemInit+0x9c>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e26:	f023 0305 	bic.w	r3, r3, #5
 8002e2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e46:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <SystemInit+0xa0>)
 8002e48:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e4e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e7c <SystemInit+0xa0>)
 8002e50:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e66:	2200      	movs	r2, #0
 8002e68:	619a      	str	r2, [r3, #24]
}
 8002e6a:	bf00      	nop
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00
 8002e78:	faf6fefb 	.word	0xfaf6fefb
 8002e7c:	22041000 	.word	0x22041000

08002e80 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002e80:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e82:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e84:	3304      	adds	r3, #4

08002e86 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e86:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e88:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002e8a:	d3f9      	bcc.n	8002e80 <CopyDataInit>
  bx lr
 8002e8c:	4770      	bx	lr

08002e8e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002e8e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002e90:	3004      	adds	r0, #4

08002e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002e92:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002e94:	d3fb      	bcc.n	8002e8e <FillZerobss>
  bx lr
 8002e96:	4770      	bx	lr

08002e98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e98:	480c      	ldr	r0, [pc, #48]	@ (8002ecc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e9a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e9c:	f7ff ff9e 	bl	8002ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002ea0:	480b      	ldr	r0, [pc, #44]	@ (8002ed0 <LoopForever+0x6>)
 8002ea2:	490c      	ldr	r1, [pc, #48]	@ (8002ed4 <LoopForever+0xa>)
 8002ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8002ed8 <LoopForever+0xe>)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f7ff ffed 	bl	8002e86 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002eac:	480b      	ldr	r0, [pc, #44]	@ (8002edc <LoopForever+0x12>)
 8002eae:	490c      	ldr	r1, [pc, #48]	@ (8002ee0 <LoopForever+0x16>)
 8002eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8002ee4 <LoopForever+0x1a>)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f7ff ffe7 	bl	8002e86 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002eb8:	480b      	ldr	r0, [pc, #44]	@ (8002ee8 <LoopForever+0x1e>)
 8002eba:	490c      	ldr	r1, [pc, #48]	@ (8002eec <LoopForever+0x22>)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f7ff ffe8 	bl	8002e92 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ec2:	f00e ffb7 	bl	8011e34 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002ec6:	f7ff fa63 	bl	8002390 <main>

08002eca <LoopForever>:

LoopForever:
  b LoopForever
 8002eca:	e7fe      	b.n	8002eca <LoopForever>
  ldr   r0, =_estack
 8002ecc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002ed0:	20000008 	.word	0x20000008
 8002ed4:	20000184 	.word	0x20000184
 8002ed8:	08014214 	.word	0x08014214
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002edc:	200301e4 	.word	0x200301e4
 8002ee0:	20030a67 	.word	0x20030a67
 8002ee4:	080143d6 	.word	0x080143d6
  INIT_BSS _sbss, _ebss
 8002ee8:	200001d0 	.word	0x200001d0
 8002eec:	200021d4 	.word	0x200021d4

08002ef0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ef0:	e7fe      	b.n	8002ef0 <ADC1_IRQHandler>
	...

08002ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002efe:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <HAL_Init+0x3c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a0b      	ldr	r2, [pc, #44]	@ (8002f30 <HAL_Init+0x3c>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f0a:	2003      	movs	r0, #3
 8002f0c:	f000 f9b4 	bl	8003278 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f10:	200f      	movs	r0, #15
 8002f12:	f000 f80f 	bl	8002f34 <HAL_InitTick>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	71fb      	strb	r3, [r7, #7]
 8002f20:	e001      	b.n	8002f26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f22:	f7ff fe5e 	bl	8002be2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f26:	79fb      	ldrb	r3, [r7, #7]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	58004000 	.word	0x58004000

08002f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002f40:	4b17      	ldr	r3, [pc, #92]	@ (8002fa0 <HAL_InitTick+0x6c>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d024      	beq.n	8002f92 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f48:	f003 fd38 	bl	80069bc <HAL_RCC_GetHCLKFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b14      	ldr	r3, [pc, #80]	@ (8002fa0 <HAL_InitTick+0x6c>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	4619      	mov	r1, r3
 8002f54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f58:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 f9ca 	bl	80032fa <HAL_SYSTICK_Config>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10f      	bne.n	8002f8c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b0f      	cmp	r3, #15
 8002f70:	d809      	bhi.n	8002f86 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f72:	2200      	movs	r2, #0
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7a:	f000 f988 	bl	800328e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f7e:	4a09      	ldr	r2, [pc, #36]	@ (8002fa4 <HAL_InitTick+0x70>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	e007      	b.n	8002f96 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	e004      	b.n	8002f96 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
 8002f90:	e001      	b.n	8002f96 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000010 	.word	0x20000010
 8002fa4:	2000000c 	.word	0x2000000c

08002fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fac:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <HAL_IncTick+0x20>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b06      	ldr	r3, [pc, #24]	@ (8002fcc <HAL_IncTick+0x24>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <HAL_IncTick+0x24>)
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000010 	.word	0x20000010
 8002fcc:	200004d8 	.word	0x200004d8

08002fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	@ (8002fe4 <HAL_GetTick+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	200004d8 	.word	0x200004d8

08002fe8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002fec:	4b03      	ldr	r3, [pc, #12]	@ (8002ffc <HAL_GetTickPrio+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	2000000c 	.word	0x2000000c

08003000 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003004:	4b03      	ldr	r3, [pc, #12]	@ (8003014 <HAL_GetTickFreq+0x14>)
 8003006:	781b      	ldrb	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000010 	.word	0x20000010

08003018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003028:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003034:	4013      	ands	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003040:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304a:	4a04      	ldr	r2, [pc, #16]	@ (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	60d3      	str	r3, [r2, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003064:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <__NVIC_GetPriorityGrouping+0x18>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	f003 0307 	and.w	r3, r3, #7
}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	2b00      	cmp	r3, #0
 800308c:	db0b      	blt.n	80030a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	f003 021f 	and.w	r2, r3, #31
 8003094:	4907      	ldr	r1, [pc, #28]	@ (80030b4 <__NVIC_EnableIRQ+0x38>)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2001      	movs	r0, #1
 800309e:	fa00 f202 	lsl.w	r2, r0, r2
 80030a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	e000e100 	.word	0xe000e100

080030b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	db12      	blt.n	80030f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	f003 021f 	and.w	r2, r3, #31
 80030d0:	490a      	ldr	r1, [pc, #40]	@ (80030fc <__NVIC_DisableIRQ+0x44>)
 80030d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	2001      	movs	r0, #1
 80030da:	fa00 f202 	lsl.w	r2, r0, r2
 80030de:	3320      	adds	r3, #32
 80030e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80030e4:	f3bf 8f4f 	dsb	sy
}
 80030e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030ea:	f3bf 8f6f 	isb	sy
}
 80030ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000e100 	.word	0xe000e100

08003100 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	2b00      	cmp	r3, #0
 8003110:	db0c      	blt.n	800312c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	4907      	ldr	r1, [pc, #28]	@ (8003138 <__NVIC_SetPendingIRQ+0x38>)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	2001      	movs	r0, #1
 8003122:	fa00 f202 	lsl.w	r2, r0, r2
 8003126:	3340      	adds	r3, #64	@ 0x40
 8003128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000e100 	.word	0xe000e100

0800313c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	2b00      	cmp	r3, #0
 800314c:	db0c      	blt.n	8003168 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	f003 021f 	and.w	r2, r3, #31
 8003154:	4907      	ldr	r1, [pc, #28]	@ (8003174 <__NVIC_ClearPendingIRQ+0x38>)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2001      	movs	r0, #1
 800315e:	fa00 f202 	lsl.w	r2, r0, r2
 8003162:	3360      	adds	r3, #96	@ 0x60
 8003164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000e100 	.word	0xe000e100

08003178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	6039      	str	r1, [r7, #0]
 8003182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	2b00      	cmp	r3, #0
 800318a:	db0a      	blt.n	80031a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	490c      	ldr	r1, [pc, #48]	@ (80031c4 <__NVIC_SetPriority+0x4c>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	0112      	lsls	r2, r2, #4
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	440b      	add	r3, r1
 800319c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a0:	e00a      	b.n	80031b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	4908      	ldr	r1, [pc, #32]	@ (80031c8 <__NVIC_SetPriority+0x50>)
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	3b04      	subs	r3, #4
 80031b0:	0112      	lsls	r2, r2, #4
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	440b      	add	r3, r1
 80031b6:	761a      	strb	r2, [r3, #24]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000e100 	.word	0xe000e100
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b089      	sub	sp, #36	@ 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f1c3 0307 	rsb	r3, r3, #7
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	bf28      	it	cs
 80031ea:	2304      	movcs	r3, #4
 80031ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3304      	adds	r3, #4
 80031f2:	2b06      	cmp	r3, #6
 80031f4:	d902      	bls.n	80031fc <NVIC_EncodePriority+0x30>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3b03      	subs	r3, #3
 80031fa:	e000      	b.n	80031fe <NVIC_EncodePriority+0x32>
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003200:	f04f 32ff 	mov.w	r2, #4294967295
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43da      	mvns	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	401a      	ands	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003214:	f04f 31ff 	mov.w	r1, #4294967295
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	43d9      	mvns	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	4313      	orrs	r3, r2
         );
}
 8003226:	4618      	mov	r0, r3
 8003228:	3724      	adds	r7, #36	@ 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3b01      	subs	r3, #1
 8003240:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003244:	d301      	bcc.n	800324a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003246:	2301      	movs	r3, #1
 8003248:	e00f      	b.n	800326a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800324a:	4a0a      	ldr	r2, [pc, #40]	@ (8003274 <SysTick_Config+0x40>)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3b01      	subs	r3, #1
 8003250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003252:	210f      	movs	r1, #15
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	f7ff ff8e 	bl	8003178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800325c:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <SysTick_Config+0x40>)
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003262:	4b04      	ldr	r3, [pc, #16]	@ (8003274 <SysTick_Config+0x40>)
 8003264:	2207      	movs	r2, #7
 8003266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	e000e010 	.word	0xe000e010

08003278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff fec9 	bl	8003018 <__NVIC_SetPriorityGrouping>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b086      	sub	sp, #24
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800329c:	f7ff fee0 	bl	8003060 <__NVIC_GetPriorityGrouping>
 80032a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	6978      	ldr	r0, [r7, #20]
 80032a8:	f7ff ff90 	bl	80031cc <NVIC_EncodePriority>
 80032ac:	4602      	mov	r2, r0
 80032ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff5f 	bl	8003178 <__NVIC_SetPriority>
}
 80032ba:	bf00      	nop
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fed3 	bl	800307c <__NVIC_EnableIRQ>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	4603      	mov	r3, r0
 80032e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80032e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fee3 	bl	80030b8 <__NVIC_DisableIRQ>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ff96 	bl	8003234 <SysTick_Config>
 8003308:	4603      	mov	r3, r0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	4603      	mov	r3, r0
 800331a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800331c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff feed 	bl	8003100 <__NVIC_SetPendingIRQ>
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	4603      	mov	r3, r0
 8003336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fefd 	bl	800313c <__NVIC_ClearPendingIRQ>
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b086      	sub	sp, #24
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003358:	2300      	movs	r3, #0
 800335a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_DMA_Start_IT+0x20>
 8003366:	2302      	movs	r3, #2
 8003368:	e066      	b.n	8003438 <HAL_DMA_Start_IT+0xee>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d155      	bne.n	800342a <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2202      	movs	r2, #2
 8003382:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f9b9 	bl	800371a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 020e 	orr.w	r2, r2, #14
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e00f      	b.n	80033e2 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0204 	bic.w	r2, r2, #4
 80033d0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 020a 	orr.w	r2, r2, #10
 80033e0:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d007      	beq.n	8003400 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033fe:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003404:	2b00      	cmp	r3, #0
 8003406:	d007      	beq.n	8003418 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003412:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003416:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	e005      	b.n	8003436 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003432:	2302      	movs	r3, #2
 8003434:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003436:	7dfb      	ldrb	r3, [r7, #23]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e04f      	b.n	80034f2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d008      	beq.n	8003470 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2204      	movs	r2, #4
 8003462:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e040      	b.n	80034f2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 020e 	bic.w	r2, r2, #14
 800347e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800348e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0201 	bic.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a4:	f003 021c 	and.w	r2, r3, #28
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	2101      	movs	r1, #1
 80034ae:	fa01 f202 	lsl.w	r2, r1, r2
 80034b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00c      	beq.n	80034e0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d005      	beq.n	8003522 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2204      	movs	r2, #4
 800351a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
 8003520:	e047      	b.n	80035b2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 020e 	bic.w	r2, r2, #14
 8003530:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800354c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003550:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003556:	f003 021c 	and.w	r2, r3, #28
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355e:	2101      	movs	r1, #1
 8003560:	fa01 f202 	lsl.w	r2, r1, r2
 8003564:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800356e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00c      	beq.n	8003592 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003582:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003586:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003590:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	4798      	blx	r3
    }
  }
  return status;
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d8:	f003 031c 	and.w	r3, r3, #28
 80035dc:	2204      	movs	r2, #4
 80035de:	409a      	lsls	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d026      	beq.n	8003636 <HAL_DMA_IRQHandler+0x7a>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d021      	beq.n	8003636 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d107      	bne.n	8003610 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0204 	bic.w	r2, r2, #4
 800360e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003614:	f003 021c 	and.w	r2, r3, #28
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	2104      	movs	r1, #4
 800361e:	fa01 f202 	lsl.w	r2, r1, r2
 8003622:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	2b00      	cmp	r3, #0
 800362a:	d071      	beq.n	8003710 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003634:	e06c      	b.n	8003710 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363a:	f003 031c 	and.w	r3, r3, #28
 800363e:	2202      	movs	r2, #2
 8003640:	409a      	lsls	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d02e      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xec>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d029      	beq.n	80036a8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10b      	bne.n	800367a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 020a 	bic.w	r2, r2, #10
 8003670:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367e:	f003 021c 	and.w	r2, r3, #28
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	2102      	movs	r1, #2
 8003688:	fa01 f202 	lsl.w	r2, r1, r2
 800368c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d038      	beq.n	8003710 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80036a6:	e033      	b.n	8003710 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ac:	f003 031c 	and.w	r3, r3, #28
 80036b0:	2208      	movs	r2, #8
 80036b2:	409a      	lsls	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d02a      	beq.n	8003712 <HAL_DMA_IRQHandler+0x156>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d025      	beq.n	8003712 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 020e 	bic.w	r2, r2, #14
 80036d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036da:	f003 021c 	and.w	r2, r3, #28
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e2:	2101      	movs	r1, #1
 80036e4:	fa01 f202 	lsl.w	r2, r1, r2
 80036e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003704:	2b00      	cmp	r3, #0
 8003706:	d004      	beq.n	8003712 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003710:	bf00      	nop
 8003712:	bf00      	nop
}
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003730:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003736:	2b00      	cmp	r3, #0
 8003738:	d004      	beq.n	8003744 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003742:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003748:	f003 021c 	and.w	r2, r3, #28
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	2101      	movs	r1, #1
 8003752:	fa01 f202 	lsl.w	r2, r1, r2
 8003756:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b10      	cmp	r3, #16
 8003766:	d108      	bne.n	800377a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003778:	e007      	b.n	800378a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	60da      	str	r2, [r3, #12]
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037a6:	e14c      	b.n	8003a42 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	2101      	movs	r1, #1
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	4013      	ands	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 813e 	beq.w	8003a3c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d005      	beq.n	80037d8 <HAL_GPIO_Init+0x40>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d130      	bne.n	800383a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	2203      	movs	r2, #3
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800380e:	2201      	movs	r2, #1
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	f003 0201 	and.w	r2, r3, #1
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	2b03      	cmp	r3, #3
 8003844:	d017      	beq.n	8003876 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	2203      	movs	r2, #3
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d123      	bne.n	80038ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	08da      	lsrs	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3208      	adds	r2, #8
 800388a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800388e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	08da      	lsrs	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3208      	adds	r2, #8
 80038c4:	6939      	ldr	r1, [r7, #16]
 80038c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	2203      	movs	r2, #3
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 0203 	and.w	r2, r3, #3
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8098 	beq.w	8003a3c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800390c:	4a54      	ldr	r2, [pc, #336]	@ (8003a60 <HAL_GPIO_Init+0x2c8>)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	3302      	adds	r3, #2
 8003914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003918:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f003 0303 	and.w	r3, r3, #3
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	220f      	movs	r2, #15
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4013      	ands	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003936:	d019      	beq.n	800396c <HAL_GPIO_Init+0x1d4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a4a      	ldr	r2, [pc, #296]	@ (8003a64 <HAL_GPIO_Init+0x2cc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d013      	beq.n	8003968 <HAL_GPIO_Init+0x1d0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a49      	ldr	r2, [pc, #292]	@ (8003a68 <HAL_GPIO_Init+0x2d0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d00d      	beq.n	8003964 <HAL_GPIO_Init+0x1cc>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a48      	ldr	r2, [pc, #288]	@ (8003a6c <HAL_GPIO_Init+0x2d4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d007      	beq.n	8003960 <HAL_GPIO_Init+0x1c8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a47      	ldr	r2, [pc, #284]	@ (8003a70 <HAL_GPIO_Init+0x2d8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d101      	bne.n	800395c <HAL_GPIO_Init+0x1c4>
 8003958:	2304      	movs	r3, #4
 800395a:	e008      	b.n	800396e <HAL_GPIO_Init+0x1d6>
 800395c:	2307      	movs	r3, #7
 800395e:	e006      	b.n	800396e <HAL_GPIO_Init+0x1d6>
 8003960:	2303      	movs	r3, #3
 8003962:	e004      	b.n	800396e <HAL_GPIO_Init+0x1d6>
 8003964:	2302      	movs	r3, #2
 8003966:	e002      	b.n	800396e <HAL_GPIO_Init+0x1d6>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_GPIO_Init+0x1d6>
 800396c:	2300      	movs	r3, #0
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	f002 0203 	and.w	r2, r2, #3
 8003974:	0092      	lsls	r2, r2, #2
 8003976:	4093      	lsls	r3, r2
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800397e:	4938      	ldr	r1, [pc, #224]	@ (8003a60 <HAL_GPIO_Init+0x2c8>)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	3302      	adds	r3, #2
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800398c:	4b39      	ldr	r3, [pc, #228]	@ (8003a74 <HAL_GPIO_Init+0x2dc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	43db      	mvns	r3, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039b0:	4a30      	ldr	r2, [pc, #192]	@ (8003a74 <HAL_GPIO_Init+0x2dc>)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a74 <HAL_GPIO_Init+0x2dc>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	43db      	mvns	r3, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4013      	ands	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039da:	4a26      	ldr	r2, [pc, #152]	@ (8003a74 <HAL_GPIO_Init+0x2dc>)
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80039e0:	4b24      	ldr	r3, [pc, #144]	@ (8003a74 <HAL_GPIO_Init+0x2dc>)
 80039e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4013      	ands	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a06:	4a1b      	ldr	r2, [pc, #108]	@ (8003a74 <HAL_GPIO_Init+0x2dc>)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003a0e:	4b19      	ldr	r3, [pc, #100]	@ (8003a74 <HAL_GPIO_Init+0x2dc>)
 8003a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a34:	4a0f      	ldr	r2, [pc, #60]	@ (8003a74 <HAL_GPIO_Init+0x2dc>)
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f47f aeab 	bne.w	80037a8 <HAL_GPIO_Init+0x10>
  }
}
 8003a52:	bf00      	nop
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40010000 	.word	0x40010000
 8003a64:	48000400 	.word	0x48000400
 8003a68:	48000800 	.word	0x48000800
 8003a6c:	48000c00 	.word	0x48000c00
 8003a70:	48001000 	.word	0x48001000
 8003a74:	58000800 	.word	0x58000800

08003a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	807b      	strh	r3, [r7, #2]
 8003a84:	4613      	mov	r3, r2
 8003a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a88:	787b      	ldrb	r3, [r7, #1]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a8e:	887a      	ldrh	r2, [r7, #2]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a94:	e002      	b.n	8003a9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a96:	887a      	ldrh	r2, [r7, #2]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003aae:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <HAL_HSEM_IRQHandler+0x30>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003ab4:	4b08      	ldr	r3, [pc, #32]	@ (8003ad8 <HAL_HSEM_IRQHandler+0x30>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	43db      	mvns	r3, r3
 8003abc:	4906      	ldr	r1, [pc, #24]	@ (8003ad8 <HAL_HSEM_IRQHandler+0x30>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003ac2:	4a05      	ldr	r2, [pc, #20]	@ (8003ad8 <HAL_HSEM_IRQHandler+0x30>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f807 	bl	8003adc <HAL_HSEM_FreeCallback>
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	58001500 	.word	0x58001500

08003adc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e08d      	b.n	8003c1e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fe fb72 	bl	8002200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2224      	movs	r2, #36	@ 0x24
 8003b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0201 	bic.w	r2, r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	e006      	b.n	8003b78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d108      	bne.n	8003b92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	e007      	b.n	8003ba2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ba0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69d9      	ldr	r1, [r3, #28]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d138      	bne.n	8003cae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e032      	b.n	8003cb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2224      	movs	r2, #36	@ 0x24
 8003c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0201 	bic.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c78:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6819      	ldr	r1, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0201 	orr.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e000      	b.n	8003cb0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
  }
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	d139      	bne.n	8003d46 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e033      	b.n	8003d48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2224      	movs	r2, #36	@ 0x24
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d0e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	021b      	lsls	r3, r3, #8
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0201 	orr.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d01e      	beq.n	8003da4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003d66:	4b13      	ldr	r3, [pc, #76]	@ (8003db4 <HAL_IPCC_Init+0x60>)
 8003d68:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fe fab8 	bl	80022ec <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003d7c:	68b8      	ldr	r0, [r7, #8]
 8003d7e:	f000 f85b 	bl	8003e38 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f82c 	bl	8003dec <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8003da2:	e001      	b.n	8003da8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	58000c00 	.word	0x58000c00

08003db8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	e00f      	b.n	8003e1a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	4a0b      	ldr	r2, [pc, #44]	@ (8003e30 <IPCC_SetDefaultCallbacks+0x44>)
 8003e04:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3306      	adds	r3, #6
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	4a08      	ldr	r2, [pc, #32]	@ (8003e34 <IPCC_SetDefaultCallbacks+0x48>)
 8003e12:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3301      	adds	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d9ec      	bls.n	8003dfa <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	08003db9 	.word	0x08003db9
 8003e34:	08003dd3 	.word	0x08003dd3

08003e38 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8003e4c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	223f      	movs	r2, #63	@ 0x3f
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e0c0      	b.n	8003ff4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f00c ffc6 	bl	8010e18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2203      	movs	r2, #3
 8003e90:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f004 fd5d 	bl	8008958 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	e03e      	b.n	8003f22 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3311      	adds	r3, #17
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003eb8:	7bfa      	ldrb	r2, [r7, #15]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3310      	adds	r3, #16
 8003ec8:	7bfa      	ldrb	r2, [r7, #15]
 8003eca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	440b      	add	r3, r1
 8003eda:	3313      	adds	r3, #19
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	440b      	add	r3, r1
 8003eee:	3320      	adds	r3, #32
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ef4:	7bfa      	ldrb	r2, [r7, #15]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	440b      	add	r3, r1
 8003f02:	3324      	adds	r3, #36	@ 0x24
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	440b      	add	r3, r1
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	73fb      	strb	r3, [r7, #15]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	791b      	ldrb	r3, [r3, #4]
 8003f26:	7bfa      	ldrb	r2, [r7, #15]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d3bb      	bcc.n	8003ea4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	73fb      	strb	r3, [r7, #15]
 8003f30:	e044      	b.n	8003fbc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f32:	7bfa      	ldrb	r2, [r7, #15]
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	440b      	add	r3, r1
 8003f40:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003f44:	2200      	movs	r2, #0
 8003f46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	440b      	add	r3, r1
 8003f56:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003f5a:	7bfa      	ldrb	r2, [r7, #15]
 8003f5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f5e:	7bfa      	ldrb	r2, [r7, #15]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	440b      	add	r3, r1
 8003f6c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f74:	7bfa      	ldrb	r2, [r7, #15]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	440b      	add	r3, r1
 8003f82:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	440b      	add	r3, r1
 8003f98:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fa0:	7bfa      	ldrb	r2, [r7, #15]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	440b      	add	r3, r1
 8003fae:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	791b      	ldrb	r3, [r3, #4]
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d3b5      	bcc.n	8003f32 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003fd2:	f004 fcdc 	bl	800898e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	7a9b      	ldrb	r3, [r3, #10]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d102      	bne.n	8003ff2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f001 fc0e 	bl	800580e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_PCD_Start+0x16>
 800400e:	2302      	movs	r3, #2
 8004010:	e012      	b.n	8004038 <HAL_PCD_Start+0x3c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f004 fc83 	bl	800892a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f006 fa61 	bl	800a4f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f006 fa66 	bl	800a51e <USB_ReadInterrupts>
 8004052:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fb06 	bl	8004670 <PCD_EP_ISR_Handler>

    return;
 8004064:	e110      	b.n	8004288 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d013      	beq.n	8004098 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004078:	b29a      	uxth	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004082:	b292      	uxth	r2, r2
 8004084:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f00c ff78 	bl	8010f7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800408e:	2100      	movs	r1, #0
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f8fc 	bl	800428e <HAL_PCD_SetAddress>

    return;
 8004096:	e0f7      	b.n	8004288 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00c      	beq.n	80040bc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040b4:	b292      	uxth	r2, r2
 80040b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80040ba:	e0e5      	b.n	8004288 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00c      	beq.n	80040e0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040d8:	b292      	uxth	r2, r2
 80040da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80040de:	e0d3      	b.n	8004288 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d034      	beq.n	8004154 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0204 	bic.w	r2, r2, #4
 80040fc:	b292      	uxth	r2, r2
 80040fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800410a:	b29a      	uxth	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0208 	bic.w	r2, r2, #8
 8004114:	b292      	uxth	r2, r2
 8004116:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004120:	2b01      	cmp	r3, #1
 8004122:	d107      	bne.n	8004134 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800412c:	2100      	movs	r1, #0
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f00d f91a 	bl	8011368 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f00c ff5b 	bl	8010ff0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004142:	b29a      	uxth	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800414c:	b292      	uxth	r2, r2
 800414e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004152:	e099      	b.n	8004288 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800415a:	2b00      	cmp	r3, #0
 800415c:	d027      	beq.n	80041ae <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0208 	orr.w	r2, r2, #8
 8004170:	b292      	uxth	r2, r2
 8004172:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004188:	b292      	uxth	r2, r2
 800418a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0204 	orr.w	r2, r2, #4
 80041a0:	b292      	uxth	r2, r2
 80041a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f00c ff08 	bl	8010fbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80041ac:	e06c      	b.n	8004288 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d040      	beq.n	800423a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041ca:	b292      	uxth	r2, r2
 80041cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d12b      	bne.n	8004232 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0204 	orr.w	r2, r2, #4
 80041ec:	b292      	uxth	r2, r2
 80041ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0208 	orr.w	r2, r2, #8
 8004204:	b292      	uxth	r2, r2
 8004206:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800421a:	b29b      	uxth	r3, r3
 800421c:	089b      	lsrs	r3, r3, #2
 800421e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004228:	2101      	movs	r1, #1
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f00d f89c 	bl	8011368 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004230:	e02a      	b.n	8004288 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f00c fec2 	bl	8010fbc <HAL_PCD_SuspendCallback>
    return;
 8004238:	e026      	b.n	8004288 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00f      	beq.n	8004264 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800424c:	b29a      	uxth	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004256:	b292      	uxth	r2, r2
 8004258:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f00c fe80 	bl	8010f62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004262:	e011      	b.n	8004288 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00c      	beq.n	8004288 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004276:	b29a      	uxth	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004280:	b292      	uxth	r2, r2
 8004282:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004286:	bf00      	nop
  }
}
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b082      	sub	sp, #8
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	460b      	mov	r3, r1
 8004298:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_PCD_SetAddress+0x1a>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e012      	b.n	80042ce <HAL_PCD_SetAddress+0x40>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	78fa      	ldrb	r2, [r7, #3]
 80042b4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	78fa      	ldrb	r2, [r7, #3]
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f006 f902 	bl	800a4c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	4608      	mov	r0, r1
 80042e0:	4611      	mov	r1, r2
 80042e2:	461a      	mov	r2, r3
 80042e4:	4603      	mov	r3, r0
 80042e6:	70fb      	strb	r3, [r7, #3]
 80042e8:	460b      	mov	r3, r1
 80042ea:	803b      	strh	r3, [r7, #0]
 80042ec:	4613      	mov	r3, r2
 80042ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	da0e      	bge.n	800431a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	f003 0207 	and.w	r2, r3, #7
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	3310      	adds	r3, #16
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4413      	add	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	705a      	strb	r2, [r3, #1]
 8004318:	e00e      	b.n	8004338 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	f003 0207 	and.w	r2, r3, #7
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4413      	add	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	b2da      	uxtb	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004344:	883b      	ldrh	r3, [r7, #0]
 8004346:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	78ba      	ldrb	r2, [r7, #2]
 8004352:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004354:	78bb      	ldrb	r3, [r7, #2]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d102      	bne.n	8004360 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_PCD_EP_Open+0x98>
 800436a:	2302      	movs	r3, #2
 800436c:	e00e      	b.n	800438c <HAL_PCD_EP_Open+0xb6>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	4618      	mov	r0, r3
 800437e:	f004 fb25 	bl	80089cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800438a:	7afb      	ldrb	r3, [r7, #11]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	da0e      	bge.n	80043c6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	f003 0207 	and.w	r2, r3, #7
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	3310      	adds	r3, #16
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	4413      	add	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	705a      	strb	r2, [r3, #1]
 80043c4:	e00e      	b.n	80043e4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	f003 0207 	and.w	r2, r3, #7
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	4413      	add	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_PCD_EP_Close+0x6a>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e00e      	b.n	800441c <HAL_PCD_EP_Close+0x88>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68f9      	ldr	r1, [r7, #12]
 800440c:	4618      	mov	r0, r3
 800440e:	f004 ffc5 	bl	800939c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	460b      	mov	r3, r1
 8004432:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004434:	7afb      	ldrb	r3, [r7, #11]
 8004436:	f003 0207 	and.w	r2, r3, #7
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4413      	add	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2200      	movs	r2, #0
 800445c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2200      	movs	r2, #0
 8004462:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004464:	7afb      	ldrb	r3, [r7, #11]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	b2da      	uxtb	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6979      	ldr	r1, [r7, #20]
 8004476:	4618      	mov	r0, r3
 8004478:	f005 f97d 	bl	8009776 <USB_EPStartXfer>

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	460b      	mov	r3, r1
 8004490:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	f003 0207 	and.w	r2, r3, #7
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	440b      	add	r3, r1
 80044a4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80044a8:	681b      	ldr	r3, [r3, #0]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b086      	sub	sp, #24
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
 80044c2:	460b      	mov	r3, r1
 80044c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044c6:	7afb      	ldrb	r3, [r7, #11]
 80044c8:	f003 0207 	and.w	r2, r3, #7
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	3310      	adds	r3, #16
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4413      	add	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2200      	movs	r2, #0
 80044fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2201      	movs	r2, #1
 8004500:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004502:	7afb      	ldrb	r3, [r7, #11]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	b2da      	uxtb	r2, r3
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6979      	ldr	r1, [r7, #20]
 8004514:	4618      	mov	r0, r3
 8004516:	f005 f92e 	bl	8009776 <USB_EPStartXfer>

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	460b      	mov	r3, r1
 800452e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	7912      	ldrb	r2, [r2, #4]
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e03e      	b.n	80045c0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004546:	2b00      	cmp	r3, #0
 8004548:	da0e      	bge.n	8004568 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	f003 0207 	and.w	r2, r3, #7
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	3310      	adds	r3, #16
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4413      	add	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	705a      	strb	r2, [r3, #1]
 8004566:	e00c      	b.n	8004582 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004568:	78fa      	ldrb	r2, [r7, #3]
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	4413      	add	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	b2da      	uxtb	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_PCD_EP_SetStall+0x7e>
 800459e:	2302      	movs	r3, #2
 80045a0:	e00e      	b.n	80045c0 <HAL_PCD_EP_SetStall+0x9c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68f9      	ldr	r1, [r7, #12]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f005 fe8f 	bl	800a2d4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	7912      	ldrb	r2, [r2, #4]
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e040      	b.n	8004668 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	da0e      	bge.n	800460c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ee:	78fb      	ldrb	r3, [r7, #3]
 80045f0:	f003 0207 	and.w	r2, r3, #7
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	3310      	adds	r3, #16
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	4413      	add	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2201      	movs	r2, #1
 8004608:	705a      	strb	r2, [r3, #1]
 800460a:	e00e      	b.n	800462a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	f003 0207 	and.w	r2, r3, #7
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4413      	add	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	b2da      	uxtb	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_PCD_EP_ClrStall+0x82>
 8004646:	2302      	movs	r3, #2
 8004648:	e00e      	b.n	8004668 <HAL_PCD_EP_ClrStall+0xa0>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	4618      	mov	r0, r3
 800465a:	f005 fe8c 	bl	800a376 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b092      	sub	sp, #72	@ 0x48
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004678:	e333      	b.n	8004ce2 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004682:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004684:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8004690:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004694:	2b00      	cmp	r3, #0
 8004696:	f040 8108 	bne.w	80048aa <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800469a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d14c      	bne.n	800473e <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80046b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b4:	813b      	strh	r3, [r7, #8]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	893b      	ldrh	r3, [r7, #8]
 80046bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3310      	adds	r3, #16
 80046cc:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	461a      	mov	r2, r3
 80046da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	4413      	add	r3, r2
 80046e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80046f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046f4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80046f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046f8:	695a      	ldr	r2, [r3, #20]
 80046fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	441a      	add	r2, r3
 8004700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004702:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004704:	2100      	movs	r1, #0
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f00c fc11 	bl	8010f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	7b1b      	ldrb	r3, [r3, #12]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 82e5 	beq.w	8004ce2 <PCD_EP_ISR_Handler+0x672>
 8004718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	2b00      	cmp	r3, #0
 800471e:	f040 82e0 	bne.w	8004ce2 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	7b1b      	ldrb	r3, [r3, #12]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800472c:	b2da      	uxtb	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	731a      	strb	r2, [r3, #12]
 800473c:	e2d1      	b.n	8004ce2 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004744:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800474e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004754:	2b00      	cmp	r3, #0
 8004756:	d032      	beq.n	80047be <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004760:	b29b      	uxth	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	4413      	add	r3, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6812      	ldr	r2, [r2, #0]
 8004770:	4413      	add	r3, r2
 8004772:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800477c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800477e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800478a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800478c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800478e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004790:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004792:	b29b      	uxth	r3, r3
 8004794:	f005 ff16 	bl	800a5c4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29a      	uxth	r2, r3
 80047a0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80047a4:	4013      	ands	r3, r2
 80047a6:	817b      	strh	r3, [r7, #10]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	897a      	ldrh	r2, [r7, #10]
 80047ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80047b2:	b292      	uxth	r2, r2
 80047b4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f00c fb8c 	bl	8010ed4 <HAL_PCD_SetupStageCallback>
 80047bc:	e291      	b.n	8004ce2 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80047be:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f280 828d 	bge.w	8004ce2 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80047d4:	4013      	ands	r3, r2
 80047d6:	81fb      	strh	r3, [r7, #14]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	89fa      	ldrh	r2, [r7, #14]
 80047de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80047e2:	b292      	uxth	r2, r2
 80047e4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	4413      	add	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	4413      	add	r3, r2
 8004800:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800480a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800480c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800480e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d019      	beq.n	800484a <PCD_EP_ISR_Handler+0x1da>
 8004816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d015      	beq.n	800484a <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004824:	6959      	ldr	r1, [r3, #20]
 8004826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004828:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800482a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800482c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800482e:	b29b      	uxth	r3, r3
 8004830:	f005 fec8 	bl	800a5c4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004836:	695a      	ldr	r2, [r3, #20]
 8004838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	441a      	add	r2, r3
 800483e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004840:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004842:	2100      	movs	r1, #0
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f00c fb57 	bl	8010ef8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004852:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004858:	2b00      	cmp	r3, #0
 800485a:	f040 8242 	bne.w	8004ce2 <PCD_EP_ISR_Handler+0x672>
 800485e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004860:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004864:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004868:	f000 823b 	beq.w	8004ce2 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	b29b      	uxth	r3, r3
 8004874:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487c:	81bb      	strh	r3, [r7, #12]
 800487e:	89bb      	ldrh	r3, [r7, #12]
 8004880:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004884:	81bb      	strh	r3, [r7, #12]
 8004886:	89bb      	ldrh	r3, [r7, #12]
 8004888:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800488c:	81bb      	strh	r3, [r7, #12]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	89bb      	ldrh	r3, [r7, #12]
 8004894:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004898:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800489c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	8013      	strh	r3, [r2, #0]
 80048a8:	e21b      	b.n	8004ce2 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048bc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f280 80f1 	bge.w	8004aa8 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80048dc:	4013      	ands	r3, r2
 80048de:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80048f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048f4:	b292      	uxth	r2, r2
 80048f6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80048f8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	4413      	add	r3, r2
 800490c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800490e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004910:	7b1b      	ldrb	r3, [r3, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d123      	bne.n	800495e <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800491e:	b29b      	uxth	r3, r3
 8004920:	461a      	mov	r2, r3
 8004922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	4413      	add	r3, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6812      	ldr	r2, [r2, #0]
 800492e:	4413      	add	r3, r2
 8004930:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800493a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800493e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 808b 	beq.w	8004a5e <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800494e:	6959      	ldr	r1, [r3, #20]
 8004950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004952:	88da      	ldrh	r2, [r3, #6]
 8004954:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004958:	f005 fe34 	bl	800a5c4 <USB_ReadPMA>
 800495c:	e07f      	b.n	8004a5e <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800495e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004960:	78db      	ldrb	r3, [r3, #3]
 8004962:	2b02      	cmp	r3, #2
 8004964:	d109      	bne.n	800497a <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004966:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004968:	461a      	mov	r2, r3
 800496a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f9c6 	bl	8004cfe <HAL_PCD_EP_DB_Receive>
 8004972:	4603      	mov	r3, r0
 8004974:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004978:	e071      	b.n	8004a5e <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	b29b      	uxth	r3, r3
 800498c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004994:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	441a      	add	r2, r3
 80049a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80049a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d022      	beq.n	8004a1a <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049dc:	b29b      	uxth	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4413      	add	r3, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	4413      	add	r3, r2
 80049ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049f8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80049fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d02c      	beq.n	8004a5e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a0a:	6959      	ldr	r1, [r3, #20]
 8004a0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a0e:	891a      	ldrh	r2, [r3, #8]
 8004a10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a14:	f005 fdd6 	bl	800a5c4 <USB_ReadPMA>
 8004a18:	e021      	b.n	8004a5e <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	4413      	add	r3, r2
 8004a34:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a38:	881b      	ldrh	r3, [r3, #0]
 8004a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a3e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004a42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a50:	6959      	ldr	r1, [r3, #20]
 8004a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a54:	895a      	ldrh	r2, [r3, #10]
 8004a56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a5a:	f005 fdb3 	bl	800a5c4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a60:	69da      	ldr	r2, [r3, #28]
 8004a62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a66:	441a      	add	r2, r3
 8004a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a74:	441a      	add	r2, r3
 8004a76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a78:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <PCD_EP_ISR_Handler+0x41e>
 8004a82:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8004a86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d206      	bcs.n	8004a9c <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f00c fa2f 	bl	8010ef8 <HAL_PCD_DataOutStageCallback>
 8004a9a:	e005      	b.n	8004aa8 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f004 fe67 	bl	8009776 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004aa8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 8117 	beq.w	8004ce2 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8004ab4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	3310      	adds	r3, #16
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ae2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	441a      	add	r2, r3
 8004af2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004b00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b02:	78db      	ldrb	r3, [r3, #3]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	f040 80a1 	bne.w	8004c4c <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8004b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b12:	7b1b      	ldrb	r3, [r3, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8092 	beq.w	8004c3e <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b1a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d046      	beq.n	8004bb2 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d126      	bne.n	8004b7a <PCD_EP_ISR_Handler+0x50a>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	4413      	add	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	00da      	lsls	r2, r3, #3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	801a      	strh	r2, [r3, #0]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	801a      	strh	r2, [r3, #0]
 8004b78:	e061      	b.n	8004c3e <PCD_EP_ISR_Handler+0x5ce>
 8004b7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b7c:	785b      	ldrb	r3, [r3, #1]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d15d      	bne.n	8004c3e <PCD_EP_ISR_Handler+0x5ce>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	61fb      	str	r3, [r7, #28]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	00da      	lsls	r2, r3, #3
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2200      	movs	r2, #0
 8004bae:	801a      	strh	r2, [r3, #0]
 8004bb0:	e045      	b.n	8004c3e <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d126      	bne.n	8004c0e <PCD_EP_ISR_Handler+0x59e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	4413      	add	r3, r2
 8004bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	00da      	lsls	r2, r3, #3
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	4413      	add	r3, r2
 8004be2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004be6:	623b      	str	r3, [r7, #32]
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	801a      	strh	r2, [r3, #0]
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	801a      	strh	r2, [r3, #0]
 8004c0c:	e017      	b.n	8004c3e <PCD_EP_ISR_Handler+0x5ce>
 8004c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c10:	785b      	ldrb	r3, [r3, #1]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d113      	bne.n	8004c3e <PCD_EP_ISR_Handler+0x5ce>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c24:	4413      	add	r3, r2
 8004c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	00da      	lsls	r2, r3, #3
 8004c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c30:	4413      	add	r3, r2
 8004c32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f00c f972 	bl	8010f2e <HAL_PCD_DataInStageCallback>
 8004c4a:	e04a      	b.n	8004ce2 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004c4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d13f      	bne.n	8004cd6 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	4413      	add	r3, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c7a:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8004c7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c7e:	699a      	ldr	r2, [r3, #24]
 8004c80:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d906      	bls.n	8004c94 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8004c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004c8c:	1ad2      	subs	r2, r2, r3
 8004c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c90:	619a      	str	r2, [r3, #24]
 8004c92:	e002      	b.n	8004c9a <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c96:	2200      	movs	r2, #0
 8004c98:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004c9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f00c f940 	bl	8010f2e <HAL_PCD_DataInStageCallback>
 8004cae:	e018      	b.n	8004ce2 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cb2:	695a      	ldr	r2, [r3, #20]
 8004cb4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004cb6:	441a      	add	r2, r3
 8004cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cba:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004cbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004cc2:	441a      	add	r2, r3
 8004cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cc6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f004 fd51 	bl	8009776 <USB_EPStartXfer>
 8004cd4:	e005      	b.n	8004ce2 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004cd6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004cd8:	461a      	mov	r2, r3
 8004cda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f917 	bl	8004f10 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	b21b      	sxth	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f6ff acc3 	blt.w	800467a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3748      	adds	r7, #72	@ 0x48
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b088      	sub	sp, #32
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d07c      	beq.n	8004e10 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	4413      	add	r3, r2
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d3a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	699a      	ldr	r2, [r3, #24]
 8004d40:	8b7b      	ldrh	r3, [r7, #26]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d306      	bcc.n	8004d54 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	8b7b      	ldrh	r3, [r7, #26]
 8004d4c:	1ad2      	subs	r2, r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	619a      	str	r2, [r3, #24]
 8004d52:	e002      	b.n	8004d5a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2200      	movs	r2, #0
 8004d58:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d123      	bne.n	8004daa <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d7c:	833b      	strh	r3, [r7, #24]
 8004d7e:	8b3b      	ldrh	r3, [r7, #24]
 8004d80:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d84:	833b      	strh	r3, [r7, #24]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	8b3b      	ldrh	r3, [r7, #24]
 8004d96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004daa:	88fb      	ldrh	r3, [r7, #6]
 8004dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01f      	beq.n	8004df4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dce:	82fb      	strh	r3, [r7, #22]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	441a      	add	r2, r3
 8004dde:	8afb      	ldrh	r3, [r7, #22]
 8004de0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004de4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004de8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004df4:	8b7b      	ldrh	r3, [r7, #26]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 8085 	beq.w	8004f06 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	6959      	ldr	r1, [r3, #20]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	891a      	ldrh	r2, [r3, #8]
 8004e08:	8b7b      	ldrh	r3, [r7, #26]
 8004e0a:	f005 fbdb 	bl	800a5c4 <USB_ReadPMA>
 8004e0e:	e07a      	b.n	8004f06 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	4413      	add	r3, r2
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e34:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	8b7b      	ldrh	r3, [r7, #26]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d306      	bcc.n	8004e4e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	699a      	ldr	r2, [r3, #24]
 8004e44:	8b7b      	ldrh	r3, [r7, #26]
 8004e46:	1ad2      	subs	r2, r2, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	619a      	str	r2, [r3, #24]
 8004e4c:	e002      	b.n	8004e54 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2200      	movs	r2, #0
 8004e52:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d123      	bne.n	8004ea4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e76:	83fb      	strh	r3, [r7, #30]
 8004e78:	8bfb      	ldrh	r3, [r7, #30]
 8004e7a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004e7e:	83fb      	strh	r3, [r7, #30]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	441a      	add	r2, r3
 8004e8e:	8bfb      	ldrh	r3, [r7, #30]
 8004e90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004ea4:	88fb      	ldrh	r3, [r7, #6]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d11f      	bne.n	8004eee <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec8:	83bb      	strh	r3, [r7, #28]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	441a      	add	r2, r3
 8004ed8:	8bbb      	ldrh	r3, [r7, #28]
 8004eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ee6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004eee:	8b7b      	ldrh	r3, [r7, #26]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	6959      	ldr	r1, [r3, #20]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	895a      	ldrh	r2, [r3, #10]
 8004f00:	8b7b      	ldrh	r3, [r7, #26]
 8004f02:	f005 fb5f 	bl	800a5c4 <USB_ReadPMA>
    }
  }

  return count;
 8004f06:	8b7b      	ldrh	r3, [r7, #26]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b0a6      	sub	sp, #152	@ 0x98
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f1e:	88fb      	ldrh	r3, [r7, #6]
 8004f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 81f7 	beq.w	8005318 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	4413      	add	r3, r2
 8004f44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f4e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d907      	bls.n	8004f6e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004f66:	1ad2      	subs	r2, r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	619a      	str	r2, [r3, #24]
 8004f6c:	e002      	b.n	8004f74 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2200      	movs	r2, #0
 8004f72:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f040 80e1 	bne.w	8005140 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d126      	bne.n	8004fd4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9a:	4413      	add	r3, r2
 8004f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	00da      	lsls	r2, r3, #3
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbc:	801a      	strh	r2, [r3, #0]
 8004fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fd0:	801a      	strh	r2, [r3, #0]
 8004fd2:	e01a      	b.n	800500a <HAL_PCD_EP_DB_Transmit+0xfa>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	785b      	ldrb	r3, [r3, #1]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d116      	bne.n	800500a <HAL_PCD_EP_DB_Transmit+0xfa>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff0:	4413      	add	r3, r2
 8004ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	00da      	lsls	r2, r3, #3
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005002:	637b      	str	r3, [r7, #52]	@ 0x34
 8005004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005006:	2200      	movs	r2, #0
 8005008:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	785b      	ldrb	r3, [r3, #1]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d126      	bne.n	8005066 <HAL_PCD_EP_DB_Transmit+0x156>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	623b      	str	r3, [r7, #32]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005026:	b29b      	uxth	r3, r3
 8005028:	461a      	mov	r2, r3
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	4413      	add	r3, r2
 800502e:	623b      	str	r3, [r7, #32]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	00da      	lsls	r2, r3, #3
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	4413      	add	r3, r2
 800503a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	b29b      	uxth	r3, r3
 8005046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800504a:	b29a      	uxth	r2, r3
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	801a      	strh	r2, [r3, #0]
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800505a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800505e:	b29a      	uxth	r2, r3
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	801a      	strh	r2, [r3, #0]
 8005064:	e017      	b.n	8005096 <HAL_PCD_EP_DB_Transmit+0x186>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	785b      	ldrb	r3, [r3, #1]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d113      	bne.n	8005096 <HAL_PCD_EP_DB_Transmit+0x186>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005076:	b29b      	uxth	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507c:	4413      	add	r3, r2
 800507e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	00da      	lsls	r2, r3, #3
 8005086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005088:	4413      	add	r3, r2
 800508a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005092:	2200      	movs	r2, #0
 8005094:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	78db      	ldrb	r3, [r3, #3]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d123      	bne.n	80050e6 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050b8:	837b      	strh	r3, [r7, #26]
 80050ba:	8b7b      	ldrh	r3, [r7, #26]
 80050bc:	f083 0320 	eor.w	r3, r3, #32
 80050c0:	837b      	strh	r3, [r7, #26]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	441a      	add	r2, r3
 80050d0:	8b7b      	ldrh	r3, [r7, #26]
 80050d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	4619      	mov	r1, r3
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f00b ff1e 	bl	8010f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01f      	beq.n	800513c <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005116:	833b      	strh	r3, [r7, #24]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	441a      	add	r2, r3
 8005126:	8b3b      	ldrh	r3, [r7, #24]
 8005128:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800512c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005130:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005138:	b29b      	uxth	r3, r3
 800513a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	e31f      	b.n	8005780 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005140:	88fb      	ldrh	r3, [r7, #6]
 8005142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d021      	beq.n	800518e <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	b29b      	uxth	r3, r3
 800515c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005160:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005164:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	441a      	add	r2, r3
 8005176:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800517a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800517e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005182:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800518a:	b29b      	uxth	r3, r3
 800518c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005194:	2b01      	cmp	r3, #1
 8005196:	f040 82ca 	bne.w	800572e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	695a      	ldr	r2, [r3, #20]
 800519e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80051a2:	441a      	add	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	69da      	ldr	r2, [r3, #28]
 80051ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80051b0:	441a      	add	r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	6a1a      	ldr	r2, [r3, #32]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d309      	bcc.n	80051d6 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	6a1a      	ldr	r2, [r3, #32]
 80051cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	621a      	str	r2, [r3, #32]
 80051d4:	e015      	b.n	8005202 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d107      	bne.n	80051ee <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80051de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80051e2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80051ec:	e009      	b.n	8005202 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2200      	movs	r2, #0
 8005200:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	785b      	ldrb	r3, [r3, #1]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d15f      	bne.n	80052ca <HAL_PCD_EP_DB_Transmit+0x3ba>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005218:	b29b      	uxth	r3, r3
 800521a:	461a      	mov	r2, r3
 800521c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800521e:	4413      	add	r3, r2
 8005220:	643b      	str	r3, [r7, #64]	@ 0x40
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	00da      	lsls	r2, r3, #3
 8005228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800522a:	4413      	add	r3, r2
 800522c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005230:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	b29b      	uxth	r3, r3
 8005238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800523c:	b29a      	uxth	r2, r3
 800523e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005240:	801a      	strh	r2, [r3, #0]
 8005242:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <HAL_PCD_EP_DB_Transmit+0x34e>
 8005248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b29b      	uxth	r3, r3
 800524e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005256:	b29a      	uxth	r2, r3
 8005258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800525a:	801a      	strh	r2, [r3, #0]
 800525c:	e051      	b.n	8005302 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800525e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005260:	2b3e      	cmp	r3, #62	@ 0x3e
 8005262:	d816      	bhi.n	8005292 <HAL_PCD_EP_DB_Transmit+0x382>
 8005264:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005266:	085b      	lsrs	r3, r3, #1
 8005268:	653b      	str	r3, [r7, #80]	@ 0x50
 800526a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_PCD_EP_DB_Transmit+0x36a>
 8005274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005276:	3301      	adds	r3, #1
 8005278:	653b      	str	r3, [r7, #80]	@ 0x50
 800527a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800527c:	881b      	ldrh	r3, [r3, #0]
 800527e:	b29a      	uxth	r2, r3
 8005280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005282:	b29b      	uxth	r3, r3
 8005284:	029b      	lsls	r3, r3, #10
 8005286:	b29b      	uxth	r3, r3
 8005288:	4313      	orrs	r3, r2
 800528a:	b29a      	uxth	r2, r3
 800528c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	e037      	b.n	8005302 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005292:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	653b      	str	r3, [r7, #80]	@ 0x50
 8005298:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800529a:	f003 031f 	and.w	r3, r3, #31
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d102      	bne.n	80052a8 <HAL_PCD_EP_DB_Transmit+0x398>
 80052a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052a4:	3b01      	subs	r3, #1
 80052a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80052a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	029b      	lsls	r3, r3, #10
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	4313      	orrs	r3, r2
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	e01b      	b.n	8005302 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	785b      	ldrb	r3, [r3, #1]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d117      	bne.n	8005302 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	461a      	mov	r2, r3
 80052e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052e6:	4413      	add	r3, r2
 80052e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	00da      	lsls	r2, r3, #3
 80052f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052f2:	4413      	add	r3, r2
 80052f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005300:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	6959      	ldr	r1, [r3, #20]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	891a      	ldrh	r2, [r3, #8]
 800530e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005310:	b29b      	uxth	r3, r3
 8005312:	f005 f914 	bl	800a53e <USB_WritePMA>
 8005316:	e20a      	b.n	800572e <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005320:	b29b      	uxth	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4413      	add	r3, r2
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	4413      	add	r3, r2
 8005332:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800533c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005348:	429a      	cmp	r2, r3
 800534a:	d307      	bcc.n	800535c <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	699a      	ldr	r2, [r3, #24]
 8005350:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005354:	1ad2      	subs	r2, r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	619a      	str	r2, [r3, #24]
 800535a:	e002      	b.n	8005362 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2200      	movs	r2, #0
 8005360:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f040 80f6 	bne.w	8005558 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	785b      	ldrb	r3, [r3, #1]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d126      	bne.n	80053c2 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	677b      	str	r3, [r7, #116]	@ 0x74
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005382:	b29b      	uxth	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005388:	4413      	add	r3, r2
 800538a:	677b      	str	r3, [r7, #116]	@ 0x74
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	00da      	lsls	r2, r3, #3
 8005392:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005394:	4413      	add	r3, r2
 8005396:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800539a:	673b      	str	r3, [r7, #112]	@ 0x70
 800539c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053aa:	801a      	strh	r2, [r3, #0]
 80053ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053be:	801a      	strh	r2, [r3, #0]
 80053c0:	e01a      	b.n	80053f8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	785b      	ldrb	r3, [r3, #1]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d116      	bne.n	80053f8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053d8:	b29b      	uxth	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053de:	4413      	add	r3, r2
 80053e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	00da      	lsls	r2, r3, #3
 80053e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053ea:	4413      	add	r3, r2
 80053ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80053f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053f4:	2200      	movs	r2, #0
 80053f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d12f      	bne.n	8005468 <HAL_PCD_EP_DB_Transmit+0x558>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005418:	b29b      	uxth	r3, r3
 800541a:	461a      	mov	r2, r3
 800541c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005420:	4413      	add	r3, r2
 8005422:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	00da      	lsls	r2, r3, #3
 800542c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005430:	4413      	add	r3, r2
 8005432:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005436:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800543a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005446:	b29a      	uxth	r2, r3
 8005448:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545e:	b29a      	uxth	r2, r3
 8005460:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005464:	801a      	strh	r2, [r3, #0]
 8005466:	e01c      	b.n	80054a2 <HAL_PCD_EP_DB_Transmit+0x592>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	785b      	ldrb	r3, [r3, #1]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d118      	bne.n	80054a2 <HAL_PCD_EP_DB_Transmit+0x592>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005478:	b29b      	uxth	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005480:	4413      	add	r3, r2
 8005482:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	00da      	lsls	r2, r3, #3
 800548c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005490:	4413      	add	r3, r2
 8005492:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005496:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800549a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800549e:	2200      	movs	r2, #0
 80054a0:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	78db      	ldrb	r3, [r3, #3]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d127      	bne.n	80054fa <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054c4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80054c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80054cc:	f083 0320 	eor.w	r3, r3, #32
 80054d0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	441a      	add	r2, r3
 80054e2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80054e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	4619      	mov	r1, r3
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f00b fd14 	bl	8010f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d121      	bne.n	8005554 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005548:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800554c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005550:	b29b      	uxth	r3, r3
 8005552:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	e113      	b.n	8005780 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005558:	88fb      	ldrh	r3, [r7, #6]
 800555a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d121      	bne.n	80055a6 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29b      	uxth	r3, r3
 8005574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	441a      	add	r2, r3
 800558e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005592:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005596:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800559a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800559e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	f040 80be 	bne.w	800572e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80055ba:	441a      	add	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80055c8:	441a      	add	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6a1a      	ldr	r2, [r3, #32]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d309      	bcc.n	80055ee <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	6a1a      	ldr	r2, [r3, #32]
 80055e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055e6:	1ad2      	subs	r2, r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	621a      	str	r2, [r3, #32]
 80055ec:	e015      	b.n	800561a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d107      	bne.n	8005606 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 80055f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80055fa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005604:	e009      	b.n	800561a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2200      	movs	r2, #0
 8005610:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	785b      	ldrb	r3, [r3, #1]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d15f      	bne.n	80056e8 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005636:	b29b      	uxth	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800563c:	4413      	add	r3, r2
 800563e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	00da      	lsls	r2, r3, #3
 8005646:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005648:	4413      	add	r3, r2
 800564a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800564e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005650:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800565a:	b29a      	uxth	r2, r3
 800565c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10a      	bne.n	800567c <HAL_PCD_EP_DB_Transmit+0x76c>
 8005666:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b29b      	uxth	r3, r3
 800566c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005674:	b29a      	uxth	r2, r3
 8005676:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	e04e      	b.n	800571a <HAL_PCD_EP_DB_Transmit+0x80a>
 800567c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800567e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005680:	d816      	bhi.n	80056b0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8005682:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	663b      	str	r3, [r7, #96]	@ 0x60
 8005688:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <HAL_PCD_EP_DB_Transmit+0x788>
 8005692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005694:	3301      	adds	r3, #1
 8005696:	663b      	str	r3, [r7, #96]	@ 0x60
 8005698:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29a      	uxth	r2, r3
 800569e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	029b      	lsls	r3, r3, #10
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	4313      	orrs	r3, r2
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ac:	801a      	strh	r2, [r3, #0]
 80056ae:	e034      	b.n	800571a <HAL_PCD_EP_DB_Transmit+0x80a>
 80056b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80056b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <HAL_PCD_EP_DB_Transmit+0x7b6>
 80056c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056c2:	3b01      	subs	r3, #1
 80056c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80056c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	029b      	lsls	r3, r3, #10
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	4313      	orrs	r3, r2
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	e018      	b.n	800571a <HAL_PCD_EP_DB_Transmit+0x80a>
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d114      	bne.n	800571a <HAL_PCD_EP_DB_Transmit+0x80a>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	461a      	mov	r2, r3
 80056fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056fe:	4413      	add	r3, r2
 8005700:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	00da      	lsls	r2, r3, #3
 8005708:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800570a:	4413      	add	r3, r2
 800570c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005710:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005714:	b29a      	uxth	r2, r3
 8005716:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005718:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	6959      	ldr	r1, [r3, #20]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	895a      	ldrh	r2, [r3, #10]
 8005726:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005728:	b29b      	uxth	r3, r3
 800572a:	f004 ff08 	bl	800a53e <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29b      	uxth	r3, r3
 8005740:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005744:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005748:	82fb      	strh	r3, [r7, #22]
 800574a:	8afb      	ldrh	r3, [r7, #22]
 800574c:	f083 0310 	eor.w	r3, r3, #16
 8005750:	82fb      	strh	r3, [r7, #22]
 8005752:	8afb      	ldrh	r3, [r7, #22]
 8005754:	f083 0320 	eor.w	r3, r3, #32
 8005758:	82fb      	strh	r3, [r7, #22]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	441a      	add	r2, r3
 8005768:	8afb      	ldrh	r3, [r7, #22]
 800576a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800576e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800577a:	b29b      	uxth	r3, r3
 800577c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3798      	adds	r7, #152	@ 0x98
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	460b      	mov	r3, r1
 8005794:	817b      	strh	r3, [r7, #10]
 8005796:	4613      	mov	r3, r2
 8005798:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800579a:	897b      	ldrh	r3, [r7, #10]
 800579c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057a6:	897b      	ldrh	r3, [r7, #10]
 80057a8:	f003 0207 	and.w	r2, r3, #7
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	3310      	adds	r3, #16
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e009      	b.n	80057d2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057be:	897a      	ldrh	r2, [r7, #10]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80057d2:	893b      	ldrh	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d107      	bne.n	80057e8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2200      	movs	r2, #0
 80057dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	80da      	strh	r2, [r3, #6]
 80057e6:	e00b      	b.n	8005800 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2201      	movs	r2, #1
 80057ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	0c1b      	lsrs	r3, r3, #16
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800580e:	b480      	push	{r7}
 8005810:	b085      	sub	sp, #20
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005832:	b29b      	uxth	r3, r3
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005846:	b29b      	uxth	r3, r3
 8005848:	f043 0302 	orr.w	r3, r3, #2
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005868:	4b05      	ldr	r3, [pc, #20]	@ (8005880 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a04      	ldr	r2, [pc, #16]	@ (8005880 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800586e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005872:	6013      	str	r3, [r2, #0]
}
 8005874:	bf00      	nop
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	58000400 	.word	0x58000400

08005884 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005888:	4b04      	ldr	r3, [pc, #16]	@ (800589c <HAL_PWREx_GetVoltageRange+0x18>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005890:	4618      	mov	r0, r3
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	58000400 	.word	0x58000400

080058a0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80058a4:	4b05      	ldr	r3, [pc, #20]	@ (80058bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	4a04      	ldr	r2, [pc, #16]	@ (80058bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80058aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058ae:	6053      	str	r3, [r2, #4]
}
 80058b0:	bf00      	nop
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	58000400 	.word	0x58000400

080058c0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80058c0:	b480      	push	{r7}
 80058c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80058c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058d2:	d101      	bne.n	80058d8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80058d4:	2301      	movs	r3, #1
 80058d6:	e000      	b.n	80058da <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <LL_RCC_HSE_Enable>:
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80058e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058f6:	6013      	str	r3, [r2, #0]
}
 80058f8:	bf00      	nop
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <LL_RCC_HSE_Disable>:
{
 8005902:	b480      	push	{r7}
 8005904:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005914:	6013      	str	r3, [r2, #0]
}
 8005916:	bf00      	nop
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <LL_RCC_HSE_IsReady>:
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800592e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005932:	d101      	bne.n	8005938 <LL_RCC_HSE_IsReady+0x18>
 8005934:	2301      	movs	r3, #1
 8005936:	e000      	b.n	800593a <LL_RCC_HSE_IsReady+0x1a>
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <LL_RCC_HSI_Enable>:
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005956:	6013      	str	r3, [r2, #0]
}
 8005958:	bf00      	nop
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <LL_RCC_HSI_Disable>:
{
 8005962:	b480      	push	{r7}
 8005964:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005974:	6013      	str	r3, [r2, #0]
}
 8005976:	bf00      	nop
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <LL_RCC_HSI_IsReady>:
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800598e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005992:	d101      	bne.n	8005998 <LL_RCC_HSI_IsReady+0x18>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <LL_RCC_HSI_IsReady+0x1a>
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80059ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	061b      	lsls	r3, r3, #24
 80059ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059be:	4313      	orrs	r3, r2
 80059c0:	604b      	str	r3, [r1, #4]
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <LL_RCC_HSI48_Enable>:
{
 80059ce:	b480      	push	{r7}
 80059d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80059d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059de:	f043 0301 	orr.w	r3, r3, #1
 80059e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80059e6:	bf00      	nop
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <LL_RCC_HSI48_Disable>:
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80059f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a00:	f023 0301 	bic.w	r3, r3, #1
 8005a04:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005a08:	bf00      	nop
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <LL_RCC_HSI48_IsReady>:
{
 8005a12:	b480      	push	{r7}
 8005a14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d101      	bne.n	8005a2a <LL_RCC_HSI48_IsReady+0x18>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <LL_RCC_HSI48_IsReady+0x1a>
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <LL_RCC_LSE_Enable>:
{
 8005a36:	b480      	push	{r7}
 8005a38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005a4e:	bf00      	nop
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <LL_RCC_LSE_Disable>:
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a68:	f023 0301 	bic.w	r3, r3, #1
 8005a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005a70:	bf00      	nop
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <LL_RCC_LSE_EnableBypass>:
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a8a:	f043 0304 	orr.w	r3, r3, #4
 8005a8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005a92:	bf00      	nop
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <LL_RCC_LSE_DisableBypass>:
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aac:	f023 0304 	bic.w	r3, r3, #4
 8005ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005ab4:	bf00      	nop
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <LL_RCC_LSE_IsReady>:
{
 8005abe:	b480      	push	{r7}
 8005ac0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d101      	bne.n	8005ad6 <LL_RCC_LSE_IsReady+0x18>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e000      	b.n	8005ad8 <LL_RCC_LSE_IsReady+0x1a>
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <LL_RCC_LSI1_Enable>:
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005ae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005afa:	bf00      	nop
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <LL_RCC_LSI1_Disable>:
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005b1c:	bf00      	nop
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <LL_RCC_LSI1_IsReady>:
{
 8005b26:	b480      	push	{r7}
 8005b28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d101      	bne.n	8005b3e <LL_RCC_LSI1_IsReady+0x18>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <LL_RCC_LSI1_IsReady+0x1a>
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <LL_RCC_LSI2_Enable>:
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b5a:	f043 0304 	orr.w	r3, r3, #4
 8005b5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005b62:	bf00      	nop
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <LL_RCC_LSI2_Disable>:
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b7c:	f023 0304 	bic.w	r3, r3, #4
 8005b80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005b84:	bf00      	nop
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <LL_RCC_LSI2_IsReady>:
{
 8005b8e:	b480      	push	{r7}
 8005b90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b9a:	f003 0308 	and.w	r3, r3, #8
 8005b9e:	2b08      	cmp	r3, #8
 8005ba0:	d101      	bne.n	8005ba6 <LL_RCC_LSI2_IsReady+0x18>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <LL_RCC_LSI2_IsReady+0x1a>
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <LL_RCC_LSI2_SetTrimming>:
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bc2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	021b      	lsls	r3, r3, #8
 8005bca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <LL_RCC_MSI_Enable>:
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bee:	f043 0301 	orr.w	r3, r3, #1
 8005bf2:	6013      	str	r3, [r2, #0]
}
 8005bf4:	bf00      	nop
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <LL_RCC_MSI_Disable>:
{
 8005bfe:	b480      	push	{r7}
 8005c00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c0c:	f023 0301 	bic.w	r3, r3, #1
 8005c10:	6013      	str	r3, [r2, #0]
}
 8005c12:	bf00      	nop
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <LL_RCC_MSI_IsReady>:
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d101      	bne.n	8005c32 <LL_RCC_MSI_IsReady+0x16>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e000      	b.n	8005c34 <LL_RCC_MSI_IsReady+0x18>
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <LL_RCC_MSI_SetRange>:
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005c46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	600b      	str	r3, [r1, #0]
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <LL_RCC_MSI_GetRange>:
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c76:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2bb0      	cmp	r3, #176	@ 0xb0
 8005c7c:	d901      	bls.n	8005c82 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005c7e:	23b0      	movs	r3, #176	@ 0xb0
 8005c80:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005c82:	687b      	ldr	r3, [r7, #4]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005caa:	4313      	orrs	r3, r2
 8005cac:	604b      	str	r3, [r1, #4]
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <LL_RCC_SetSysClkSource>:
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f023 0203 	bic.w	r2, r3, #3
 8005ccc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	608b      	str	r3, [r1, #8]
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <LL_RCC_GetSysClkSource>:
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f003 030c 	and.w	r3, r3, #12
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <LL_RCC_SetAHBPrescaler>:
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005d02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	608b      	str	r3, [r1, #8]
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005d2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005d32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <LL_RCC_SetAHB4Prescaler>:
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005d5e:	f023 020f 	bic.w	r2, r3, #15
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	091b      	lsrs	r3, r3, #4
 8005d66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <LL_RCC_SetAPB1Prescaler>:
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	608b      	str	r3, [r1, #8]
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <LL_RCC_SetAPB2Prescaler>:
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005db6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	608b      	str	r3, [r1, #8]
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <LL_RCC_GetAHBPrescaler>:
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <LL_RCC_GetAHB4Prescaler>:
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dec:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <LL_RCC_PLL_Enable>:
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e12:	6013      	str	r3, [r2, #0]
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <LL_RCC_PLL_Disable>:
{
 8005e1e:	b480      	push	{r7}
 8005e20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e30:	6013      	str	r3, [r2, #0]
}
 8005e32:	bf00      	nop
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <LL_RCC_PLL_IsReady>:
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e4e:	d101      	bne.n	8005e54 <LL_RCC_PLL_IsReady+0x18>
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <LL_RCC_PLL_IsReady+0x1a>
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <LL_RCC_PLL_GetN>:
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	0a1b      	lsrs	r3, r3, #8
 8005e6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr

08005e7a <LL_RCC_PLL_GetR>:
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <LL_RCC_PLL_GetDivider>:
{
 8005e92:	b480      	push	{r7}
 8005e94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <LL_RCC_PLL_GetMainSource>:
{
 8005eaa:	b480      	push	{r7}
 8005eac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0303 	and.w	r3, r3, #3
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <LL_RCC_IsActiveFlag_HPRE>:
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005ec6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed4:	d101      	bne.n	8005eda <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eee:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ef6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005efa:	d101      	bne.n	8005f00 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005efc:	2301      	movs	r3, #1
 8005efe:	e000      	b.n	8005f02 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f14:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f20:	d101      	bne.n	8005f26 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005f32:	b480      	push	{r7}
 8005f34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f44:	d101      	bne.n	8005f4a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e000      	b.n	8005f4c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005f56:	b480      	push	{r7}
 8005f58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005f5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f68:	d101      	bne.n	8005f6e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
	...

08005f7c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f7c:	b590      	push	{r4, r7, lr}
 8005f7e:	b08d      	sub	sp, #52	@ 0x34
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e363      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 808d 	beq.w	80060b6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f9c:	f7ff fea1 	bl	8005ce2 <LL_RCC_GetSysClkSource>
 8005fa0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fa2:	f7ff ff82 	bl	8005eaa <LL_RCC_PLL_GetMainSource>
 8005fa6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d005      	beq.n	8005fba <HAL_RCC_OscConfig+0x3e>
 8005fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb0:	2b0c      	cmp	r3, #12
 8005fb2:	d147      	bne.n	8006044 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d144      	bne.n	8006044 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e347      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005fca:	f7ff fe4c 	bl	8005c66 <LL_RCC_MSI_GetRange>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	429c      	cmp	r4, r3
 8005fd2:	d914      	bls.n	8005ffe <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fd03 	bl	80069e4 <RCC_SetFlashLatencyFromMSIRange>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e336      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff fe26 	bl	8005c3e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff fe4a 	bl	8005c90 <LL_RCC_MSI_SetCalibTrimming>
 8005ffc:	e013      	b.n	8006026 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff fe1b 	bl	8005c3e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff fe3f 	bl	8005c90 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fce4 	bl	80069e4 <RCC_SetFlashLatencyFromMSIRange>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e317      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006026:	f000 fcc9 	bl	80069bc <HAL_RCC_GetHCLKFreq>
 800602a:	4603      	mov	r3, r0
 800602c:	4aa4      	ldr	r2, [pc, #656]	@ (80062c0 <HAL_RCC_OscConfig+0x344>)
 800602e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006030:	4ba4      	ldr	r3, [pc, #656]	@ (80062c4 <HAL_RCC_OscConfig+0x348>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f7fc ff7d 	bl	8002f34 <HAL_InitTick>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d039      	beq.n	80060b4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e308      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01e      	beq.n	800608a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800604c:	f7ff fdc8 	bl	8005be0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006050:	f7fc ffbe 	bl	8002fd0 <HAL_GetTick>
 8006054:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006058:	f7fc ffba 	bl	8002fd0 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e2f5      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800606a:	f7ff fdd7 	bl	8005c1c <LL_RCC_MSI_IsReady>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0f1      	beq.n	8006058 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff fde0 	bl	8005c3e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fe04 	bl	8005c90 <LL_RCC_MSI_SetCalibTrimming>
 8006088:	e015      	b.n	80060b6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800608a:	f7ff fdb8 	bl	8005bfe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800608e:	f7fc ff9f 	bl	8002fd0 <HAL_GetTick>
 8006092:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006094:	e008      	b.n	80060a8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006096:	f7fc ff9b 	bl	8002fd0 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d901      	bls.n	80060a8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e2d6      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80060a8:	f7ff fdb8 	bl	8005c1c <LL_RCC_MSI_IsReady>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1f1      	bne.n	8006096 <HAL_RCC_OscConfig+0x11a>
 80060b2:	e000      	b.n	80060b6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80060b4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d047      	beq.n	8006152 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060c2:	f7ff fe0e 	bl	8005ce2 <LL_RCC_GetSysClkSource>
 80060c6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060c8:	f7ff feef 	bl	8005eaa <LL_RCC_PLL_GetMainSource>
 80060cc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d005      	beq.n	80060e0 <HAL_RCC_OscConfig+0x164>
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	2b0c      	cmp	r3, #12
 80060d8:	d108      	bne.n	80060ec <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	2b03      	cmp	r3, #3
 80060de:	d105      	bne.n	80060ec <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d134      	bne.n	8006152 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e2b4      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f4:	d102      	bne.n	80060fc <HAL_RCC_OscConfig+0x180>
 80060f6:	f7ff fbf5 	bl	80058e4 <LL_RCC_HSE_Enable>
 80060fa:	e001      	b.n	8006100 <HAL_RCC_OscConfig+0x184>
 80060fc:	f7ff fc01 	bl	8005902 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d012      	beq.n	800612e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006108:	f7fc ff62 	bl	8002fd0 <HAL_GetTick>
 800610c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006110:	f7fc ff5e 	bl	8002fd0 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b64      	cmp	r3, #100	@ 0x64
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e299      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006122:	f7ff fbfd 	bl	8005920 <LL_RCC_HSE_IsReady>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0f1      	beq.n	8006110 <HAL_RCC_OscConfig+0x194>
 800612c:	e011      	b.n	8006152 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612e:	f7fc ff4f 	bl	8002fd0 <HAL_GetTick>
 8006132:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006134:	e008      	b.n	8006148 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006136:	f7fc ff4b 	bl	8002fd0 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b64      	cmp	r3, #100	@ 0x64
 8006142:	d901      	bls.n	8006148 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e286      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006148:	f7ff fbea 	bl	8005920 <LL_RCC_HSE_IsReady>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f1      	bne.n	8006136 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d04c      	beq.n	80061f8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800615e:	f7ff fdc0 	bl	8005ce2 <LL_RCC_GetSysClkSource>
 8006162:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006164:	f7ff fea1 	bl	8005eaa <LL_RCC_PLL_GetMainSource>
 8006168:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	2b04      	cmp	r3, #4
 800616e:	d005      	beq.n	800617c <HAL_RCC_OscConfig+0x200>
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	2b0c      	cmp	r3, #12
 8006174:	d10e      	bne.n	8006194 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d10b      	bne.n	8006194 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e266      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fc09 	bl	80059a4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006192:	e031      	b.n	80061f8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d019      	beq.n	80061d0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800619c:	f7ff fbd2 	bl	8005944 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a0:	f7fc ff16 	bl	8002fd0 <HAL_GetTick>
 80061a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061a8:	f7fc ff12 	bl	8002fd0 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e24d      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80061ba:	f7ff fbe1 	bl	8005980 <LL_RCC_HSI_IsReady>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0f1      	beq.n	80061a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7ff fbeb 	bl	80059a4 <LL_RCC_HSI_SetCalibTrimming>
 80061ce:	e013      	b.n	80061f8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061d0:	f7ff fbc7 	bl	8005962 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d4:	f7fc fefc 	bl	8002fd0 <HAL_GetTick>
 80061d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061dc:	f7fc fef8 	bl	8002fd0 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e233      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80061ee:	f7ff fbc7 	bl	8005980 <LL_RCC_HSI_IsReady>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f1      	bne.n	80061dc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0308 	and.w	r3, r3, #8
 8006200:	2b00      	cmp	r3, #0
 8006202:	d106      	bne.n	8006212 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 80a3 	beq.w	8006358 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d076      	beq.n	8006308 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0310 	and.w	r3, r3, #16
 8006222:	2b00      	cmp	r3, #0
 8006224:	d046      	beq.n	80062b4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006226:	f7ff fc7e 	bl	8005b26 <LL_RCC_LSI1_IsReady>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d113      	bne.n	8006258 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006230:	f7ff fc57 	bl	8005ae2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006234:	f7fc fecc 	bl	8002fd0 <HAL_GetTick>
 8006238:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800623a:	e008      	b.n	800624e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800623c:	f7fc fec8 	bl	8002fd0 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e203      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800624e:	f7ff fc6a 	bl	8005b26 <LL_RCC_LSI1_IsReady>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f1      	beq.n	800623c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006258:	f7ff fc77 	bl	8005b4a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625c:	f7fc feb8 	bl	8002fd0 <HAL_GetTick>
 8006260:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006264:	f7fc feb4 	bl	8002fd0 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b03      	cmp	r3, #3
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e1ef      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006276:	f7ff fc8a 	bl	8005b8e <LL_RCC_LSI2_IsReady>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f1      	beq.n	8006264 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fc94 	bl	8005bb2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800628a:	f7ff fc3b 	bl	8005b04 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628e:	f7fc fe9f 	bl	8002fd0 <HAL_GetTick>
 8006292:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006294:	e008      	b.n	80062a8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006296:	f7fc fe9b 	bl	8002fd0 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e1d6      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80062a8:	f7ff fc3d 	bl	8005b26 <LL_RCC_LSI1_IsReady>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f1      	bne.n	8006296 <HAL_RCC_OscConfig+0x31a>
 80062b2:	e051      	b.n	8006358 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80062b4:	f7ff fc15 	bl	8005ae2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b8:	f7fc fe8a 	bl	8002fd0 <HAL_GetTick>
 80062bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80062be:	e00c      	b.n	80062da <HAL_RCC_OscConfig+0x35e>
 80062c0:	20000008 	.word	0x20000008
 80062c4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80062c8:	f7fc fe82 	bl	8002fd0 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e1bd      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80062da:	f7ff fc24 	bl	8005b26 <LL_RCC_LSI1_IsReady>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0f1      	beq.n	80062c8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80062e4:	f7ff fc42 	bl	8005b6c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80062e8:	e008      	b.n	80062fc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80062ea:	f7fc fe71 	bl	8002fd0 <HAL_GetTick>
 80062ee:	4602      	mov	r2, r0
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d901      	bls.n	80062fc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e1ac      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80062fc:	f7ff fc47 	bl	8005b8e <LL_RCC_LSI2_IsReady>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f1      	bne.n	80062ea <HAL_RCC_OscConfig+0x36e>
 8006306:	e027      	b.n	8006358 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006308:	f7ff fc30 	bl	8005b6c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630c:	f7fc fe60 	bl	8002fd0 <HAL_GetTick>
 8006310:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006314:	f7fc fe5c 	bl	8002fd0 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b03      	cmp	r3, #3
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e197      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006326:	f7ff fc32 	bl	8005b8e <LL_RCC_LSI2_IsReady>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1f1      	bne.n	8006314 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006330:	f7ff fbe8 	bl	8005b04 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006334:	f7fc fe4c 	bl	8002fd0 <HAL_GetTick>
 8006338:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800633c:	f7fc fe48 	bl	8002fd0 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e183      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800634e:	f7ff fbea 	bl	8005b26 <LL_RCC_LSI1_IsReady>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1f1      	bne.n	800633c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d05b      	beq.n	800641c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006364:	4ba7      	ldr	r3, [pc, #668]	@ (8006604 <HAL_RCC_OscConfig+0x688>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636c:	2b00      	cmp	r3, #0
 800636e:	d114      	bne.n	800639a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006370:	f7ff fa78 	bl	8005864 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006374:	f7fc fe2c 	bl	8002fd0 <HAL_GetTick>
 8006378:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800637c:	f7fc fe28 	bl	8002fd0 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b02      	cmp	r3, #2
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e163      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800638e:	4b9d      	ldr	r3, [pc, #628]	@ (8006604 <HAL_RCC_OscConfig+0x688>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0f0      	beq.n	800637c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d102      	bne.n	80063a8 <HAL_RCC_OscConfig+0x42c>
 80063a2:	f7ff fb48 	bl	8005a36 <LL_RCC_LSE_Enable>
 80063a6:	e00c      	b.n	80063c2 <HAL_RCC_OscConfig+0x446>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b05      	cmp	r3, #5
 80063ae:	d104      	bne.n	80063ba <HAL_RCC_OscConfig+0x43e>
 80063b0:	f7ff fb63 	bl	8005a7a <LL_RCC_LSE_EnableBypass>
 80063b4:	f7ff fb3f 	bl	8005a36 <LL_RCC_LSE_Enable>
 80063b8:	e003      	b.n	80063c2 <HAL_RCC_OscConfig+0x446>
 80063ba:	f7ff fb4d 	bl	8005a58 <LL_RCC_LSE_Disable>
 80063be:	f7ff fb6d 	bl	8005a9c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d014      	beq.n	80063f4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ca:	f7fc fe01 	bl	8002fd0 <HAL_GetTick>
 80063ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80063d0:	e00a      	b.n	80063e8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063d2:	f7fc fdfd 	bl	8002fd0 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d901      	bls.n	80063e8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e136      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80063e8:	f7ff fb69 	bl	8005abe <LL_RCC_LSE_IsReady>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0ef      	beq.n	80063d2 <HAL_RCC_OscConfig+0x456>
 80063f2:	e013      	b.n	800641c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f4:	f7fc fdec 	bl	8002fd0 <HAL_GetTick>
 80063f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80063fa:	e00a      	b.n	8006412 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063fc:	f7fc fde8 	bl	8002fd0 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800640a:	4293      	cmp	r3, r2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e121      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006412:	f7ff fb54 	bl	8005abe <LL_RCC_LSE_IsReady>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1ef      	bne.n	80063fc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006424:	2b00      	cmp	r3, #0
 8006426:	d02c      	beq.n	8006482 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642c:	2b00      	cmp	r3, #0
 800642e:	d014      	beq.n	800645a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006430:	f7ff facd 	bl	80059ce <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006434:	f7fc fdcc 	bl	8002fd0 <HAL_GetTick>
 8006438:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800643c:	f7fc fdc8 	bl	8002fd0 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e103      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800644e:	f7ff fae0 	bl	8005a12 <LL_RCC_HSI48_IsReady>
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0f1      	beq.n	800643c <HAL_RCC_OscConfig+0x4c0>
 8006458:	e013      	b.n	8006482 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800645a:	f7ff fac9 	bl	80059f0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800645e:	f7fc fdb7 	bl	8002fd0 <HAL_GetTick>
 8006462:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006466:	f7fc fdb3 	bl	8002fd0 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e0ee      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006478:	f7ff facb 	bl	8005a12 <LL_RCC_HSI48_IsReady>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f1      	bne.n	8006466 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 80e4 	beq.w	8006654 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800648c:	f7ff fc29 	bl	8005ce2 <LL_RCC_GetSysClkSource>
 8006490:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649e:	2b02      	cmp	r3, #2
 80064a0:	f040 80b4 	bne.w	800660c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f003 0203 	and.w	r2, r3, #3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d123      	bne.n	80064fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064bc:	429a      	cmp	r2, r3
 80064be:	d11c      	bne.n	80064fa <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	0a1b      	lsrs	r3, r3, #8
 80064c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d114      	bne.n	80064fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80064da:	429a      	cmp	r2, r3
 80064dc:	d10d      	bne.n	80064fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d106      	bne.n	80064fa <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d05d      	beq.n	80065b6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	2b0c      	cmp	r3, #12
 80064fe:	d058      	beq.n	80065b2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e0a1      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006512:	f7ff fc84 	bl	8005e1e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006516:	f7fc fd5b 	bl	8002fd0 <HAL_GetTick>
 800651a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800651e:	f7fc fd57 	bl	8002fd0 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e092      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1ef      	bne.n	800651e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800653e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006542:	68da      	ldr	r2, [r3, #12]
 8006544:	4b30      	ldr	r3, [pc, #192]	@ (8006608 <HAL_RCC_OscConfig+0x68c>)
 8006546:	4013      	ands	r3, r2
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006550:	4311      	orrs	r1, r2
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006556:	0212      	lsls	r2, r2, #8
 8006558:	4311      	orrs	r1, r2
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800655e:	4311      	orrs	r1, r2
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006564:	4311      	orrs	r1, r2
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800656a:	430a      	orrs	r2, r1
 800656c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006570:	4313      	orrs	r3, r2
 8006572:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006574:	f7ff fc44 	bl	8005e00 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006586:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006588:	f7fc fd22 	bl	8002fd0 <HAL_GetTick>
 800658c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006590:	f7fc fd1e 	bl	8002fd0 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e059      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0ef      	beq.n	8006590 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065b0:	e050      	b.n	8006654 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e04f      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d147      	bne.n	8006654 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80065c4:	f7ff fc1c 	bl	8005e00 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065d8:	f7fc fcfa 	bl	8002fd0 <HAL_GetTick>
 80065dc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065e0:	f7fc fcf6 	bl	8002fd0 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e031      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0ef      	beq.n	80065e0 <HAL_RCC_OscConfig+0x664>
 8006600:	e028      	b.n	8006654 <HAL_RCC_OscConfig+0x6d8>
 8006602:	bf00      	nop
 8006604:	58000400 	.word	0x58000400
 8006608:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	2b0c      	cmp	r3, #12
 8006610:	d01e      	beq.n	8006650 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006612:	f7ff fc04 	bl	8005e1e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006616:	f7fc fcdb 	bl	8002fd0 <HAL_GetTick>
 800661a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661e:	f7fc fcd7 	bl	8002fd0 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e012      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1ef      	bne.n	800661e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800663e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006648:	4b05      	ldr	r3, [pc, #20]	@ (8006660 <HAL_RCC_OscConfig+0x6e4>)
 800664a:	4013      	ands	r3, r2
 800664c:	60cb      	str	r3, [r1, #12]
 800664e:	e001      	b.n	8006654 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3734      	adds	r7, #52	@ 0x34
 800665a:	46bd      	mov	sp, r7
 800665c:	bd90      	pop	{r4, r7, pc}
 800665e:	bf00      	nop
 8006660:	eefefffc 	.word	0xeefefffc

08006664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e12d      	b.n	80068d4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006678:	4b98      	ldr	r3, [pc, #608]	@ (80068dc <HAL_RCC_ClockConfig+0x278>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0307 	and.w	r3, r3, #7
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d91b      	bls.n	80066be <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006686:	4b95      	ldr	r3, [pc, #596]	@ (80068dc <HAL_RCC_ClockConfig+0x278>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f023 0207 	bic.w	r2, r3, #7
 800668e:	4993      	ldr	r1, [pc, #588]	@ (80068dc <HAL_RCC_ClockConfig+0x278>)
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	4313      	orrs	r3, r2
 8006694:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006696:	f7fc fc9b 	bl	8002fd0 <HAL_GetTick>
 800669a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800669c:	e008      	b.n	80066b0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800669e:	f7fc fc97 	bl	8002fd0 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d901      	bls.n	80066b0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e111      	b.n	80068d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b0:	4b8a      	ldr	r3, [pc, #552]	@ (80068dc <HAL_RCC_ClockConfig+0x278>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	683a      	ldr	r2, [r7, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d1ef      	bne.n	800669e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d016      	beq.n	80066f8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff fb13 	bl	8005cfa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066d4:	f7fc fc7c 	bl	8002fd0 <HAL_GetTick>
 80066d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80066da:	e008      	b.n	80066ee <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066dc:	f7fc fc78 	bl	8002fd0 <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e0f2      	b.n	80068d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80066ee:	f7ff fbe8 	bl	8005ec2 <LL_RCC_IsActiveFlag_HPRE>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0f1      	beq.n	80066dc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0320 	and.w	r3, r3, #32
 8006700:	2b00      	cmp	r3, #0
 8006702:	d016      	beq.n	8006732 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff fb0a 	bl	8005d22 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800670e:	f7fc fc5f 	bl	8002fd0 <HAL_GetTick>
 8006712:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006714:	e008      	b.n	8006728 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006716:	f7fc fc5b 	bl	8002fd0 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e0d5      	b.n	80068d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006728:	f7ff fbdd 	bl	8005ee6 <LL_RCC_IsActiveFlag_C2HPRE>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0f1      	beq.n	8006716 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800673a:	2b00      	cmp	r3, #0
 800673c:	d016      	beq.n	800676c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	4618      	mov	r0, r3
 8006744:	f7ff fb03 	bl	8005d4e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006748:	f7fc fc42 	bl	8002fd0 <HAL_GetTick>
 800674c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800674e:	e008      	b.n	8006762 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006750:	f7fc fc3e 	bl	8002fd0 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d901      	bls.n	8006762 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e0b8      	b.n	80068d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006762:	f7ff fbd3 	bl	8005f0c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0f1      	beq.n	8006750 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d016      	beq.n	80067a6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff fafd 	bl	8005d7c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006782:	f7fc fc25 	bl	8002fd0 <HAL_GetTick>
 8006786:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006788:	e008      	b.n	800679c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800678a:	f7fc fc21 	bl	8002fd0 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e09b      	b.n	80068d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800679c:	f7ff fbc9 	bl	8005f32 <LL_RCC_IsActiveFlag_PPRE1>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f1      	beq.n	800678a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0308 	and.w	r3, r3, #8
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d017      	beq.n	80067e2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff faf3 	bl	8005da4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80067be:	f7fc fc07 	bl	8002fd0 <HAL_GetTick>
 80067c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80067c6:	f7fc fc03 	bl	8002fd0 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e07d      	b.n	80068d4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80067d8:	f7ff fbbd 	bl	8005f56 <LL_RCC_IsActiveFlag_PPRE2>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0f1      	beq.n	80067c6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d043      	beq.n	8006876 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d106      	bne.n	8006804 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80067f6:	f7ff f893 	bl	8005920 <LL_RCC_HSE_IsReady>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d11e      	bne.n	800683e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e067      	b.n	80068d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2b03      	cmp	r3, #3
 800680a:	d106      	bne.n	800681a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800680c:	f7ff fb16 	bl	8005e3c <LL_RCC_PLL_IsReady>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d113      	bne.n	800683e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e05c      	b.n	80068d4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d106      	bne.n	8006830 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006822:	f7ff f9fb 	bl	8005c1c <LL_RCC_MSI_IsReady>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d108      	bne.n	800683e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e051      	b.n	80068d4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006830:	f7ff f8a6 	bl	8005980 <LL_RCC_HSI_IsReady>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e04a      	b.n	80068d4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	4618      	mov	r0, r3
 8006844:	f7ff fa39 	bl	8005cba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006848:	f7fc fbc2 	bl	8002fd0 <HAL_GetTick>
 800684c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800684e:	e00a      	b.n	8006866 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006850:	f7fc fbbe 	bl	8002fd0 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800685e:	4293      	cmp	r3, r2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e036      	b.n	80068d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006866:	f7ff fa3c 	bl	8005ce2 <LL_RCC_GetSysClkSource>
 800686a:	4602      	mov	r2, r0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	429a      	cmp	r2, r3
 8006874:	d1ec      	bne.n	8006850 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006876:	4b19      	ldr	r3, [pc, #100]	@ (80068dc <HAL_RCC_ClockConfig+0x278>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	429a      	cmp	r2, r3
 8006882:	d21b      	bcs.n	80068bc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006884:	4b15      	ldr	r3, [pc, #84]	@ (80068dc <HAL_RCC_ClockConfig+0x278>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f023 0207 	bic.w	r2, r3, #7
 800688c:	4913      	ldr	r1, [pc, #76]	@ (80068dc <HAL_RCC_ClockConfig+0x278>)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	4313      	orrs	r3, r2
 8006892:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006894:	f7fc fb9c 	bl	8002fd0 <HAL_GetTick>
 8006898:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800689a:	e008      	b.n	80068ae <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800689c:	f7fc fb98 	bl	8002fd0 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e012      	b.n	80068d4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ae:	4b0b      	ldr	r3, [pc, #44]	@ (80068dc <HAL_RCC_ClockConfig+0x278>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d1ef      	bne.n	800689c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80068bc:	f000 f87e 	bl	80069bc <HAL_RCC_GetHCLKFreq>
 80068c0:	4603      	mov	r3, r0
 80068c2:	4a07      	ldr	r2, [pc, #28]	@ (80068e0 <HAL_RCC_ClockConfig+0x27c>)
 80068c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80068c6:	f7fc fb8f 	bl	8002fe8 <HAL_GetTickPrio>
 80068ca:	4603      	mov	r3, r0
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fc fb31 	bl	8002f34 <HAL_InitTick>
 80068d2:	4603      	mov	r3, r0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	58004000 	.word	0x58004000
 80068e0:	20000008 	.word	0x20000008

080068e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068e4:	b590      	push	{r4, r7, lr}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ea:	f7ff f9fa 	bl	8005ce2 <LL_RCC_GetSysClkSource>
 80068ee:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80068f6:	f7ff f9b6 	bl	8005c66 <LL_RCC_MSI_GetRange>
 80068fa:	4603      	mov	r3, r0
 80068fc:	091b      	lsrs	r3, r3, #4
 80068fe:	f003 030f 	and.w	r3, r3, #15
 8006902:	4a2b      	ldr	r2, [pc, #172]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	e04b      	b.n	80069a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b04      	cmp	r3, #4
 8006910:	d102      	bne.n	8006918 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006912:	4b28      	ldr	r3, [pc, #160]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	e045      	b.n	80069a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b08      	cmp	r3, #8
 800691c:	d10a      	bne.n	8006934 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800691e:	f7fe ffcf 	bl	80058c0 <LL_RCC_HSE_IsEnabledDiv2>
 8006922:	4603      	mov	r3, r0
 8006924:	2b01      	cmp	r3, #1
 8006926:	d102      	bne.n	800692e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006928:	4b22      	ldr	r3, [pc, #136]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	e03a      	b.n	80069a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800692e:	4b22      	ldr	r3, [pc, #136]	@ (80069b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	e037      	b.n	80069a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006934:	f7ff fab9 	bl	8005eaa <LL_RCC_PLL_GetMainSource>
 8006938:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d003      	beq.n	8006948 <HAL_RCC_GetSysClockFreq+0x64>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b03      	cmp	r3, #3
 8006944:	d003      	beq.n	800694e <HAL_RCC_GetSysClockFreq+0x6a>
 8006946:	e00d      	b.n	8006964 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006948:	4b1a      	ldr	r3, [pc, #104]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800694a:	60bb      	str	r3, [r7, #8]
        break;
 800694c:	e015      	b.n	800697a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800694e:	f7fe ffb7 	bl	80058c0 <LL_RCC_HSE_IsEnabledDiv2>
 8006952:	4603      	mov	r3, r0
 8006954:	2b01      	cmp	r3, #1
 8006956:	d102      	bne.n	800695e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006958:	4b16      	ldr	r3, [pc, #88]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800695a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800695c:	e00d      	b.n	800697a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800695e:	4b16      	ldr	r3, [pc, #88]	@ (80069b8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006960:	60bb      	str	r3, [r7, #8]
        break;
 8006962:	e00a      	b.n	800697a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006964:	f7ff f97f 	bl	8005c66 <LL_RCC_MSI_GetRange>
 8006968:	4603      	mov	r3, r0
 800696a:	091b      	lsrs	r3, r3, #4
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	4a0f      	ldr	r2, [pc, #60]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006976:	60bb      	str	r3, [r7, #8]
        break;
 8006978:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800697a:	f7ff fa71 	bl	8005e60 <LL_RCC_PLL_GetN>
 800697e:	4602      	mov	r2, r0
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	fb03 f402 	mul.w	r4, r3, r2
 8006986:	f7ff fa84 	bl	8005e92 <LL_RCC_PLL_GetDivider>
 800698a:	4603      	mov	r3, r0
 800698c:	091b      	lsrs	r3, r3, #4
 800698e:	3301      	adds	r3, #1
 8006990:	fbb4 f4f3 	udiv	r4, r4, r3
 8006994:	f7ff fa71 	bl	8005e7a <LL_RCC_PLL_GetR>
 8006998:	4603      	mov	r3, r0
 800699a:	0f5b      	lsrs	r3, r3, #29
 800699c:	3301      	adds	r3, #1
 800699e:	fbb4 f3f3 	udiv	r3, r4, r3
 80069a2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80069a4:	68fb      	ldr	r3, [r7, #12]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3714      	adds	r7, #20
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd90      	pop	{r4, r7, pc}
 80069ae:	bf00      	nop
 80069b0:	080140fc 	.word	0x080140fc
 80069b4:	00f42400 	.word	0x00f42400
 80069b8:	01e84800 	.word	0x01e84800

080069bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069bc:	b598      	push	{r3, r4, r7, lr}
 80069be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80069c0:	f7ff ff90 	bl	80068e4 <HAL_RCC_GetSysClockFreq>
 80069c4:	4604      	mov	r4, r0
 80069c6:	f7ff fa01 	bl	8005dcc <LL_RCC_GetAHBPrescaler>
 80069ca:	4603      	mov	r3, r0
 80069cc:	091b      	lsrs	r3, r3, #4
 80069ce:	f003 030f 	and.w	r3, r3, #15
 80069d2:	4a03      	ldr	r2, [pc, #12]	@ (80069e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80069d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80069dc:	4618      	mov	r0, r3
 80069de:	bd98      	pop	{r3, r4, r7, pc}
 80069e0:	080140bc 	.word	0x080140bc

080069e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80069e4:	b590      	push	{r4, r7, lr}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2bb0      	cmp	r3, #176	@ 0xb0
 80069f0:	d903      	bls.n	80069fa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80069f2:	4b15      	ldr	r3, [pc, #84]	@ (8006a48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80069f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e007      	b.n	8006a0a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	091b      	lsrs	r3, r3, #4
 80069fe:	f003 030f 	and.w	r3, r3, #15
 8006a02:	4a11      	ldr	r2, [pc, #68]	@ (8006a48 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a08:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006a0a:	f7ff f9eb 	bl	8005de4 <LL_RCC_GetAHB4Prescaler>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	091b      	lsrs	r3, r3, #4
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	4a0d      	ldr	r2, [pc, #52]	@ (8006a4c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a22:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4a0a      	ldr	r2, [pc, #40]	@ (8006a50 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006a28:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2c:	0c9c      	lsrs	r4, r3, #18
 8006a2e:	f7fe ff29 	bl	8005884 <HAL_PWREx_GetVoltageRange>
 8006a32:	4603      	mov	r3, r0
 8006a34:	4619      	mov	r1, r3
 8006a36:	4620      	mov	r0, r4
 8006a38:	f000 f80c 	bl	8006a54 <RCC_SetFlashLatency>
 8006a3c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd90      	pop	{r4, r7, pc}
 8006a46:	bf00      	nop
 8006a48:	080140fc 	.word	0x080140fc
 8006a4c:	080140bc 	.word	0x080140bc
 8006a50:	431bde83 	.word	0x431bde83

08006a54 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006a54:	b590      	push	{r4, r7, lr}
 8006a56:	b093      	sub	sp, #76	@ 0x4c
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006a5e:	4b37      	ldr	r3, [pc, #220]	@ (8006b3c <RCC_SetFlashLatency+0xe8>)
 8006a60:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8006a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006a6a:	4a35      	ldr	r2, [pc, #212]	@ (8006b40 <RCC_SetFlashLatency+0xec>)
 8006a6c:	f107 031c 	add.w	r3, r7, #28
 8006a70:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006a76:	4b33      	ldr	r3, [pc, #204]	@ (8006b44 <RCC_SetFlashLatency+0xf0>)
 8006a78:	f107 040c 	add.w	r4, r7, #12
 8006a7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006a82:	2300      	movs	r3, #0
 8006a84:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a8c:	d11a      	bne.n	8006ac4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a8e:	2300      	movs	r3, #0
 8006a90:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a92:	e013      	b.n	8006abc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006a94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	3348      	adds	r3, #72	@ 0x48
 8006a9a:	443b      	add	r3, r7
 8006a9c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d807      	bhi.n	8006ab6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	3348      	adds	r3, #72	@ 0x48
 8006aac:	443b      	add	r3, r7
 8006aae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006ab2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006ab4:	e020      	b.n	8006af8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ab8:	3301      	adds	r3, #1
 8006aba:	643b      	str	r3, [r7, #64]	@ 0x40
 8006abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d9e8      	bls.n	8006a94 <RCC_SetFlashLatency+0x40>
 8006ac2:	e019      	b.n	8006af8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ac8:	e013      	b.n	8006af2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	3348      	adds	r3, #72	@ 0x48
 8006ad0:	443b      	add	r3, r7
 8006ad2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d807      	bhi.n	8006aec <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	3348      	adds	r3, #72	@ 0x48
 8006ae2:	443b      	add	r3, r7
 8006ae4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006ae8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006aea:	e005      	b.n	8006af8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aee:	3301      	adds	r3, #1
 8006af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d9e8      	bls.n	8006aca <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006af8:	4b13      	ldr	r3, [pc, #76]	@ (8006b48 <RCC_SetFlashLatency+0xf4>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f023 0207 	bic.w	r2, r3, #7
 8006b00:	4911      	ldr	r1, [pc, #68]	@ (8006b48 <RCC_SetFlashLatency+0xf4>)
 8006b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b04:	4313      	orrs	r3, r2
 8006b06:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b08:	f7fc fa62 	bl	8002fd0 <HAL_GetTick>
 8006b0c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006b0e:	e008      	b.n	8006b22 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006b10:	f7fc fa5e 	bl	8002fd0 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d901      	bls.n	8006b22 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e007      	b.n	8006b32 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006b22:	4b09      	ldr	r3, [pc, #36]	@ (8006b48 <RCC_SetFlashLatency+0xf4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d1ef      	bne.n	8006b10 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	374c      	adds	r7, #76	@ 0x4c
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd90      	pop	{r4, r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	08012cd0 	.word	0x08012cd0
 8006b40:	08012ce0 	.word	0x08012ce0
 8006b44:	08012cec 	.word	0x08012cec
 8006b48:	58004000 	.word	0x58004000

08006b4c <LL_RCC_LSE_IsEnabled>:
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <LL_RCC_LSE_IsEnabled+0x18>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <LL_RCC_LSE_IsEnabled+0x1a>
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <LL_RCC_LSE_IsReady>:
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d101      	bne.n	8006b88 <LL_RCC_LSE_IsReady+0x18>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <LL_RCC_LSE_IsReady+0x1a>
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <LL_RCC_MSI_EnablePLLMode>:
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8006b98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ba2:	f043 0304 	orr.w	r3, r3, #4
 8006ba6:	6013      	str	r3, [r2, #0]
}
 8006ba8:	bf00      	nop
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <LL_RCC_SetRFWKPClockSource>:
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b083      	sub	sp, #12
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006bba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bc2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006bc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <LL_RCC_SetSMPSClockSource>:
{
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bec:	f023 0203 	bic.w	r2, r3, #3
 8006bf0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <LL_RCC_SetSMPSPrescaler>:
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006c18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <LL_RCC_SetUSARTClockSource>:
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c3e:	f023 0203 	bic.w	r2, r3, #3
 8006c42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr

08006c5a <LL_RCC_SetLPUARTClockSource>:
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006c62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c7a:	bf00      	nop
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <LL_RCC_SetI2CClockSource>:
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c92:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	091b      	lsrs	r3, r3, #4
 8006c9a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006c9e:	43db      	mvns	r3, r3
 8006ca0:	401a      	ands	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	011b      	lsls	r3, r3, #4
 8006ca6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006caa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <LL_RCC_SetLPTIMClockSource>:
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ccc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	0c1b      	lsrs	r3, r3, #16
 8006cd4:	041b      	lsls	r3, r3, #16
 8006cd6:	43db      	mvns	r3, r3
 8006cd8:	401a      	ands	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	041b      	lsls	r3, r3, #16
 8006cde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <LL_RCC_SetSAIClockSource>:
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d04:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006d08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <LL_RCC_SetRNGClockSource>:
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d30:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006d34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <LL_RCC_SetCLK48ClockSource>:
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d5c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <LL_RCC_SetUSBClockSource>:
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff ffe3 	bl	8006d4c <LL_RCC_SetCLK48ClockSource>
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <LL_RCC_SetADCClockSource>:
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006da2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <LL_RCC_SetRTCClockSource>:
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <LL_RCC_GetRTCClockSource>:
{
 8006de6:	b480      	push	{r7}
 8006de8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <LL_RCC_ForceBackupDomainReset>:
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006e18:	bf00      	nop
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr

08006e22 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006e22:	b480      	push	{r7}
 8006e24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006e26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006e3a:	bf00      	nop
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <LL_RCC_PLLSAI1_Enable>:
{
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e56:	6013      	str	r3, [r2, #0]
}
 8006e58:	bf00      	nop
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <LL_RCC_PLLSAI1_Disable>:
{
 8006e62:	b480      	push	{r7}
 8006e64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e70:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e74:	6013      	str	r3, [r2, #0]
}
 8006e76:	bf00      	nop
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <LL_RCC_PLLSAI1_IsReady>:
{
 8006e80:	b480      	push	{r7}
 8006e82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e92:	d101      	bne.n	8006e98 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006e94:	2301      	movs	r3, #1
 8006e96:	e000      	b.n	8006e9a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006eac:	2300      	movs	r3, #0
 8006eae:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d034      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ec8:	d021      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006eca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ece:	d81b      	bhi.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ed0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ed4:	d01d      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006ed6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006eda:	d815      	bhi.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006ee0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ee4:	d110      	bne.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ef4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006ef6:	e00d      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3304      	adds	r3, #4
 8006efc:	4618      	mov	r0, r3
 8006efe:	f000 f94d 	bl	800719c <RCCEx_PLLSAI1_ConfigNP>
 8006f02:	4603      	mov	r3, r0
 8006f04:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006f06:	e005      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	77fb      	strb	r3, [r7, #31]
        break;
 8006f0c:	e002      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006f0e:	bf00      	nop
 8006f10:	e000      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006f12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f14:	7ffb      	ldrb	r3, [r7, #31]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d105      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7ff fee8 	bl	8006cf4 <LL_RCC_SetSAIClockSource>
 8006f24:	e001      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f26:	7ffb      	ldrb	r3, [r7, #31]
 8006f28:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d046      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006f36:	f7ff ff56 	bl	8006de6 <LL_RCC_GetRTCClockSource>
 8006f3a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d03c      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006f46:	f7fe fc8d 	bl	8005864 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d105      	bne.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7ff ff30 	bl	8006dba <LL_RCC_SetRTCClockSource>
 8006f5a:	e02e      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f64:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006f66:	f7ff ff4b 	bl	8006e00 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006f6a:	f7ff ff5a 	bl	8006e22 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006f7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006f86:	f7ff fde1 	bl	8006b4c <LL_RCC_LSE_IsEnabled>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d114      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f90:	f7fc f81e 	bl	8002fd0 <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006f96:	e00b      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f98:	f7fc f81a 	bl	8002fd0 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d902      	bls.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	77fb      	strb	r3, [r7, #31]
              break;
 8006fae:	e004      	b.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006fb0:	f7ff fdde 	bl	8006b70 <LL_RCC_LSE_IsReady>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d1ee      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006fba:	7ffb      	ldrb	r3, [r7, #31]
 8006fbc:	77bb      	strb	r3, [r7, #30]
 8006fbe:	e001      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc0:	7ffb      	ldrb	r3, [r7, #31]
 8006fc2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d004      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7ff fe2a 	bl	8006c2e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d004      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff fe35 	bl	8006c5a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff fe5d 	bl	8006cc0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0320 	and.w	r3, r3, #32
 800700e:	2b00      	cmp	r3, #0
 8007010:	d004      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff fe52 	bl	8006cc0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	d004      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	4618      	mov	r0, r3
 800702e:	f7ff fe2a 	bl	8006c86 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0308 	and.w	r3, r3, #8
 800703a:	2b00      	cmp	r3, #0
 800703c:	d004      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007042:	4618      	mov	r0, r3
 8007044:	f7ff fe1f 	bl	8006c86 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007050:	2b00      	cmp	r3, #0
 8007052:	d022      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff fe8d 	bl	8006d78 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007062:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007066:	d107      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007072:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007076:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800707c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007080:	d10b      	bne.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3304      	adds	r3, #4
 8007086:	4618      	mov	r0, r3
 8007088:	f000 f8e3 	bl	8007252 <RCCEx_PLLSAI1_ConfigNQ>
 800708c:	4603      	mov	r3, r0
 800708e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007090:	7ffb      	ldrb	r3, [r7, #31]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007096:	7ffb      	ldrb	r3, [r7, #31]
 8007098:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d02b      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ae:	d008      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070b8:	d003      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d105      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7ff fe2a 	bl	8006d20 <LL_RCC_SetRNGClockSource>
 80070cc:	e00a      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	2000      	movs	r0, #0
 80070da:	f7ff fe21 	bl	8006d20 <LL_RCC_SetRNGClockSource>
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f7ff fe34 	bl	8006d4c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e8:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80070ec:	d107      	bne.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80070ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070fc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007106:	2b00      	cmp	r3, #0
 8007108:	d022      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff fe3d 	bl	8006d8e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800711c:	d107      	bne.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800711e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800712c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007132:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007136:	d10b      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3304      	adds	r3, #4
 800713c:	4618      	mov	r0, r3
 800713e:	f000 f8e3 	bl	8007308 <RCCEx_PLLSAI1_ConfigNR>
 8007142:	4603      	mov	r3, r0
 8007144:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007146:	7ffb      	ldrb	r3, [r7, #31]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800714c:	7ffb      	ldrb	r3, [r7, #31]
 800714e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007160:	4618      	mov	r0, r3
 8007162:	f7ff fd26 	bl	8006bb2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d009      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007176:	4618      	mov	r0, r3
 8007178:	f7ff fd45 	bl	8006c06 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007180:	4618      	mov	r0, r3
 8007182:	f7ff fd2c 	bl	8006bde <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007186:	7fbb      	ldrb	r3, [r7, #30]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3720      	adds	r7, #32
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8007194:	f7ff fcfe 	bl	8006b94 <LL_RCC_MSI_EnablePLLMode>
}
 8007198:	bf00      	nop
 800719a:	bd80      	pop	{r7, pc}

0800719c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80071a8:	f7ff fe5b 	bl	8006e62 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071ac:	f7fb ff10 	bl	8002fd0 <HAL_GetTick>
 80071b0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80071b2:	e009      	b.n	80071c8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071b4:	f7fb ff0c 	bl	8002fd0 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d902      	bls.n	80071c8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	73fb      	strb	r3, [r7, #15]
      break;
 80071c6:	e004      	b.n	80071d2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80071c8:	f7ff fe5a 	bl	8006e80 <LL_RCC_PLLSAI1_IsReady>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1f0      	bne.n	80071b4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d137      	bne.n	8007248 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80071d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	021b      	lsls	r3, r3, #8
 80071e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071ec:	4313      	orrs	r3, r2
 80071ee:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80071f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007202:	4313      	orrs	r3, r2
 8007204:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007206:	f7ff fe1d 	bl	8006e44 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800720a:	f7fb fee1 	bl	8002fd0 <HAL_GetTick>
 800720e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007210:	e009      	b.n	8007226 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007212:	f7fb fedd 	bl	8002fd0 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d902      	bls.n	8007226 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	73fb      	strb	r3, [r7, #15]
        break;
 8007224:	e004      	b.n	8007230 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007226:	f7ff fe2b 	bl	8006e80 <LL_RCC_PLLSAI1_IsReady>
 800722a:	4603      	mov	r3, r0
 800722c:	2b01      	cmp	r3, #1
 800722e:	d1f0      	bne.n	8007212 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007230:	7bfb      	ldrb	r3, [r7, #15]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d108      	bne.n	8007248 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007244:	4313      	orrs	r3, r2
 8007246:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800725e:	f7ff fe00 	bl	8006e62 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007262:	f7fb feb5 	bl	8002fd0 <HAL_GetTick>
 8007266:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007268:	e009      	b.n	800727e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800726a:	f7fb feb1 	bl	8002fd0 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d902      	bls.n	800727e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007278:	2303      	movs	r3, #3
 800727a:	73fb      	strb	r3, [r7, #15]
      break;
 800727c:	e004      	b.n	8007288 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800727e:	f7ff fdff 	bl	8006e80 <LL_RCC_PLLSAI1_IsReady>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1f0      	bne.n	800726a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d137      	bne.n	80072fe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800728e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	021b      	lsls	r3, r3, #8
 800729e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072a2:	4313      	orrs	r3, r2
 80072a4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80072a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072b8:	4313      	orrs	r3, r2
 80072ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80072bc:	f7ff fdc2 	bl	8006e44 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072c0:	f7fb fe86 	bl	8002fd0 <HAL_GetTick>
 80072c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072c6:	e009      	b.n	80072dc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072c8:	f7fb fe82 	bl	8002fd0 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d902      	bls.n	80072dc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	73fb      	strb	r3, [r7, #15]
        break;
 80072da:	e004      	b.n	80072e6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80072dc:	f7ff fdd0 	bl	8006e80 <LL_RCC_PLLSAI1_IsReady>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d1f0      	bne.n	80072c8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d108      	bne.n	80072fe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80072ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072f0:	691a      	ldr	r2, [r3, #16]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072fa:	4313      	orrs	r3, r2
 80072fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007314:	f7ff fda5 	bl	8006e62 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007318:	f7fb fe5a 	bl	8002fd0 <HAL_GetTick>
 800731c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800731e:	e009      	b.n	8007334 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007320:	f7fb fe56 	bl	8002fd0 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	2b02      	cmp	r3, #2
 800732c:	d902      	bls.n	8007334 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	73fb      	strb	r3, [r7, #15]
      break;
 8007332:	e004      	b.n	800733e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007334:	f7ff fda4 	bl	8006e80 <LL_RCC_PLLSAI1_IsReady>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1f0      	bne.n	8007320 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d137      	bne.n	80073b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	021b      	lsls	r3, r3, #8
 8007354:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007358:	4313      	orrs	r3, r2
 800735a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800735c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800736e:	4313      	orrs	r3, r2
 8007370:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007372:	f7ff fd67 	bl	8006e44 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007376:	f7fb fe2b 	bl	8002fd0 <HAL_GetTick>
 800737a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800737c:	e009      	b.n	8007392 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800737e:	f7fb fe27 	bl	8002fd0 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b02      	cmp	r3, #2
 800738a:	d902      	bls.n	8007392 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	73fb      	strb	r3, [r7, #15]
        break;
 8007390:	e004      	b.n	800739c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007392:	f7ff fd75 	bl	8006e80 <LL_RCC_PLLSAI1_IsReady>
 8007396:	4603      	mov	r3, r0
 8007398:	2b01      	cmp	r3, #1
 800739a:	d1f0      	bne.n	800737e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d108      	bne.n	80073b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80073a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073a6:	691a      	ldr	r2, [r3, #16]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073b0:	4313      	orrs	r3, r2
 80073b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b084      	sub	sp, #16
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d101      	bne.n	80073d4 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e07a      	b.n	80074ca <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d106      	bne.n	80073ee <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7fb f905 	bl	80025f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2202      	movs	r2, #2
 80073f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f003 0310 	and.w	r3, r3, #16
 8007400:	2b10      	cmp	r3, #16
 8007402:	d058      	beq.n	80074b6 <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	22ca      	movs	r2, #202	@ 0xca
 800740a:	625a      	str	r2, [r3, #36]	@ 0x24
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2253      	movs	r2, #83	@ 0x53
 8007412:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f883 	bl	8007520 <RTC_EnterInitMode>
 800741a:	4603      	mov	r3, r0
 800741c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d12c      	bne.n	800747e <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	6812      	ldr	r2, [r2, #0]
 800742e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007432:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007436:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6899      	ldr	r1, [r3, #8]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	431a      	orrs	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	431a      	orrs	r2, r3
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	68d2      	ldr	r2, [r2, #12]
 800745e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6919      	ldr	r1, [r3, #16]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	041a      	lsls	r2, r3, #16
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f88b 	bl	8007590 <RTC_ExitInitMode>
 800747a:	4603      	mov	r3, r0
 800747c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d113      	bne.n	80074ac <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0203 	bic.w	r2, r2, #3
 8007492:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	69da      	ldr	r2, [r3, #28]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	431a      	orrs	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	22ff      	movs	r2, #255	@ 0xff
 80074b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80074b4:	e001      	b.n	80074ba <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d103      	bne.n	80074c8 <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
	...

080074d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a0d      	ldr	r2, [pc, #52]	@ (800751c <HAL_RTC_WaitForSynchro+0x48>)
 80074e6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074e8:	f7fb fd72 	bl	8002fd0 <HAL_GetTick>
 80074ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80074ee:	e009      	b.n	8007504 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074f0:	f7fb fd6e 	bl	8002fd0 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074fe:	d901      	bls.n	8007504 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e007      	b.n	8007514 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f003 0320 	and.w	r3, r3, #32
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0ee      	beq.n	80074f0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	0001ff5f 	.word	0x0001ff5f

08007520 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800753a:	2b00      	cmp	r3, #0
 800753c:	d123      	bne.n	8007586 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68da      	ldr	r2, [r3, #12]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800754c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800754e:	f7fb fd3f 	bl	8002fd0 <HAL_GetTick>
 8007552:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007554:	e00d      	b.n	8007572 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007556:	f7fb fd3b 	bl	8002fd0 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007564:	d905      	bls.n	8007572 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2204      	movs	r2, #4
 800756a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d102      	bne.n	8007586 <RTC_EnterInitMode+0x66>
 8007580:	7bfb      	ldrb	r3, [r7, #15]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d1e7      	bne.n	8007556 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007586:	7bfb      	ldrb	r3, [r7, #15]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075aa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10b      	bne.n	80075d2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff ff8a 	bl	80074d4 <HAL_RTC_WaitForSynchro>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2204      	movs	r2, #4
 80075ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80075e8:	4b5f      	ldr	r3, [pc, #380]	@ (8007768 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a5f      	ldr	r2, [pc, #380]	@ (800776c <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 80075ee:	fba2 2303 	umull	r2, r3, r2, r3
 80075f2:	0adb      	lsrs	r3, r3, #11
 80075f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80075f8:	fb02 f303 	mul.w	r3, r2, r3
 80075fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d101      	bne.n	800760c <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 8007608:	2302      	movs	r3, #2
 800760a:	e0a7      	b.n	800775c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2202      	movs	r2, #2
 8007618:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	22ca      	movs	r2, #202	@ 0xca
 8007622:	625a      	str	r2, [r3, #36]	@ 0x24
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2253      	movs	r2, #83	@ 0x53
 800762a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007636:	2b00      	cmp	r3, #0
 8007638:	d01a      	beq.n	8007670 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	3b01      	subs	r3, #1
 800763e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10d      	bne.n	8007662 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	22ff      	movs	r2, #255	@ 0xff
 800764c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2203      	movs	r2, #3
 8007652:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e07c      	b.n	800775c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1e4      	bne.n	800763a <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689a      	ldr	r2, [r3, #8]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800767e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	b2da      	uxtb	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007690:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8007692:	4b35      	ldr	r3, [pc, #212]	@ (8007768 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a35      	ldr	r2, [pc, #212]	@ (800776c <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 8007698:	fba2 2303 	umull	r2, r3, r2, r3
 800769c:	0adb      	lsrs	r3, r3, #11
 800769e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80076a2:	fb02 f303 	mul.w	r3, r2, r3
 80076a6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10d      	bne.n	80076d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	22ff      	movs	r2, #255	@ 0xff
 80076ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2203      	movs	r2, #3
 80076c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e045      	b.n	800775c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f003 0304 	and.w	r3, r3, #4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0e4      	beq.n	80076a8 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0207 	bic.w	r2, r2, #7
 80076ec:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6899      	ldr	r1, [r3, #8]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007706:	4b1a      	ldr	r3, [pc, #104]	@ (8007770 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8007708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800770c:	4a18      	ldr	r2, [pc, #96]	@ (8007770 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800770e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007712:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007716:	4b16      	ldr	r3, [pc, #88]	@ (8007770 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a15      	ldr	r2, [pc, #84]	@ (8007770 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800771c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007720:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007730:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007740:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	22ff      	movs	r2, #255	@ 0xff
 8007748:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	371c      	adds	r7, #28
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	20000008 	.word	0x20000008
 800776c:	10624dd3 	.word	0x10624dd3
 8007770:	58000800 	.word	0x58000800

08007774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e095      	b.n	80078b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800778a:	2b00      	cmp	r3, #0
 800778c:	d108      	bne.n	80077a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007796:	d009      	beq.n	80077ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	61da      	str	r2, [r3, #28]
 800779e:	e005      	b.n	80077ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7fb f9c2 	bl	8002b50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077ec:	d902      	bls.n	80077f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	e002      	b.n	80077fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80077f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007802:	d007      	beq.n	8007814 <HAL_SPI_Init+0xa0>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800780c:	d002      	beq.n	8007814 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800784c:	431a      	orrs	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007856:	ea42 0103 	orr.w	r1, r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	0c1b      	lsrs	r3, r3, #16
 8007870:	f003 0204 	and.w	r2, r3, #4
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	431a      	orrs	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007882:	f003 0308 	and.w	r3, r3, #8
 8007886:	431a      	orrs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007890:	ea42 0103 	orr.w	r1, r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b088      	sub	sp, #32
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	603b      	str	r3, [r7, #0]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078ca:	f7fb fb81 	bl	8002fd0 <HAL_GetTick>
 80078ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80078d0:	88fb      	ldrh	r3, [r7, #6]
 80078d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d001      	beq.n	80078e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80078e0:	2302      	movs	r3, #2
 80078e2:	e15c      	b.n	8007b9e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <HAL_SPI_Transmit+0x36>
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e154      	b.n	8007b9e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d101      	bne.n	8007902 <HAL_SPI_Transmit+0x48>
 80078fe:	2302      	movs	r3, #2
 8007900:	e14d      	b.n	8007b9e <HAL_SPI_Transmit+0x2e4>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2203      	movs	r2, #3
 800790e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	88fa      	ldrh	r2, [r7, #6]
 8007922:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	88fa      	ldrh	r2, [r7, #6]
 8007928:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007954:	d10f      	bne.n	8007976 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007964:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007974:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007980:	2b40      	cmp	r3, #64	@ 0x40
 8007982:	d007      	beq.n	8007994 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007992:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800799c:	d952      	bls.n	8007a44 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <HAL_SPI_Transmit+0xf2>
 80079a6:	8b7b      	ldrh	r3, [r7, #26]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d145      	bne.n	8007a38 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b0:	881a      	ldrh	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079bc:	1c9a      	adds	r2, r3, #2
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079d0:	e032      	b.n	8007a38 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d112      	bne.n	8007a06 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e4:	881a      	ldrh	r2, [r3, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f0:	1c9a      	adds	r2, r3, #2
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a04:	e018      	b.n	8007a38 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a06:	f7fb fae3 	bl	8002fd0 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d803      	bhi.n	8007a1e <HAL_SPI_Transmit+0x164>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1c:	d102      	bne.n	8007a24 <HAL_SPI_Transmit+0x16a>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d109      	bne.n	8007a38 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e0b2      	b.n	8007b9e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1c7      	bne.n	80079d2 <HAL_SPI_Transmit+0x118>
 8007a42:	e083      	b.n	8007b4c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <HAL_SPI_Transmit+0x198>
 8007a4c:	8b7b      	ldrh	r3, [r7, #26]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d177      	bne.n	8007b42 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d912      	bls.n	8007a82 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a60:	881a      	ldrh	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a6c:	1c9a      	adds	r2, r3, #2
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b02      	subs	r3, #2
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a80:	e05f      	b.n	8007b42 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	330c      	adds	r3, #12
 8007a8c:	7812      	ldrb	r2, [r2, #0]
 8007a8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007aa8:	e04b      	b.n	8007b42 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d12b      	bne.n	8007b10 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d912      	bls.n	8007ae8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac6:	881a      	ldrh	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad2:	1c9a      	adds	r2, r3, #2
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	3b02      	subs	r3, #2
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ae6:	e02c      	b.n	8007b42 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	330c      	adds	r3, #12
 8007af2:	7812      	ldrb	r2, [r2, #0]
 8007af4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	3b01      	subs	r3, #1
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b0e:	e018      	b.n	8007b42 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b10:	f7fb fa5e 	bl	8002fd0 <HAL_GetTick>
 8007b14:	4602      	mov	r2, r0
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d803      	bhi.n	8007b28 <HAL_SPI_Transmit+0x26e>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b26:	d102      	bne.n	8007b2e <HAL_SPI_Transmit+0x274>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d109      	bne.n	8007b42 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e02d      	b.n	8007b9e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1ae      	bne.n	8007aaa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b4c:	69fa      	ldr	r2, [r7, #28]
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 f947 	bl	8007de4 <SPI_EndRxTxTransaction>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10a      	bne.n	8007b80 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	617b      	str	r3, [r7, #20]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	617b      	str	r3, [r7, #20]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e000      	b.n	8007b9e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
  }
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3720      	adds	r7, #32
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b088      	sub	sp, #32
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	603b      	str	r3, [r7, #0]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007bb8:	f7fb fa0a 	bl	8002fd0 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc0:	1a9b      	subs	r3, r3, r2
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bc8:	f7fb fa02 	bl	8002fd0 <HAL_GetTick>
 8007bcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bce:	4b39      	ldr	r3, [pc, #228]	@ (8007cb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	015b      	lsls	r3, r3, #5
 8007bd4:	0d1b      	lsrs	r3, r3, #20
 8007bd6:	69fa      	ldr	r2, [r7, #28]
 8007bd8:	fb02 f303 	mul.w	r3, r2, r3
 8007bdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bde:	e054      	b.n	8007c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be6:	d050      	beq.n	8007c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007be8:	f7fb f9f2 	bl	8002fd0 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d902      	bls.n	8007bfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d13d      	bne.n	8007c7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c16:	d111      	bne.n	8007c3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c20:	d004      	beq.n	8007c2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c2a:	d107      	bne.n	8007c3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c44:	d10f      	bne.n	8007c66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e017      	b.n	8007caa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4013      	ands	r3, r2
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	bf0c      	ite	eq
 8007c9a:	2301      	moveq	r3, #1
 8007c9c:	2300      	movne	r3, #0
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	79fb      	ldrb	r3, [r7, #7]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d19b      	bne.n	8007be0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3720      	adds	r7, #32
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000008 	.word	0x20000008

08007cb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08a      	sub	sp, #40	@ 0x28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007cca:	f7fb f981 	bl	8002fd0 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd2:	1a9b      	subs	r3, r3, r2
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007cda:	f7fb f979 	bl	8002fd0 <HAL_GetTick>
 8007cde:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8007de0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	00da      	lsls	r2, r3, #3
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	0d1b      	lsrs	r3, r3, #20
 8007cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cfa:	fb02 f303 	mul.w	r3, r2, r3
 8007cfe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007d00:	e060      	b.n	8007dc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007d08:	d107      	bne.n	8007d1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d104      	bne.n	8007d1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d20:	d050      	beq.n	8007dc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d22:	f7fb f955 	bl	8002fd0 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d902      	bls.n	8007d38 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d13d      	bne.n	8007db4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007d46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d50:	d111      	bne.n	8007d76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d5a:	d004      	beq.n	8007d66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d64:	d107      	bne.n	8007d76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d7e:	d10f      	bne.n	8007da0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e010      	b.n	8007dd6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d101      	bne.n	8007dbe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	4013      	ands	r3, r2
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d196      	bne.n	8007d02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3728      	adds	r7, #40	@ 0x28
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000008 	.word	0x20000008

08007de4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f7ff ff5b 	bl	8007cb8 <SPI_WaitFifoStateUntilTimeout>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d007      	beq.n	8007e18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e0c:	f043 0220 	orr.w	r2, r3, #32
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e027      	b.n	8007e68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	2180      	movs	r1, #128	@ 0x80
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f7ff fec0 	bl	8007ba8 <SPI_WaitFlagStateUntilTimeout>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d007      	beq.n	8007e3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e32:	f043 0220 	orr.w	r2, r3, #32
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e014      	b.n	8007e68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f7ff ff34 	bl	8007cb8 <SPI_WaitFifoStateUntilTimeout>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d007      	beq.n	8007e66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e5a:	f043 0220 	orr.w	r2, r3, #32
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e000      	b.n	8007e68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08a      	sub	sp, #40	@ 0x28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e84:	2b20      	cmp	r3, #32
 8007e86:	d167      	bne.n	8007f58 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <HAL_UART_Transmit_DMA+0x24>
 8007e8e:	88fb      	ldrh	r3, [r7, #6]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e060      	b.n	8007f5a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	88fa      	ldrh	r2, [r7, #6]
 8007ea2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	88fa      	ldrh	r2, [r7, #6]
 8007eaa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2221      	movs	r2, #33	@ 0x21
 8007eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d028      	beq.n	8007f18 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007eca:	4a26      	ldr	r2, [pc, #152]	@ (8007f64 <HAL_UART_Transmit_DMA+0xf4>)
 8007ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ed2:	4a25      	ldr	r2, [pc, #148]	@ (8007f68 <HAL_UART_Transmit_DMA+0xf8>)
 8007ed4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007eda:	4a24      	ldr	r2, [pc, #144]	@ (8007f6c <HAL_UART_Transmit_DMA+0xfc>)
 8007edc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eee:	4619      	mov	r1, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	3328      	adds	r3, #40	@ 0x28
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	88fb      	ldrh	r3, [r7, #6]
 8007efa:	f7fb fa26 	bl	800334a <HAL_DMA_Start_IT>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d009      	beq.n	8007f18 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2210      	movs	r2, #16
 8007f08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e020      	b.n	8007f5a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2240      	movs	r2, #64	@ 0x40
 8007f1e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f40:	623a      	str	r2, [r7, #32]
 8007f42:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	69f9      	ldr	r1, [r7, #28]
 8007f46:	6a3a      	ldr	r2, [r7, #32]
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e5      	bne.n	8007f20 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	e000      	b.n	8007f5a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007f58:	2302      	movs	r3, #2
  }
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3728      	adds	r7, #40	@ 0x28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	08008767 	.word	0x08008767
 8007f68:	08008805 	.word	0x08008805
 8007f6c:	08008825 	.word	0x08008825

08007f70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b0ba      	sub	sp, #232	@ 0xe8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689b      	ldr	r3, [r3, #8]
 8007f92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007f9a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007fa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d11b      	bne.n	8007fe4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fb0:	f003 0320 	and.w	r3, r3, #32
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d015      	beq.n	8007fe4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fbc:	f003 0320 	and.w	r3, r3, #32
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d105      	bne.n	8007fd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d009      	beq.n	8007fe4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 8312 	beq.w	80085fe <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	4798      	blx	r3
      }
      return;
 8007fe2:	e30c      	b.n	80085fe <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007fe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 8129 	beq.w	8008240 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007fee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007ff2:	4b90      	ldr	r3, [pc, #576]	@ (8008234 <HAL_UART_IRQHandler+0x2c4>)
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d106      	bne.n	8008008 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007ffa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007ffe:	4b8e      	ldr	r3, [pc, #568]	@ (8008238 <HAL_UART_IRQHandler+0x2c8>)
 8008000:	4013      	ands	r3, r2
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 811c 	beq.w	8008240 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d011      	beq.n	8008038 <HAL_UART_IRQHandler+0xc8>
 8008014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00b      	beq.n	8008038 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2201      	movs	r2, #1
 8008026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800802e:	f043 0201 	orr.w	r2, r3, #1
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b00      	cmp	r3, #0
 8008042:	d011      	beq.n	8008068 <HAL_UART_IRQHandler+0xf8>
 8008044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008048:	f003 0301 	and.w	r3, r3, #1
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00b      	beq.n	8008068 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2202      	movs	r2, #2
 8008056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800805e:	f043 0204 	orr.w	r2, r3, #4
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	2b00      	cmp	r3, #0
 8008072:	d011      	beq.n	8008098 <HAL_UART_IRQHandler+0x128>
 8008074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2204      	movs	r2, #4
 8008086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800808e:	f043 0202 	orr.w	r2, r3, #2
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800809c:	f003 0308 	and.w	r3, r3, #8
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d017      	beq.n	80080d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080a8:	f003 0320 	and.w	r3, r3, #32
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d105      	bne.n	80080bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80080b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80080b4:	4b5f      	ldr	r3, [pc, #380]	@ (8008234 <HAL_UART_IRQHandler+0x2c4>)
 80080b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00b      	beq.n	80080d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2208      	movs	r2, #8
 80080c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080ca:	f043 0208 	orr.w	r2, r3, #8
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80080d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d012      	beq.n	8008106 <HAL_UART_IRQHandler+0x196>
 80080e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d00c      	beq.n	8008106 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080fc:	f043 0220 	orr.w	r2, r3, #32
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 8278 	beq.w	8008602 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008116:	f003 0320 	and.w	r3, r3, #32
 800811a:	2b00      	cmp	r3, #0
 800811c:	d013      	beq.n	8008146 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800811e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	d105      	bne.n	8008136 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800812a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800812e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d007      	beq.n	8008146 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800813a:	2b00      	cmp	r3, #0
 800813c:	d003      	beq.n	8008146 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800814c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800815a:	2b40      	cmp	r3, #64	@ 0x40
 800815c:	d005      	beq.n	800816a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800815e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008162:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008166:	2b00      	cmp	r3, #0
 8008168:	d058      	beq.n	800821c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fa95 	bl	800869a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800817a:	2b40      	cmp	r3, #64	@ 0x40
 800817c:	d148      	bne.n	8008210 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3308      	adds	r3, #8
 8008184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008194:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800819c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3308      	adds	r3, #8
 80081a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80081aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80081ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80081b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80081ba:	e841 2300 	strex	r3, r2, [r1]
 80081be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80081c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1d9      	bne.n	800817e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d017      	beq.n	8008204 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081da:	4a18      	ldr	r2, [pc, #96]	@ (800823c <HAL_UART_IRQHandler+0x2cc>)
 80081dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fb f98a 	bl	80034fe <HAL_DMA_Abort_IT>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d01f      	beq.n	8008230 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80081fe:	4610      	mov	r0, r2
 8008200:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008202:	e015      	b.n	8008230 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800820e:	e00f      	b.n	8008230 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800821a:	e009      	b.n	8008230 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800822e:	e1e8      	b.n	8008602 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008230:	bf00      	nop
    return;
 8008232:	e1e6      	b.n	8008602 <HAL_UART_IRQHandler+0x692>
 8008234:	10000001 	.word	0x10000001
 8008238:	04000120 	.word	0x04000120
 800823c:	080088a9 	.word	0x080088a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008244:	2b01      	cmp	r3, #1
 8008246:	f040 8176 	bne.w	8008536 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800824a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800824e:	f003 0310 	and.w	r3, r3, #16
 8008252:	2b00      	cmp	r3, #0
 8008254:	f000 816f 	beq.w	8008536 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800825c:	f003 0310 	and.w	r3, r3, #16
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 8168 	beq.w	8008536 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2210      	movs	r2, #16
 800826c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008278:	2b40      	cmp	r3, #64	@ 0x40
 800827a:	f040 80dc 	bne.w	8008436 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800828c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 80b1 	beq.w	80083f8 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800829c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082a0:	429a      	cmp	r2, r3
 80082a2:	f080 80a9 	bcs.w	80083f8 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0320 	and.w	r3, r3, #32
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f040 8087 	bne.w	80083d2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80082d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	461a      	mov	r2, r3
 80082ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80082ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80082fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80082fe:	e841 2300 	strex	r3, r2, [r1]
 8008302:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008306:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1da      	bne.n	80082c4 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3308      	adds	r3, #8
 8008314:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800831e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008320:	f023 0301 	bic.w	r3, r3, #1
 8008324:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3308      	adds	r3, #8
 800832e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008332:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008336:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008338:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800833a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800833e:	e841 2300 	strex	r3, r2, [r1]
 8008342:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008344:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e1      	bne.n	800830e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	3308      	adds	r3, #8
 8008350:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008352:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008354:	e853 3f00 	ldrex	r3, [r3]
 8008358:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800835a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800835c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008360:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3308      	adds	r3, #8
 800836a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800836e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008370:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008372:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008374:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008376:	e841 2300 	strex	r3, r2, [r1]
 800837a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800837c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1e3      	bne.n	800834a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2220      	movs	r2, #32
 8008386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008398:	e853 3f00 	ldrex	r3, [r3]
 800839c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800839e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083a0:	f023 0310 	bic.w	r3, r3, #16
 80083a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	461a      	mov	r2, r3
 80083ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1e4      	bne.n	8008390 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fb f837 	bl	8003440 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2202      	movs	r2, #2
 80083d6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80083ea:	b292      	uxth	r2, r2
 80083ec:	1a8a      	subs	r2, r1, r2
 80083ee:	b292      	uxth	r2, r2
 80083f0:	4611      	mov	r1, r2
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80083f6:	e106      	b.n	8008606 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008402:	429a      	cmp	r2, r3
 8008404:	f040 80ff 	bne.w	8008606 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b20      	cmp	r3, #32
 8008418:	f040 80f5 	bne.w	8008606 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2202      	movs	r2, #2
 8008420:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800842e:	4611      	mov	r1, r2
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	4798      	blx	r3
      return;
 8008434:	e0e7      	b.n	8008606 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008442:	b29b      	uxth	r3, r3
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008450:	b29b      	uxth	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 80d9 	beq.w	800860a <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8008458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 80d4 	beq.w	800860a <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846a:	e853 3f00 	ldrex	r3, [r3]
 800846e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008476:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008484:	647b      	str	r3, [r7, #68]	@ 0x44
 8008486:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800848a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e4      	bne.n	8008462 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3308      	adds	r3, #8
 800849e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	623b      	str	r3, [r7, #32]
   return(result);
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084ae:	f023 0301 	bic.w	r3, r3, #1
 80084b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	3308      	adds	r3, #8
 80084bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80084c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80084c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c8:	e841 2300 	strex	r3, r2, [r1]
 80084cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1e1      	bne.n	8008498 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2220      	movs	r2, #32
 80084d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2200      	movs	r2, #0
 80084e6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f023 0310 	bic.w	r3, r3, #16
 80084fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	461a      	mov	r2, r3
 8008506:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800850a:	61fb      	str	r3, [r7, #28]
 800850c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	69b9      	ldr	r1, [r7, #24]
 8008510:	69fa      	ldr	r2, [r7, #28]
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	617b      	str	r3, [r7, #20]
   return(result);
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e4      	bne.n	80084e8 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2202      	movs	r2, #2
 8008522:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800852a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800852e:	4611      	mov	r1, r2
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008534:	e069      	b.n	800860a <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800853a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d010      	beq.n	8008564 <HAL_UART_IRQHandler+0x5f4>
 8008542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00a      	beq.n	8008564 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008556:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008562:	e055      	b.n	8008610 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800856c:	2b00      	cmp	r3, #0
 800856e:	d014      	beq.n	800859a <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008578:	2b00      	cmp	r3, #0
 800857a:	d105      	bne.n	8008588 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800857c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008580:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008584:	2b00      	cmp	r3, #0
 8008586:	d008      	beq.n	800859a <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800858c:	2b00      	cmp	r3, #0
 800858e:	d03e      	beq.n	800860e <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	4798      	blx	r3
    }
    return;
 8008598:	e039      	b.n	800860e <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800859a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800859e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d009      	beq.n	80085ba <HAL_UART_IRQHandler+0x64a>
 80085a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f98c 	bl	80088d0 <UART_EndTransmit_IT>
    return;
 80085b8:	e02a      	b.n	8008610 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80085ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00b      	beq.n	80085de <HAL_UART_IRQHandler+0x66e>
 80085c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d005      	beq.n	80085de <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085dc:	e018      	b.n	8008610 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80085de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d012      	beq.n	8008610 <HAL_UART_IRQHandler+0x6a0>
 80085ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	da0e      	bge.n	8008610 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085fc:	e008      	b.n	8008610 <HAL_UART_IRQHandler+0x6a0>
      return;
 80085fe:	bf00      	nop
 8008600:	e006      	b.n	8008610 <HAL_UART_IRQHandler+0x6a0>
    return;
 8008602:	bf00      	nop
 8008604:	e004      	b.n	8008610 <HAL_UART_IRQHandler+0x6a0>
      return;
 8008606:	bf00      	nop
 8008608:	e002      	b.n	8008610 <HAL_UART_IRQHandler+0x6a0>
      return;
 800860a:	bf00      	nop
 800860c:	e000      	b.n	8008610 <HAL_UART_IRQHandler+0x6a0>
    return;
 800860e:	bf00      	nop
  }
}
 8008610:	37e8      	adds	r7, #232	@ 0xe8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop

08008618 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008618:	b480      	push	{r7}
 800861a:	b08f      	sub	sp, #60	@ 0x3c
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	e853 3f00 	ldrex	r3, [r3]
 800862c:	61fb      	str	r3, [r7, #28]
   return(result);
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008634:	637b      	str	r3, [r7, #52]	@ 0x34
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800863e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008640:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008642:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008646:	e841 2300 	strex	r3, r2, [r1]
 800864a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800864c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1e6      	bne.n	8008620 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	3308      	adds	r3, #8
 8008658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	60bb      	str	r3, [r7, #8]
   return(result);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008668:	633b      	str	r3, [r7, #48]	@ 0x30
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	3308      	adds	r3, #8
 8008670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008672:	61ba      	str	r2, [r7, #24]
 8008674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6979      	ldr	r1, [r7, #20]
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	613b      	str	r3, [r7, #16]
   return(result);
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e5      	bne.n	8008652 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2220      	movs	r2, #32
 800868a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800868e:	bf00      	nop
 8008690:	373c      	adds	r7, #60	@ 0x3c
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800869a:	b480      	push	{r7}
 800869c:	b095      	sub	sp, #84	@ 0x54
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	461a      	mov	r2, r3
 80086be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80086c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e6      	bne.n	80086a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3308      	adds	r3, #8
 80086da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	e853 3f00 	ldrex	r3, [r3]
 80086e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086ea:	f023 0301 	bic.w	r3, r3, #1
 80086ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3308      	adds	r3, #8
 80086f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008700:	e841 2300 	strex	r3, r2, [r1]
 8008704:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1e3      	bne.n	80086d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008710:	2b01      	cmp	r3, #1
 8008712:	d118      	bne.n	8008746 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	60bb      	str	r3, [r7, #8]
   return(result);
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f023 0310 	bic.w	r3, r3, #16
 8008728:	647b      	str	r3, [r7, #68]	@ 0x44
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008732:	61bb      	str	r3, [r7, #24]
 8008734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008736:	6979      	ldr	r1, [r7, #20]
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	613b      	str	r3, [r7, #16]
   return(result);
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e6      	bne.n	8008714 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2220      	movs	r2, #32
 800874a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800875a:	bf00      	nop
 800875c:	3754      	adds	r7, #84	@ 0x54
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b090      	sub	sp, #64	@ 0x40
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008772:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	d137      	bne.n	80087f2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008784:	2200      	movs	r2, #0
 8008786:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800878a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008794:	e853 3f00 	ldrex	r3, [r3]
 8008798:	623b      	str	r3, [r7, #32]
   return(result);
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80087a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3308      	adds	r3, #8
 80087a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80087ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087b2:	e841 2300 	strex	r3, r2, [r1]
 80087b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1e5      	bne.n	800878a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
 80087da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087dc:	61fb      	str	r3, [r7, #28]
 80087de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	69b9      	ldr	r1, [r7, #24]
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	617b      	str	r3, [r7, #20]
   return(result);
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e6      	bne.n	80087be <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087f0:	e004      	b.n	80087fc <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 80087f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80087f8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80087fa:	4798      	blx	r3
}
 80087fc:	bf00      	nop
 80087fe:	3740      	adds	r7, #64	@ 0x40
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008810:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800881c:	bf00      	nop
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008830:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008838:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008840:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800884c:	2b80      	cmp	r3, #128	@ 0x80
 800884e:	d109      	bne.n	8008864 <UART_DMAError+0x40>
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	2b21      	cmp	r3, #33	@ 0x21
 8008854:	d106      	bne.n	8008864 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2200      	movs	r2, #0
 800885a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800885e:	6978      	ldr	r0, [r7, #20]
 8008860:	f7ff feda 	bl	8008618 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800886e:	2b40      	cmp	r3, #64	@ 0x40
 8008870:	d109      	bne.n	8008886 <UART_DMAError+0x62>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b22      	cmp	r3, #34	@ 0x22
 8008876:	d106      	bne.n	8008886 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	2200      	movs	r2, #0
 800887c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008880:	6978      	ldr	r0, [r7, #20]
 8008882:	f7ff ff0a 	bl	800869a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800888c:	f043 0210 	orr.w	r2, r3, #16
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800889c:	6978      	ldr	r0, [r7, #20]
 800889e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088a0:	bf00      	nop
 80088a2:	3718      	adds	r7, #24
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088c8:	bf00      	nop
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	e853 3f00 	ldrex	r3, [r3]
 80088e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088ec:	61fb      	str	r3, [r7, #28]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	61bb      	str	r3, [r7, #24]
 80088f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6979      	ldr	r1, [r7, #20]
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	613b      	str	r3, [r7, #16]
   return(result);
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e6      	bne.n	80088d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2220      	movs	r2, #32
 800890e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008922:	bf00      	nop
 8008924:	3720      	adds	r7, #32
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800892a:	b480      	push	{r7}
 800892c:	b085      	sub	sp, #20
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800893a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800893e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	b29a      	uxth	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3714      	adds	r7, #20
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008958:	b480      	push	{r7}
 800895a:	b085      	sub	sp, #20
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008960:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008964:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800896c:	b29a      	uxth	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	b29b      	uxth	r3, r3
 8008972:	43db      	mvns	r3, r3
 8008974:	b29b      	uxth	r3, r3
 8008976:	4013      	ands	r3, r2
 8008978:	b29a      	uxth	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr

0800898e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800898e:	b480      	push	{r7}
 8008990:	b085      	sub	sp, #20
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	1d3b      	adds	r3, r7, #4
 8008998:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2201      	movs	r2, #1
 80089a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
	...

080089cc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b0a7      	sub	sp, #156	@ 0x9c
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80089ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089f2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	78db      	ldrb	r3, [r3, #3]
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d81f      	bhi.n	8008a3e <USB_ActivateEndpoint+0x72>
 80089fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008a04 <USB_ActivateEndpoint+0x38>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a15 	.word	0x08008a15
 8008a08:	08008a31 	.word	0x08008a31
 8008a0c:	08008a47 	.word	0x08008a47
 8008a10:	08008a23 	.word	0x08008a23
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008a14:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008a18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a1c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008a20:	e012      	b.n	8008a48 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008a22:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008a26:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008a2a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008a2e:	e00b      	b.n	8008a48 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008a30:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008a34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008a38:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8008a3c:	e004      	b.n	8008a48 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8008a44:	e000      	b.n	8008a48 <USB_ActivateEndpoint+0x7c>
      break;
 8008a46:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	441a      	add	r2, r3
 8008a52:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	b21b      	sxth	r3, r3
 8008a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a82:	b21a      	sxth	r2, r3
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	b21b      	sxth	r3, r3
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	b21b      	sxth	r3, r3
 8008a8e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	441a      	add	r2, r3
 8008a9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008aa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	7b1b      	ldrb	r3, [r3, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f040 8180 	bne.w	8008dbe <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	785b      	ldrb	r3, [r3, #1]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 8084 	beq.w	8008bd0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	61bb      	str	r3, [r7, #24]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	4413      	add	r3, r2
 8008ada:	61bb      	str	r3, [r7, #24]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	00da      	lsls	r2, r3, #3
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	88db      	ldrh	r3, [r3, #6]
 8008af0:	085b      	lsrs	r3, r3, #1
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	827b      	strh	r3, [r7, #18]
 8008b0a:	8a7b      	ldrh	r3, [r7, #18]
 8008b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d01b      	beq.n	8008b4c <USB_ActivateEndpoint+0x180>
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b2a:	823b      	strh	r3, [r7, #16]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	441a      	add	r2, r3
 8008b36:	8a3b      	ldrh	r3, [r7, #16]
 8008b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	78db      	ldrb	r3, [r3, #3]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d020      	beq.n	8008b96 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4413      	add	r3, r2
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b6a:	81bb      	strh	r3, [r7, #12]
 8008b6c:	89bb      	ldrh	r3, [r7, #12]
 8008b6e:	f083 0320 	eor.w	r3, r3, #32
 8008b72:	81bb      	strh	r3, [r7, #12]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	441a      	add	r2, r3
 8008b7e:	89bb      	ldrh	r3, [r7, #12]
 8008b80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	8013      	strh	r3, [r2, #0]
 8008b94:	e3f9      	b.n	800938a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	881b      	ldrh	r3, [r3, #0]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bac:	81fb      	strh	r3, [r7, #14]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	441a      	add	r2, r3
 8008bb8:	89fb      	ldrh	r3, [r7, #14]
 8008bba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	8013      	strh	r3, [r2, #0]
 8008bce:	e3dc      	b.n	800938a <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	461a      	mov	r2, r3
 8008bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be0:	4413      	add	r3, r2
 8008be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	00da      	lsls	r2, r3, #3
 8008bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bec:	4413      	add	r3, r2
 8008bee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	88db      	ldrh	r3, [r3, #6]
 8008bf8:	085b      	lsrs	r3, r3, #1
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	005b      	lsls	r3, r3, #1
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c02:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	461a      	mov	r2, r3
 8008c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c14:	4413      	add	r3, r2
 8008c16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	00da      	lsls	r2, r3, #3
 8008c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c20:	4413      	add	r3, r2
 8008c22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c36:	801a      	strh	r2, [r3, #0]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10a      	bne.n	8008c56 <USB_ActivateEndpoint+0x28a>
 8008c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c42:	881b      	ldrh	r3, [r3, #0]
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c52:	801a      	strh	r2, [r3, #0]
 8008c54:	e041      	b.n	8008cda <USB_ActivateEndpoint+0x30e>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c5c:	d81c      	bhi.n	8008c98 <USB_ActivateEndpoint+0x2cc>
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	085b      	lsrs	r3, r3, #1
 8008c64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d004      	beq.n	8008c7e <USB_ActivateEndpoint+0x2b2>
 8008c74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c78:	3301      	adds	r3, #1
 8008c7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	029b      	lsls	r3, r3, #10
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c94:	801a      	strh	r2, [r3, #0]
 8008c96:	e020      	b.n	8008cda <USB_ActivateEndpoint+0x30e>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	691b      	ldr	r3, [r3, #16]
 8008c9c:	095b      	lsrs	r3, r3, #5
 8008c9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	f003 031f 	and.w	r3, r3, #31
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d104      	bne.n	8008cb8 <USB_ActivateEndpoint+0x2ec>
 8008cae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	029b      	lsls	r3, r3, #10
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008ce8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d01b      	beq.n	8008d2a <USB_ActivateEndpoint+0x35e>
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d08:	843b      	strh	r3, [r7, #32]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	441a      	add	r2, r3
 8008d14:	8c3b      	ldrh	r3, [r7, #32]
 8008d16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d124      	bne.n	8008d7c <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	881b      	ldrh	r3, [r3, #0]
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d48:	83bb      	strh	r3, [r7, #28]
 8008d4a:	8bbb      	ldrh	r3, [r7, #28]
 8008d4c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d50:	83bb      	strh	r3, [r7, #28]
 8008d52:	8bbb      	ldrh	r3, [r7, #28]
 8008d54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d58:	83bb      	strh	r3, [r7, #28]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	441a      	add	r2, r3
 8008d64:	8bbb      	ldrh	r3, [r7, #28]
 8008d66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	8013      	strh	r3, [r2, #0]
 8008d7a:	e306      	b.n	800938a <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d92:	83fb      	strh	r3, [r7, #30]
 8008d94:	8bfb      	ldrh	r3, [r7, #30]
 8008d96:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d9a:	83fb      	strh	r3, [r7, #30]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	441a      	add	r2, r3
 8008da6:	8bfb      	ldrh	r3, [r7, #30]
 8008da8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008db0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008db4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	8013      	strh	r3, [r2, #0]
 8008dbc:	e2e5      	b.n	800938a <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	78db      	ldrb	r3, [r3, #3]
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d11e      	bne.n	8008e04 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ddc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	441a      	add	r2, r3
 8008dea:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008dee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008df2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008df6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008dfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	8013      	strh	r3, [r2, #0]
 8008e02:	e01d      	b.n	8008e40 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	881b      	ldrh	r3, [r3, #0]
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e1a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	441a      	add	r2, r3
 8008e28:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008e2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e50:	4413      	add	r3, r2
 8008e52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	00da      	lsls	r2, r3, #3
 8008e5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e62:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	891b      	ldrh	r3, [r3, #8]
 8008e68:	085b      	lsrs	r3, r3, #1
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	005b      	lsls	r3, r3, #1
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e72:	801a      	strh	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	461a      	mov	r2, r3
 8008e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e84:	4413      	add	r3, r2
 8008e86:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	00da      	lsls	r2, r3, #3
 8008e8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e90:	4413      	add	r3, r2
 8008e92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008e96:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	895b      	ldrh	r3, [r3, #10]
 8008e9c:	085b      	lsrs	r3, r3, #1
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	005b      	lsls	r3, r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ea6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	785b      	ldrb	r3, [r3, #1]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f040 81af 	bne.w	8009210 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	881b      	ldrh	r3, [r3, #0]
 8008ebe:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8008ec2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8008ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d01d      	beq.n	8008f0a <USB_ActivateEndpoint+0x53e>
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	881b      	ldrh	r3, [r3, #0]
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ee4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	441a      	add	r2, r3
 8008ef2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008efe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008f1a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d01d      	beq.n	8008f62 <USB_ActivateEndpoint+0x596>
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4413      	add	r3, r2
 8008f30:	881b      	ldrh	r3, [r3, #0]
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f3c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	441a      	add	r2, r3
 8008f4a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008f4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	785b      	ldrb	r3, [r3, #1]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d16b      	bne.n	8009042 <USB_ActivateEndpoint+0x676>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	461a      	mov	r2, r3
 8008f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f7a:	4413      	add	r3, r2
 8008f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	00da      	lsls	r2, r3, #3
 8008f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f86:	4413      	add	r3, r2
 8008f88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f9c:	801a      	strh	r2, [r3, #0]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10a      	bne.n	8008fbc <USB_ActivateEndpoint+0x5f0>
 8008fa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fb8:	801a      	strh	r2, [r3, #0]
 8008fba:	e05d      	b.n	8009078 <USB_ActivateEndpoint+0x6ac>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8008fc2:	d81c      	bhi.n	8008ffe <USB_ActivateEndpoint+0x632>
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	085b      	lsrs	r3, r3, #1
 8008fca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	f003 0301 	and.w	r3, r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d004      	beq.n	8008fe4 <USB_ActivateEndpoint+0x618>
 8008fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fde:	3301      	adds	r3, #1
 8008fe0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	029b      	lsls	r3, r3, #10
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ffa:	801a      	strh	r2, [r3, #0]
 8008ffc:	e03c      	b.n	8009078 <USB_ActivateEndpoint+0x6ac>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	095b      	lsrs	r3, r3, #5
 8009004:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	f003 031f 	and.w	r3, r3, #31
 8009010:	2b00      	cmp	r3, #0
 8009012:	d104      	bne.n	800901e <USB_ActivateEndpoint+0x652>
 8009014:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009018:	3b01      	subs	r3, #1
 800901a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800901e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009020:	881b      	ldrh	r3, [r3, #0]
 8009022:	b29a      	uxth	r2, r3
 8009024:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009028:	b29b      	uxth	r3, r3
 800902a:	029b      	lsls	r3, r3, #10
 800902c:	b29b      	uxth	r3, r3
 800902e:	4313      	orrs	r3, r2
 8009030:	b29b      	uxth	r3, r3
 8009032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800903a:	b29a      	uxth	r2, r3
 800903c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800903e:	801a      	strh	r2, [r3, #0]
 8009040:	e01a      	b.n	8009078 <USB_ActivateEndpoint+0x6ac>
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	785b      	ldrb	r3, [r3, #1]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d116      	bne.n	8009078 <USB_ActivateEndpoint+0x6ac>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	657b      	str	r3, [r7, #84]	@ 0x54
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009054:	b29b      	uxth	r3, r3
 8009056:	461a      	mov	r2, r3
 8009058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800905a:	4413      	add	r3, r2
 800905c:	657b      	str	r3, [r7, #84]	@ 0x54
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	00da      	lsls	r2, r3, #3
 8009064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009066:	4413      	add	r3, r2
 8009068:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800906c:	653b      	str	r3, [r7, #80]	@ 0x50
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	b29a      	uxth	r2, r3
 8009074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009076:	801a      	strh	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	647b      	str	r3, [r7, #68]	@ 0x44
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	785b      	ldrb	r3, [r3, #1]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d16b      	bne.n	800915c <USB_ActivateEndpoint+0x790>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800908e:	b29b      	uxth	r3, r3
 8009090:	461a      	mov	r2, r3
 8009092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009094:	4413      	add	r3, r2
 8009096:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	00da      	lsls	r2, r3, #3
 800909e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a0:	4413      	add	r3, r2
 80090a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80090a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090aa:	881b      	ldrh	r3, [r3, #0]
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b6:	801a      	strh	r2, [r3, #0]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10a      	bne.n	80090d6 <USB_ActivateEndpoint+0x70a>
 80090c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c2:	881b      	ldrh	r3, [r3, #0]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d2:	801a      	strh	r2, [r3, #0]
 80090d4:	e05b      	b.n	800918e <USB_ActivateEndpoint+0x7c2>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	2b3e      	cmp	r3, #62	@ 0x3e
 80090dc:	d81c      	bhi.n	8009118 <USB_ActivateEndpoint+0x74c>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	085b      	lsrs	r3, r3, #1
 80090e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d004      	beq.n	80090fe <USB_ActivateEndpoint+0x732>
 80090f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090f8:	3301      	adds	r3, #1
 80090fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80090fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	b29a      	uxth	r2, r3
 8009104:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009108:	b29b      	uxth	r3, r3
 800910a:	029b      	lsls	r3, r3, #10
 800910c:	b29b      	uxth	r3, r3
 800910e:	4313      	orrs	r3, r2
 8009110:	b29a      	uxth	r2, r3
 8009112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009114:	801a      	strh	r2, [r3, #0]
 8009116:	e03a      	b.n	800918e <USB_ActivateEndpoint+0x7c2>
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	095b      	lsrs	r3, r3, #5
 800911e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f003 031f 	and.w	r3, r3, #31
 800912a:	2b00      	cmp	r3, #0
 800912c:	d104      	bne.n	8009138 <USB_ActivateEndpoint+0x76c>
 800912e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009132:	3b01      	subs	r3, #1
 8009134:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	b29a      	uxth	r2, r3
 800913e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009142:	b29b      	uxth	r3, r3
 8009144:	029b      	lsls	r3, r3, #10
 8009146:	b29b      	uxth	r3, r3
 8009148:	4313      	orrs	r3, r2
 800914a:	b29b      	uxth	r3, r3
 800914c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009154:	b29a      	uxth	r2, r3
 8009156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009158:	801a      	strh	r2, [r3, #0]
 800915a:	e018      	b.n	800918e <USB_ActivateEndpoint+0x7c2>
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	785b      	ldrb	r3, [r3, #1]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d114      	bne.n	800918e <USB_ActivateEndpoint+0x7c2>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800916a:	b29b      	uxth	r3, r3
 800916c:	461a      	mov	r2, r3
 800916e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009170:	4413      	add	r3, r2
 8009172:	647b      	str	r3, [r7, #68]	@ 0x44
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	00da      	lsls	r2, r3, #3
 800917a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800917c:	4413      	add	r3, r2
 800917e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009182:	643b      	str	r3, [r7, #64]	@ 0x40
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	b29a      	uxth	r2, r3
 800918a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800918c:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	b29b      	uxth	r3, r3
 800919c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80091a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80091a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80091ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80091ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80091b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80091b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	441a      	add	r2, r3
 80091c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80091c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091ec:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	441a      	add	r2, r3
 80091f8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80091fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800920a:	b29b      	uxth	r3, r3
 800920c:	8013      	strh	r3, [r2, #0]
 800920e:	e0bc      	b.n	800938a <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8009220:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d01d      	beq.n	8009268 <USB_ActivateEndpoint+0x89c>
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	4413      	add	r3, r2
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	b29b      	uxth	r3, r3
 800923a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800923e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009242:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	441a      	add	r2, r3
 8009250:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800925c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009264:	b29b      	uxth	r3, r3
 8009266:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009278:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800927c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009280:	2b00      	cmp	r3, #0
 8009282:	d01d      	beq.n	80092c0 <USB_ActivateEndpoint+0x8f4>
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	b29b      	uxth	r3, r3
 8009292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800929a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	441a      	add	r2, r3
 80092a8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80092ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80092bc:	b29b      	uxth	r3, r3
 80092be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	78db      	ldrb	r3, [r3, #3]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d024      	beq.n	8009312 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092de:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80092e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80092e6:	f083 0320 	eor.w	r3, r3, #32
 80092ea:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	441a      	add	r2, r3
 80092f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80092fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800930c:	b29b      	uxth	r3, r3
 800930e:	8013      	strh	r3, [r2, #0]
 8009310:	e01d      	b.n	800934e <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	881b      	ldrh	r3, [r3, #0]
 800931e:	b29b      	uxth	r3, r3
 8009320:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009328:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	441a      	add	r2, r3
 8009336:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800933a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800933e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800934a:	b29b      	uxth	r3, r3
 800934c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	b29b      	uxth	r3, r3
 800935c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009364:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	441a      	add	r2, r3
 8009372:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009376:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800937a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800937e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009386:	b29b      	uxth	r3, r3
 8009388:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800938a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800938e:	4618      	mov	r0, r3
 8009390:	379c      	adds	r7, #156	@ 0x9c
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop

0800939c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800939c:	b480      	push	{r7}
 800939e:	b08d      	sub	sp, #52	@ 0x34
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	7b1b      	ldrb	r3, [r3, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f040 808e 	bne.w	80094cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	785b      	ldrb	r3, [r3, #1]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d044      	beq.n	8009442 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	81bb      	strh	r3, [r7, #12]
 80093c6:	89bb      	ldrh	r3, [r7, #12]
 80093c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d01b      	beq.n	8009408 <USB_DeactivateEndpoint+0x6c>
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	4413      	add	r3, r2
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	b29b      	uxth	r3, r3
 80093de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093e6:	817b      	strh	r3, [r7, #10]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	441a      	add	r2, r3
 80093f2:	897b      	ldrh	r3, [r7, #10]
 80093f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009400:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009404:	b29b      	uxth	r3, r3
 8009406:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	b29b      	uxth	r3, r3
 8009416:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800941a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800941e:	813b      	strh	r3, [r7, #8]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	441a      	add	r2, r3
 800942a:	893b      	ldrh	r3, [r7, #8]
 800942c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009430:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009434:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800943c:	b29b      	uxth	r3, r3
 800943e:	8013      	strh	r3, [r2, #0]
 8009440:	e192      	b.n	8009768 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	881b      	ldrh	r3, [r3, #0]
 800944e:	827b      	strh	r3, [r7, #18]
 8009450:	8a7b      	ldrh	r3, [r7, #18]
 8009452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d01b      	beq.n	8009492 <USB_DeactivateEndpoint+0xf6>
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	881b      	ldrh	r3, [r3, #0]
 8009466:	b29b      	uxth	r3, r3
 8009468:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800946c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009470:	823b      	strh	r3, [r7, #16]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	441a      	add	r2, r3
 800947c:	8a3b      	ldrh	r3, [r7, #16]
 800947e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009486:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800948a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800948e:	b29b      	uxth	r3, r3
 8009490:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	b29b      	uxth	r3, r3
 80094a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094a8:	81fb      	strh	r3, [r7, #14]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	441a      	add	r2, r3
 80094b4:	89fb      	ldrh	r3, [r7, #14]
 80094b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	8013      	strh	r3, [r2, #0]
 80094ca:	e14d      	b.n	8009768 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	785b      	ldrb	r3, [r3, #1]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f040 80a5 	bne.w	8009620 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4413      	add	r3, r2
 80094e0:	881b      	ldrh	r3, [r3, #0]
 80094e2:	843b      	strh	r3, [r7, #32]
 80094e4:	8c3b      	ldrh	r3, [r7, #32]
 80094e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d01b      	beq.n	8009526 <USB_DeactivateEndpoint+0x18a>
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	881b      	ldrh	r3, [r3, #0]
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009504:	83fb      	strh	r3, [r7, #30]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	441a      	add	r2, r3
 8009510:	8bfb      	ldrh	r3, [r7, #30]
 8009512:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009516:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800951a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800951e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009522:	b29b      	uxth	r3, r3
 8009524:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	881b      	ldrh	r3, [r3, #0]
 8009532:	83bb      	strh	r3, [r7, #28]
 8009534:	8bbb      	ldrh	r3, [r7, #28]
 8009536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800953a:	2b00      	cmp	r3, #0
 800953c:	d01b      	beq.n	8009576 <USB_DeactivateEndpoint+0x1da>
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	b29b      	uxth	r3, r3
 800954c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009550:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009554:	837b      	strh	r3, [r7, #26]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	441a      	add	r2, r3
 8009560:	8b7b      	ldrh	r3, [r7, #26]
 8009562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800956a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800956e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009572:	b29b      	uxth	r3, r3
 8009574:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	881b      	ldrh	r3, [r3, #0]
 8009582:	b29b      	uxth	r3, r3
 8009584:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800958c:	833b      	strh	r3, [r7, #24]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	441a      	add	r2, r3
 8009598:	8b3b      	ldrh	r3, [r7, #24]
 800959a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800959e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	881b      	ldrh	r3, [r3, #0]
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095c4:	82fb      	strh	r3, [r7, #22]
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	441a      	add	r2, r3
 80095d0:	8afb      	ldrh	r3, [r7, #22]
 80095d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	781b      	ldrb	r3, [r3, #0]
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	881b      	ldrh	r3, [r3, #0]
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095fc:	82bb      	strh	r3, [r7, #20]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	441a      	add	r2, r3
 8009608:	8abb      	ldrh	r3, [r7, #20]
 800960a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800960e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800961a:	b29b      	uxth	r3, r3
 800961c:	8013      	strh	r3, [r2, #0]
 800961e:	e0a3      	b.n	8009768 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	881b      	ldrh	r3, [r3, #0]
 800962c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800962e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009634:	2b00      	cmp	r3, #0
 8009636:	d01b      	beq.n	8009670 <USB_DeactivateEndpoint+0x2d4>
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	881b      	ldrh	r3, [r3, #0]
 8009644:	b29b      	uxth	r3, r3
 8009646:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800964a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800964e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	441a      	add	r2, r3
 800965a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800965c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009660:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009664:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800966c:	b29b      	uxth	r3, r3
 800966e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	881b      	ldrh	r3, [r3, #0]
 800967c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800967e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009684:	2b00      	cmp	r3, #0
 8009686:	d01b      	beq.n	80096c0 <USB_DeactivateEndpoint+0x324>
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800969a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800969e:	853b      	strh	r3, [r7, #40]	@ 0x28
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	441a      	add	r2, r3
 80096aa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80096ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80096bc:	b29b      	uxth	r3, r3
 80096be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	441a      	add	r2, r3
 80096e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80096e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80096f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	4413      	add	r3, r2
 8009702:	881b      	ldrh	r3, [r3, #0]
 8009704:	b29b      	uxth	r3, r3
 8009706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800970a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800970e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	441a      	add	r2, r3
 800971a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800971c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009728:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800972c:	b29b      	uxth	r3, r3
 800972e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	b29b      	uxth	r3, r3
 800973e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009746:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	441a      	add	r2, r3
 8009752:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009754:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009758:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800975c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009764:	b29b      	uxth	r3, r3
 8009766:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3734      	adds	r7, #52	@ 0x34
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b0ac      	sub	sp, #176	@ 0xb0
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	785b      	ldrb	r3, [r3, #1]
 8009784:	2b01      	cmp	r3, #1
 8009786:	f040 84ca 	bne.w	800a11e <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	699a      	ldr	r2, [r3, #24]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	429a      	cmp	r2, r3
 8009794:	d904      	bls.n	80097a0 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800979e:	e003      	b.n	80097a8 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	7b1b      	ldrb	r3, [r3, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d122      	bne.n	80097f6 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	6959      	ldr	r1, [r3, #20]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	88da      	ldrh	r2, [r3, #6]
 80097b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097bc:	b29b      	uxth	r3, r3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 febd 	bl	800a53e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	613b      	str	r3, [r7, #16]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	461a      	mov	r2, r3
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	4413      	add	r3, r2
 80097d6:	613b      	str	r3, [r7, #16]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	00da      	lsls	r2, r3, #3
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	4413      	add	r3, r2
 80097e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80097e6:	60fb      	str	r3, [r7, #12]
 80097e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	801a      	strh	r2, [r3, #0]
 80097f2:	f000 bc6f 	b.w	800a0d4 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	78db      	ldrb	r3, [r3, #3]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	f040 831e 	bne.w	8009e3c <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	6a1a      	ldr	r2, [r3, #32]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	429a      	cmp	r2, r3
 800980a:	f240 82cf 	bls.w	8009dac <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	b29b      	uxth	r3, r3
 800981c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009820:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009824:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	441a      	add	r2, r3
 8009832:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800983a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800983e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009846:	b29b      	uxth	r3, r3
 8009848:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	6a1a      	ldr	r2, [r3, #32]
 800984e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009852:	1ad2      	subs	r2, r2, r3
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4413      	add	r3, r2
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	b29b      	uxth	r3, r3
 8009866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800986a:	2b00      	cmp	r3, #0
 800986c:	f000 814f 	beq.w	8009b0e <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	633b      	str	r3, [r7, #48]	@ 0x30
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	785b      	ldrb	r3, [r3, #1]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d16b      	bne.n	8009954 <USB_EPStartXfer+0x1de>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009886:	b29b      	uxth	r3, r3
 8009888:	461a      	mov	r2, r3
 800988a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988c:	4413      	add	r3, r2
 800988e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	00da      	lsls	r2, r3, #3
 8009896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009898:	4413      	add	r3, r2
 800989a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800989e:	627b      	str	r3, [r7, #36]	@ 0x24
 80098a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a2:	881b      	ldrh	r3, [r3, #0]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ae:	801a      	strh	r2, [r3, #0]
 80098b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10a      	bne.n	80098ce <USB_EPStartXfer+0x158>
 80098b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ba:	881b      	ldrh	r3, [r3, #0]
 80098bc:	b29b      	uxth	r3, r3
 80098be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ca:	801a      	strh	r2, [r3, #0]
 80098cc:	e05b      	b.n	8009986 <USB_EPStartXfer+0x210>
 80098ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80098d4:	d81c      	bhi.n	8009910 <USB_EPStartXfer+0x19a>
 80098d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098da:	085b      	lsrs	r3, r3, #1
 80098dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80098e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098e4:	f003 0301 	and.w	r3, r3, #1
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <USB_EPStartXfer+0x180>
 80098ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098f0:	3301      	adds	r3, #1
 80098f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80098f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f8:	881b      	ldrh	r3, [r3, #0]
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009900:	b29b      	uxth	r3, r3
 8009902:	029b      	lsls	r3, r3, #10
 8009904:	b29b      	uxth	r3, r3
 8009906:	4313      	orrs	r3, r2
 8009908:	b29a      	uxth	r2, r3
 800990a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990c:	801a      	strh	r2, [r3, #0]
 800990e:	e03a      	b.n	8009986 <USB_EPStartXfer+0x210>
 8009910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800991a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800991e:	f003 031f 	and.w	r3, r3, #31
 8009922:	2b00      	cmp	r3, #0
 8009924:	d104      	bne.n	8009930 <USB_EPStartXfer+0x1ba>
 8009926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800992a:	3b01      	subs	r3, #1
 800992c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	b29a      	uxth	r2, r3
 8009936:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800993a:	b29b      	uxth	r3, r3
 800993c:	029b      	lsls	r3, r3, #10
 800993e:	b29b      	uxth	r3, r3
 8009940:	4313      	orrs	r3, r2
 8009942:	b29b      	uxth	r3, r3
 8009944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800994c:	b29a      	uxth	r2, r3
 800994e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009950:	801a      	strh	r2, [r3, #0]
 8009952:	e018      	b.n	8009986 <USB_EPStartXfer+0x210>
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	785b      	ldrb	r3, [r3, #1]
 8009958:	2b01      	cmp	r3, #1
 800995a:	d114      	bne.n	8009986 <USB_EPStartXfer+0x210>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009962:	b29b      	uxth	r3, r3
 8009964:	461a      	mov	r2, r3
 8009966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009968:	4413      	add	r3, r2
 800996a:	633b      	str	r3, [r7, #48]	@ 0x30
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	00da      	lsls	r2, r3, #3
 8009972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009974:	4413      	add	r3, r2
 8009976:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800997a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800997c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009980:	b29a      	uxth	r2, r3
 8009982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009984:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	895b      	ldrh	r3, [r3, #10]
 800998a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	6959      	ldr	r1, [r3, #20]
 8009992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009996:	b29b      	uxth	r3, r3
 8009998:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fdce 	bl	800a53e <USB_WritePMA>
            ep->xfer_buff += len;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	695a      	ldr	r2, [r3, #20]
 80099a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099aa:	441a      	add	r2, r3
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	6a1a      	ldr	r2, [r3, #32]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d907      	bls.n	80099cc <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	6a1a      	ldr	r2, [r3, #32]
 80099c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099c4:	1ad2      	subs	r2, r2, r3
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	621a      	str	r2, [r3, #32]
 80099ca:	e006      	b.n	80099da <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	6a1b      	ldr	r3, [r3, #32]
 80099d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	2200      	movs	r2, #0
 80099d8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d16b      	bne.n	8009aba <USB_EPStartXfer+0x344>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	61bb      	str	r3, [r7, #24]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	461a      	mov	r2, r3
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	4413      	add	r3, r2
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	00da      	lsls	r2, r3, #3
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	4413      	add	r3, r2
 8009a00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a04:	617b      	str	r3, [r7, #20]
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	881b      	ldrh	r3, [r3, #0]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	801a      	strh	r2, [r3, #0]
 8009a16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10a      	bne.n	8009a34 <USB_EPStartXfer+0x2be>
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	881b      	ldrh	r3, [r3, #0]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	801a      	strh	r2, [r3, #0]
 8009a32:	e05d      	b.n	8009af0 <USB_EPStartXfer+0x37a>
 8009a34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a38:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a3a:	d81c      	bhi.n	8009a76 <USB_EPStartXfer+0x300>
 8009a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a40:	085b      	lsrs	r3, r3, #1
 8009a42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009a46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d004      	beq.n	8009a5c <USB_EPStartXfer+0x2e6>
 8009a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009a56:	3301      	adds	r3, #1
 8009a58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	881b      	ldrh	r3, [r3, #0]
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	029b      	lsls	r3, r3, #10
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	801a      	strh	r2, [r3, #0]
 8009a74:	e03c      	b.n	8009af0 <USB_EPStartXfer+0x37a>
 8009a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a7a:	095b      	lsrs	r3, r3, #5
 8009a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a84:	f003 031f 	and.w	r3, r3, #31
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d104      	bne.n	8009a96 <USB_EPStartXfer+0x320>
 8009a8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009a90:	3b01      	subs	r3, #1
 8009a92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	029b      	lsls	r3, r3, #10
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	801a      	strh	r2, [r3, #0]
 8009ab8:	e01a      	b.n	8009af0 <USB_EPStartXfer+0x37a>
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	785b      	ldrb	r3, [r3, #1]
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d116      	bne.n	8009af0 <USB_EPStartXfer+0x37a>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	623b      	str	r3, [r7, #32]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	461a      	mov	r2, r3
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	623b      	str	r3, [r7, #32]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	00da      	lsls	r2, r3, #3
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	4413      	add	r3, r2
 8009ae0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ae4:	61fb      	str	r3, [r7, #28]
 8009ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	891b      	ldrh	r3, [r3, #8]
 8009af4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	6959      	ldr	r1, [r3, #20]
 8009afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fd19 	bl	800a53e <USB_WritePMA>
 8009b0c:	e2e2      	b.n	800a0d4 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	785b      	ldrb	r3, [r3, #1]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d16b      	bne.n	8009bee <USB_EPStartXfer+0x478>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	461a      	mov	r2, r3
 8009b24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b26:	4413      	add	r3, r2
 8009b28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	00da      	lsls	r2, r3, #3
 8009b30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b32:	4413      	add	r3, r2
 8009b34:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b48:	801a      	strh	r2, [r3, #0]
 8009b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10a      	bne.n	8009b68 <USB_EPStartXfer+0x3f2>
 8009b52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b54:	881b      	ldrh	r3, [r3, #0]
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b64:	801a      	strh	r2, [r3, #0]
 8009b66:	e05d      	b.n	8009c24 <USB_EPStartXfer+0x4ae>
 8009b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b6e:	d81c      	bhi.n	8009baa <USB_EPStartXfer+0x434>
 8009b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b74:	085b      	lsrs	r3, r3, #1
 8009b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b7e:	f003 0301 	and.w	r3, r3, #1
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d004      	beq.n	8009b90 <USB_EPStartXfer+0x41a>
 8009b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	b29a      	uxth	r2, r3
 8009b96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	029b      	lsls	r3, r3, #10
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ba6:	801a      	strh	r2, [r3, #0]
 8009ba8:	e03c      	b.n	8009c24 <USB_EPStartXfer+0x4ae>
 8009baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bae:	095b      	lsrs	r3, r3, #5
 8009bb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bb8:	f003 031f 	and.w	r3, r3, #31
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d104      	bne.n	8009bca <USB_EPStartXfer+0x454>
 8009bc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	029b      	lsls	r3, r3, #10
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bea:	801a      	strh	r2, [r3, #0]
 8009bec:	e01a      	b.n	8009c24 <USB_EPStartXfer+0x4ae>
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	785b      	ldrb	r3, [r3, #1]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d116      	bne.n	8009c24 <USB_EPStartXfer+0x4ae>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	461a      	mov	r2, r3
 8009c04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c06:	4413      	add	r3, r2
 8009c08:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	00da      	lsls	r2, r3, #3
 8009c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c12:	4413      	add	r3, r2
 8009c14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	891b      	ldrh	r3, [r3, #8]
 8009c28:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	6959      	ldr	r1, [r3, #20]
 8009c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c34:	b29b      	uxth	r3, r3
 8009c36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fc7f 	bl	800a53e <USB_WritePMA>
            ep->xfer_buff += len;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	695a      	ldr	r2, [r3, #20]
 8009c44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c48:	441a      	add	r2, r3
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	6a1a      	ldr	r2, [r3, #32]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d907      	bls.n	8009c6a <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	6a1a      	ldr	r2, [r3, #32]
 8009c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c62:	1ad2      	subs	r2, r2, r3
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	621a      	str	r2, [r3, #32]
 8009c68:	e006      	b.n	8009c78 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	6a1b      	ldr	r3, [r3, #32]
 8009c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2200      	movs	r2, #0
 8009c76:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	785b      	ldrb	r3, [r3, #1]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d16b      	bne.n	8009d5c <USB_EPStartXfer+0x5e6>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	461a      	mov	r2, r3
 8009c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c94:	4413      	add	r3, r2
 8009c96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	00da      	lsls	r2, r3, #3
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb6:	801a      	strh	r2, [r3, #0]
 8009cb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10a      	bne.n	8009cd6 <USB_EPStartXfer+0x560>
 8009cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd2:	801a      	strh	r2, [r3, #0]
 8009cd4:	e05b      	b.n	8009d8e <USB_EPStartXfer+0x618>
 8009cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cda:	2b3e      	cmp	r3, #62	@ 0x3e
 8009cdc:	d81c      	bhi.n	8009d18 <USB_EPStartXfer+0x5a2>
 8009cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ce2:	085b      	lsrs	r3, r3, #1
 8009ce4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cec:	f003 0301 	and.w	r3, r3, #1
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d004      	beq.n	8009cfe <USB_EPStartXfer+0x588>
 8009cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d00:	881b      	ldrh	r3, [r3, #0]
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	029b      	lsls	r3, r3, #10
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d14:	801a      	strh	r2, [r3, #0]
 8009d16:	e03a      	b.n	8009d8e <USB_EPStartXfer+0x618>
 8009d18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d1c:	095b      	lsrs	r3, r3, #5
 8009d1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d26:	f003 031f 	and.w	r3, r3, #31
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d104      	bne.n	8009d38 <USB_EPStartXfer+0x5c2>
 8009d2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d32:	3b01      	subs	r3, #1
 8009d34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	029b      	lsls	r3, r3, #10
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d58:	801a      	strh	r2, [r3, #0]
 8009d5a:	e018      	b.n	8009d8e <USB_EPStartXfer+0x618>
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	785b      	ldrb	r3, [r3, #1]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d114      	bne.n	8009d8e <USB_EPStartXfer+0x618>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d70:	4413      	add	r3, r2
 8009d72:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	00da      	lsls	r2, r3, #3
 8009d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d7c:	4413      	add	r3, r2
 8009d7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	895b      	ldrh	r3, [r3, #10]
 8009d92:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	6959      	ldr	r1, [r3, #20]
 8009d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fbca 	bl	800a53e <USB_WritePMA>
 8009daa:	e193      	b.n	800a0d4 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	6a1b      	ldr	r3, [r3, #32]
 8009db0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dca:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	441a      	add	r2, r3
 8009dd8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009ddc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009de0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009de4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e00:	4413      	add	r3, r2
 8009e02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	00da      	lsls	r2, r3, #3
 8009e0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e1c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	891b      	ldrh	r3, [r3, #8]
 8009e22:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	6959      	ldr	r1, [r3, #20]
 8009e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fb82 	bl	800a53e <USB_WritePMA>
 8009e3a:	e14b      	b.n	800a0d4 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	6a1a      	ldr	r2, [r3, #32]
 8009e40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e44:	1ad2      	subs	r2, r2, r3
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	881b      	ldrh	r3, [r3, #0]
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 809a 	beq.w	8009f96 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	785b      	ldrb	r3, [r3, #1]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d16b      	bne.n	8009f46 <USB_EPStartXfer+0x7d0>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e7e:	4413      	add	r3, r2
 8009e80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	00da      	lsls	r2, r3, #3
 8009e88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e90:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e94:	881b      	ldrh	r3, [r3, #0]
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ea0:	801a      	strh	r2, [r3, #0]
 8009ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10a      	bne.n	8009ec0 <USB_EPStartXfer+0x74a>
 8009eaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ebc:	801a      	strh	r2, [r3, #0]
 8009ebe:	e05b      	b.n	8009f78 <USB_EPStartXfer+0x802>
 8009ec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ec4:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ec6:	d81c      	bhi.n	8009f02 <USB_EPStartXfer+0x78c>
 8009ec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ecc:	085b      	lsrs	r3, r3, #1
 8009ece:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d004      	beq.n	8009ee8 <USB_EPStartXfer+0x772>
 8009ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ee8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009eea:	881b      	ldrh	r3, [r3, #0]
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	029b      	lsls	r3, r3, #10
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009efe:	801a      	strh	r2, [r3, #0]
 8009f00:	e03a      	b.n	8009f78 <USB_EPStartXfer+0x802>
 8009f02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f06:	095b      	lsrs	r3, r3, #5
 8009f08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f10:	f003 031f 	and.w	r3, r3, #31
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d104      	bne.n	8009f22 <USB_EPStartXfer+0x7ac>
 8009f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009f22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f24:	881b      	ldrh	r3, [r3, #0]
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	029b      	lsls	r3, r3, #10
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	4313      	orrs	r3, r2
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f42:	801a      	strh	r2, [r3, #0]
 8009f44:	e018      	b.n	8009f78 <USB_EPStartXfer+0x802>
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	785b      	ldrb	r3, [r3, #1]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d114      	bne.n	8009f78 <USB_EPStartXfer+0x802>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	461a      	mov	r2, r3
 8009f58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f5a:	4413      	add	r3, r2
 8009f5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	00da      	lsls	r2, r3, #3
 8009f64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f66:	4413      	add	r3, r2
 8009f68:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f76:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	895b      	ldrh	r3, [r3, #10]
 8009f7c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	6959      	ldr	r1, [r3, #20]
 8009f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fad5 	bl	800a53e <USB_WritePMA>
 8009f94:	e09e      	b.n	800a0d4 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	785b      	ldrb	r3, [r3, #1]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d16b      	bne.n	800a076 <USB_EPStartXfer+0x900>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	461a      	mov	r2, r3
 8009fac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009fae:	4413      	add	r3, r2
 8009fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	00da      	lsls	r2, r3, #3
 8009fb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009fba:	4413      	add	r3, r2
 8009fbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009fc0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009fc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fc4:	881b      	ldrh	r3, [r3, #0]
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fd0:	801a      	strh	r2, [r3, #0]
 8009fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10a      	bne.n	8009ff0 <USB_EPStartXfer+0x87a>
 8009fda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fdc:	881b      	ldrh	r3, [r3, #0]
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fec:	801a      	strh	r2, [r3, #0]
 8009fee:	e063      	b.n	800a0b8 <USB_EPStartXfer+0x942>
 8009ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ff4:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ff6:	d81c      	bhi.n	800a032 <USB_EPStartXfer+0x8bc>
 8009ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ffc:	085b      	lsrs	r3, r3, #1
 8009ffe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d004      	beq.n	800a018 <USB_EPStartXfer+0x8a2>
 800a00e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a012:	3301      	adds	r3, #1
 800a014:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a018:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a01a:	881b      	ldrh	r3, [r3, #0]
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a022:	b29b      	uxth	r3, r3
 800a024:	029b      	lsls	r3, r3, #10
 800a026:	b29b      	uxth	r3, r3
 800a028:	4313      	orrs	r3, r2
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a02e:	801a      	strh	r2, [r3, #0]
 800a030:	e042      	b.n	800a0b8 <USB_EPStartXfer+0x942>
 800a032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a036:	095b      	lsrs	r3, r3, #5
 800a038:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a03c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a040:	f003 031f 	and.w	r3, r3, #31
 800a044:	2b00      	cmp	r3, #0
 800a046:	d104      	bne.n	800a052 <USB_EPStartXfer+0x8dc>
 800a048:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a04c:	3b01      	subs	r3, #1
 800a04e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a052:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a054:	881b      	ldrh	r3, [r3, #0]
 800a056:	b29a      	uxth	r2, r3
 800a058:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	029b      	lsls	r3, r3, #10
 800a060:	b29b      	uxth	r3, r3
 800a062:	4313      	orrs	r3, r2
 800a064:	b29b      	uxth	r3, r3
 800a066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a06a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a06e:	b29a      	uxth	r2, r3
 800a070:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a072:	801a      	strh	r2, [r3, #0]
 800a074:	e020      	b.n	800a0b8 <USB_EPStartXfer+0x942>
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	785b      	ldrb	r3, [r3, #1]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d11c      	bne.n	800a0b8 <USB_EPStartXfer+0x942>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	461a      	mov	r2, r3
 800a08e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a092:	4413      	add	r3, r2
 800a094:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	00da      	lsls	r2, r3, #3
 800a09e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a0a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a0b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	891b      	ldrh	r3, [r3, #8]
 800a0bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	6959      	ldr	r1, [r3, #20]
 800a0c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fa35 	bl	800a53e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	881b      	ldrh	r3, [r3, #0]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0ea:	817b      	strh	r3, [r7, #10]
 800a0ec:	897b      	ldrh	r3, [r7, #10]
 800a0ee:	f083 0310 	eor.w	r3, r3, #16
 800a0f2:	817b      	strh	r3, [r7, #10]
 800a0f4:	897b      	ldrh	r3, [r7, #10]
 800a0f6:	f083 0320 	eor.w	r3, r3, #32
 800a0fa:	817b      	strh	r3, [r7, #10]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	441a      	add	r2, r3
 800a106:	897b      	ldrh	r3, [r7, #10]
 800a108:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a10c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a110:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a118:	b29b      	uxth	r3, r3
 800a11a:	8013      	strh	r3, [r2, #0]
 800a11c:	e0d5      	b.n	800a2ca <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	7b1b      	ldrb	r3, [r3, #12]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d156      	bne.n	800a1d4 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d122      	bne.n	800a174 <USB_EPStartXfer+0x9fe>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	78db      	ldrb	r3, [r3, #3]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d11e      	bne.n	800a174 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	881b      	ldrh	r3, [r3, #0]
 800a142:	b29b      	uxth	r3, r3
 800a144:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a148:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a14c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	441a      	add	r2, r3
 800a15a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a15e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a162:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a166:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a16a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a16e:	b29b      	uxth	r3, r3
 800a170:	8013      	strh	r3, [r2, #0]
 800a172:	e01d      	b.n	800a1b0 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4413      	add	r3, r2
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	b29b      	uxth	r3, r3
 800a182:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a18a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	441a      	add	r2, r3
 800a198:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800a19c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	699a      	ldr	r2, [r3, #24]
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d907      	bls.n	800a1cc <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	699a      	ldr	r2, [r3, #24]
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	1ad2      	subs	r2, r2, r3
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	619a      	str	r2, [r3, #24]
 800a1ca:	e054      	b.n	800a276 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	619a      	str	r2, [r3, #24]
 800a1d2:	e050      	b.n	800a276 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	78db      	ldrb	r3, [r3, #3]
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d142      	bne.n	800a262 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	69db      	ldr	r3, [r3, #28]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d048      	beq.n	800a276 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	4413      	add	r3, r2
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a1f4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a1f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d005      	beq.n	800a20c <USB_EPStartXfer+0xa96>
 800a200:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10b      	bne.n	800a224 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a20c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a214:	2b00      	cmp	r3, #0
 800a216:	d12e      	bne.n	800a276 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a218:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a21c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a220:	2b00      	cmp	r3, #0
 800a222:	d128      	bne.n	800a276 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	b29b      	uxth	r3, r3
 800a232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a23a:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	441a      	add	r2, r3
 800a248:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800a24c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a250:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a258:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	8013      	strh	r3, [r2, #0]
 800a260:	e009      	b.n	800a276 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	78db      	ldrb	r3, [r3, #3]
 800a266:	2b01      	cmp	r3, #1
 800a268:	d103      	bne.n	800a272 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	2200      	movs	r2, #0
 800a26e:	619a      	str	r2, [r3, #24]
 800a270:	e001      	b.n	800a276 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e02a      	b.n	800a2cc <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4413      	add	r3, r2
 800a280:	881b      	ldrh	r3, [r3, #0]
 800a282:	b29b      	uxth	r3, r3
 800a284:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a28c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a290:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a294:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a298:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a29c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a2a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a2a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	441a      	add	r2, r3
 800a2b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a2b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	37b0      	adds	r7, #176	@ 0xb0
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	785b      	ldrb	r3, [r3, #1]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d020      	beq.n	800a328 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2fc:	81bb      	strh	r3, [r7, #12]
 800a2fe:	89bb      	ldrh	r3, [r7, #12]
 800a300:	f083 0310 	eor.w	r3, r3, #16
 800a304:	81bb      	strh	r3, [r7, #12]
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	441a      	add	r2, r3
 800a310:	89bb      	ldrh	r3, [r7, #12]
 800a312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a31a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a31e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a322:	b29b      	uxth	r3, r3
 800a324:	8013      	strh	r3, [r2, #0]
 800a326:	e01f      	b.n	800a368 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	b29b      	uxth	r3, r3
 800a336:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a33a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a33e:	81fb      	strh	r3, [r7, #14]
 800a340:	89fb      	ldrh	r3, [r7, #14]
 800a342:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a346:	81fb      	strh	r3, [r7, #14]
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	441a      	add	r2, r3
 800a352:	89fb      	ldrh	r3, [r7, #14]
 800a354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a35c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a364:	b29b      	uxth	r3, r3
 800a366:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a376:	b480      	push	{r7}
 800a378:	b087      	sub	sp, #28
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	785b      	ldrb	r3, [r3, #1]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d04c      	beq.n	800a422 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a388:	687a      	ldr	r2, [r7, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	781b      	ldrb	r3, [r3, #0]
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	823b      	strh	r3, [r7, #16]
 800a396:	8a3b      	ldrh	r3, [r7, #16]
 800a398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d01b      	beq.n	800a3d8 <USB_EPClearStall+0x62>
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	4413      	add	r3, r2
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3b6:	81fb      	strh	r3, [r7, #14]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	441a      	add	r2, r3
 800a3c2:	89fb      	ldrh	r3, [r7, #14]
 800a3c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	78db      	ldrb	r3, [r3, #3]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d06c      	beq.n	800a4ba <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	881b      	ldrh	r3, [r3, #0]
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3f6:	81bb      	strh	r3, [r7, #12]
 800a3f8:	89bb      	ldrh	r3, [r7, #12]
 800a3fa:	f083 0320 	eor.w	r3, r3, #32
 800a3fe:	81bb      	strh	r3, [r7, #12]
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	441a      	add	r2, r3
 800a40a:	89bb      	ldrh	r3, [r7, #12]
 800a40c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a410:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a414:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	8013      	strh	r3, [r2, #0]
 800a420:	e04b      	b.n	800a4ba <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	82fb      	strh	r3, [r7, #22]
 800a430:	8afb      	ldrh	r3, [r7, #22]
 800a432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a436:	2b00      	cmp	r3, #0
 800a438:	d01b      	beq.n	800a472 <USB_EPClearStall+0xfc>
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	881b      	ldrh	r3, [r3, #0]
 800a446:	b29b      	uxth	r3, r3
 800a448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a44c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a450:	82bb      	strh	r3, [r7, #20]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	441a      	add	r2, r3
 800a45c:	8abb      	ldrh	r3, [r7, #20]
 800a45e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a462:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a466:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a46a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a46e:	b29b      	uxth	r3, r3
 800a470:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	4413      	add	r3, r2
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	b29b      	uxth	r3, r3
 800a480:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a488:	827b      	strh	r3, [r7, #18]
 800a48a:	8a7b      	ldrh	r3, [r7, #18]
 800a48c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a490:	827b      	strh	r3, [r7, #18]
 800a492:	8a7b      	ldrh	r3, [r7, #18]
 800a494:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a498:	827b      	strh	r3, [r7, #18]
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	441a      	add	r2, r3
 800a4a4:	8a7b      	ldrh	r3, [r7, #18]
 800a4a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a4aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a4ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a4b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	371c      	adds	r7, #28
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a4d4:	78fb      	ldrb	r3, [r7, #3]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d103      	bne.n	800a4e2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2280      	movs	r2, #128	@ 0x80
 800a4de:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a508:	b29a      	uxth	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a51e:	b480      	push	{r7}
 800a520:	b085      	sub	sp, #20
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a530:	68fb      	ldr	r3, [r7, #12]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a53e:	b480      	push	{r7}
 800a540:	b08b      	sub	sp, #44	@ 0x2c
 800a542:	af00      	add	r7, sp, #0
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	60b9      	str	r1, [r7, #8]
 800a548:	4611      	mov	r1, r2
 800a54a:	461a      	mov	r2, r3
 800a54c:	460b      	mov	r3, r1
 800a54e:	80fb      	strh	r3, [r7, #6]
 800a550:	4613      	mov	r3, r2
 800a552:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a554:	88bb      	ldrh	r3, [r7, #4]
 800a556:	3301      	adds	r3, #1
 800a558:	085b      	lsrs	r3, r3, #1
 800a55a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a564:	88fa      	ldrh	r2, [r7, #6]
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	4413      	add	r3, r2
 800a56a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a56e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	627b      	str	r3, [r7, #36]	@ 0x24
 800a574:	e01c      	b.n	800a5b0 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	3301      	adds	r3, #1
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	b21b      	sxth	r3, r3
 800a584:	021b      	lsls	r3, r3, #8
 800a586:	b21a      	sxth	r2, r3
 800a588:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	b21b      	sxth	r3, r3
 800a590:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a592:	6a3b      	ldr	r3, [r7, #32]
 800a594:	8a7a      	ldrh	r2, [r7, #18]
 800a596:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	3302      	adds	r3, #2
 800a59c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1df      	bne.n	800a576 <USB_WritePMA+0x38>
  }
}
 800a5b6:	bf00      	nop
 800a5b8:	bf00      	nop
 800a5ba:	372c      	adds	r7, #44	@ 0x2c
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b08b      	sub	sp, #44	@ 0x2c
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	80fb      	strh	r3, [r7, #6]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a5da:	88bb      	ldrh	r3, [r7, #4]
 800a5dc:	085b      	lsrs	r3, r3, #1
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a5ea:	88fa      	ldrh	r2, [r7, #6]
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a5f4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5fa:	e018      	b.n	800a62e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	881b      	ldrh	r3, [r3, #0]
 800a600:	b29b      	uxth	r3, r3
 800a602:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a604:	6a3b      	ldr	r3, [r7, #32]
 800a606:	3302      	adds	r3, #2
 800a608:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	3301      	adds	r3, #1
 800a616:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	0a1b      	lsrs	r3, r3, #8
 800a61c:	b2da      	uxtb	r2, r3
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	3301      	adds	r3, #1
 800a626:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62a:	3b01      	subs	r3, #1
 800a62c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1e3      	bne.n	800a5fc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a634:	88bb      	ldrh	r3, [r7, #4]
 800a636:	f003 0301 	and.w	r3, r3, #1
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d007      	beq.n	800a650 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a640:	6a3b      	ldr	r3, [r7, #32]
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	b29b      	uxth	r3, r3
 800a646:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	701a      	strb	r2, [r3, #0]
  }
}
 800a650:	bf00      	nop
 800a652:	372c      	adds	r7, #44	@ 0x2c
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a668:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a66c:	f006 feb2 	bl	80113d4 <USBD_static_malloc>
 800a670:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d109      	bne.n	800a68c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	32b0      	adds	r2, #176	@ 0xb0
 800a682:	2100      	movs	r1, #0
 800a684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a688:	2302      	movs	r3, #2
 800a68a:	e0d4      	b.n	800a836 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a68c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a690:	2100      	movs	r1, #0
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f007 fb64 	bl	8011d60 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	32b0      	adds	r2, #176	@ 0xb0
 800a6a2:	68f9      	ldr	r1, [r7, #12]
 800a6a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	32b0      	adds	r2, #176	@ 0xb0
 800a6b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	7c1b      	ldrb	r3, [r3, #16]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d138      	bne.n	800a736 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a6c4:	4b5e      	ldr	r3, [pc, #376]	@ (800a840 <USBD_CDC_Init+0x1e4>)
 800a6c6:	7819      	ldrb	r1, [r3, #0]
 800a6c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6cc:	2202      	movs	r2, #2
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f006 fd27 	bl	8011122 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a6d4:	4b5a      	ldr	r3, [pc, #360]	@ (800a840 <USBD_CDC_Init+0x1e4>)
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	f003 020f 	and.w	r2, r3, #15
 800a6dc:	6879      	ldr	r1, [r7, #4]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4413      	add	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	440b      	add	r3, r1
 800a6e8:	3324      	adds	r3, #36	@ 0x24
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6ee:	4b55      	ldr	r3, [pc, #340]	@ (800a844 <USBD_CDC_Init+0x1e8>)
 800a6f0:	7819      	ldrb	r1, [r3, #0]
 800a6f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6f6:	2202      	movs	r2, #2
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f006 fd12 	bl	8011122 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a6fe:	4b51      	ldr	r3, [pc, #324]	@ (800a844 <USBD_CDC_Init+0x1e8>)
 800a700:	781b      	ldrb	r3, [r3, #0]
 800a702:	f003 020f 	and.w	r2, r3, #15
 800a706:	6879      	ldr	r1, [r7, #4]
 800a708:	4613      	mov	r3, r2
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	4413      	add	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	440b      	add	r3, r1
 800a712:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a716:	2201      	movs	r2, #1
 800a718:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a71a:	4b4b      	ldr	r3, [pc, #300]	@ (800a848 <USBD_CDC_Init+0x1ec>)
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	f003 020f 	and.w	r2, r3, #15
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	4613      	mov	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	4413      	add	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	440b      	add	r3, r1
 800a72e:	3326      	adds	r3, #38	@ 0x26
 800a730:	2210      	movs	r2, #16
 800a732:	801a      	strh	r2, [r3, #0]
 800a734:	e035      	b.n	800a7a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a736:	4b42      	ldr	r3, [pc, #264]	@ (800a840 <USBD_CDC_Init+0x1e4>)
 800a738:	7819      	ldrb	r1, [r3, #0]
 800a73a:	2340      	movs	r3, #64	@ 0x40
 800a73c:	2202      	movs	r2, #2
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f006 fcef 	bl	8011122 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a744:	4b3e      	ldr	r3, [pc, #248]	@ (800a840 <USBD_CDC_Init+0x1e4>)
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	f003 020f 	and.w	r2, r3, #15
 800a74c:	6879      	ldr	r1, [r7, #4]
 800a74e:	4613      	mov	r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4413      	add	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	440b      	add	r3, r1
 800a758:	3324      	adds	r3, #36	@ 0x24
 800a75a:	2201      	movs	r2, #1
 800a75c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a75e:	4b39      	ldr	r3, [pc, #228]	@ (800a844 <USBD_CDC_Init+0x1e8>)
 800a760:	7819      	ldrb	r1, [r3, #0]
 800a762:	2340      	movs	r3, #64	@ 0x40
 800a764:	2202      	movs	r2, #2
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f006 fcdb 	bl	8011122 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a76c:	4b35      	ldr	r3, [pc, #212]	@ (800a844 <USBD_CDC_Init+0x1e8>)
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	f003 020f 	and.w	r2, r3, #15
 800a774:	6879      	ldr	r1, [r7, #4]
 800a776:	4613      	mov	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	440b      	add	r3, r1
 800a780:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a784:	2201      	movs	r2, #1
 800a786:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a788:	4b2f      	ldr	r3, [pc, #188]	@ (800a848 <USBD_CDC_Init+0x1ec>)
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	f003 020f 	and.w	r2, r3, #15
 800a790:	6879      	ldr	r1, [r7, #4]
 800a792:	4613      	mov	r3, r2
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4413      	add	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	440b      	add	r3, r1
 800a79c:	3326      	adds	r3, #38	@ 0x26
 800a79e:	2210      	movs	r2, #16
 800a7a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a7a2:	4b29      	ldr	r3, [pc, #164]	@ (800a848 <USBD_CDC_Init+0x1ec>)
 800a7a4:	7819      	ldrb	r1, [r3, #0]
 800a7a6:	2308      	movs	r3, #8
 800a7a8:	2203      	movs	r2, #3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f006 fcb9 	bl	8011122 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a7b0:	4b25      	ldr	r3, [pc, #148]	@ (800a848 <USBD_CDC_Init+0x1ec>)
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	f003 020f 	and.w	r2, r3, #15
 800a7b8:	6879      	ldr	r1, [r7, #4]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	440b      	add	r3, r1
 800a7c4:	3324      	adds	r3, #36	@ 0x24
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	33b0      	adds	r3, #176	@ 0xb0
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4413      	add	r3, r2
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d101      	bne.n	800a804 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a800:	2302      	movs	r3, #2
 800a802:	e018      	b.n	800a836 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	7c1b      	ldrb	r3, [r3, #16]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10a      	bne.n	800a822 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a80c:	4b0d      	ldr	r3, [pc, #52]	@ (800a844 <USBD_CDC_Init+0x1e8>)
 800a80e:	7819      	ldrb	r1, [r3, #0]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a816:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f006 fd70 	bl	8011300 <USBD_LL_PrepareReceive>
 800a820:	e008      	b.n	800a834 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a822:	4b08      	ldr	r3, [pc, #32]	@ (800a844 <USBD_CDC_Init+0x1e8>)
 800a824:	7819      	ldrb	r1, [r3, #0]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a82c:	2340      	movs	r3, #64	@ 0x40
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f006 fd66 	bl	8011300 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	2000009b 	.word	0x2000009b
 800a844:	2000009c 	.word	0x2000009c
 800a848:	2000009d 	.word	0x2000009d

0800a84c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	460b      	mov	r3, r1
 800a856:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a858:	4b3a      	ldr	r3, [pc, #232]	@ (800a944 <USBD_CDC_DeInit+0xf8>)
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	4619      	mov	r1, r3
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f006 fc85 	bl	801116e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a864:	4b37      	ldr	r3, [pc, #220]	@ (800a944 <USBD_CDC_DeInit+0xf8>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	f003 020f 	and.w	r2, r3, #15
 800a86c:	6879      	ldr	r1, [r7, #4]
 800a86e:	4613      	mov	r3, r2
 800a870:	009b      	lsls	r3, r3, #2
 800a872:	4413      	add	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	440b      	add	r3, r1
 800a878:	3324      	adds	r3, #36	@ 0x24
 800a87a:	2200      	movs	r2, #0
 800a87c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a87e:	4b32      	ldr	r3, [pc, #200]	@ (800a948 <USBD_CDC_DeInit+0xfc>)
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	4619      	mov	r1, r3
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f006 fc72 	bl	801116e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a88a:	4b2f      	ldr	r3, [pc, #188]	@ (800a948 <USBD_CDC_DeInit+0xfc>)
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	f003 020f 	and.w	r2, r3, #15
 800a892:	6879      	ldr	r1, [r7, #4]
 800a894:	4613      	mov	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	4413      	add	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	440b      	add	r3, r1
 800a89e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a8a6:	4b29      	ldr	r3, [pc, #164]	@ (800a94c <USBD_CDC_DeInit+0x100>)
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f006 fc5e 	bl	801116e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a8b2:	4b26      	ldr	r3, [pc, #152]	@ (800a94c <USBD_CDC_DeInit+0x100>)
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	f003 020f 	and.w	r2, r3, #15
 800a8ba:	6879      	ldr	r1, [r7, #4]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	440b      	add	r3, r1
 800a8c6:	3324      	adds	r3, #36	@ 0x24
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a8cc:	4b1f      	ldr	r3, [pc, #124]	@ (800a94c <USBD_CDC_DeInit+0x100>)
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	f003 020f 	and.w	r2, r3, #15
 800a8d4:	6879      	ldr	r1, [r7, #4]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4413      	add	r3, r2
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	440b      	add	r3, r1
 800a8e0:	3326      	adds	r3, #38	@ 0x26
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	32b0      	adds	r2, #176	@ 0xb0
 800a8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d01f      	beq.n	800a938 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	33b0      	adds	r3, #176	@ 0xb0
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	4413      	add	r3, r2
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	32b0      	adds	r2, #176	@ 0xb0
 800a916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f006 fd68 	bl	80113f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	32b0      	adds	r2, #176	@ 0xb0
 800a92a:	2100      	movs	r1, #0
 800a92c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	2000009b 	.word	0x2000009b
 800a948:	2000009c 	.word	0x2000009c
 800a94c:	2000009d 	.word	0x2000009d

0800a950 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	32b0      	adds	r2, #176	@ 0xb0
 800a964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a968:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a96a:	2300      	movs	r3, #0
 800a96c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a96e:	2300      	movs	r3, #0
 800a970:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a97c:	2303      	movs	r3, #3
 800a97e:	e0bf      	b.n	800ab00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d050      	beq.n	800aa2e <USBD_CDC_Setup+0xde>
 800a98c:	2b20      	cmp	r3, #32
 800a98e:	f040 80af 	bne.w	800aaf0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	88db      	ldrh	r3, [r3, #6]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d03a      	beq.n	800aa10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	b25b      	sxtb	r3, r3
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	da1b      	bge.n	800a9dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	33b0      	adds	r3, #176	@ 0xb0
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a9ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9bc:	683a      	ldr	r2, [r7, #0]
 800a9be:	88d2      	ldrh	r2, [r2, #6]
 800a9c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	88db      	ldrh	r3, [r3, #6]
 800a9c6:	2b07      	cmp	r3, #7
 800a9c8:	bf28      	it	cs
 800a9ca:	2307      	movcs	r3, #7
 800a9cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	89fa      	ldrh	r2, [r7, #14]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f001 fceb 	bl	800c3b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a9da:	e090      	b.n	800aafe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	785a      	ldrb	r2, [r3, #1]
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	88db      	ldrh	r3, [r3, #6]
 800a9ea:	2b3f      	cmp	r3, #63	@ 0x3f
 800a9ec:	d803      	bhi.n	800a9f6 <USBD_CDC_Setup+0xa6>
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	88db      	ldrh	r3, [r3, #6]
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	e000      	b.n	800a9f8 <USBD_CDC_Setup+0xa8>
 800a9f6:	2240      	movs	r2, #64	@ 0x40
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a9fe:	6939      	ldr	r1, [r7, #16]
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800aa06:	461a      	mov	r2, r3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f001 fcfd 	bl	800c408 <USBD_CtlPrepareRx>
      break;
 800aa0e:	e076      	b.n	800aafe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	33b0      	adds	r3, #176	@ 0xb0
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4413      	add	r3, r2
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	683a      	ldr	r2, [r7, #0]
 800aa24:	7850      	ldrb	r0, [r2, #1]
 800aa26:	2200      	movs	r2, #0
 800aa28:	6839      	ldr	r1, [r7, #0]
 800aa2a:	4798      	blx	r3
      break;
 800aa2c:	e067      	b.n	800aafe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	785b      	ldrb	r3, [r3, #1]
 800aa32:	2b0b      	cmp	r3, #11
 800aa34:	d851      	bhi.n	800aada <USBD_CDC_Setup+0x18a>
 800aa36:	a201      	add	r2, pc, #4	@ (adr r2, 800aa3c <USBD_CDC_Setup+0xec>)
 800aa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3c:	0800aa6d 	.word	0x0800aa6d
 800aa40:	0800aae9 	.word	0x0800aae9
 800aa44:	0800aadb 	.word	0x0800aadb
 800aa48:	0800aadb 	.word	0x0800aadb
 800aa4c:	0800aadb 	.word	0x0800aadb
 800aa50:	0800aadb 	.word	0x0800aadb
 800aa54:	0800aadb 	.word	0x0800aadb
 800aa58:	0800aadb 	.word	0x0800aadb
 800aa5c:	0800aadb 	.word	0x0800aadb
 800aa60:	0800aadb 	.word	0x0800aadb
 800aa64:	0800aa97 	.word	0x0800aa97
 800aa68:	0800aac1 	.word	0x0800aac1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b03      	cmp	r3, #3
 800aa76:	d107      	bne.n	800aa88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa78:	f107 030a 	add.w	r3, r7, #10
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f001 fc95 	bl	800c3b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa86:	e032      	b.n	800aaee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa88:	6839      	ldr	r1, [r7, #0]
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f001 fc13 	bl	800c2b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa90:	2303      	movs	r3, #3
 800aa92:	75fb      	strb	r3, [r7, #23]
          break;
 800aa94:	e02b      	b.n	800aaee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b03      	cmp	r3, #3
 800aaa0:	d107      	bne.n	800aab2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aaa2:	f107 030d 	add.w	r3, r7, #13
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f001 fc80 	bl	800c3b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aab0:	e01d      	b.n	800aaee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aab2:	6839      	ldr	r1, [r7, #0]
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 fbfe 	bl	800c2b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800aaba:	2303      	movs	r3, #3
 800aabc:	75fb      	strb	r3, [r7, #23]
          break;
 800aabe:	e016      	b.n	800aaee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	2b03      	cmp	r3, #3
 800aaca:	d00f      	beq.n	800aaec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f001 fbf1 	bl	800c2b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800aad4:	2303      	movs	r3, #3
 800aad6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aad8:	e008      	b.n	800aaec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 fbea 	bl	800c2b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800aae2:	2303      	movs	r3, #3
 800aae4:	75fb      	strb	r3, [r7, #23]
          break;
 800aae6:	e002      	b.n	800aaee <USBD_CDC_Setup+0x19e>
          break;
 800aae8:	bf00      	nop
 800aaea:	e008      	b.n	800aafe <USBD_CDC_Setup+0x1ae>
          break;
 800aaec:	bf00      	nop
      }
      break;
 800aaee:	e006      	b.n	800aafe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aaf0:	6839      	ldr	r1, [r7, #0]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f001 fbdf 	bl	800c2b6 <USBD_CtlError>
      ret = USBD_FAIL;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	75fb      	strb	r3, [r7, #23]
      break;
 800aafc:	bf00      	nop
  }

  return (uint8_t)ret;
 800aafe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3718      	adds	r7, #24
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	460b      	mov	r3, r1
 800ab12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ab1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	32b0      	adds	r2, #176	@ 0xb0
 800ab26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e065      	b.n	800abfe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	32b0      	adds	r2, #176	@ 0xb0
 800ab3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab42:	78fb      	ldrb	r3, [r7, #3]
 800ab44:	f003 020f 	and.w	r2, r3, #15
 800ab48:	6879      	ldr	r1, [r7, #4]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	4413      	add	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	440b      	add	r3, r1
 800ab54:	3318      	adds	r3, #24
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d02f      	beq.n	800abbc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ab5c:	78fb      	ldrb	r3, [r7, #3]
 800ab5e:	f003 020f 	and.w	r2, r3, #15
 800ab62:	6879      	ldr	r1, [r7, #4]
 800ab64:	4613      	mov	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	440b      	add	r3, r1
 800ab6e:	3318      	adds	r3, #24
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	78fb      	ldrb	r3, [r7, #3]
 800ab74:	f003 010f 	and.w	r1, r3, #15
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	440b      	add	r3, r1
 800ab80:	00db      	lsls	r3, r3, #3
 800ab82:	4403      	add	r3, r0
 800ab84:	3320      	adds	r3, #32
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab8c:	fb01 f303 	mul.w	r3, r1, r3
 800ab90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d112      	bne.n	800abbc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ab96:	78fb      	ldrb	r3, [r7, #3]
 800ab98:	f003 020f 	and.w	r2, r3, #15
 800ab9c:	6879      	ldr	r1, [r7, #4]
 800ab9e:	4613      	mov	r3, r2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	440b      	add	r3, r1
 800aba8:	3318      	adds	r3, #24
 800abaa:	2200      	movs	r2, #0
 800abac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800abae:	78f9      	ldrb	r1, [r7, #3]
 800abb0:	2300      	movs	r3, #0
 800abb2:	2200      	movs	r2, #0
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f006 fb82 	bl	80112be <USBD_LL_Transmit>
 800abba:	e01f      	b.n	800abfc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	33b0      	adds	r3, #176	@ 0xb0
 800abce:	009b      	lsls	r3, r3, #2
 800abd0:	4413      	add	r3, r2
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d010      	beq.n	800abfc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	33b0      	adds	r3, #176	@ 0xb0
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	4413      	add	r3, r2
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800abf8:	78fa      	ldrb	r2, [r7, #3]
 800abfa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b084      	sub	sp, #16
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	460b      	mov	r3, r1
 800ac10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	32b0      	adds	r2, #176	@ 0xb0
 800ac1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	32b0      	adds	r2, #176	@ 0xb0
 800ac2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d101      	bne.n	800ac38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ac34:	2303      	movs	r3, #3
 800ac36:	e01a      	b.n	800ac6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f006 fb80 	bl	8011342 <USBD_LL_GetRxDataSize>
 800ac42:	4602      	mov	r2, r0
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	33b0      	adds	r3, #176	@ 0xb0
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ac68:	4611      	mov	r1, r2
 800ac6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}

0800ac76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac76:	b580      	push	{r7, lr}
 800ac78:	b084      	sub	sp, #16
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	32b0      	adds	r2, #176	@ 0xb0
 800ac88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d101      	bne.n	800ac98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac94:	2303      	movs	r3, #3
 800ac96:	e024      	b.n	800ace2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	33b0      	adds	r3, #176	@ 0xb0
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d019      	beq.n	800ace0 <USBD_CDC_EP0_RxReady+0x6a>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800acb2:	2bff      	cmp	r3, #255	@ 0xff
 800acb4:	d014      	beq.n	800ace0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	33b0      	adds	r3, #176	@ 0xb0
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4413      	add	r3, r2
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800acce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800acd6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	22ff      	movs	r2, #255	@ 0xff
 800acdc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
	...

0800acec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b086      	sub	sp, #24
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800acf4:	2182      	movs	r1, #130	@ 0x82
 800acf6:	4818      	ldr	r0, [pc, #96]	@ (800ad58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acf8:	f000 fc7d 	bl	800b5f6 <USBD_GetEpDesc>
 800acfc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acfe:	2101      	movs	r1, #1
 800ad00:	4815      	ldr	r0, [pc, #84]	@ (800ad58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad02:	f000 fc78 	bl	800b5f6 <USBD_GetEpDesc>
 800ad06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad08:	2181      	movs	r1, #129	@ 0x81
 800ad0a:	4813      	ldr	r0, [pc, #76]	@ (800ad58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ad0c:	f000 fc73 	bl	800b5f6 <USBD_GetEpDesc>
 800ad10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d002      	beq.n	800ad1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	2210      	movs	r2, #16
 800ad1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d006      	beq.n	800ad32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad2c:	711a      	strb	r2, [r3, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d006      	beq.n	800ad46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad40:	711a      	strb	r2, [r3, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2243      	movs	r2, #67	@ 0x43
 800ad4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad4c:	4b02      	ldr	r3, [pc, #8]	@ (800ad58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3718      	adds	r7, #24
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20000058 	.word	0x20000058

0800ad5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad64:	2182      	movs	r1, #130	@ 0x82
 800ad66:	4818      	ldr	r0, [pc, #96]	@ (800adc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad68:	f000 fc45 	bl	800b5f6 <USBD_GetEpDesc>
 800ad6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad6e:	2101      	movs	r1, #1
 800ad70:	4815      	ldr	r0, [pc, #84]	@ (800adc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad72:	f000 fc40 	bl	800b5f6 <USBD_GetEpDesc>
 800ad76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad78:	2181      	movs	r1, #129	@ 0x81
 800ad7a:	4813      	ldr	r0, [pc, #76]	@ (800adc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad7c:	f000 fc3b 	bl	800b5f6 <USBD_GetEpDesc>
 800ad80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d002      	beq.n	800ad8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	2210      	movs	r2, #16
 800ad8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d006      	beq.n	800ada2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	2200      	movs	r2, #0
 800ad98:	711a      	strb	r2, [r3, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f042 0202 	orr.w	r2, r2, #2
 800ada0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d006      	beq.n	800adb6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	711a      	strb	r2, [r3, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	f042 0202 	orr.w	r2, r2, #2
 800adb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2243      	movs	r2, #67	@ 0x43
 800adba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800adbc:	4b02      	ldr	r3, [pc, #8]	@ (800adc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3718      	adds	r7, #24
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	20000058 	.word	0x20000058

0800adcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800add4:	2182      	movs	r1, #130	@ 0x82
 800add6:	4818      	ldr	r0, [pc, #96]	@ (800ae38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800add8:	f000 fc0d 	bl	800b5f6 <USBD_GetEpDesc>
 800addc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800adde:	2101      	movs	r1, #1
 800ade0:	4815      	ldr	r0, [pc, #84]	@ (800ae38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ade2:	f000 fc08 	bl	800b5f6 <USBD_GetEpDesc>
 800ade6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ade8:	2181      	movs	r1, #129	@ 0x81
 800adea:	4813      	ldr	r0, [pc, #76]	@ (800ae38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800adec:	f000 fc03 	bl	800b5f6 <USBD_GetEpDesc>
 800adf0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2210      	movs	r2, #16
 800adfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d006      	beq.n	800ae12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae0c:	711a      	strb	r2, [r3, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d006      	beq.n	800ae26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ae20:	711a      	strb	r2, [r3, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2243      	movs	r2, #67	@ 0x43
 800ae2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae2c:	4b02      	ldr	r3, [pc, #8]	@ (800ae38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3718      	adds	r7, #24
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	20000058 	.word	0x20000058

0800ae3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	220a      	movs	r2, #10
 800ae48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ae4a:	4b03      	ldr	r3, [pc, #12]	@ (800ae58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr
 800ae58:	20000014 	.word	0x20000014

0800ae5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d101      	bne.n	800ae70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	e009      	b.n	800ae84 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	33b0      	adds	r3, #176	@ 0xb0
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	4413      	add	r3, r2
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b087      	sub	sp, #28
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	32b0      	adds	r2, #176	@ 0xb0
 800aea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeaa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d101      	bne.n	800aeb6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e008      	b.n	800aec8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	371c      	adds	r7, #28
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	32b0      	adds	r2, #176	@ 0xb0
 800aee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d101      	bne.n	800aef8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aef4:	2303      	movs	r3, #3
 800aef6:	e004      	b.n	800af02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3714      	adds	r7, #20
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr
	...

0800af10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	32b0      	adds	r2, #176	@ 0xb0
 800af22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	32b0      	adds	r2, #176	@ 0xb0
 800af32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d101      	bne.n	800af3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e018      	b.n	800af70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	7c1b      	ldrb	r3, [r3, #16]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d10a      	bne.n	800af5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af46:	4b0c      	ldr	r3, [pc, #48]	@ (800af78 <USBD_CDC_ReceivePacket+0x68>)
 800af48:	7819      	ldrb	r1, [r3, #0]
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f006 f9d3 	bl	8011300 <USBD_LL_PrepareReceive>
 800af5a:	e008      	b.n	800af6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af5c:	4b06      	ldr	r3, [pc, #24]	@ (800af78 <USBD_CDC_ReceivePacket+0x68>)
 800af5e:	7819      	ldrb	r1, [r3, #0]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af66:	2340      	movs	r3, #64	@ 0x40
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f006 f9c9 	bl	8011300 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	2000009c 	.word	0x2000009c

0800af7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	4613      	mov	r3, r2
 800af88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d101      	bne.n	800af94 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af90:	2303      	movs	r3, #3
 800af92:	e01f      	b.n	800afd4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2200      	movs	r2, #0
 800afa8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d003      	beq.n	800afba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2201      	movs	r2, #1
 800afbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	79fa      	ldrb	r2, [r7, #7]
 800afc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f006 f82d 	bl	8011028 <USBD_LL_Init>
 800afce:	4603      	mov	r3, r0
 800afd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800afd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3718      	adds	r7, #24
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800afe6:	2300      	movs	r3, #0
 800afe8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d101      	bne.n	800aff4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aff0:	2303      	movs	r3, #3
 800aff2:	e025      	b.n	800b040 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	683a      	ldr	r2, [r7, #0]
 800aff8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	32ae      	adds	r2, #174	@ 0xae
 800b006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00f      	beq.n	800b030 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	32ae      	adds	r2, #174	@ 0xae
 800b01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b020:	f107 020e 	add.w	r2, r7, #14
 800b024:	4610      	mov	r0, r2
 800b026:	4798      	blx	r3
 800b028:	4602      	mov	r2, r0
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b036:	1c5a      	adds	r2, r3, #1
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f006 f84b 	bl	80110ec <USBD_LL_Start>
 800b056:	4603      	mov	r3, r0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3708      	adds	r7, #8
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b068:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	370c      	adds	r7, #12
 800b06e:	46bd      	mov	sp, r7
 800b070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b074:	4770      	bx	lr

0800b076 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b084      	sub	sp, #16
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	460b      	mov	r3, r1
 800b080:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d009      	beq.n	800b0a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	78fa      	ldrb	r2, [r7, #3]
 800b09a:	4611      	mov	r1, r2
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	4798      	blx	r3
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b084      	sub	sp, #16
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	78fa      	ldrb	r2, [r7, #3]
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	4798      	blx	r3
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d001      	beq.n	800b0d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b084      	sub	sp, #16
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b0f2:	6839      	ldr	r1, [r7, #0]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f001 f8a4 	bl	800c242 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b108:	461a      	mov	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b116:	f003 031f 	and.w	r3, r3, #31
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d01a      	beq.n	800b154 <USBD_LL_SetupStage+0x72>
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d822      	bhi.n	800b168 <USBD_LL_SetupStage+0x86>
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <USBD_LL_SetupStage+0x4a>
 800b126:	2b01      	cmp	r3, #1
 800b128:	d00a      	beq.n	800b140 <USBD_LL_SetupStage+0x5e>
 800b12a:	e01d      	b.n	800b168 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b132:	4619      	mov	r1, r3
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fad1 	bl	800b6dc <USBD_StdDevReq>
 800b13a:	4603      	mov	r3, r0
 800b13c:	73fb      	strb	r3, [r7, #15]
      break;
 800b13e:	e020      	b.n	800b182 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 fb39 	bl	800b7c0 <USBD_StdItfReq>
 800b14e:	4603      	mov	r3, r0
 800b150:	73fb      	strb	r3, [r7, #15]
      break;
 800b152:	e016      	b.n	800b182 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fb9b 	bl	800b898 <USBD_StdEPReq>
 800b162:	4603      	mov	r3, r0
 800b164:	73fb      	strb	r3, [r7, #15]
      break;
 800b166:	e00c      	b.n	800b182 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b16e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b172:	b2db      	uxtb	r3, r3
 800b174:	4619      	mov	r1, r3
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f006 f818 	bl	80111ac <USBD_LL_StallEP>
 800b17c:	4603      	mov	r3, r0
 800b17e:	73fb      	strb	r3, [r7, #15]
      break;
 800b180:	bf00      	nop
  }

  return ret;
 800b182:	7bfb      	ldrb	r3, [r7, #15]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	460b      	mov	r3, r1
 800b196:	607a      	str	r2, [r7, #4]
 800b198:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b19a:	2300      	movs	r3, #0
 800b19c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b19e:	7afb      	ldrb	r3, [r7, #11]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d16e      	bne.n	800b282 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b1aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b1b2:	2b03      	cmp	r3, #3
 800b1b4:	f040 8098 	bne.w	800b2e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	689a      	ldr	r2, [r3, #8]
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d913      	bls.n	800b1ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	689a      	ldr	r2, [r3, #8]
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	1ad2      	subs	r2, r2, r3
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	68da      	ldr	r2, [r3, #12]
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	bf28      	it	cs
 800b1de:	4613      	movcs	r3, r2
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	6879      	ldr	r1, [r7, #4]
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	f001 f92c 	bl	800c442 <USBD_CtlContinueRx>
 800b1ea:	e07d      	b.n	800b2e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b1f2:	f003 031f 	and.w	r3, r3, #31
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d014      	beq.n	800b224 <USBD_LL_DataOutStage+0x98>
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d81d      	bhi.n	800b23a <USBD_LL_DataOutStage+0xae>
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d002      	beq.n	800b208 <USBD_LL_DataOutStage+0x7c>
 800b202:	2b01      	cmp	r3, #1
 800b204:	d003      	beq.n	800b20e <USBD_LL_DataOutStage+0x82>
 800b206:	e018      	b.n	800b23a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b208:	2300      	movs	r3, #0
 800b20a:	75bb      	strb	r3, [r7, #22]
            break;
 800b20c:	e018      	b.n	800b240 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b214:	b2db      	uxtb	r3, r3
 800b216:	4619      	mov	r1, r3
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f000 f9d2 	bl	800b5c2 <USBD_CoreFindIF>
 800b21e:	4603      	mov	r3, r0
 800b220:	75bb      	strb	r3, [r7, #22]
            break;
 800b222:	e00d      	b.n	800b240 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	4619      	mov	r1, r3
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f000 f9d4 	bl	800b5dc <USBD_CoreFindEP>
 800b234:	4603      	mov	r3, r0
 800b236:	75bb      	strb	r3, [r7, #22]
            break;
 800b238:	e002      	b.n	800b240 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b23a:	2300      	movs	r3, #0
 800b23c:	75bb      	strb	r3, [r7, #22]
            break;
 800b23e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b240:	7dbb      	ldrb	r3, [r7, #22]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d119      	bne.n	800b27a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	2b03      	cmp	r3, #3
 800b250:	d113      	bne.n	800b27a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b252:	7dba      	ldrb	r2, [r7, #22]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	32ae      	adds	r2, #174	@ 0xae
 800b258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d00b      	beq.n	800b27a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b262:	7dba      	ldrb	r2, [r7, #22]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b26a:	7dba      	ldrb	r2, [r7, #22]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	32ae      	adds	r2, #174	@ 0xae
 800b270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	68f8      	ldr	r0, [r7, #12]
 800b278:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f001 f8f2 	bl	800c464 <USBD_CtlSendStatus>
 800b280:	e032      	b.n	800b2e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b282:	7afb      	ldrb	r3, [r7, #11]
 800b284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	4619      	mov	r1, r3
 800b28c:	68f8      	ldr	r0, [r7, #12]
 800b28e:	f000 f9a5 	bl	800b5dc <USBD_CoreFindEP>
 800b292:	4603      	mov	r3, r0
 800b294:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b296:	7dbb      	ldrb	r3, [r7, #22]
 800b298:	2bff      	cmp	r3, #255	@ 0xff
 800b29a:	d025      	beq.n	800b2e8 <USBD_LL_DataOutStage+0x15c>
 800b29c:	7dbb      	ldrb	r3, [r7, #22]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d122      	bne.n	800b2e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	2b03      	cmp	r3, #3
 800b2ac:	d117      	bne.n	800b2de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b2ae:	7dba      	ldrb	r2, [r7, #22]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	32ae      	adds	r2, #174	@ 0xae
 800b2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00f      	beq.n	800b2de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b2be:	7dba      	ldrb	r2, [r7, #22]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b2c6:	7dba      	ldrb	r2, [r7, #22]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	32ae      	adds	r2, #174	@ 0xae
 800b2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d0:	699b      	ldr	r3, [r3, #24]
 800b2d2:	7afa      	ldrb	r2, [r7, #11]
 800b2d4:	4611      	mov	r1, r2
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	4798      	blx	r3
 800b2da:	4603      	mov	r3, r0
 800b2dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b2de:	7dfb      	ldrb	r3, [r7, #23]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d001      	beq.n	800b2e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b2e4:	7dfb      	ldrb	r3, [r7, #23]
 800b2e6:	e000      	b.n	800b2ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b2e8:	2300      	movs	r3, #0
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3718      	adds	r7, #24
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b086      	sub	sp, #24
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	60f8      	str	r0, [r7, #12]
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	607a      	str	r2, [r7, #4]
 800b2fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b300:	7afb      	ldrb	r3, [r7, #11]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d16f      	bne.n	800b3e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	3314      	adds	r3, #20
 800b30a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b312:	2b02      	cmp	r3, #2
 800b314:	d15a      	bne.n	800b3cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	689a      	ldr	r2, [r3, #8]
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d914      	bls.n	800b34c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	689a      	ldr	r2, [r3, #8]
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	1ad2      	subs	r2, r2, r3
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	461a      	mov	r2, r3
 800b336:	6879      	ldr	r1, [r7, #4]
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f001 f854 	bl	800c3e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b33e:	2300      	movs	r3, #0
 800b340:	2200      	movs	r2, #0
 800b342:	2100      	movs	r1, #0
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f005 ffdb 	bl	8011300 <USBD_LL_PrepareReceive>
 800b34a:	e03f      	b.n	800b3cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	68da      	ldr	r2, [r3, #12]
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	429a      	cmp	r2, r3
 800b356:	d11c      	bne.n	800b392 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	685a      	ldr	r2, [r3, #4]
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b360:	429a      	cmp	r2, r3
 800b362:	d316      	bcc.n	800b392 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	685a      	ldr	r2, [r3, #4]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b36e:	429a      	cmp	r2, r3
 800b370:	d20f      	bcs.n	800b392 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b372:	2200      	movs	r2, #0
 800b374:	2100      	movs	r1, #0
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f001 f835 	bl	800c3e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2200      	movs	r2, #0
 800b380:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b384:	2300      	movs	r3, #0
 800b386:	2200      	movs	r2, #0
 800b388:	2100      	movs	r1, #0
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f005 ffb8 	bl	8011300 <USBD_LL_PrepareReceive>
 800b390:	e01c      	b.n	800b3cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	2b03      	cmp	r3, #3
 800b39c:	d10f      	bne.n	800b3be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d009      	beq.n	800b3be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3be:	2180      	movs	r1, #128	@ 0x80
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f005 fef3 	bl	80111ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f001 f85f 	bl	800c48a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d03a      	beq.n	800b44c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f7ff fe42 	bl	800b060 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b3e4:	e032      	b.n	800b44c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b3e6:	7afb      	ldrb	r3, [r7, #11]
 800b3e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f000 f8f3 	bl	800b5dc <USBD_CoreFindEP>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3fa:	7dfb      	ldrb	r3, [r7, #23]
 800b3fc:	2bff      	cmp	r3, #255	@ 0xff
 800b3fe:	d025      	beq.n	800b44c <USBD_LL_DataInStage+0x15a>
 800b400:	7dfb      	ldrb	r3, [r7, #23]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d122      	bne.n	800b44c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b03      	cmp	r3, #3
 800b410:	d11c      	bne.n	800b44c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b412:	7dfa      	ldrb	r2, [r7, #23]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	32ae      	adds	r2, #174	@ 0xae
 800b418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d014      	beq.n	800b44c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b422:	7dfa      	ldrb	r2, [r7, #23]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b42a:	7dfa      	ldrb	r2, [r7, #23]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	32ae      	adds	r2, #174	@ 0xae
 800b430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b434:	695b      	ldr	r3, [r3, #20]
 800b436:	7afa      	ldrb	r2, [r7, #11]
 800b438:	4611      	mov	r1, r2
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	4798      	blx	r3
 800b43e:	4603      	mov	r3, r0
 800b440:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b442:	7dbb      	ldrb	r3, [r7, #22]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d001      	beq.n	800b44c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b448:	7dbb      	ldrb	r3, [r7, #22]
 800b44a:	e000      	b.n	800b44e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b44c:	2300      	movs	r3, #0
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3718      	adds	r7, #24
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b45e:	2300      	movs	r3, #0
 800b460:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2201      	movs	r2, #1
 800b466:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d014      	beq.n	800b4bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00e      	beq.n	800b4bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	6852      	ldr	r2, [r2, #4]
 800b4aa:	b2d2      	uxtb	r2, r2
 800b4ac:	4611      	mov	r1, r2
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	4798      	blx	r3
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d001      	beq.n	800b4bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4bc:	2340      	movs	r3, #64	@ 0x40
 800b4be:	2200      	movs	r2, #0
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f005 fe2d 	bl	8011122 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2240      	movs	r2, #64	@ 0x40
 800b4d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4d8:	2340      	movs	r3, #64	@ 0x40
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2180      	movs	r1, #128	@ 0x80
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f005 fe1f 	bl	8011122 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2240      	movs	r2, #64	@ 0x40
 800b4ee:	621a      	str	r2, [r3, #32]

  return ret;
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b083      	sub	sp, #12
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
 800b502:	460b      	mov	r3, r1
 800b504:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	78fa      	ldrb	r2, [r7, #3]
 800b50a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	370c      	adds	r7, #12
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr

0800b51a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b51a:	b480      	push	{r7}
 800b51c:	b083      	sub	sp, #12
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	2b04      	cmp	r3, #4
 800b52c:	d006      	beq.n	800b53c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b534:	b2da      	uxtb	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2204      	movs	r2, #4
 800b540:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	370c      	adds	r7, #12
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr

0800b552 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b552:	b480      	push	{r7}
 800b554:	b083      	sub	sp, #12
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b560:	b2db      	uxtb	r3, r3
 800b562:	2b04      	cmp	r3, #4
 800b564:	d106      	bne.n	800b574 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b56c:	b2da      	uxtb	r2, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	370c      	adds	r7, #12
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr

0800b582 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b582:	b580      	push	{r7, lr}
 800b584:	b082      	sub	sp, #8
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b03      	cmp	r3, #3
 800b594:	d110      	bne.n	800b5b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00b      	beq.n	800b5b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5a6:	69db      	ldr	r3, [r3, #28]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d005      	beq.n	800b5b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5b2:	69db      	ldr	r3, [r3, #28]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b083      	sub	sp, #12
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b5ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b5e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b086      	sub	sp, #24
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	460b      	mov	r3, r1
 800b600:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b60a:	2300      	movs	r3, #0
 800b60c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	885b      	ldrh	r3, [r3, #2]
 800b612:	b29b      	uxth	r3, r3
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	7812      	ldrb	r2, [r2, #0]
 800b618:	4293      	cmp	r3, r2
 800b61a:	d91f      	bls.n	800b65c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b622:	e013      	b.n	800b64c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b624:	f107 030a 	add.w	r3, r7, #10
 800b628:	4619      	mov	r1, r3
 800b62a:	6978      	ldr	r0, [r7, #20]
 800b62c:	f000 f81b 	bl	800b666 <USBD_GetNextDesc>
 800b630:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	785b      	ldrb	r3, [r3, #1]
 800b636:	2b05      	cmp	r3, #5
 800b638:	d108      	bne.n	800b64c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	789b      	ldrb	r3, [r3, #2]
 800b642:	78fa      	ldrb	r2, [r7, #3]
 800b644:	429a      	cmp	r2, r3
 800b646:	d008      	beq.n	800b65a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b648:	2300      	movs	r3, #0
 800b64a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	885b      	ldrh	r3, [r3, #2]
 800b650:	b29a      	uxth	r2, r3
 800b652:	897b      	ldrh	r3, [r7, #10]
 800b654:	429a      	cmp	r2, r3
 800b656:	d8e5      	bhi.n	800b624 <USBD_GetEpDesc+0x2e>
 800b658:	e000      	b.n	800b65c <USBD_GetEpDesc+0x66>
          break;
 800b65a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b65c:	693b      	ldr	r3, [r7, #16]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3718      	adds	r7, #24
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b666:	b480      	push	{r7}
 800b668:	b085      	sub	sp, #20
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	881b      	ldrh	r3, [r3, #0]
 800b678:	68fa      	ldr	r2, [r7, #12]
 800b67a:	7812      	ldrb	r2, [r2, #0]
 800b67c:	4413      	add	r3, r2
 800b67e:	b29a      	uxth	r2, r3
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	461a      	mov	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4413      	add	r3, r2
 800b68e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b690:	68fb      	ldr	r3, [r7, #12]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b087      	sub	sp, #28
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b6bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b6c0:	021b      	lsls	r3, r3, #8
 800b6c2:	b21a      	sxth	r2, r3
 800b6c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	b21b      	sxth	r3, r3
 800b6cc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b6ce:	89fb      	ldrh	r3, [r7, #14]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	371c      	adds	r7, #28
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b6f2:	2b40      	cmp	r3, #64	@ 0x40
 800b6f4:	d005      	beq.n	800b702 <USBD_StdDevReq+0x26>
 800b6f6:	2b40      	cmp	r3, #64	@ 0x40
 800b6f8:	d857      	bhi.n	800b7aa <USBD_StdDevReq+0xce>
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00f      	beq.n	800b71e <USBD_StdDevReq+0x42>
 800b6fe:	2b20      	cmp	r3, #32
 800b700:	d153      	bne.n	800b7aa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	32ae      	adds	r2, #174	@ 0xae
 800b70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	4798      	blx	r3
 800b718:	4603      	mov	r3, r0
 800b71a:	73fb      	strb	r3, [r7, #15]
      break;
 800b71c:	e04a      	b.n	800b7b4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	785b      	ldrb	r3, [r3, #1]
 800b722:	2b09      	cmp	r3, #9
 800b724:	d83b      	bhi.n	800b79e <USBD_StdDevReq+0xc2>
 800b726:	a201      	add	r2, pc, #4	@ (adr r2, 800b72c <USBD_StdDevReq+0x50>)
 800b728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72c:	0800b781 	.word	0x0800b781
 800b730:	0800b795 	.word	0x0800b795
 800b734:	0800b79f 	.word	0x0800b79f
 800b738:	0800b78b 	.word	0x0800b78b
 800b73c:	0800b79f 	.word	0x0800b79f
 800b740:	0800b75f 	.word	0x0800b75f
 800b744:	0800b755 	.word	0x0800b755
 800b748:	0800b79f 	.word	0x0800b79f
 800b74c:	0800b777 	.word	0x0800b777
 800b750:	0800b769 	.word	0x0800b769
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 fa3c 	bl	800bbd4 <USBD_GetDescriptor>
          break;
 800b75c:	e024      	b.n	800b7a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b75e:	6839      	ldr	r1, [r7, #0]
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 fbcb 	bl	800befc <USBD_SetAddress>
          break;
 800b766:	e01f      	b.n	800b7a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b768:	6839      	ldr	r1, [r7, #0]
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 fc0a 	bl	800bf84 <USBD_SetConfig>
 800b770:	4603      	mov	r3, r0
 800b772:	73fb      	strb	r3, [r7, #15]
          break;
 800b774:	e018      	b.n	800b7a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fcad 	bl	800c0d8 <USBD_GetConfig>
          break;
 800b77e:	e013      	b.n	800b7a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fcde 	bl	800c144 <USBD_GetStatus>
          break;
 800b788:	e00e      	b.n	800b7a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fd0d 	bl	800c1ac <USBD_SetFeature>
          break;
 800b792:	e009      	b.n	800b7a8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 fd31 	bl	800c1fe <USBD_ClrFeature>
          break;
 800b79c:	e004      	b.n	800b7a8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 fd88 	bl	800c2b6 <USBD_CtlError>
          break;
 800b7a6:	bf00      	nop
      }
      break;
 800b7a8:	e004      	b.n	800b7b4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b7aa:	6839      	ldr	r1, [r7, #0]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fd82 	bl	800c2b6 <USBD_CtlError>
      break;
 800b7b2:	bf00      	nop
  }

  return ret;
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop

0800b7c0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b7d6:	2b40      	cmp	r3, #64	@ 0x40
 800b7d8:	d005      	beq.n	800b7e6 <USBD_StdItfReq+0x26>
 800b7da:	2b40      	cmp	r3, #64	@ 0x40
 800b7dc:	d852      	bhi.n	800b884 <USBD_StdItfReq+0xc4>
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d001      	beq.n	800b7e6 <USBD_StdItfReq+0x26>
 800b7e2:	2b20      	cmp	r3, #32
 800b7e4:	d14e      	bne.n	800b884 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	2b02      	cmp	r3, #2
 800b7f2:	d840      	bhi.n	800b876 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	889b      	ldrh	r3, [r3, #4]
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d836      	bhi.n	800b86c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	889b      	ldrh	r3, [r3, #4]
 800b802:	b2db      	uxtb	r3, r3
 800b804:	4619      	mov	r1, r3
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f7ff fedb 	bl	800b5c2 <USBD_CoreFindIF>
 800b80c:	4603      	mov	r3, r0
 800b80e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b810:	7bbb      	ldrb	r3, [r7, #14]
 800b812:	2bff      	cmp	r3, #255	@ 0xff
 800b814:	d01d      	beq.n	800b852 <USBD_StdItfReq+0x92>
 800b816:	7bbb      	ldrb	r3, [r7, #14]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d11a      	bne.n	800b852 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b81c:	7bba      	ldrb	r2, [r7, #14]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	32ae      	adds	r2, #174	@ 0xae
 800b822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00f      	beq.n	800b84c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b82c:	7bba      	ldrb	r2, [r7, #14]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b834:	7bba      	ldrb	r2, [r7, #14]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	32ae      	adds	r2, #174	@ 0xae
 800b83a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	4798      	blx	r3
 800b846:	4603      	mov	r3, r0
 800b848:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b84a:	e004      	b.n	800b856 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b84c:	2303      	movs	r3, #3
 800b84e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b850:	e001      	b.n	800b856 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b852:	2303      	movs	r3, #3
 800b854:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	88db      	ldrh	r3, [r3, #6]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d110      	bne.n	800b880 <USBD_StdItfReq+0xc0>
 800b85e:	7bfb      	ldrb	r3, [r7, #15]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d10d      	bne.n	800b880 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fdfd 	bl	800c464 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b86a:	e009      	b.n	800b880 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b86c:	6839      	ldr	r1, [r7, #0]
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 fd21 	bl	800c2b6 <USBD_CtlError>
          break;
 800b874:	e004      	b.n	800b880 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b876:	6839      	ldr	r1, [r7, #0]
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 fd1c 	bl	800c2b6 <USBD_CtlError>
          break;
 800b87e:	e000      	b.n	800b882 <USBD_StdItfReq+0xc2>
          break;
 800b880:	bf00      	nop
      }
      break;
 800b882:	e004      	b.n	800b88e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b884:	6839      	ldr	r1, [r7, #0]
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 fd15 	bl	800c2b6 <USBD_CtlError>
      break;
 800b88c:	bf00      	nop
  }

  return ret;
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	889b      	ldrh	r3, [r3, #4]
 800b8aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b8b4:	2b40      	cmp	r3, #64	@ 0x40
 800b8b6:	d007      	beq.n	800b8c8 <USBD_StdEPReq+0x30>
 800b8b8:	2b40      	cmp	r3, #64	@ 0x40
 800b8ba:	f200 817f 	bhi.w	800bbbc <USBD_StdEPReq+0x324>
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d02a      	beq.n	800b918 <USBD_StdEPReq+0x80>
 800b8c2:	2b20      	cmp	r3, #32
 800b8c4:	f040 817a 	bne.w	800bbbc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b8c8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f7ff fe85 	bl	800b5dc <USBD_CoreFindEP>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8d6:	7b7b      	ldrb	r3, [r7, #13]
 800b8d8:	2bff      	cmp	r3, #255	@ 0xff
 800b8da:	f000 8174 	beq.w	800bbc6 <USBD_StdEPReq+0x32e>
 800b8de:	7b7b      	ldrb	r3, [r7, #13]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f040 8170 	bne.w	800bbc6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b8e6:	7b7a      	ldrb	r2, [r7, #13]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b8ee:	7b7a      	ldrb	r2, [r7, #13]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	32ae      	adds	r2, #174	@ 0xae
 800b8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	f000 8163 	beq.w	800bbc6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b900:	7b7a      	ldrb	r2, [r7, #13]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	32ae      	adds	r2, #174	@ 0xae
 800b906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	6839      	ldr	r1, [r7, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	4798      	blx	r3
 800b912:	4603      	mov	r3, r0
 800b914:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b916:	e156      	b.n	800bbc6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	785b      	ldrb	r3, [r3, #1]
 800b91c:	2b03      	cmp	r3, #3
 800b91e:	d008      	beq.n	800b932 <USBD_StdEPReq+0x9a>
 800b920:	2b03      	cmp	r3, #3
 800b922:	f300 8145 	bgt.w	800bbb0 <USBD_StdEPReq+0x318>
 800b926:	2b00      	cmp	r3, #0
 800b928:	f000 809b 	beq.w	800ba62 <USBD_StdEPReq+0x1ca>
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d03c      	beq.n	800b9aa <USBD_StdEPReq+0x112>
 800b930:	e13e      	b.n	800bbb0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d002      	beq.n	800b944 <USBD_StdEPReq+0xac>
 800b93e:	2b03      	cmp	r3, #3
 800b940:	d016      	beq.n	800b970 <USBD_StdEPReq+0xd8>
 800b942:	e02c      	b.n	800b99e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b944:	7bbb      	ldrb	r3, [r7, #14]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00d      	beq.n	800b966 <USBD_StdEPReq+0xce>
 800b94a:	7bbb      	ldrb	r3, [r7, #14]
 800b94c:	2b80      	cmp	r3, #128	@ 0x80
 800b94e:	d00a      	beq.n	800b966 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b950:	7bbb      	ldrb	r3, [r7, #14]
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f005 fc29 	bl	80111ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b95a:	2180      	movs	r1, #128	@ 0x80
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f005 fc25 	bl	80111ac <USBD_LL_StallEP>
 800b962:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b964:	e020      	b.n	800b9a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b966:	6839      	ldr	r1, [r7, #0]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 fca4 	bl	800c2b6 <USBD_CtlError>
              break;
 800b96e:	e01b      	b.n	800b9a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	885b      	ldrh	r3, [r3, #2]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d10e      	bne.n	800b996 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b978:	7bbb      	ldrb	r3, [r7, #14]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00b      	beq.n	800b996 <USBD_StdEPReq+0xfe>
 800b97e:	7bbb      	ldrb	r3, [r7, #14]
 800b980:	2b80      	cmp	r3, #128	@ 0x80
 800b982:	d008      	beq.n	800b996 <USBD_StdEPReq+0xfe>
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	88db      	ldrh	r3, [r3, #6]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d104      	bne.n	800b996 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	4619      	mov	r1, r3
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f005 fc0b 	bl	80111ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fd64 	bl	800c464 <USBD_CtlSendStatus>

              break;
 800b99c:	e004      	b.n	800b9a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b99e:	6839      	ldr	r1, [r7, #0]
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fc88 	bl	800c2b6 <USBD_CtlError>
              break;
 800b9a6:	bf00      	nop
          }
          break;
 800b9a8:	e107      	b.n	800bbba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d002      	beq.n	800b9bc <USBD_StdEPReq+0x124>
 800b9b6:	2b03      	cmp	r3, #3
 800b9b8:	d016      	beq.n	800b9e8 <USBD_StdEPReq+0x150>
 800b9ba:	e04b      	b.n	800ba54 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9bc:	7bbb      	ldrb	r3, [r7, #14]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d00d      	beq.n	800b9de <USBD_StdEPReq+0x146>
 800b9c2:	7bbb      	ldrb	r3, [r7, #14]
 800b9c4:	2b80      	cmp	r3, #128	@ 0x80
 800b9c6:	d00a      	beq.n	800b9de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9c8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f005 fbed 	bl	80111ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9d2:	2180      	movs	r1, #128	@ 0x80
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f005 fbe9 	bl	80111ac <USBD_LL_StallEP>
 800b9da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b9dc:	e040      	b.n	800ba60 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b9de:	6839      	ldr	r1, [r7, #0]
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 fc68 	bl	800c2b6 <USBD_CtlError>
              break;
 800b9e6:	e03b      	b.n	800ba60 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	885b      	ldrh	r3, [r3, #2]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d136      	bne.n	800ba5e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b9f0:	7bbb      	ldrb	r3, [r7, #14]
 800b9f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d004      	beq.n	800ba04 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b9fa:	7bbb      	ldrb	r3, [r7, #14]
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f005 fbf3 	bl	80111ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 fd2d 	bl	800c464 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba0a:	7bbb      	ldrb	r3, [r7, #14]
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f7ff fde4 	bl	800b5dc <USBD_CoreFindEP>
 800ba14:	4603      	mov	r3, r0
 800ba16:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba18:	7b7b      	ldrb	r3, [r7, #13]
 800ba1a:	2bff      	cmp	r3, #255	@ 0xff
 800ba1c:	d01f      	beq.n	800ba5e <USBD_StdEPReq+0x1c6>
 800ba1e:	7b7b      	ldrb	r3, [r7, #13]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d11c      	bne.n	800ba5e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ba24:	7b7a      	ldrb	r2, [r7, #13]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ba2c:	7b7a      	ldrb	r2, [r7, #13]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	32ae      	adds	r2, #174	@ 0xae
 800ba32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d010      	beq.n	800ba5e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ba3c:	7b7a      	ldrb	r2, [r7, #13]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	32ae      	adds	r2, #174	@ 0xae
 800ba42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba46:	689b      	ldr	r3, [r3, #8]
 800ba48:	6839      	ldr	r1, [r7, #0]
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	4798      	blx	r3
 800ba4e:	4603      	mov	r3, r0
 800ba50:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ba52:	e004      	b.n	800ba5e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 fc2d 	bl	800c2b6 <USBD_CtlError>
              break;
 800ba5c:	e000      	b.n	800ba60 <USBD_StdEPReq+0x1c8>
              break;
 800ba5e:	bf00      	nop
          }
          break;
 800ba60:	e0ab      	b.n	800bbba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b02      	cmp	r3, #2
 800ba6c:	d002      	beq.n	800ba74 <USBD_StdEPReq+0x1dc>
 800ba6e:	2b03      	cmp	r3, #3
 800ba70:	d032      	beq.n	800bad8 <USBD_StdEPReq+0x240>
 800ba72:	e097      	b.n	800bba4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba74:	7bbb      	ldrb	r3, [r7, #14]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d007      	beq.n	800ba8a <USBD_StdEPReq+0x1f2>
 800ba7a:	7bbb      	ldrb	r3, [r7, #14]
 800ba7c:	2b80      	cmp	r3, #128	@ 0x80
 800ba7e:	d004      	beq.n	800ba8a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ba80:	6839      	ldr	r1, [r7, #0]
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 fc17 	bl	800c2b6 <USBD_CtlError>
                break;
 800ba88:	e091      	b.n	800bbae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	da0b      	bge.n	800baaa <USBD_StdEPReq+0x212>
 800ba92:	7bbb      	ldrb	r3, [r7, #14]
 800ba94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba98:	4613      	mov	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	3310      	adds	r3, #16
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	4413      	add	r3, r2
 800baa6:	3304      	adds	r3, #4
 800baa8:	e00b      	b.n	800bac2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800baaa:	7bbb      	ldrb	r3, [r7, #14]
 800baac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bab0:	4613      	mov	r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	4413      	add	r3, r2
 800bac0:	3304      	adds	r3, #4
 800bac2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	2200      	movs	r2, #0
 800bac8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	2202      	movs	r2, #2
 800bace:	4619      	mov	r1, r3
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fc6d 	bl	800c3b0 <USBD_CtlSendData>
              break;
 800bad6:	e06a      	b.n	800bbae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800badc:	2b00      	cmp	r3, #0
 800bade:	da11      	bge.n	800bb04 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bae0:	7bbb      	ldrb	r3, [r7, #14]
 800bae2:	f003 020f 	and.w	r2, r3, #15
 800bae6:	6879      	ldr	r1, [r7, #4]
 800bae8:	4613      	mov	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	4413      	add	r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	440b      	add	r3, r1
 800baf2:	3324      	adds	r3, #36	@ 0x24
 800baf4:	881b      	ldrh	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d117      	bne.n	800bb2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fbda 	bl	800c2b6 <USBD_CtlError>
                  break;
 800bb02:	e054      	b.n	800bbae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
 800bb06:	f003 020f 	and.w	r2, r3, #15
 800bb0a:	6879      	ldr	r1, [r7, #4]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	4413      	add	r3, r2
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	440b      	add	r3, r1
 800bb16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb1a:	881b      	ldrh	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d104      	bne.n	800bb2a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 fbc7 	bl	800c2b6 <USBD_CtlError>
                  break;
 800bb28:	e041      	b.n	800bbae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	da0b      	bge.n	800bb4a <USBD_StdEPReq+0x2b2>
 800bb32:	7bbb      	ldrb	r3, [r7, #14]
 800bb34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb38:	4613      	mov	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	3310      	adds	r3, #16
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	4413      	add	r3, r2
 800bb46:	3304      	adds	r3, #4
 800bb48:	e00b      	b.n	800bb62 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb4a:	7bbb      	ldrb	r3, [r7, #14]
 800bb4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb50:	4613      	mov	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4413      	add	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	4413      	add	r3, r2
 800bb60:	3304      	adds	r3, #4
 800bb62:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb64:	7bbb      	ldrb	r3, [r7, #14]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d002      	beq.n	800bb70 <USBD_StdEPReq+0x2d8>
 800bb6a:	7bbb      	ldrb	r3, [r7, #14]
 800bb6c:	2b80      	cmp	r3, #128	@ 0x80
 800bb6e:	d103      	bne.n	800bb78 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	2200      	movs	r2, #0
 800bb74:	601a      	str	r2, [r3, #0]
 800bb76:	e00e      	b.n	800bb96 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bb78:	7bbb      	ldrb	r3, [r7, #14]
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f005 fb53 	bl	8011228 <USBD_LL_IsStallEP>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d003      	beq.n	800bb90 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	601a      	str	r2, [r3, #0]
 800bb8e:	e002      	b.n	800bb96 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	2200      	movs	r2, #0
 800bb94:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	2202      	movs	r2, #2
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fc07 	bl	800c3b0 <USBD_CtlSendData>
              break;
 800bba2:	e004      	b.n	800bbae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bba4:	6839      	ldr	r1, [r7, #0]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 fb85 	bl	800c2b6 <USBD_CtlError>
              break;
 800bbac:	bf00      	nop
          }
          break;
 800bbae:	e004      	b.n	800bbba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fb7f 	bl	800c2b6 <USBD_CtlError>
          break;
 800bbb8:	bf00      	nop
      }
      break;
 800bbba:	e005      	b.n	800bbc8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bbbc:	6839      	ldr	r1, [r7, #0]
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fb79 	bl	800c2b6 <USBD_CtlError>
      break;
 800bbc4:	e000      	b.n	800bbc8 <USBD_StdEPReq+0x330>
      break;
 800bbc6:	bf00      	nop
  }

  return ret;
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	885b      	ldrh	r3, [r3, #2]
 800bbee:	0a1b      	lsrs	r3, r3, #8
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	2b0e      	cmp	r3, #14
 800bbf6:	f200 8152 	bhi.w	800be9e <USBD_GetDescriptor+0x2ca>
 800bbfa:	a201      	add	r2, pc, #4	@ (adr r2, 800bc00 <USBD_GetDescriptor+0x2c>)
 800bbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc00:	0800bc71 	.word	0x0800bc71
 800bc04:	0800bc89 	.word	0x0800bc89
 800bc08:	0800bcc9 	.word	0x0800bcc9
 800bc0c:	0800be9f 	.word	0x0800be9f
 800bc10:	0800be9f 	.word	0x0800be9f
 800bc14:	0800be3f 	.word	0x0800be3f
 800bc18:	0800be6b 	.word	0x0800be6b
 800bc1c:	0800be9f 	.word	0x0800be9f
 800bc20:	0800be9f 	.word	0x0800be9f
 800bc24:	0800be9f 	.word	0x0800be9f
 800bc28:	0800be9f 	.word	0x0800be9f
 800bc2c:	0800be9f 	.word	0x0800be9f
 800bc30:	0800be9f 	.word	0x0800be9f
 800bc34:	0800be9f 	.word	0x0800be9f
 800bc38:	0800bc3d 	.word	0x0800bc3d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00b      	beq.n	800bc60 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc4e:	69db      	ldr	r3, [r3, #28]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	7c12      	ldrb	r2, [r2, #16]
 800bc54:	f107 0108 	add.w	r1, r7, #8
 800bc58:	4610      	mov	r0, r2
 800bc5a:	4798      	blx	r3
 800bc5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc5e:	e126      	b.n	800beae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bc60:	6839      	ldr	r1, [r7, #0]
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f000 fb27 	bl	800c2b6 <USBD_CtlError>
        err++;
 800bc68:	7afb      	ldrb	r3, [r7, #11]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	72fb      	strb	r3, [r7, #11]
      break;
 800bc6e:	e11e      	b.n	800beae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	7c12      	ldrb	r2, [r2, #16]
 800bc7c:	f107 0108 	add.w	r1, r7, #8
 800bc80:	4610      	mov	r0, r2
 800bc82:	4798      	blx	r3
 800bc84:	60f8      	str	r0, [r7, #12]
      break;
 800bc86:	e112      	b.n	800beae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	7c1b      	ldrb	r3, [r3, #16]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10d      	bne.n	800bcac <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc98:	f107 0208 	add.w	r2, r7, #8
 800bc9c:	4610      	mov	r0, r2
 800bc9e:	4798      	blx	r3
 800bca0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	3301      	adds	r3, #1
 800bca6:	2202      	movs	r2, #2
 800bca8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bcaa:	e100      	b.n	800beae <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcb4:	f107 0208 	add.w	r2, r7, #8
 800bcb8:	4610      	mov	r0, r2
 800bcba:	4798      	blx	r3
 800bcbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	701a      	strb	r2, [r3, #0]
      break;
 800bcc6:	e0f2      	b.n	800beae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	885b      	ldrh	r3, [r3, #2]
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b05      	cmp	r3, #5
 800bcd0:	f200 80ac 	bhi.w	800be2c <USBD_GetDescriptor+0x258>
 800bcd4:	a201      	add	r2, pc, #4	@ (adr r2, 800bcdc <USBD_GetDescriptor+0x108>)
 800bcd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcda:	bf00      	nop
 800bcdc:	0800bcf5 	.word	0x0800bcf5
 800bce0:	0800bd29 	.word	0x0800bd29
 800bce4:	0800bd5d 	.word	0x0800bd5d
 800bce8:	0800bd91 	.word	0x0800bd91
 800bcec:	0800bdc5 	.word	0x0800bdc5
 800bcf0:	0800bdf9 	.word	0x0800bdf9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00b      	beq.n	800bd18 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	7c12      	ldrb	r2, [r2, #16]
 800bd0c:	f107 0108 	add.w	r1, r7, #8
 800bd10:	4610      	mov	r0, r2
 800bd12:	4798      	blx	r3
 800bd14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd16:	e091      	b.n	800be3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 facb 	bl	800c2b6 <USBD_CtlError>
            err++;
 800bd20:	7afb      	ldrb	r3, [r7, #11]
 800bd22:	3301      	adds	r3, #1
 800bd24:	72fb      	strb	r3, [r7, #11]
          break;
 800bd26:	e089      	b.n	800be3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00b      	beq.n	800bd4c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	687a      	ldr	r2, [r7, #4]
 800bd3e:	7c12      	ldrb	r2, [r2, #16]
 800bd40:	f107 0108 	add.w	r1, r7, #8
 800bd44:	4610      	mov	r0, r2
 800bd46:	4798      	blx	r3
 800bd48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd4a:	e077      	b.n	800be3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd4c:	6839      	ldr	r1, [r7, #0]
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 fab1 	bl	800c2b6 <USBD_CtlError>
            err++;
 800bd54:	7afb      	ldrb	r3, [r7, #11]
 800bd56:	3301      	adds	r3, #1
 800bd58:	72fb      	strb	r3, [r7, #11]
          break;
 800bd5a:	e06f      	b.n	800be3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00b      	beq.n	800bd80 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	7c12      	ldrb	r2, [r2, #16]
 800bd74:	f107 0108 	add.w	r1, r7, #8
 800bd78:	4610      	mov	r0, r2
 800bd7a:	4798      	blx	r3
 800bd7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd7e:	e05d      	b.n	800be3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd80:	6839      	ldr	r1, [r7, #0]
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f000 fa97 	bl	800c2b6 <USBD_CtlError>
            err++;
 800bd88:	7afb      	ldrb	r3, [r7, #11]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd8e:	e055      	b.n	800be3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00b      	beq.n	800bdb4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	7c12      	ldrb	r2, [r2, #16]
 800bda8:	f107 0108 	add.w	r1, r7, #8
 800bdac:	4610      	mov	r0, r2
 800bdae:	4798      	blx	r3
 800bdb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdb2:	e043      	b.n	800be3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fa7d 	bl	800c2b6 <USBD_CtlError>
            err++;
 800bdbc:	7afb      	ldrb	r3, [r7, #11]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	72fb      	strb	r3, [r7, #11]
          break;
 800bdc2:	e03b      	b.n	800be3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d00b      	beq.n	800bde8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdd6:	695b      	ldr	r3, [r3, #20]
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	7c12      	ldrb	r2, [r2, #16]
 800bddc:	f107 0108 	add.w	r1, r7, #8
 800bde0:	4610      	mov	r0, r2
 800bde2:	4798      	blx	r3
 800bde4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bde6:	e029      	b.n	800be3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bde8:	6839      	ldr	r1, [r7, #0]
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 fa63 	bl	800c2b6 <USBD_CtlError>
            err++;
 800bdf0:	7afb      	ldrb	r3, [r7, #11]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	72fb      	strb	r3, [r7, #11]
          break;
 800bdf6:	e021      	b.n	800be3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdfe:	699b      	ldr	r3, [r3, #24]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d00b      	beq.n	800be1c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be0a:	699b      	ldr	r3, [r3, #24]
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	7c12      	ldrb	r2, [r2, #16]
 800be10:	f107 0108 	add.w	r1, r7, #8
 800be14:	4610      	mov	r0, r2
 800be16:	4798      	blx	r3
 800be18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be1a:	e00f      	b.n	800be3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be1c:	6839      	ldr	r1, [r7, #0]
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 fa49 	bl	800c2b6 <USBD_CtlError>
            err++;
 800be24:	7afb      	ldrb	r3, [r7, #11]
 800be26:	3301      	adds	r3, #1
 800be28:	72fb      	strb	r3, [r7, #11]
          break;
 800be2a:	e007      	b.n	800be3c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fa41 	bl	800c2b6 <USBD_CtlError>
          err++;
 800be34:	7afb      	ldrb	r3, [r7, #11]
 800be36:	3301      	adds	r3, #1
 800be38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800be3a:	bf00      	nop
      }
      break;
 800be3c:	e037      	b.n	800beae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	7c1b      	ldrb	r3, [r3, #16]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d109      	bne.n	800be5a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be4e:	f107 0208 	add.w	r2, r7, #8
 800be52:	4610      	mov	r0, r2
 800be54:	4798      	blx	r3
 800be56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be58:	e029      	b.n	800beae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800be5a:	6839      	ldr	r1, [r7, #0]
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 fa2a 	bl	800c2b6 <USBD_CtlError>
        err++;
 800be62:	7afb      	ldrb	r3, [r7, #11]
 800be64:	3301      	adds	r3, #1
 800be66:	72fb      	strb	r3, [r7, #11]
      break;
 800be68:	e021      	b.n	800beae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	7c1b      	ldrb	r3, [r3, #16]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10d      	bne.n	800be8e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be7a:	f107 0208 	add.w	r2, r7, #8
 800be7e:	4610      	mov	r0, r2
 800be80:	4798      	blx	r3
 800be82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	3301      	adds	r3, #1
 800be88:	2207      	movs	r2, #7
 800be8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be8c:	e00f      	b.n	800beae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fa10 	bl	800c2b6 <USBD_CtlError>
        err++;
 800be96:	7afb      	ldrb	r3, [r7, #11]
 800be98:	3301      	adds	r3, #1
 800be9a:	72fb      	strb	r3, [r7, #11]
      break;
 800be9c:	e007      	b.n	800beae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fa08 	bl	800c2b6 <USBD_CtlError>
      err++;
 800bea6:	7afb      	ldrb	r3, [r7, #11]
 800bea8:	3301      	adds	r3, #1
 800beaa:	72fb      	strb	r3, [r7, #11]
      break;
 800beac:	bf00      	nop
  }

  if (err != 0U)
 800beae:	7afb      	ldrb	r3, [r7, #11]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d11e      	bne.n	800bef2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	88db      	ldrh	r3, [r3, #6]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d016      	beq.n	800beea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bebc:	893b      	ldrh	r3, [r7, #8]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00e      	beq.n	800bee0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	88da      	ldrh	r2, [r3, #6]
 800bec6:	893b      	ldrh	r3, [r7, #8]
 800bec8:	4293      	cmp	r3, r2
 800beca:	bf28      	it	cs
 800becc:	4613      	movcs	r3, r2
 800bece:	b29b      	uxth	r3, r3
 800bed0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bed2:	893b      	ldrh	r3, [r7, #8]
 800bed4:	461a      	mov	r2, r3
 800bed6:	68f9      	ldr	r1, [r7, #12]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fa69 	bl	800c3b0 <USBD_CtlSendData>
 800bede:	e009      	b.n	800bef4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 f9e7 	bl	800c2b6 <USBD_CtlError>
 800bee8:	e004      	b.n	800bef4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 faba 	bl	800c464 <USBD_CtlSendStatus>
 800bef0:	e000      	b.n	800bef4 <USBD_GetDescriptor+0x320>
    return;
 800bef2:	bf00      	nop
  }
}
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop

0800befc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	889b      	ldrh	r3, [r3, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d131      	bne.n	800bf72 <USBD_SetAddress+0x76>
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	88db      	ldrh	r3, [r3, #6]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d12d      	bne.n	800bf72 <USBD_SetAddress+0x76>
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	885b      	ldrh	r3, [r3, #2]
 800bf1a:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf1c:	d829      	bhi.n	800bf72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	885b      	ldrh	r3, [r3, #2]
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	2b03      	cmp	r3, #3
 800bf34:	d104      	bne.n	800bf40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bf36:	6839      	ldr	r1, [r7, #0]
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 f9bc 	bl	800c2b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf3e:	e01d      	b.n	800bf7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	7bfa      	ldrb	r2, [r7, #15]
 800bf44:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f005 f997 	bl	8011280 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fa86 	bl	800c464 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf58:	7bfb      	ldrb	r3, [r7, #15]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d004      	beq.n	800bf68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2202      	movs	r2, #2
 800bf62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf66:	e009      	b.n	800bf7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf70:	e004      	b.n	800bf7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf72:	6839      	ldr	r1, [r7, #0]
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 f99e 	bl	800c2b6 <USBD_CtlError>
  }
}
 800bf7a:	bf00      	nop
 800bf7c:	bf00      	nop
 800bf7e:	3710      	adds	r7, #16
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	885b      	ldrh	r3, [r3, #2]
 800bf96:	b2da      	uxtb	r2, r3
 800bf98:	4b4e      	ldr	r3, [pc, #312]	@ (800c0d4 <USBD_SetConfig+0x150>)
 800bf9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf9c:	4b4d      	ldr	r3, [pc, #308]	@ (800c0d4 <USBD_SetConfig+0x150>)
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d905      	bls.n	800bfb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bfa4:	6839      	ldr	r1, [r7, #0]
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 f985 	bl	800c2b6 <USBD_CtlError>
    return USBD_FAIL;
 800bfac:	2303      	movs	r3, #3
 800bfae:	e08c      	b.n	800c0ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	2b02      	cmp	r3, #2
 800bfba:	d002      	beq.n	800bfc2 <USBD_SetConfig+0x3e>
 800bfbc:	2b03      	cmp	r3, #3
 800bfbe:	d029      	beq.n	800c014 <USBD_SetConfig+0x90>
 800bfc0:	e075      	b.n	800c0ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bfc2:	4b44      	ldr	r3, [pc, #272]	@ (800c0d4 <USBD_SetConfig+0x150>)
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d020      	beq.n	800c00c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bfca:	4b42      	ldr	r3, [pc, #264]	@ (800c0d4 <USBD_SetConfig+0x150>)
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bfd4:	4b3f      	ldr	r3, [pc, #252]	@ (800c0d4 <USBD_SetConfig+0x150>)
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	4619      	mov	r1, r3
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f7ff f84b 	bl	800b076 <USBD_SetClassConfig>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d008      	beq.n	800bffc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bfea:	6839      	ldr	r1, [r7, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 f962 	bl	800c2b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2202      	movs	r2, #2
 800bff6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bffa:	e065      	b.n	800c0c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fa31 	bl	800c464 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2203      	movs	r2, #3
 800c006:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c00a:	e05d      	b.n	800c0c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 fa29 	bl	800c464 <USBD_CtlSendStatus>
      break;
 800c012:	e059      	b.n	800c0c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c014:	4b2f      	ldr	r3, [pc, #188]	@ (800c0d4 <USBD_SetConfig+0x150>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d112      	bne.n	800c042 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2202      	movs	r2, #2
 800c020:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c024:	4b2b      	ldr	r3, [pc, #172]	@ (800c0d4 <USBD_SetConfig+0x150>)
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	461a      	mov	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c02e:	4b29      	ldr	r3, [pc, #164]	@ (800c0d4 <USBD_SetConfig+0x150>)
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff f83a 	bl	800b0ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 fa12 	bl	800c464 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c040:	e042      	b.n	800c0c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c042:	4b24      	ldr	r3, [pc, #144]	@ (800c0d4 <USBD_SetConfig+0x150>)
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	461a      	mov	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d02a      	beq.n	800c0a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	b2db      	uxtb	r3, r3
 800c056:	4619      	mov	r1, r3
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f7ff f828 	bl	800b0ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c05e:	4b1d      	ldr	r3, [pc, #116]	@ (800c0d4 <USBD_SetConfig+0x150>)
 800c060:	781b      	ldrb	r3, [r3, #0]
 800c062:	461a      	mov	r2, r3
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c068:	4b1a      	ldr	r3, [pc, #104]	@ (800c0d4 <USBD_SetConfig+0x150>)
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	4619      	mov	r1, r3
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7ff f801 	bl	800b076 <USBD_SetClassConfig>
 800c074:	4603      	mov	r3, r0
 800c076:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c078:	7bfb      	ldrb	r3, [r7, #15]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00f      	beq.n	800c09e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c07e:	6839      	ldr	r1, [r7, #0]
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 f918 	bl	800c2b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	4619      	mov	r1, r3
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7ff f80d 	bl	800b0ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2202      	movs	r2, #2
 800c098:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c09c:	e014      	b.n	800c0c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 f9e0 	bl	800c464 <USBD_CtlSendStatus>
      break;
 800c0a4:	e010      	b.n	800c0c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 f9dc 	bl	800c464 <USBD_CtlSendStatus>
      break;
 800c0ac:	e00c      	b.n	800c0c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c0ae:	6839      	ldr	r1, [r7, #0]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 f900 	bl	800c2b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c0b6:	4b07      	ldr	r3, [pc, #28]	@ (800c0d4 <USBD_SetConfig+0x150>)
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f7fe fff6 	bl	800b0ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c0c2:	2303      	movs	r3, #3
 800c0c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c0c6:	bf00      	nop
  }

  return ret;
 800c0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	200004dc 	.word	0x200004dc

0800c0d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	88db      	ldrh	r3, [r3, #6]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d004      	beq.n	800c0f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f8e2 	bl	800c2b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c0f2:	e023      	b.n	800c13c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	2b02      	cmp	r3, #2
 800c0fe:	dc02      	bgt.n	800c106 <USBD_GetConfig+0x2e>
 800c100:	2b00      	cmp	r3, #0
 800c102:	dc03      	bgt.n	800c10c <USBD_GetConfig+0x34>
 800c104:	e015      	b.n	800c132 <USBD_GetConfig+0x5a>
 800c106:	2b03      	cmp	r3, #3
 800c108:	d00b      	beq.n	800c122 <USBD_GetConfig+0x4a>
 800c10a:	e012      	b.n	800c132 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2200      	movs	r2, #0
 800c110:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	3308      	adds	r3, #8
 800c116:	2201      	movs	r2, #1
 800c118:	4619      	mov	r1, r3
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 f948 	bl	800c3b0 <USBD_CtlSendData>
        break;
 800c120:	e00c      	b.n	800c13c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	3304      	adds	r3, #4
 800c126:	2201      	movs	r2, #1
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f940 	bl	800c3b0 <USBD_CtlSendData>
        break;
 800c130:	e004      	b.n	800c13c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c132:	6839      	ldr	r1, [r7, #0]
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f000 f8be 	bl	800c2b6 <USBD_CtlError>
        break;
 800c13a:	bf00      	nop
}
 800c13c:	bf00      	nop
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b082      	sub	sp, #8
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c154:	b2db      	uxtb	r3, r3
 800c156:	3b01      	subs	r3, #1
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d81e      	bhi.n	800c19a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	88db      	ldrh	r3, [r3, #6]
 800c160:	2b02      	cmp	r3, #2
 800c162:	d004      	beq.n	800c16e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c164:	6839      	ldr	r1, [r7, #0]
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f8a5 	bl	800c2b6 <USBD_CtlError>
        break;
 800c16c:	e01a      	b.n	800c1a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2201      	movs	r2, #1
 800c172:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d005      	beq.n	800c18a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	f043 0202 	orr.w	r2, r3, #2
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	330c      	adds	r3, #12
 800c18e:	2202      	movs	r2, #2
 800c190:	4619      	mov	r1, r3
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 f90c 	bl	800c3b0 <USBD_CtlSendData>
      break;
 800c198:	e004      	b.n	800c1a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c19a:	6839      	ldr	r1, [r7, #0]
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 f88a 	bl	800c2b6 <USBD_CtlError>
      break;
 800c1a2:	bf00      	nop
  }
}
 800c1a4:	bf00      	nop
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	885b      	ldrh	r3, [r3, #2]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d107      	bne.n	800c1ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 f94c 	bl	800c464 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c1cc:	e013      	b.n	800c1f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	885b      	ldrh	r3, [r3, #2]
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d10b      	bne.n	800c1ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	889b      	ldrh	r3, [r3, #4]
 800c1da:	0a1b      	lsrs	r3, r3, #8
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	b2da      	uxtb	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 f93c 	bl	800c464 <USBD_CtlSendStatus>
}
 800c1ec:	e003      	b.n	800c1f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c1ee:	6839      	ldr	r1, [r7, #0]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f860 	bl	800c2b6 <USBD_CtlError>
}
 800c1f6:	bf00      	nop
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b082      	sub	sp, #8
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
 800c206:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	3b01      	subs	r3, #1
 800c212:	2b02      	cmp	r3, #2
 800c214:	d80b      	bhi.n	800c22e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	885b      	ldrh	r3, [r3, #2]
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d10c      	bne.n	800c238 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 f91c 	bl	800c464 <USBD_CtlSendStatus>
      }
      break;
 800c22c:	e004      	b.n	800c238 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c22e:	6839      	ldr	r1, [r7, #0]
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f000 f840 	bl	800c2b6 <USBD_CtlError>
      break;
 800c236:	e000      	b.n	800c23a <USBD_ClrFeature+0x3c>
      break;
 800c238:	bf00      	nop
  }
}
 800c23a:	bf00      	nop
 800c23c:	3708      	adds	r7, #8
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}

0800c242 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c242:	b580      	push	{r7, lr}
 800c244:	b084      	sub	sp, #16
 800c246:	af00      	add	r7, sp, #0
 800c248:	6078      	str	r0, [r7, #4]
 800c24a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	781a      	ldrb	r2, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	3301      	adds	r3, #1
 800c25c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	781a      	ldrb	r2, [r3, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3301      	adds	r3, #1
 800c26a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f7ff fa16 	bl	800b69e <SWAPBYTE>
 800c272:	4603      	mov	r3, r0
 800c274:	461a      	mov	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	3301      	adds	r3, #1
 800c27e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	3301      	adds	r3, #1
 800c284:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f7ff fa09 	bl	800b69e <SWAPBYTE>
 800c28c:	4603      	mov	r3, r0
 800c28e:	461a      	mov	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	3301      	adds	r3, #1
 800c298:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	3301      	adds	r3, #1
 800c29e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c2a0:	68f8      	ldr	r0, [r7, #12]
 800c2a2:	f7ff f9fc 	bl	800b69e <SWAPBYTE>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	80da      	strh	r2, [r3, #6]
}
 800c2ae:	bf00      	nop
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b082      	sub	sp, #8
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2c0:	2180      	movs	r1, #128	@ 0x80
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f004 ff72 	bl	80111ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f004 ff6e 	bl	80111ac <USBD_LL_StallEP>
}
 800c2d0:	bf00      	nop
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b086      	sub	sp, #24
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d042      	beq.n	800c374 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c2f2:	6938      	ldr	r0, [r7, #16]
 800c2f4:	f000 f842 	bl	800c37c <USBD_GetLen>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	005b      	lsls	r3, r3, #1
 800c2fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c302:	d808      	bhi.n	800c316 <USBD_GetString+0x3e>
 800c304:	6938      	ldr	r0, [r7, #16]
 800c306:	f000 f839 	bl	800c37c <USBD_GetLen>
 800c30a:	4603      	mov	r3, r0
 800c30c:	3301      	adds	r3, #1
 800c30e:	b29b      	uxth	r3, r3
 800c310:	005b      	lsls	r3, r3, #1
 800c312:	b29a      	uxth	r2, r3
 800c314:	e001      	b.n	800c31a <USBD_GetString+0x42>
 800c316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c31e:	7dfb      	ldrb	r3, [r7, #23]
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	4413      	add	r3, r2
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	7812      	ldrb	r2, [r2, #0]
 800c328:	701a      	strb	r2, [r3, #0]
  idx++;
 800c32a:	7dfb      	ldrb	r3, [r7, #23]
 800c32c:	3301      	adds	r3, #1
 800c32e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c330:	7dfb      	ldrb	r3, [r7, #23]
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	4413      	add	r3, r2
 800c336:	2203      	movs	r2, #3
 800c338:	701a      	strb	r2, [r3, #0]
  idx++;
 800c33a:	7dfb      	ldrb	r3, [r7, #23]
 800c33c:	3301      	adds	r3, #1
 800c33e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c340:	e013      	b.n	800c36a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c342:	7dfb      	ldrb	r3, [r7, #23]
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	4413      	add	r3, r2
 800c348:	693a      	ldr	r2, [r7, #16]
 800c34a:	7812      	ldrb	r2, [r2, #0]
 800c34c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	3301      	adds	r3, #1
 800c352:	613b      	str	r3, [r7, #16]
    idx++;
 800c354:	7dfb      	ldrb	r3, [r7, #23]
 800c356:	3301      	adds	r3, #1
 800c358:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c35a:	7dfb      	ldrb	r3, [r7, #23]
 800c35c:	68ba      	ldr	r2, [r7, #8]
 800c35e:	4413      	add	r3, r2
 800c360:	2200      	movs	r2, #0
 800c362:	701a      	strb	r2, [r3, #0]
    idx++;
 800c364:	7dfb      	ldrb	r3, [r7, #23]
 800c366:	3301      	adds	r3, #1
 800c368:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d1e7      	bne.n	800c342 <USBD_GetString+0x6a>
 800c372:	e000      	b.n	800c376 <USBD_GetString+0x9e>
    return;
 800c374:	bf00      	nop
  }
}
 800c376:	3718      	adds	r7, #24
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c384:	2300      	movs	r3, #0
 800c386:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c38c:	e005      	b.n	800c39a <USBD_GetLen+0x1e>
  {
    len++;
 800c38e:	7bfb      	ldrb	r3, [r7, #15]
 800c390:	3301      	adds	r3, #1
 800c392:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	3301      	adds	r3, #1
 800c398:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d1f5      	bne.n	800c38e <USBD_GetLen+0x12>
  }

  return len;
 800c3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3714      	adds	r7, #20
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr

0800c3b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2202      	movs	r2, #2
 800c3c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f004 ff71 	bl	80112be <USBD_LL_Transmit>

  return USBD_OK;
 800c3dc:	2300      	movs	r3, #0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b084      	sub	sp, #16
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	60f8      	str	r0, [r7, #12]
 800c3ee:	60b9      	str	r1, [r7, #8]
 800c3f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68ba      	ldr	r2, [r7, #8]
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f004 ff60 	bl	80112be <USBD_LL_Transmit>

  return USBD_OK;
 800c3fe:	2300      	movs	r3, #0
}
 800c400:	4618      	mov	r0, r3
 800c402:	3710      	adds	r7, #16
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2203      	movs	r2, #3
 800c418:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	2100      	movs	r1, #0
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	f004 ff64 	bl	8011300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b084      	sub	sp, #16
 800c446:	af00      	add	r7, sp, #0
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	2100      	movs	r1, #0
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f004 ff53 	bl	8011300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2204      	movs	r2, #4
 800c470:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c474:	2300      	movs	r3, #0
 800c476:	2200      	movs	r2, #0
 800c478:	2100      	movs	r1, #0
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f004 ff1f 	bl	80112be <USBD_LL_Transmit>

  return USBD_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b082      	sub	sp, #8
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2205      	movs	r2, #5
 800c496:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c49a:	2300      	movs	r3, #0
 800c49c:	2200      	movs	r2, #0
 800c49e:	2100      	movs	r1, #0
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f004 ff2d 	bl	8011300 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4a6:	2300      	movs	r3, #0
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b088      	sub	sp, #32
 800c4b4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c4ba:	f107 0308 	add.w	r3, r7, #8
 800c4be:	2218      	movs	r2, #24
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f001 f92d 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c4c8:	233f      	movs	r3, #63	@ 0x3f
 800c4ca:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800c4cc:	2381      	movs	r3, #129	@ 0x81
 800c4ce:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c4d0:	1dfb      	adds	r3, r7, #7
 800c4d2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c4d8:	f107 0308 	add.w	r3, r7, #8
 800c4dc:	2100      	movs	r1, #0
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f001 fba8 	bl	800dc34 <hci_send_req>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	da01      	bge.n	800c4ee <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c4ea:	23ff      	movs	r3, #255	@ 0xff
 800c4ec:	e000      	b.n	800c4f0 <aci_gap_set_non_discoverable+0x40>
  return status;
 800c4ee:	79fb      	ldrb	r3, [r7, #7]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3720      	adds	r7, #32
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800c4f8:	b5b0      	push	{r4, r5, r7, lr}
 800c4fa:	b0ce      	sub	sp, #312	@ 0x138
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4605      	mov	r5, r0
 800c500:	460c      	mov	r4, r1
 800c502:	4610      	mov	r0, r2
 800c504:	4619      	mov	r1, r3
 800c506:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c50a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800c50e:	462a      	mov	r2, r5
 800c510:	701a      	strb	r2, [r3, #0]
 800c512:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c516:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c51a:	4622      	mov	r2, r4
 800c51c:	801a      	strh	r2, [r3, #0]
 800c51e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c522:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800c526:	4602      	mov	r2, r0
 800c528:	801a      	strh	r2, [r3, #0]
 800c52a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c52e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800c532:	460a      	mov	r2, r1
 800c534:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800c536:	f107 0310 	add.w	r3, r7, #16
 800c53a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800c53e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800c542:	3308      	adds	r3, #8
 800c544:	f107 0210 	add.w	r2, r7, #16
 800c548:	4413      	add	r3, r2
 800c54a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c54e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800c552:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800c556:	4413      	add	r3, r2
 800c558:	3309      	adds	r3, #9
 800c55a:	f107 0210 	add.w	r2, r7, #16
 800c55e:	4413      	add	r3, r2
 800c560:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c564:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c568:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c56c:	2200      	movs	r2, #0
 800c56e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c570:	2300      	movs	r3, #0
 800c572:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800c576:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c57a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c57e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800c582:	7812      	ldrb	r2, [r2, #0]
 800c584:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c586:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c58a:	3301      	adds	r3, #1
 800c58c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800c590:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c594:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c598:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800c59c:	8812      	ldrh	r2, [r2, #0]
 800c59e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800c5a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c5a6:	3302      	adds	r3, #2
 800c5a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800c5ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c5b0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c5b4:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800c5b8:	8812      	ldrh	r2, [r2, #0]
 800c5ba:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800c5be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c5c2:	3302      	adds	r3, #2
 800c5c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800c5c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c5cc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c5d0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800c5d4:	7812      	ldrb	r2, [r2, #0]
 800c5d6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c5d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c5dc:	3301      	adds	r3, #1
 800c5de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800c5e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c5e6:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800c5ea:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c5ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800c5f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c5fa:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800c5fe:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800c600:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c604:	3301      	adds	r3, #1
 800c606:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800c60a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c60e:	3308      	adds	r3, #8
 800c610:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800c614:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800c618:	4618      	mov	r0, r3
 800c61a:	f001 f872 	bl	800d702 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800c61e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800c622:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800c626:	4413      	add	r3, r2
 800c628:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800c62c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c630:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800c634:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c636:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c63a:	3301      	adds	r3, #1
 800c63c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800c640:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c644:	3301      	adds	r3, #1
 800c646:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800c64a:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800c64e:	4618      	mov	r0, r3
 800c650:	f001 f857 	bl	800d702 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800c654:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800c658:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800c65c:	4413      	add	r3, r2
 800c65e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800c662:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c666:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800c66a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c66c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c670:	3302      	adds	r3, #2
 800c672:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800c676:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c67a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800c67e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800c680:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c684:	3302      	adds	r3, #2
 800c686:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c68a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c68e:	2218      	movs	r2, #24
 800c690:	2100      	movs	r1, #0
 800c692:	4618      	mov	r0, r3
 800c694:	f001 f845 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c698:	233f      	movs	r3, #63	@ 0x3f
 800c69a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800c69e:	2383      	movs	r3, #131	@ 0x83
 800c6a0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c6a4:	f107 0310 	add.w	r3, r7, #16
 800c6a8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c6ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c6b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c6b4:	f107 030f 	add.w	r3, r7, #15
 800c6b8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c6c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f001 fab3 	bl	800dc34 <hci_send_req>
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	da01      	bge.n	800c6d8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800c6d4:	23ff      	movs	r3, #255	@ 0xff
 800c6d6:	e004      	b.n	800c6e2 <aci_gap_set_discoverable+0x1ea>
  return status;
 800c6d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c6dc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c6e0:	781b      	ldrb	r3, [r3, #0]
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bdb0      	pop	{r4, r5, r7, pc}

0800c6ec <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b0cc      	sub	sp, #304	@ 0x130
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c6f8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c6fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800c6fe:	f107 0310 	add.w	r3, r7, #16
 800c702:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c706:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c70a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c70e:	2200      	movs	r2, #0
 800c710:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c712:	2300      	movs	r3, #0
 800c714:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800c718:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c71c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c720:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c724:	7812      	ldrb	r2, [r2, #0]
 800c726:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c728:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c72c:	3301      	adds	r3, #1
 800c72e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c732:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c736:	2218      	movs	r2, #24
 800c738:	2100      	movs	r1, #0
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 fff1 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c740:	233f      	movs	r3, #63	@ 0x3f
 800c742:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800c746:	2385      	movs	r3, #133	@ 0x85
 800c748:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c74c:	f107 0310 	add.w	r3, r7, #16
 800c750:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c754:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c758:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c75c:	f107 030f 	add.w	r3, r7, #15
 800c760:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c764:	2301      	movs	r3, #1
 800c766:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c76a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c76e:	2100      	movs	r1, #0
 800c770:	4618      	mov	r0, r3
 800c772:	f001 fa5f 	bl	800dc34 <hci_send_req>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	da01      	bge.n	800c780 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800c77c:	23ff      	movs	r3, #255	@ 0xff
 800c77e:	e004      	b.n	800c78a <aci_gap_set_io_capability+0x9e>
  return status;
 800c780:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c784:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c788:	781b      	ldrb	r3, [r3, #0]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800c794:	b5b0      	push	{r4, r5, r7, lr}
 800c796:	b0cc      	sub	sp, #304	@ 0x130
 800c798:	af00      	add	r7, sp, #0
 800c79a:	4605      	mov	r5, r0
 800c79c:	460c      	mov	r4, r1
 800c79e:	4610      	mov	r0, r2
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c7a6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c7aa:	462a      	mov	r2, r5
 800c7ac:	701a      	strb	r2, [r3, #0]
 800c7ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c7b2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c7b6:	4622      	mov	r2, r4
 800c7b8:	701a      	strb	r2, [r3, #0]
 800c7ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c7be:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	701a      	strb	r2, [r3, #0]
 800c7c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c7ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c7ce:	460a      	mov	r2, r1
 800c7d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800c7d2:	f107 0310 	add.w	r3, r7, #16
 800c7d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c7da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c7de:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800c7ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c7f0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c7f4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c7f8:	7812      	ldrb	r2, [r2, #0]
 800c7fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c7fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c800:	3301      	adds	r3, #1
 800c802:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800c806:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c80a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c80e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c812:	7812      	ldrb	r2, [r2, #0]
 800c814:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c816:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c81a:	3301      	adds	r3, #1
 800c81c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800c820:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c824:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c828:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800c82c:	7812      	ldrb	r2, [r2, #0]
 800c82e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c830:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c834:	3301      	adds	r3, #1
 800c836:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800c83a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c83e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c842:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800c846:	7812      	ldrb	r2, [r2, #0]
 800c848:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800c84a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c84e:	3301      	adds	r3, #1
 800c850:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800c854:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c858:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800c85c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c85e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c862:	3301      	adds	r3, #1
 800c864:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800c868:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c86c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800c870:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c872:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c876:	3301      	adds	r3, #1
 800c878:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800c87c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c880:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800c884:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c886:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c88a:	3301      	adds	r3, #1
 800c88c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800c890:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c894:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800c898:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800c89c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800c8a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c8aa:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800c8ae:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800c8b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c8ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c8be:	2218      	movs	r2, #24
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 ff2d 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c8c8:	233f      	movs	r3, #63	@ 0x3f
 800c8ca:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800c8ce:	2386      	movs	r3, #134	@ 0x86
 800c8d0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c8d4:	f107 0310 	add.w	r3, r7, #16
 800c8d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c8dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c8e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c8e4:	f107 030f 	add.w	r3, r7, #15
 800c8e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c8f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f001 f99b 	bl	800dc34 <hci_send_req>
 800c8fe:	4603      	mov	r3, r0
 800c900:	2b00      	cmp	r3, #0
 800c902:	da01      	bge.n	800c908 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800c904:	23ff      	movs	r3, #255	@ 0xff
 800c906:	e004      	b.n	800c912 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800c908:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c90c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c910:	781b      	ldrb	r3, [r3, #0]
}
 800c912:	4618      	mov	r0, r3
 800c914:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c918:	46bd      	mov	sp, r7
 800c91a:	bdb0      	pop	{r4, r5, r7, pc}

0800c91c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b0cc      	sub	sp, #304	@ 0x130
 800c920:	af00      	add	r7, sp, #0
 800c922:	4602      	mov	r2, r0
 800c924:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c928:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c92c:	6019      	str	r1, [r3, #0]
 800c92e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c932:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c936:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800c938:	f107 0310 	add.w	r3, r7, #16
 800c93c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c940:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c944:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c948:	2200      	movs	r2, #0
 800c94a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c94c:	2300      	movs	r3, #0
 800c94e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800c952:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c956:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c95a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c95e:	8812      	ldrh	r2, [r2, #0]
 800c960:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c962:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c966:	3302      	adds	r3, #2
 800c968:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800c96c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c970:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c974:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800c978:	6812      	ldr	r2, [r2, #0]
 800c97a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800c97e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c982:	3304      	adds	r3, #4
 800c984:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c988:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c98c:	2218      	movs	r2, #24
 800c98e:	2100      	movs	r1, #0
 800c990:	4618      	mov	r0, r3
 800c992:	f000 fec6 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800c996:	233f      	movs	r3, #63	@ 0x3f
 800c998:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800c99c:	2388      	movs	r3, #136	@ 0x88
 800c99e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c9a2:	f107 0310 	add.w	r3, r7, #16
 800c9a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c9aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c9ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c9b2:	f107 030f 	add.w	r3, r7, #15
 800c9b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c9c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c9c4:	2100      	movs	r1, #0
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f001 f934 	bl	800dc34 <hci_send_req>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	da01      	bge.n	800c9d6 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800c9d2:	23ff      	movs	r3, #255	@ 0xff
 800c9d4:	e004      	b.n	800c9e0 <aci_gap_pass_key_resp+0xc4>
  return status;
 800c9d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9da:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c9de:	781b      	ldrb	r3, [r3, #0]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800c9ea:	b590      	push	{r4, r7, lr}
 800c9ec:	b0cd      	sub	sp, #308	@ 0x134
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	4608      	mov	r0, r1
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c9fa:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800c9fe:	6013      	str	r3, [r2, #0]
 800ca00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca04:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ca08:	4622      	mov	r2, r4
 800ca0a:	701a      	strb	r2, [r3, #0]
 800ca0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca10:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ca14:	4602      	mov	r2, r0
 800ca16:	701a      	strb	r2, [r3, #0]
 800ca18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca1c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ca20:	460a      	mov	r2, r1
 800ca22:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800ca24:	f107 0310 	add.w	r3, r7, #16
 800ca28:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ca2c:	f107 0308 	add.w	r3, r7, #8
 800ca30:	2207      	movs	r2, #7
 800ca32:	2100      	movs	r1, #0
 800ca34:	4618      	mov	r0, r3
 800ca36:	f000 fe74 	bl	800d722 <Osal_MemSet>
  int index_input = 0;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800ca40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca44:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ca48:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ca4c:	7812      	ldrb	r2, [r2, #0]
 800ca4e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ca50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca54:	3301      	adds	r3, #1
 800ca56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800ca5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ca62:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ca66:	7812      	ldrb	r2, [r2, #0]
 800ca68:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ca6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca6e:	3301      	adds	r3, #1
 800ca70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800ca74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ca7c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ca80:	7812      	ldrb	r2, [r2, #0]
 800ca82:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ca84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca88:	3301      	adds	r3, #1
 800ca8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ca8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ca92:	2218      	movs	r2, #24
 800ca94:	2100      	movs	r1, #0
 800ca96:	4618      	mov	r0, r3
 800ca98:	f000 fe43 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ca9c:	233f      	movs	r3, #63	@ 0x3f
 800ca9e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800caa2:	238a      	movs	r3, #138	@ 0x8a
 800caa4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800caa8:	f107 0310 	add.w	r3, r7, #16
 800caac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cab4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800cab8:	f107 0308 	add.w	r3, r7, #8
 800cabc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800cac0:	2307      	movs	r3, #7
 800cac2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cac6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800caca:	2100      	movs	r1, #0
 800cacc:	4618      	mov	r0, r3
 800cace:	f001 f8b1 	bl	800dc34 <hci_send_req>
 800cad2:	4603      	mov	r3, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	da01      	bge.n	800cadc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800cad8:	23ff      	movs	r3, #255	@ 0xff
 800cada:	e02e      	b.n	800cb3a <aci_gap_init+0x150>
  if ( resp.Status )
 800cadc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cae0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800cae4:	781b      	ldrb	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d005      	beq.n	800caf6 <aci_gap_init+0x10c>
    return resp.Status;
 800caea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800caee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	e021      	b.n	800cb3a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800caf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cafa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800cafe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb08:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800cb10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb14:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800cb18:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800cb22:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800cb24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb28:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800cb2c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800cb30:	b29a      	uxth	r2, r3
 800cb32:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800cb36:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cb38:	2300      	movs	r3, #0
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd90      	pop	{r4, r7, pc}

0800cb44 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b0cc      	sub	sp, #304	@ 0x130
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb50:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800cb54:	6019      	str	r1, [r3, #0]
 800cb56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb5a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cb5e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800cb60:	f107 0310 	add.w	r3, r7, #16
 800cb64:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cb68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb6c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cb70:	2200      	movs	r2, #0
 800cb72:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cb74:	2300      	movs	r3, #0
 800cb76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800cb7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cb7e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cb82:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800cb86:	7812      	ldrb	r2, [r2, #0]
 800cb88:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cb8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cb8e:	3301      	adds	r3, #1
 800cb90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800cb94:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cb98:	1c58      	adds	r0, r3, #1
 800cb9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb9e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cba2:	781a      	ldrb	r2, [r3, #0]
 800cba4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cba8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800cbac:	6819      	ldr	r1, [r3, #0]
 800cbae:	f000 fda8 	bl	800d702 <Osal_MemCpy>
  index_input += AdvDataLen;
 800cbb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cbb6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cbc0:	4413      	add	r3, r2
 800cbc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cbc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cbca:	2218      	movs	r2, #24
 800cbcc:	2100      	movs	r1, #0
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f000 fda7 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cbd4:	233f      	movs	r3, #63	@ 0x3f
 800cbd6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800cbda:	238e      	movs	r3, #142	@ 0x8e
 800cbdc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cbe0:	f107 0310 	add.w	r3, r7, #16
 800cbe4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cbe8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cbec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cbf0:	f107 030f 	add.w	r3, r7, #15
 800cbf4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cbfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cc02:	2100      	movs	r1, #0
 800cc04:	4618      	mov	r0, r3
 800cc06:	f001 f815 	bl	800dc34 <hci_send_req>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	da01      	bge.n	800cc14 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800cc10:	23ff      	movs	r3, #255	@ 0xff
 800cc12:	e004      	b.n	800cc1e <aci_gap_update_adv_data+0xda>
  return status;
 800cc14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc18:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cc1c:	781b      	ldrb	r3, [r3, #0]
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b088      	sub	sp, #32
 800cc2c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cc32:	f107 0308 	add.w	r3, r7, #8
 800cc36:	2218      	movs	r2, #24
 800cc38:	2100      	movs	r1, #0
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f000 fd71 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cc40:	233f      	movs	r3, #63	@ 0x3f
 800cc42:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800cc44:	2392      	movs	r3, #146	@ 0x92
 800cc46:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cc48:	1dfb      	adds	r3, r7, #7
 800cc4a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cc50:	f107 0308 	add.w	r3, r7, #8
 800cc54:	2100      	movs	r1, #0
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 ffec 	bl	800dc34 <hci_send_req>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	da01      	bge.n	800cc66 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cc62:	23ff      	movs	r3, #255	@ 0xff
 800cc64:	e000      	b.n	800cc68 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800cc66:	79fb      	ldrb	r3, [r7, #7]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3720      	adds	r7, #32
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b0cc      	sub	sp, #304	@ 0x130
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	4602      	mov	r2, r0
 800cc78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc7c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800cc80:	801a      	strh	r2, [r3, #0]
 800cc82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc86:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800cc8a:	460a      	mov	r2, r1
 800cc8c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800cc8e:	f107 0310 	add.w	r3, r7, #16
 800cc92:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cc96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc9a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cc9e:	2200      	movs	r2, #0
 800cca0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cca2:	2300      	movs	r3, #0
 800cca4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800cca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ccac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ccb0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ccb4:	8812      	ldrh	r2, [r2, #0]
 800ccb6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ccb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccbc:	3302      	adds	r3, #2
 800ccbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800ccc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ccc6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ccca:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ccce:	7812      	ldrb	r2, [r2, #0]
 800ccd0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ccd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ccdc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cce0:	2218      	movs	r2, #24
 800cce2:	2100      	movs	r1, #0
 800cce4:	4618      	mov	r0, r3
 800cce6:	f000 fd1c 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ccea:	233f      	movs	r3, #63	@ 0x3f
 800ccec:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800ccf0:	23a5      	movs	r3, #165	@ 0xa5
 800ccf2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ccf6:	f107 0310 	add.w	r3, r7, #16
 800ccfa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ccfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd02:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cd06:	f107 030f 	add.w	r3, r7, #15
 800cd0a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cd14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cd18:	2100      	movs	r1, #0
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f000 ff8a 	bl	800dc34 <hci_send_req>
 800cd20:	4603      	mov	r3, r0
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	da01      	bge.n	800cd2a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800cd26:	23ff      	movs	r3, #255	@ 0xff
 800cd28:	e004      	b.n	800cd34 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800cd2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cd2e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cd32:	781b      	ldrb	r3, [r3, #0]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b088      	sub	sp, #32
 800cd42:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cd44:	2300      	movs	r3, #0
 800cd46:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cd48:	f107 0308 	add.w	r3, r7, #8
 800cd4c:	2218      	movs	r2, #24
 800cd4e:	2100      	movs	r1, #0
 800cd50:	4618      	mov	r0, r3
 800cd52:	f000 fce6 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cd56:	233f      	movs	r3, #63	@ 0x3f
 800cd58:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800cd5a:	f240 1301 	movw	r3, #257	@ 0x101
 800cd5e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cd60:	1dfb      	adds	r3, r7, #7
 800cd62:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cd64:	2301      	movs	r3, #1
 800cd66:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cd68:	f107 0308 	add.w	r3, r7, #8
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f000 ff60 	bl	800dc34 <hci_send_req>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	da01      	bge.n	800cd7e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800cd7a:	23ff      	movs	r3, #255	@ 0xff
 800cd7c:	e000      	b.n	800cd80 <aci_gatt_init+0x42>
  return status;
 800cd7e:	79fb      	ldrb	r3, [r7, #7]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3720      	adds	r7, #32
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800cd88:	b590      	push	{r4, r7, lr}
 800cd8a:	b0cf      	sub	sp, #316	@ 0x13c
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	4604      	mov	r4, r0
 800cd90:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800cd94:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800cd98:	6001      	str	r1, [r0, #0]
 800cd9a:	4610      	mov	r0, r2
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cda2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cda6:	4622      	mov	r2, r4
 800cda8:	701a      	strb	r2, [r3, #0]
 800cdaa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cdae:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	701a      	strb	r2, [r3, #0]
 800cdb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cdba:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cdbe:	460a      	mov	r2, r1
 800cdc0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800cdc2:	f107 0310 	add.w	r3, r7, #16
 800cdc6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800cdca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cdce:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d00a      	beq.n	800cdee <aci_gatt_add_service+0x66>
 800cdd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cddc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	d101      	bne.n	800cdea <aci_gatt_add_service+0x62>
 800cde6:	2311      	movs	r3, #17
 800cde8:	e002      	b.n	800cdf0 <aci_gatt_add_service+0x68>
 800cdea:	2301      	movs	r3, #1
 800cdec:	e000      	b.n	800cdf0 <aci_gatt_add_service+0x68>
 800cdee:	2303      	movs	r3, #3
 800cdf0:	f107 0210 	add.w	r2, r7, #16
 800cdf4:	4413      	add	r3, r2
 800cdf6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cdfa:	f107 030c 	add.w	r3, r7, #12
 800cdfe:	2203      	movs	r2, #3
 800ce00:	2100      	movs	r1, #0
 800ce02:	4618      	mov	r0, r3
 800ce04:	f000 fc8d 	bl	800d722 <Osal_MemSet>
  int index_input = 0;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800ce0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ce12:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ce16:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800ce1a:	7812      	ldrb	r2, [r2, #0]
 800ce1c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ce1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce22:	3301      	adds	r3, #1
 800ce24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800ce28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ce2c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d002      	beq.n	800ce3c <aci_gatt_add_service+0xb4>
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d004      	beq.n	800ce44 <aci_gatt_add_service+0xbc>
 800ce3a:	e007      	b.n	800ce4c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800ce42:	e005      	b.n	800ce50 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800ce44:	2310      	movs	r3, #16
 800ce46:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800ce4a:	e001      	b.n	800ce50 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800ce4c:	2397      	movs	r3, #151	@ 0x97
 800ce4e:	e06c      	b.n	800cf2a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800ce50:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ce54:	1c58      	adds	r0, r3, #1
 800ce56:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800ce5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ce5e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ce62:	6819      	ldr	r1, [r3, #0]
 800ce64:	f000 fc4d 	bl	800d702 <Osal_MemCpy>
    index_input += size;
 800ce68:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800ce6c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ce70:	4413      	add	r3, r2
 800ce72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800ce76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ce7a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ce7e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800ce82:	7812      	ldrb	r2, [r2, #0]
 800ce84:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ce86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800ce90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ce94:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ce98:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800ce9c:	7812      	ldrb	r2, [r2, #0]
 800ce9e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800cea0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cea4:	3301      	adds	r3, #1
 800cea6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ceaa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ceae:	2218      	movs	r2, #24
 800ceb0:	2100      	movs	r1, #0
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f000 fc35 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ceb8:	233f      	movs	r3, #63	@ 0x3f
 800ceba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800cebe:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800cec2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cec6:	f107 0310 	add.w	r3, r7, #16
 800ceca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cece:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ced2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800ced6:	f107 030c 	add.w	r3, r7, #12
 800ceda:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800cede:	2303      	movs	r3, #3
 800cee0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cee4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cee8:	2100      	movs	r1, #0
 800ceea:	4618      	mov	r0, r3
 800ceec:	f000 fea2 	bl	800dc34 <hci_send_req>
 800cef0:	4603      	mov	r3, r0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	da01      	bge.n	800cefa <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800cef6:	23ff      	movs	r3, #255	@ 0xff
 800cef8:	e017      	b.n	800cf2a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800cefa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cefe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d005      	beq.n	800cf14 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800cf08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cf0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	e00a      	b.n	800cf2a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800cf14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cf18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cf1c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cf20:	b29a      	uxth	r2, r3
 800cf22:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800cf26:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd90      	pop	{r4, r7, pc}

0800cf34 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800cf34:	b590      	push	{r4, r7, lr}
 800cf36:	b0d1      	sub	sp, #324	@ 0x144
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	4608      	mov	r0, r1
 800cf3e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800cf42:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800cf46:	600a      	str	r2, [r1, #0]
 800cf48:	4619      	mov	r1, r3
 800cf4a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf4e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800cf52:	4622      	mov	r2, r4
 800cf54:	801a      	strh	r2, [r3, #0]
 800cf56:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf5a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cf5e:	4602      	mov	r2, r0
 800cf60:	701a      	strb	r2, [r3, #0]
 800cf62:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf66:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800cf6a:	460a      	mov	r2, r1
 800cf6c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800cf6e:	f107 0318 	add.w	r3, r7, #24
 800cf72:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800cf76:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf7a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d00a      	beq.n	800cf9a <aci_gatt_add_char+0x66>
 800cf84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf88:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	2b02      	cmp	r3, #2
 800cf90:	d101      	bne.n	800cf96 <aci_gatt_add_char+0x62>
 800cf92:	2313      	movs	r3, #19
 800cf94:	e002      	b.n	800cf9c <aci_gatt_add_char+0x68>
 800cf96:	2303      	movs	r3, #3
 800cf98:	e000      	b.n	800cf9c <aci_gatt_add_char+0x68>
 800cf9a:	2305      	movs	r3, #5
 800cf9c:	f107 0218 	add.w	r2, r7, #24
 800cfa0:	4413      	add	r3, r2
 800cfa2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cfa6:	f107 0314 	add.w	r3, r7, #20
 800cfaa:	2203      	movs	r2, #3
 800cfac:	2100      	movs	r1, #0
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f000 fbb7 	bl	800d722 <Osal_MemSet>
  int index_input = 0;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800cfba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800cfbe:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800cfc2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800cfc6:	8812      	ldrh	r2, [r2, #0]
 800cfc8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cfca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cfce:	3302      	adds	r3, #2
 800cfd0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800cfd4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800cfd8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800cfdc:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800cfe0:	7812      	ldrb	r2, [r2, #0]
 800cfe2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cfe4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cfe8:	3301      	adds	r3, #1
 800cfea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800cfee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cff2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d002      	beq.n	800d002 <aci_gatt_add_char+0xce>
 800cffc:	2b02      	cmp	r3, #2
 800cffe:	d004      	beq.n	800d00a <aci_gatt_add_char+0xd6>
 800d000:	e007      	b.n	800d012 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800d002:	2302      	movs	r3, #2
 800d004:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d008:	e005      	b.n	800d016 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800d00a:	2310      	movs	r3, #16
 800d00c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d010:	e001      	b.n	800d016 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800d012:	2397      	movs	r3, #151	@ 0x97
 800d014:	e091      	b.n	800d13a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800d016:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d01a:	1cd8      	adds	r0, r3, #3
 800d01c:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800d020:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d024:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d028:	6819      	ldr	r1, [r3, #0]
 800d02a:	f000 fb6a 	bl	800d702 <Osal_MemCpy>
    index_input += size;
 800d02e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800d032:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800d036:	4413      	add	r3, r2
 800d038:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800d03c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d040:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d044:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800d048:	8812      	ldrh	r2, [r2, #0]
 800d04a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d04c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d050:	3302      	adds	r3, #2
 800d052:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800d056:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d05a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800d05e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d060:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d064:	3301      	adds	r3, #1
 800d066:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d06a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d06e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800d072:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d074:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d078:	3301      	adds	r3, #1
 800d07a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d07e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d082:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800d086:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d088:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d08c:	3301      	adds	r3, #1
 800d08e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d092:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d096:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800d09a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d09c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d0a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d0aa:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800d0ae:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d0b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d0ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d0be:	2218      	movs	r2, #24
 800d0c0:	2100      	movs	r1, #0
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f000 fb2d 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d0c8:	233f      	movs	r3, #63	@ 0x3f
 800d0ca:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800d0ce:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800d0d2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800d0d6:	f107 0318 	add.w	r3, r7, #24
 800d0da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800d0de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d0e2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800d0e6:	f107 0314 	add.w	r3, r7, #20
 800d0ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800d0ee:	2303      	movs	r3, #3
 800d0f0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d0f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f000 fd9a 	bl	800dc34 <hci_send_req>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	da01      	bge.n	800d10a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800d106:	23ff      	movs	r3, #255	@ 0xff
 800d108:	e017      	b.n	800d13a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800d10a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d10e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d005      	beq.n	800d124 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800d118:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d11c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	e00a      	b.n	800d13a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800d124:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d128:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d12c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d130:	b29a      	uxth	r2, r3
 800d132:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800d136:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800d140:	46bd      	mov	sp, r7
 800d142:	bd90      	pop	{r4, r7, pc}

0800d144 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d144:	b5b0      	push	{r4, r5, r7, lr}
 800d146:	b0cc      	sub	sp, #304	@ 0x130
 800d148:	af00      	add	r7, sp, #0
 800d14a:	4605      	mov	r5, r0
 800d14c:	460c      	mov	r4, r1
 800d14e:	4610      	mov	r0, r2
 800d150:	4619      	mov	r1, r3
 800d152:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d156:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d15a:	462a      	mov	r2, r5
 800d15c:	801a      	strh	r2, [r3, #0]
 800d15e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d162:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d166:	4622      	mov	r2, r4
 800d168:	801a      	strh	r2, [r3, #0]
 800d16a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d16e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800d172:	4602      	mov	r2, r0
 800d174:	701a      	strb	r2, [r3, #0]
 800d176:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d17a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d17e:	460a      	mov	r2, r1
 800d180:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d182:	f107 0310 	add.w	r3, r7, #16
 800d186:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d18a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d18e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d192:	2200      	movs	r2, #0
 800d194:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d196:	2300      	movs	r3, #0
 800d198:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800d19c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d1a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d1a4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d1a8:	8812      	ldrh	r2, [r2, #0]
 800d1aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d1ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1b0:	3302      	adds	r3, #2
 800d1b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800d1b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d1ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d1be:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800d1c2:	8812      	ldrh	r2, [r2, #0]
 800d1c4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d1c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1ca:	3302      	adds	r3, #2
 800d1cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800d1d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d1d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d1d8:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800d1dc:	7812      	ldrb	r2, [r2, #0]
 800d1de:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d1e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1e4:	3301      	adds	r3, #1
 800d1e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d1ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d1ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d1f2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800d1f6:	7812      	ldrb	r2, [r2, #0]
 800d1f8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d1fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1fe:	3301      	adds	r3, #1
 800d200:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d204:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d208:	1d98      	adds	r0, r3, #6
 800d20a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d20e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	461a      	mov	r2, r3
 800d216:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800d21a:	f000 fa72 	bl	800d702 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d21e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d222:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d22c:	4413      	add	r3, r2
 800d22e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d232:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d236:	2218      	movs	r2, #24
 800d238:	2100      	movs	r1, #0
 800d23a:	4618      	mov	r0, r3
 800d23c:	f000 fa71 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d240:	233f      	movs	r3, #63	@ 0x3f
 800d242:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800d246:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800d24a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d24e:	f107 0310 	add.w	r3, r7, #16
 800d252:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d256:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d25a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d25e:	f107 030f 	add.w	r3, r7, #15
 800d262:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d266:	2301      	movs	r3, #1
 800d268:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d26c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d270:	2100      	movs	r1, #0
 800d272:	4618      	mov	r0, r3
 800d274:	f000 fcde 	bl	800dc34 <hci_send_req>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	da01      	bge.n	800d282 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d27e:	23ff      	movs	r3, #255	@ 0xff
 800d280:	e004      	b.n	800d28c <aci_gatt_update_char_value+0x148>
  return status;
 800d282:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d286:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d28a:	781b      	ldrb	r3, [r3, #0]
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d292:	46bd      	mov	sp, r7
 800d294:	bdb0      	pop	{r4, r5, r7, pc}

0800d296 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b0cc      	sub	sp, #304	@ 0x130
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	4602      	mov	r2, r0
 800d29e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2a2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d2a6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800d2a8:	f107 0310 	add.w	r3, r7, #16
 800d2ac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d2b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2b4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d2c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d2c6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d2ca:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d2ce:	8812      	ldrh	r2, [r2, #0]
 800d2d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d2d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2d6:	3302      	adds	r3, #2
 800d2d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d2dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d2e0:	2218      	movs	r2, #24
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f000 fa1c 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d2ea:	233f      	movs	r3, #63	@ 0x3f
 800d2ec:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800d2f0:	f240 1325 	movw	r3, #293	@ 0x125
 800d2f4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d2f8:	f107 0310 	add.w	r3, r7, #16
 800d2fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d300:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d304:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d308:	f107 030f 	add.w	r3, r7, #15
 800d30c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d310:	2301      	movs	r3, #1
 800d312:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d316:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d31a:	2100      	movs	r1, #0
 800d31c:	4618      	mov	r0, r3
 800d31e:	f000 fc89 	bl	800dc34 <hci_send_req>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	da01      	bge.n	800d32c <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800d328:	23ff      	movs	r3, #255	@ 0xff
 800d32a:	e004      	b.n	800d336 <aci_gatt_confirm_indication+0xa0>
  return status;
 800d32c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d330:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d334:	781b      	ldrb	r3, [r3, #0]
}
 800d336:	4618      	mov	r0, r3
 800d338:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b0cc      	sub	sp, #304	@ 0x130
 800d344:	af00      	add	r7, sp, #0
 800d346:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d34a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d34e:	601a      	str	r2, [r3, #0]
 800d350:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d354:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d358:	4602      	mov	r2, r0
 800d35a:	701a      	strb	r2, [r3, #0]
 800d35c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d360:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d364:	460a      	mov	r2, r1
 800d366:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800d368:	f107 0310 	add.w	r3, r7, #16
 800d36c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d370:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d374:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d378:	2200      	movs	r2, #0
 800d37a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d37c:	2300      	movs	r3, #0
 800d37e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800d382:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d386:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d38a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d38e:	7812      	ldrb	r2, [r2, #0]
 800d390:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d392:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d396:	3301      	adds	r3, #1
 800d398:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800d39c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d3a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d3a4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d3a8:	7812      	ldrb	r2, [r2, #0]
 800d3aa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d3ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800d3b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d3ba:	1c98      	adds	r0, r3, #2
 800d3bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3c0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d3c4:	781a      	ldrb	r2, [r3, #0]
 800d3c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d3ce:	6819      	ldr	r1, [r3, #0]
 800d3d0:	f000 f997 	bl	800d702 <Osal_MemCpy>
  index_input += Length;
 800d3d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3d8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d3e2:	4413      	add	r3, r2
 800d3e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3ec:	2218      	movs	r2, #24
 800d3ee:	2100      	movs	r1, #0
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f000 f996 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d3f6:	233f      	movs	r3, #63	@ 0x3f
 800d3f8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800d3fc:	230c      	movs	r3, #12
 800d3fe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d402:	f107 0310 	add.w	r3, r7, #16
 800d406:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d40a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d40e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d412:	f107 030f 	add.w	r3, r7, #15
 800d416:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d41a:	2301      	movs	r3, #1
 800d41c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d420:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d424:	2100      	movs	r1, #0
 800d426:	4618      	mov	r0, r3
 800d428:	f000 fc04 	bl	800dc34 <hci_send_req>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	da01      	bge.n	800d436 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800d432:	23ff      	movs	r3, #255	@ 0xff
 800d434:	e004      	b.n	800d440 <aci_hal_write_config_data+0x100>
  return status;
 800d436:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d43a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d43e:	781b      	ldrb	r3, [r3, #0]
}
 800d440:	4618      	mov	r0, r3
 800d442:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b0cc      	sub	sp, #304	@ 0x130
 800d44e:	af00      	add	r7, sp, #0
 800d450:	4602      	mov	r2, r0
 800d452:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d456:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d45a:	701a      	strb	r2, [r3, #0]
 800d45c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d460:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d464:	460a      	mov	r2, r1
 800d466:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800d468:	f107 0310 	add.w	r3, r7, #16
 800d46c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d470:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d474:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d478:	2200      	movs	r2, #0
 800d47a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d47c:	2300      	movs	r3, #0
 800d47e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800d482:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d486:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d48a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d48e:	7812      	ldrb	r2, [r2, #0]
 800d490:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d492:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d496:	3301      	adds	r3, #1
 800d498:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800d49c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d4a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d4a4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d4a8:	7812      	ldrb	r2, [r2, #0]
 800d4aa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d4ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d4b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d4ba:	2218      	movs	r2, #24
 800d4bc:	2100      	movs	r1, #0
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f000 f92f 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d4c4:	233f      	movs	r3, #63	@ 0x3f
 800d4c6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800d4ca:	230f      	movs	r3, #15
 800d4cc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d4d0:	f107 0310 	add.w	r3, r7, #16
 800d4d4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d4d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d4e0:	f107 030f 	add.w	r3, r7, #15
 800d4e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d4ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d4f2:	2100      	movs	r1, #0
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f000 fb9d 	bl	800dc34 <hci_send_req>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	da01      	bge.n	800d504 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800d500:	23ff      	movs	r3, #255	@ 0xff
 800d502:	e004      	b.n	800d50e <aci_hal_set_tx_power_level+0xc4>
  return status;
 800d504:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d508:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d50c:	781b      	ldrb	r3, [r3, #0]
}
 800d50e:	4618      	mov	r0, r3
 800d510:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b0cc      	sub	sp, #304	@ 0x130
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	4602      	mov	r2, r0
 800d520:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d524:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d528:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800d52a:	f107 0310 	add.w	r3, r7, #16
 800d52e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d532:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d536:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d53a:	2200      	movs	r2, #0
 800d53c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800d544:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d548:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d54c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d550:	8812      	ldrh	r2, [r2, #0]
 800d552:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d554:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d558:	3302      	adds	r3, #2
 800d55a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d55e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d562:	2218      	movs	r2, #24
 800d564:	2100      	movs	r1, #0
 800d566:	4618      	mov	r0, r3
 800d568:	f000 f8db 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d56c:	233f      	movs	r3, #63	@ 0x3f
 800d56e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800d572:	2318      	movs	r3, #24
 800d574:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d578:	f107 0310 	add.w	r3, r7, #16
 800d57c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d580:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d584:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d588:	f107 030f 	add.w	r3, r7, #15
 800d58c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d590:	2301      	movs	r3, #1
 800d592:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d596:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d59a:	2100      	movs	r1, #0
 800d59c:	4618      	mov	r0, r3
 800d59e:	f000 fb49 	bl	800dc34 <hci_send_req>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	da01      	bge.n	800d5ac <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800d5a8:	23ff      	movs	r3, #255	@ 0xff
 800d5aa:	e004      	b.n	800d5b6 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800d5ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5b0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d5b4:	781b      	ldrb	r3, [r3, #0]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b088      	sub	sp, #32
 800d5c4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d5ca:	f107 0308 	add.w	r3, r7, #8
 800d5ce:	2218      	movs	r2, #24
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f000 f8a5 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x03;
 800d5d8:	2303      	movs	r3, #3
 800d5da:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800d5dc:	2303      	movs	r3, #3
 800d5de:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d5e0:	1dfb      	adds	r3, r7, #7
 800d5e2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d5e8:	f107 0308 	add.w	r3, r7, #8
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f000 fb20 	bl	800dc34 <hci_send_req>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	da01      	bge.n	800d5fe <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d5fa:	23ff      	movs	r3, #255	@ 0xff
 800d5fc:	e000      	b.n	800d600 <hci_reset+0x40>
  return status;
 800d5fe:	79fb      	ldrb	r3, [r7, #7]
}
 800d600:	4618      	mov	r0, r3
 800d602:	3720      	adds	r7, #32
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800d608:	b590      	push	{r4, r7, lr}
 800d60a:	b0cd      	sub	sp, #308	@ 0x134
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	4604      	mov	r4, r0
 800d610:	4608      	mov	r0, r1
 800d612:	4611      	mov	r1, r2
 800d614:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d618:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d61c:	4622      	mov	r2, r4
 800d61e:	701a      	strb	r2, [r3, #0]
 800d620:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d624:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d628:	4602      	mov	r2, r0
 800d62a:	701a      	strb	r2, [r3, #0]
 800d62c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d630:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d634:	460a      	mov	r2, r1
 800d636:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800d638:	f107 0310 	add.w	r3, r7, #16
 800d63c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d640:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d644:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d648:	2200      	movs	r2, #0
 800d64a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d64c:	2300      	movs	r3, #0
 800d64e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800d652:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d656:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d65a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d65e:	7812      	ldrb	r2, [r2, #0]
 800d660:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d662:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d666:	3301      	adds	r3, #1
 800d668:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800d66c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d670:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d674:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d678:	7812      	ldrb	r2, [r2, #0]
 800d67a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d67c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d680:	3301      	adds	r3, #1
 800d682:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800d686:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d68a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d68e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d692:	7812      	ldrb	r2, [r2, #0]
 800d694:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d696:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d69a:	3301      	adds	r3, #1
 800d69c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d6a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d6a4:	2218      	movs	r2, #24
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f000 f83a 	bl	800d722 <Osal_MemSet>
  rq.ogf = 0x08;
 800d6ae:	2308      	movs	r3, #8
 800d6b0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800d6b4:	2331      	movs	r3, #49	@ 0x31
 800d6b6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d6ba:	f107 0310 	add.w	r3, r7, #16
 800d6be:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d6c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d6c6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d6ca:	f107 030f 	add.w	r3, r7, #15
 800d6ce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d6d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d6dc:	2100      	movs	r1, #0
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f000 faa8 	bl	800dc34 <hci_send_req>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	da01      	bge.n	800d6ee <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800d6ea:	23ff      	movs	r3, #255	@ 0xff
 800d6ec:	e004      	b.n	800d6f8 <hci_le_set_default_phy+0xf0>
  return status;
 800d6ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d6f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d6f6:	781b      	ldrb	r3, [r3, #0]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd90      	pop	{r4, r7, pc}

0800d702 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800d702:	b580      	push	{r7, lr}
 800d704:	b084      	sub	sp, #16
 800d706:	af00      	add	r7, sp, #0
 800d708:	60f8      	str	r0, [r7, #12]
 800d70a:	60b9      	str	r1, [r7, #8]
 800d70c:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	68b9      	ldr	r1, [r7, #8]
 800d712:	68f8      	ldr	r0, [r7, #12]
 800d714:	f004 fbb5 	bl	8011e82 <memcpy>
 800d718:	4603      	mov	r3, r0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b084      	sub	sp, #16
 800d726:	af00      	add	r7, sp, #0
 800d728:	60f8      	str	r0, [r7, #12]
 800d72a:	60b9      	str	r1, [r7, #8]
 800d72c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	68b9      	ldr	r1, [r7, #8]
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	f004 fb14 	bl	8011d60 <memset>
 800d738:	4603      	mov	r3, r0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800d742:	b480      	push	{r7}
 800d744:	af00      	add	r7, sp, #0
  return;
 800d746:	bf00      	nop
}
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr

0800d750 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800d750:	b480      	push	{r7}
 800d752:	af00      	add	r7, sp, #0
  return;
 800d754:	bf00      	nop
}
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr

0800d75e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800d75e:	b480      	push	{r7}
 800d760:	af00      	add	r7, sp, #0
  return;
 800d762:	bf00      	nop
}
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800d76c:	b480      	push	{r7}
 800d76e:	af00      	add	r7, sp, #0
  return;
 800d770:	bf00      	nop
}
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr

0800d77a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800d77a:	b480      	push	{r7}
 800d77c:	af00      	add	r7, sp, #0
  return;
 800d77e:	bf00      	nop
}
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr

0800d788 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800d788:	b480      	push	{r7}
 800d78a:	af00      	add	r7, sp, #0
  return;
 800d78c:	bf00      	nop
}
 800d78e:	46bd      	mov	sp, r7
 800d790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d794:	4770      	bx	lr

0800d796 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800d796:	b480      	push	{r7}
 800d798:	af00      	add	r7, sp, #0
  return;
 800d79a:	bf00      	nop
}
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	af00      	add	r7, sp, #0
  return;
 800d7a8:	bf00      	nop
}
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr

0800d7b2 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800d7b2:	b480      	push	{r7}
 800d7b4:	af00      	add	r7, sp, #0
  return;
 800d7b6:	bf00      	nop
}
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7be:	4770      	bx	lr

0800d7c0 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	af00      	add	r7, sp, #0
  return;
 800d7c4:	bf00      	nop
}
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr

0800d7ce <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800d7ce:	b480      	push	{r7}
 800d7d0:	af00      	add	r7, sp, #0
  return;
 800d7d2:	bf00      	nop
}
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800d7dc:	b480      	push	{r7}
 800d7de:	af00      	add	r7, sp, #0
  return;
 800d7e0:	bf00      	nop
}
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800d7ea:	b480      	push	{r7}
 800d7ec:	af00      	add	r7, sp, #0
  return;
 800d7ee:	bf00      	nop
}
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr

0800d7f8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	af00      	add	r7, sp, #0
  return;
 800d7fc:	bf00      	nop
}
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr

0800d806 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800d806:	b480      	push	{r7}
 800d808:	af00      	add	r7, sp, #0
  return;
 800d80a:	bf00      	nop
}
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr

0800d814 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800d814:	b480      	push	{r7}
 800d816:	af00      	add	r7, sp, #0
  return;
 800d818:	bf00      	nop
}
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr

0800d822 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800d822:	b480      	push	{r7}
 800d824:	af00      	add	r7, sp, #0
  return;
 800d826:	bf00      	nop
}
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800d830:	b580      	push	{r7, lr}
 800d832:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800d834:	4b04      	ldr	r3, [pc, #16]	@ (800d848 <SVCCTL_Init+0x18>)
 800d836:	2200      	movs	r2, #0
 800d838:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800d83a:	4b04      	ldr	r3, [pc, #16]	@ (800d84c <SVCCTL_Init+0x1c>)
 800d83c:	2200      	movs	r2, #0
 800d83e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800d840:	f000 f806 	bl	800d850 <SVCCTL_SvcInit>

  return;
 800d844:	bf00      	nop
}
 800d846:	bd80      	pop	{r7, pc}
 800d848:	20000184 	.word	0x20000184
 800d84c:	200001a4 	.word	0x200001a4

0800d850 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	af00      	add	r7, sp, #0
  BAS_Init();
 800d854:	f7ff ff75 	bl	800d742 <BAS_Init>

  BLS_Init();
 800d858:	f7ff ff7a 	bl	800d750 <BLS_Init>

  CRS_STM_Init();
 800d85c:	f7ff ff7f 	bl	800d75e <CRS_STM_Init>

  DIS_Init();
 800d860:	f7ff ff84 	bl	800d76c <DIS_Init>

  EDS_STM_Init();
 800d864:	f7ff ff89 	bl	800d77a <EDS_STM_Init>

  HIDS_Init();
 800d868:	f7ff ff8e 	bl	800d788 <HIDS_Init>

  HRS_Init();
 800d86c:	f7ff ff93 	bl	800d796 <HRS_Init>

  HTS_Init();
 800d870:	f7ff ff98 	bl	800d7a4 <HTS_Init>

  IAS_Init();
 800d874:	f7ff ff9d 	bl	800d7b2 <IAS_Init>

  LLS_Init();
 800d878:	f7ff ffa2 	bl	800d7c0 <LLS_Init>

  TPS_Init();
 800d87c:	f7ff ffa7 	bl	800d7ce <TPS_Init>

  MOTENV_STM_Init();
 800d880:	f7ff ffac 	bl	800d7dc <MOTENV_STM_Init>

  P2PS_STM_Init();
 800d884:	f7ff ffb1 	bl	800d7ea <P2PS_STM_Init>

  ZDD_STM_Init();
 800d888:	f7ff ffb6 	bl	800d7f8 <ZDD_STM_Init>

  OTAS_STM_Init();
 800d88c:	f7ff ffbb 	bl	800d806 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800d890:	f7ff ffc7 	bl	800d822 <BVOPUS_STM_Init>

  MESH_Init();
 800d894:	f7ff ffbe 	bl	800d814 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800d898:	f002 fcc6 	bl	8010228 <SVCCTL_InitCustomSvc>
  
  return;
 800d89c:	bf00      	nop
}
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800d8a8:	4b09      	ldr	r3, [pc, #36]	@ (800d8d0 <SVCCTL_RegisterSvcHandler+0x30>)
 800d8aa:	7f1b      	ldrb	r3, [r3, #28]
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	4a08      	ldr	r2, [pc, #32]	@ (800d8d0 <SVCCTL_RegisterSvcHandler+0x30>)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800d8b6:	4b06      	ldr	r3, [pc, #24]	@ (800d8d0 <SVCCTL_RegisterSvcHandler+0x30>)
 800d8b8:	7f1b      	ldrb	r3, [r3, #28]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	b2da      	uxtb	r2, r3
 800d8be:	4b04      	ldr	r3, [pc, #16]	@ (800d8d0 <SVCCTL_RegisterSvcHandler+0x30>)
 800d8c0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800d8c2:	bf00      	nop
}
 800d8c4:	370c      	adds	r7, #12
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop
 800d8d0:	20000184 	.word	0x20000184

0800d8d4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b086      	sub	sp, #24
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	2bff      	cmp	r3, #255	@ 0xff
 800d8ec:	d125      	bne.n	800d93a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	3302      	adds	r3, #2
 800d8f2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	881b      	ldrh	r3, [r3, #0]
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d8fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d902:	d118      	bne.n	800d936 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800d904:	2300      	movs	r3, #0
 800d906:	757b      	strb	r3, [r7, #21]
 800d908:	e00d      	b.n	800d926 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800d90a:	7d7b      	ldrb	r3, [r7, #21]
 800d90c:	4a1a      	ldr	r2, [pc, #104]	@ (800d978 <SVCCTL_UserEvtRx+0xa4>)
 800d90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	4798      	blx	r3
 800d916:	4603      	mov	r3, r0
 800d918:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800d91a:	7dfb      	ldrb	r3, [r7, #23]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d108      	bne.n	800d932 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800d920:	7d7b      	ldrb	r3, [r7, #21]
 800d922:	3301      	adds	r3, #1
 800d924:	757b      	strb	r3, [r7, #21]
 800d926:	4b14      	ldr	r3, [pc, #80]	@ (800d978 <SVCCTL_UserEvtRx+0xa4>)
 800d928:	7f1b      	ldrb	r3, [r3, #28]
 800d92a:	7d7a      	ldrb	r2, [r7, #21]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d3ec      	bcc.n	800d90a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800d930:	e002      	b.n	800d938 <SVCCTL_UserEvtRx+0x64>
              break;
 800d932:	bf00      	nop
          break;
 800d934:	e000      	b.n	800d938 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800d936:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800d938:	e000      	b.n	800d93c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800d93a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800d93c:	7dfb      	ldrb	r3, [r7, #23]
 800d93e:	2b02      	cmp	r3, #2
 800d940:	d00f      	beq.n	800d962 <SVCCTL_UserEvtRx+0x8e>
 800d942:	2b02      	cmp	r3, #2
 800d944:	dc10      	bgt.n	800d968 <SVCCTL_UserEvtRx+0x94>
 800d946:	2b00      	cmp	r3, #0
 800d948:	d002      	beq.n	800d950 <SVCCTL_UserEvtRx+0x7c>
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d006      	beq.n	800d95c <SVCCTL_UserEvtRx+0x88>
 800d94e:	e00b      	b.n	800d968 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f001 fc65 	bl	800f220 <SVCCTL_App_Notification>
 800d956:	4603      	mov	r3, r0
 800d958:	75bb      	strb	r3, [r7, #22]
      break;
 800d95a:	e008      	b.n	800d96e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800d95c:	2301      	movs	r3, #1
 800d95e:	75bb      	strb	r3, [r7, #22]
      break;
 800d960:	e005      	b.n	800d96e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800d962:	2300      	movs	r3, #0
 800d964:	75bb      	strb	r3, [r7, #22]
      break;
 800d966:	e002      	b.n	800d96e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800d968:	2301      	movs	r3, #1
 800d96a:	75bb      	strb	r3, [r7, #22]
      break;
 800d96c:	bf00      	nop
  }

  return (return_status);
 800d96e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3718      	adds	r7, #24
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	20000184 	.word	0x20000184

0800d97c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b088      	sub	sp, #32
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d984:	f107 030c 	add.w	r3, r7, #12
 800d988:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	212e      	movs	r1, #46	@ 0x2e
 800d994:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800d998:	f000 fae8 	bl	800df6c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	330b      	adds	r3, #11
 800d9a0:	78db      	ldrb	r3, [r3, #3]
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3720      	adds	r7, #32
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b088      	sub	sp, #32
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d9b2:	f107 030c 	add.w	r3, r7, #12
 800d9b6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	210f      	movs	r1, #15
 800d9c2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800d9c6:	f000 fad1 	bl	800df6c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	330b      	adds	r3, #11
 800d9ce:	78db      	ldrb	r3, [r3, #3]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3720      	adds	r7, #32
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b088      	sub	sp, #32
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d9e0:	f107 030c 	add.w	r3, r7, #12
 800d9e4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	2110      	movs	r1, #16
 800d9ec:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800d9f0:	f000 fabc 	bl	800df6c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d9f4:	69fb      	ldr	r3, [r7, #28]
 800d9f6:	330b      	adds	r3, #11
 800d9f8:	78db      	ldrb	r3, [r3, #3]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3720      	adds	r7, #32
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
	...

0800da04 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800da04:	b480      	push	{r7}
 800da06:	b08b      	sub	sp, #44	@ 0x2c
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800da0c:	2300      	movs	r3, #0
 800da0e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800da10:	2300      	movs	r3, #0
 800da12:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800da14:	2300      	movs	r3, #0
 800da16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800da18:	2300      	movs	r3, #0
 800da1a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800da1c:	2300      	movs	r3, #0
 800da1e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800da20:	2300      	movs	r3, #0
 800da22:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800da24:	2300      	movs	r3, #0
 800da26:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800da28:	2300      	movs	r3, #0
 800da2a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800da2c:	4b4a      	ldr	r3, [pc, #296]	@ (800db58 <SHCI_GetWirelessFwInfo+0x154>)
 800da2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800da34:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800da3e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a44      	ldr	r2, [pc, #272]	@ (800db5c <SHCI_GetWirelessFwInfo+0x158>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d10f      	bne.n	800da70 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	695b      	ldr	r3, [r3, #20]
 800da54:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	699b      	ldr	r3, [r3, #24]
 800da5a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	69db      	ldr	r3, [r3, #28]
 800da60:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	691b      	ldr	r3, [r3, #16]
 800da6c:	617b      	str	r3, [r7, #20]
 800da6e:	e01a      	b.n	800daa6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800da78:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800da7c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	691b      	ldr	r3, [r3, #16]
 800da84:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	695b      	ldr	r3, [r3, #20]
 800da8c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	699b      	ldr	r3, [r3, #24]
 800da94:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	689b      	ldr	r3, [r3, #8]
 800daa4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800daa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa8:	0e1b      	lsrs	r3, r3, #24
 800daaa:	b2da      	uxtb	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800dab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab2:	0c1b      	lsrs	r3, r3, #16
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800daba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dabc:	0a1b      	lsrs	r3, r3, #8
 800dabe:	b2da      	uxtb	r2, r3
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800dac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac6:	091b      	lsrs	r3, r3, #4
 800dac8:	b2db      	uxtb	r3, r3
 800daca:	f003 030f 	and.w	r3, r3, #15
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800dad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	f003 030f 	and.w	r3, r3, #15
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	0e1b      	lsrs	r3, r3, #24
 800dae6:	b2da      	uxtb	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800daec:	6a3b      	ldr	r3, [r7, #32]
 800daee:	0c1b      	lsrs	r3, r3, #16
 800daf0:	b2da      	uxtb	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800daf6:	6a3b      	ldr	r3, [r7, #32]
 800daf8:	0a1b      	lsrs	r3, r3, #8
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800db00:	6a3b      	ldr	r3, [r7, #32]
 800db02:	b2da      	uxtb	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	b2da      	uxtb	r2, r3
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	0e1b      	lsrs	r3, r3, #24
 800db14:	b2da      	uxtb	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	0c1b      	lsrs	r3, r3, #16
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800db24:	69bb      	ldr	r3, [r7, #24]
 800db26:	0a1b      	lsrs	r3, r3, #8
 800db28:	b2da      	uxtb	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	0e1b      	lsrs	r3, r3, #24
 800db32:	b2da      	uxtb	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	0c1b      	lsrs	r3, r3, #16
 800db3c:	b2da      	uxtb	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	b2da      	uxtb	r2, r3
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800db4a:	2300      	movs	r3, #0
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	372c      	adds	r7, #44	@ 0x2c
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr
 800db58:	58004000 	.word	0x58004000
 800db5c:	a94656b9 	.word	0xa94656b9

0800db60 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	4a08      	ldr	r2, [pc, #32]	@ (800db90 <hci_init+0x30>)
 800db70:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800db72:	4a08      	ldr	r2, [pc, #32]	@ (800db94 <hci_init+0x34>)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800db78:	4806      	ldr	r0, [pc, #24]	@ (800db94 <hci_init+0x34>)
 800db7a:	f000 f979 	bl	800de70 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4618      	mov	r0, r3
 800db84:	f000 f8da 	bl	800dd3c <TlInit>

  return;
 800db88:	bf00      	nop
}
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	20000508 	.word	0x20000508
 800db94:	200004e0 	.word	0x200004e0

0800db98 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800db9e:	4822      	ldr	r0, [pc, #136]	@ (800dc28 <hci_user_evt_proc+0x90>)
 800dba0:	f000 fdfa 	bl	800e798 <LST_is_empty>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d12b      	bne.n	800dc02 <hci_user_evt_proc+0x6a>
 800dbaa:	4b20      	ldr	r3, [pc, #128]	@ (800dc2c <hci_user_evt_proc+0x94>)
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d027      	beq.n	800dc02 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800dbb2:	f107 030c 	add.w	r3, r7, #12
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	481b      	ldr	r0, [pc, #108]	@ (800dc28 <hci_user_evt_proc+0x90>)
 800dbba:	f000 fe7c 	bl	800e8b6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800dbbe:	4b1c      	ldr	r3, [pc, #112]	@ (800dc30 <hci_user_evt_proc+0x98>)
 800dbc0:	69db      	ldr	r3, [r3, #28]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d00c      	beq.n	800dbe0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800dbce:	4b18      	ldr	r3, [pc, #96]	@ (800dc30 <hci_user_evt_proc+0x98>)
 800dbd0:	69db      	ldr	r3, [r3, #28]
 800dbd2:	1d3a      	adds	r2, r7, #4
 800dbd4:	4610      	mov	r0, r2
 800dbd6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800dbd8:	793a      	ldrb	r2, [r7, #4]
 800dbda:	4b14      	ldr	r3, [pc, #80]	@ (800dc2c <hci_user_evt_proc+0x94>)
 800dbdc:	701a      	strb	r2, [r3, #0]
 800dbde:	e002      	b.n	800dbe6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800dbe0:	4b12      	ldr	r3, [pc, #72]	@ (800dc2c <hci_user_evt_proc+0x94>)
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800dbe6:	4b11      	ldr	r3, [pc, #68]	@ (800dc2c <hci_user_evt_proc+0x94>)
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d004      	beq.n	800dbf8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f000 fc0d 	bl	800e410 <TL_MM_EvtDone>
 800dbf6:	e004      	b.n	800dc02 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	480a      	ldr	r0, [pc, #40]	@ (800dc28 <hci_user_evt_proc+0x90>)
 800dbfe:	f000 fded 	bl	800e7dc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800dc02:	4809      	ldr	r0, [pc, #36]	@ (800dc28 <hci_user_evt_proc+0x90>)
 800dc04:	f000 fdc8 	bl	800e798 <LST_is_empty>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d107      	bne.n	800dc1e <hci_user_evt_proc+0x86>
 800dc0e:	4b07      	ldr	r3, [pc, #28]	@ (800dc2c <hci_user_evt_proc+0x94>)
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d003      	beq.n	800dc1e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800dc16:	4804      	ldr	r0, [pc, #16]	@ (800dc28 <hci_user_evt_proc+0x90>)
 800dc18:	f002 f9d0 	bl	800ffbc <hci_notify_asynch_evt>
  }


  return;
 800dc1c:	bf00      	nop
 800dc1e:	bf00      	nop
}
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	200001ac 	.word	0x200001ac
 800dc2c:	200001b8 	.word	0x200001b8
 800dc30:	200004e0 	.word	0x200004e0

0800dc34 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b088      	sub	sp, #32
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800dc40:	2000      	movs	r0, #0
 800dc42:	f000 f8d1 	bl	800dde8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800dc46:	2300      	movs	r3, #0
 800dc48:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	885b      	ldrh	r3, [r3, #2]
 800dc4e:	b21b      	sxth	r3, r3
 800dc50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc54:	b21a      	sxth	r2, r3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	881b      	ldrh	r3, [r3, #0]
 800dc5a:	b21b      	sxth	r3, r3
 800dc5c:	029b      	lsls	r3, r3, #10
 800dc5e:	b21b      	sxth	r3, r3
 800dc60:	4313      	orrs	r3, r2
 800dc62:	b21b      	sxth	r3, r3
 800dc64:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800dc66:	4b33      	ldr	r3, [pc, #204]	@ (800dd34 <hci_send_req+0x100>)
 800dc68:	2201      	movs	r2, #1
 800dc6a:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	68db      	ldr	r3, [r3, #12]
 800dc70:	b2d9      	uxtb	r1, r3
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	689a      	ldr	r2, [r3, #8]
 800dc76:	8bbb      	ldrh	r3, [r7, #28]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f000 f88f 	bl	800dd9c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800dc7e:	e04e      	b.n	800dd1e <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800dc80:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800dc84:	f002 f9b1 	bl	800ffea <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800dc88:	e043      	b.n	800dd12 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800dc8a:	f107 030c 	add.w	r3, r7, #12
 800dc8e:	4619      	mov	r1, r3
 800dc90:	4829      	ldr	r0, [pc, #164]	@ (800dd38 <hci_send_req+0x104>)
 800dc92:	f000 fe10 	bl	800e8b6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	7a5b      	ldrb	r3, [r3, #9]
 800dc9a:	2b0f      	cmp	r3, #15
 800dc9c:	d114      	bne.n	800dcc8 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	330b      	adds	r3, #11
 800dca2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	885b      	ldrh	r3, [r3, #2]
 800dca8:	b29b      	uxth	r3, r3
 800dcaa:	8bba      	ldrh	r2, [r7, #28]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d104      	bne.n	800dcba <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	691b      	ldr	r3, [r3, #16]
 800dcb4:	693a      	ldr	r2, [r7, #16]
 800dcb6:	7812      	ldrb	r2, [r2, #0]
 800dcb8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	785b      	ldrb	r3, [r3, #1]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d027      	beq.n	800dd12 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	77fb      	strb	r3, [r7, #31]
 800dcc6:	e024      	b.n	800dd12 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	330b      	adds	r3, #11
 800dccc:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	8bba      	ldrh	r2, [r7, #28]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d114      	bne.n	800dd06 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	7a9b      	ldrb	r3, [r3, #10]
 800dce0:	3b03      	subs	r3, #3
 800dce2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	695a      	ldr	r2, [r3, #20]
 800dce8:	7dfb      	ldrb	r3, [r7, #23]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	bfa8      	it	ge
 800dcee:	461a      	movge	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6918      	ldr	r0, [r3, #16]
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	1cd9      	adds	r1, r3, #3
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	695b      	ldr	r3, [r3, #20]
 800dd00:	461a      	mov	r2, r3
 800dd02:	f004 f8be 	bl	8011e82 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d001      	beq.n	800dd12 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800dd12:	4809      	ldr	r0, [pc, #36]	@ (800dd38 <hci_send_req+0x104>)
 800dd14:	f000 fd40 	bl	800e798 <LST_is_empty>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d0b5      	beq.n	800dc8a <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800dd1e:	7ffb      	ldrb	r3, [r7, #31]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d0ad      	beq.n	800dc80 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800dd24:	2001      	movs	r0, #1
 800dd26:	f000 f85f 	bl	800dde8 <NotifyCmdStatus>

  return 0;
 800dd2a:	2300      	movs	r3, #0
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3720      	adds	r7, #32
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	2000050c 	.word	0x2000050c
 800dd38:	20000500 	.word	0x20000500

0800dd3c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b086      	sub	sp, #24
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800dd44:	480f      	ldr	r0, [pc, #60]	@ (800dd84 <TlInit+0x48>)
 800dd46:	f000 fd17 	bl	800e778 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800dd4a:	4a0f      	ldr	r2, [pc, #60]	@ (800dd88 <TlInit+0x4c>)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800dd50:	480e      	ldr	r0, [pc, #56]	@ (800dd8c <TlInit+0x50>)
 800dd52:	f000 fd11 	bl	800e778 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800dd56:	4b0e      	ldr	r3, [pc, #56]	@ (800dd90 <TlInit+0x54>)
 800dd58:	2201      	movs	r2, #1
 800dd5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800dd5c:	4b0d      	ldr	r3, [pc, #52]	@ (800dd94 <TlInit+0x58>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d00a      	beq.n	800dd7a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800dd68:	4b0b      	ldr	r3, [pc, #44]	@ (800dd98 <TlInit+0x5c>)
 800dd6a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800dd6c:	4b09      	ldr	r3, [pc, #36]	@ (800dd94 <TlInit+0x58>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f107 0208 	add.w	r2, r7, #8
 800dd74:	4610      	mov	r0, r2
 800dd76:	4798      	blx	r3
  }

  return;
 800dd78:	bf00      	nop
 800dd7a:	bf00      	nop
}
 800dd7c:	3718      	adds	r7, #24
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	20000500 	.word	0x20000500
 800dd88:	200001b4 	.word	0x200001b4
 800dd8c:	200001ac 	.word	0x200001ac
 800dd90:	200001b8 	.word	0x200001b8
 800dd94:	200004e0 	.word	0x200004e0
 800dd98:	0800de29 	.word	0x0800de29

0800dd9c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b082      	sub	sp, #8
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	4603      	mov	r3, r0
 800dda4:	603a      	str	r2, [r7, #0]
 800dda6:	80fb      	strh	r3, [r7, #6]
 800dda8:	460b      	mov	r3, r1
 800ddaa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800ddac:	4b0c      	ldr	r3, [pc, #48]	@ (800dde0 <SendCmd+0x44>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	88fa      	ldrh	r2, [r7, #6]
 800ddb2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800ddb6:	4b0a      	ldr	r3, [pc, #40]	@ (800dde0 <SendCmd+0x44>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	797a      	ldrb	r2, [r7, #5]
 800ddbc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800ddbe:	4b08      	ldr	r3, [pc, #32]	@ (800dde0 <SendCmd+0x44>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	330c      	adds	r3, #12
 800ddc4:	797a      	ldrb	r2, [r7, #5]
 800ddc6:	6839      	ldr	r1, [r7, #0]
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f004 f85a 	bl	8011e82 <memcpy>

  hciContext.io.Send(0,0);
 800ddce:	4b05      	ldr	r3, [pc, #20]	@ (800dde4 <SendCmd+0x48>)
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	2100      	movs	r1, #0
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	4798      	blx	r3

  return;
 800ddd8:	bf00      	nop
}
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	200001b4 	.word	0x200001b4
 800dde4:	200004e0 	.word	0x200004e0

0800dde8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	4603      	mov	r3, r0
 800ddf0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800ddf2:	79fb      	ldrb	r3, [r7, #7]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d108      	bne.n	800de0a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800ddf8:	4b0a      	ldr	r3, [pc, #40]	@ (800de24 <NotifyCmdStatus+0x3c>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d00d      	beq.n	800de1c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800de00:	4b08      	ldr	r3, [pc, #32]	@ (800de24 <NotifyCmdStatus+0x3c>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2000      	movs	r0, #0
 800de06:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800de08:	e008      	b.n	800de1c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800de0a:	4b06      	ldr	r3, [pc, #24]	@ (800de24 <NotifyCmdStatus+0x3c>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d004      	beq.n	800de1c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800de12:	4b04      	ldr	r3, [pc, #16]	@ (800de24 <NotifyCmdStatus+0x3c>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	2001      	movs	r0, #1
 800de18:	4798      	blx	r3
  return;
 800de1a:	bf00      	nop
 800de1c:	bf00      	nop
}
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	20000508 	.word	0x20000508

0800de28 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	7a5b      	ldrb	r3, [r3, #9]
 800de34:	2b0f      	cmp	r3, #15
 800de36:	d003      	beq.n	800de40 <TlEvtReceived+0x18>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	7a5b      	ldrb	r3, [r3, #9]
 800de3c:	2b0e      	cmp	r3, #14
 800de3e:	d107      	bne.n	800de50 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800de40:	6879      	ldr	r1, [r7, #4]
 800de42:	4809      	ldr	r0, [pc, #36]	@ (800de68 <TlEvtReceived+0x40>)
 800de44:	f000 fcf0 	bl	800e828 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800de48:	2000      	movs	r0, #0
 800de4a:	f002 f8c3 	bl	800ffd4 <hci_cmd_resp_release>
 800de4e:	e006      	b.n	800de5e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800de50:	6879      	ldr	r1, [r7, #4]
 800de52:	4806      	ldr	r0, [pc, #24]	@ (800de6c <TlEvtReceived+0x44>)
 800de54:	f000 fce8 	bl	800e828 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800de58:	4804      	ldr	r0, [pc, #16]	@ (800de6c <TlEvtReceived+0x44>)
 800de5a:	f002 f8af 	bl	800ffbc <hci_notify_asynch_evt>
  }

  return;
 800de5e:	bf00      	nop
}
 800de60:	3708      	adds	r7, #8
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	20000500 	.word	0x20000500
 800de6c:	200001ac 	.word	0x200001ac

0800de70 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4a05      	ldr	r2, [pc, #20]	@ (800de90 <hci_register_io_bus+0x20>)
 800de7c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a04      	ldr	r2, [pc, #16]	@ (800de94 <hci_register_io_bus+0x24>)
 800de82:	611a      	str	r2, [r3, #16]

  return;
 800de84:	bf00      	nop
}
 800de86:	370c      	adds	r7, #12
 800de88:	46bd      	mov	sp, r7
 800de8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8e:	4770      	bx	lr
 800de90:	0800e189 	.word	0x0800e189
 800de94:	0800e1f1 	.word	0x0800e1f1

0800de98 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	4a08      	ldr	r2, [pc, #32]	@ (800dec8 <shci_init+0x30>)
 800dea8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800deaa:	4a08      	ldr	r2, [pc, #32]	@ (800decc <shci_init+0x34>)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800deb0:	4806      	ldr	r0, [pc, #24]	@ (800decc <shci_init+0x34>)
 800deb2:	f000 f915 	bl	800e0e0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4618      	mov	r0, r3
 800debc:	f000 f898 	bl	800dff0 <TlInit>

  return;
 800dec0:	bf00      	nop
}
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	20000530 	.word	0x20000530
 800decc:	20000510 	.word	0x20000510

0800ded0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ded6:	4822      	ldr	r0, [pc, #136]	@ (800df60 <shci_user_evt_proc+0x90>)
 800ded8:	f000 fc5e 	bl	800e798 <LST_is_empty>
 800dedc:	4603      	mov	r3, r0
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d12b      	bne.n	800df3a <shci_user_evt_proc+0x6a>
 800dee2:	4b20      	ldr	r3, [pc, #128]	@ (800df64 <shci_user_evt_proc+0x94>)
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d027      	beq.n	800df3a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800deea:	f107 030c 	add.w	r3, r7, #12
 800deee:	4619      	mov	r1, r3
 800def0:	481b      	ldr	r0, [pc, #108]	@ (800df60 <shci_user_evt_proc+0x90>)
 800def2:	f000 fce0 	bl	800e8b6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800def6:	4b1c      	ldr	r3, [pc, #112]	@ (800df68 <shci_user_evt_proc+0x98>)
 800def8:	69db      	ldr	r3, [r3, #28]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00c      	beq.n	800df18 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800df02:	2301      	movs	r3, #1
 800df04:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800df06:	4b18      	ldr	r3, [pc, #96]	@ (800df68 <shci_user_evt_proc+0x98>)
 800df08:	69db      	ldr	r3, [r3, #28]
 800df0a:	1d3a      	adds	r2, r7, #4
 800df0c:	4610      	mov	r0, r2
 800df0e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800df10:	793a      	ldrb	r2, [r7, #4]
 800df12:	4b14      	ldr	r3, [pc, #80]	@ (800df64 <shci_user_evt_proc+0x94>)
 800df14:	701a      	strb	r2, [r3, #0]
 800df16:	e002      	b.n	800df1e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800df18:	4b12      	ldr	r3, [pc, #72]	@ (800df64 <shci_user_evt_proc+0x94>)
 800df1a:	2201      	movs	r2, #1
 800df1c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800df1e:	4b11      	ldr	r3, [pc, #68]	@ (800df64 <shci_user_evt_proc+0x94>)
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d004      	beq.n	800df30 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	4618      	mov	r0, r3
 800df2a:	f000 fa71 	bl	800e410 <TL_MM_EvtDone>
 800df2e:	e004      	b.n	800df3a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	4619      	mov	r1, r3
 800df34:	480a      	ldr	r0, [pc, #40]	@ (800df60 <shci_user_evt_proc+0x90>)
 800df36:	f000 fc51 	bl	800e7dc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800df3a:	4809      	ldr	r0, [pc, #36]	@ (800df60 <shci_user_evt_proc+0x90>)
 800df3c:	f000 fc2c 	bl	800e798 <LST_is_empty>
 800df40:	4603      	mov	r3, r0
 800df42:	2b00      	cmp	r3, #0
 800df44:	d107      	bne.n	800df56 <shci_user_evt_proc+0x86>
 800df46:	4b07      	ldr	r3, [pc, #28]	@ (800df64 <shci_user_evt_proc+0x94>)
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d003      	beq.n	800df56 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800df4e:	4804      	ldr	r0, [pc, #16]	@ (800df60 <shci_user_evt_proc+0x90>)
 800df50:	f7f3 f9ea 	bl	8001328 <shci_notify_asynch_evt>
  }


  return;
 800df54:	bf00      	nop
 800df56:	bf00      	nop
}
 800df58:	3710      	adds	r7, #16
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop
 800df60:	200001bc 	.word	0x200001bc
 800df64:	200001cc 	.word	0x200001cc
 800df68:	20000510 	.word	0x20000510

0800df6c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	60ba      	str	r2, [r7, #8]
 800df74:	607b      	str	r3, [r7, #4]
 800df76:	4603      	mov	r3, r0
 800df78:	81fb      	strh	r3, [r7, #14]
 800df7a:	460b      	mov	r3, r1
 800df7c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800df7e:	2000      	movs	r0, #0
 800df80:	f000 f868 	bl	800e054 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800df84:	4b17      	ldr	r3, [pc, #92]	@ (800dfe4 <shci_send+0x78>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	89fa      	ldrh	r2, [r7, #14]
 800df8a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800df8e:	4b15      	ldr	r3, [pc, #84]	@ (800dfe4 <shci_send+0x78>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	7b7a      	ldrb	r2, [r7, #13]
 800df94:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800df96:	4b13      	ldr	r3, [pc, #76]	@ (800dfe4 <shci_send+0x78>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	330c      	adds	r3, #12
 800df9c:	7b7a      	ldrb	r2, [r7, #13]
 800df9e:	68b9      	ldr	r1, [r7, #8]
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f003 ff6e 	bl	8011e82 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800dfa6:	4b10      	ldr	r3, [pc, #64]	@ (800dfe8 <shci_send+0x7c>)
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800dfac:	4b0f      	ldr	r3, [pc, #60]	@ (800dfec <shci_send+0x80>)
 800dfae:	691b      	ldr	r3, [r3, #16]
 800dfb0:	2100      	movs	r1, #0
 800dfb2:	2000      	movs	r0, #0
 800dfb4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800dfb6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800dfba:	f7f3 f9cc 	bl	8001356 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f103 0008 	add.w	r0, r3, #8
 800dfc4:	4b07      	ldr	r3, [pc, #28]	@ (800dfe4 <shci_send+0x78>)
 800dfc6:	6819      	ldr	r1, [r3, #0]
 800dfc8:	4b06      	ldr	r3, [pc, #24]	@ (800dfe4 <shci_send+0x78>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	789b      	ldrb	r3, [r3, #2]
 800dfce:	3303      	adds	r3, #3
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	f003 ff56 	bl	8011e82 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800dfd6:	2001      	movs	r0, #1
 800dfd8:	f000 f83c 	bl	800e054 <Cmd_SetStatus>

  return;
 800dfdc:	bf00      	nop
}
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	200001c8 	.word	0x200001c8
 800dfe8:	20000534 	.word	0x20000534
 800dfec:	20000510 	.word	0x20000510

0800dff0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b086      	sub	sp, #24
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800dff8:	4a10      	ldr	r2, [pc, #64]	@ (800e03c <TlInit+0x4c>)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800dffe:	4810      	ldr	r0, [pc, #64]	@ (800e040 <TlInit+0x50>)
 800e000:	f000 fbba 	bl	800e778 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e004:	2001      	movs	r0, #1
 800e006:	f000 f825 	bl	800e054 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e00a:	4b0e      	ldr	r3, [pc, #56]	@ (800e044 <TlInit+0x54>)
 800e00c:	2201      	movs	r2, #1
 800e00e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e010:	4b0d      	ldr	r3, [pc, #52]	@ (800e048 <TlInit+0x58>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00c      	beq.n	800e032 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e01c:	4b0b      	ldr	r3, [pc, #44]	@ (800e04c <TlInit+0x5c>)
 800e01e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e020:	4b0b      	ldr	r3, [pc, #44]	@ (800e050 <TlInit+0x60>)
 800e022:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e024:	4b08      	ldr	r3, [pc, #32]	@ (800e048 <TlInit+0x58>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f107 020c 	add.w	r2, r7, #12
 800e02c:	4610      	mov	r0, r2
 800e02e:	4798      	blx	r3
  }

  return;
 800e030:	bf00      	nop
 800e032:	bf00      	nop
}
 800e034:	3718      	adds	r7, #24
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	200001c8 	.word	0x200001c8
 800e040:	200001bc 	.word	0x200001bc
 800e044:	200001cc 	.word	0x200001cc
 800e048:	20000510 	.word	0x20000510
 800e04c:	0800e0a5 	.word	0x0800e0a5
 800e050:	0800e0bd 	.word	0x0800e0bd

0800e054 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	4603      	mov	r3, r0
 800e05c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e05e:	79fb      	ldrb	r3, [r7, #7]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10b      	bne.n	800e07c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e064:	4b0d      	ldr	r3, [pc, #52]	@ (800e09c <Cmd_SetStatus+0x48>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d003      	beq.n	800e074 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e06c:	4b0b      	ldr	r3, [pc, #44]	@ (800e09c <Cmd_SetStatus+0x48>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2000      	movs	r0, #0
 800e072:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e074:	4b0a      	ldr	r3, [pc, #40]	@ (800e0a0 <Cmd_SetStatus+0x4c>)
 800e076:	2200      	movs	r2, #0
 800e078:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e07a:	e00b      	b.n	800e094 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e07c:	4b08      	ldr	r3, [pc, #32]	@ (800e0a0 <Cmd_SetStatus+0x4c>)
 800e07e:	2201      	movs	r2, #1
 800e080:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e082:	4b06      	ldr	r3, [pc, #24]	@ (800e09c <Cmd_SetStatus+0x48>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d004      	beq.n	800e094 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e08a:	4b04      	ldr	r3, [pc, #16]	@ (800e09c <Cmd_SetStatus+0x48>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2001      	movs	r0, #1
 800e090:	4798      	blx	r3
  return;
 800e092:	bf00      	nop
 800e094:	bf00      	nop
}
 800e096:	3708      	adds	r7, #8
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	20000530 	.word	0x20000530
 800e0a0:	200001c4 	.word	0x200001c4

0800e0a4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	f7f3 f947 	bl	8001340 <shci_cmd_resp_release>

  return;
 800e0b2:	bf00      	nop
}
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
	...

0800e0bc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e0c4:	6879      	ldr	r1, [r7, #4]
 800e0c6:	4805      	ldr	r0, [pc, #20]	@ (800e0dc <TlUserEvtReceived+0x20>)
 800e0c8:	f000 fbae 	bl	800e828 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e0cc:	4803      	ldr	r0, [pc, #12]	@ (800e0dc <TlUserEvtReceived+0x20>)
 800e0ce:	f7f3 f92b 	bl	8001328 <shci_notify_asynch_evt>

  return;
 800e0d2:	bf00      	nop
}
 800e0d4:	3708      	adds	r7, #8
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	200001bc 	.word	0x200001bc

0800e0e0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	4a05      	ldr	r2, [pc, #20]	@ (800e100 <shci_register_io_bus+0x20>)
 800e0ec:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4a04      	ldr	r2, [pc, #16]	@ (800e104 <shci_register_io_bus+0x24>)
 800e0f2:	611a      	str	r2, [r3, #16]

  return;
 800e0f4:	bf00      	nop
}
 800e0f6:	370c      	adds	r7, #12
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr
 800e100:	0800e29d 	.word	0x0800e29d
 800e104:	0800e2f1 	.word	0x0800e2f1

0800e108 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e10c:	f002 fb24 	bl	8010758 <HW_IPCC_Enable>

  return;
 800e110:	bf00      	nop
}
 800e112:	bd80      	pop	{r7, pc}

0800e114 <TL_Init>:


void TL_Init( void )
{
 800e114:	b580      	push	{r7, lr}
 800e116:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e118:	4b10      	ldr	r3, [pc, #64]	@ (800e15c <TL_Init+0x48>)
 800e11a:	4a11      	ldr	r2, [pc, #68]	@ (800e160 <TL_Init+0x4c>)
 800e11c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e11e:	4b0f      	ldr	r3, [pc, #60]	@ (800e15c <TL_Init+0x48>)
 800e120:	4a10      	ldr	r2, [pc, #64]	@ (800e164 <TL_Init+0x50>)
 800e122:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e124:	4b0d      	ldr	r3, [pc, #52]	@ (800e15c <TL_Init+0x48>)
 800e126:	4a10      	ldr	r2, [pc, #64]	@ (800e168 <TL_Init+0x54>)
 800e128:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e12a:	4b0c      	ldr	r3, [pc, #48]	@ (800e15c <TL_Init+0x48>)
 800e12c:	4a0f      	ldr	r2, [pc, #60]	@ (800e16c <TL_Init+0x58>)
 800e12e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800e130:	4b0a      	ldr	r3, [pc, #40]	@ (800e15c <TL_Init+0x48>)
 800e132:	4a0f      	ldr	r2, [pc, #60]	@ (800e170 <TL_Init+0x5c>)
 800e134:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e136:	4b09      	ldr	r3, [pc, #36]	@ (800e15c <TL_Init+0x48>)
 800e138:	4a0e      	ldr	r2, [pc, #56]	@ (800e174 <TL_Init+0x60>)
 800e13a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e13c:	4b07      	ldr	r3, [pc, #28]	@ (800e15c <TL_Init+0x48>)
 800e13e:	4a0e      	ldr	r2, [pc, #56]	@ (800e178 <TL_Init+0x64>)
 800e140:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e142:	4b06      	ldr	r3, [pc, #24]	@ (800e15c <TL_Init+0x48>)
 800e144:	4a0d      	ldr	r2, [pc, #52]	@ (800e17c <TL_Init+0x68>)
 800e146:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e148:	4b04      	ldr	r3, [pc, #16]	@ (800e15c <TL_Init+0x48>)
 800e14a:	4a0d      	ldr	r2, [pc, #52]	@ (800e180 <TL_Init+0x6c>)
 800e14c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e14e:	4b03      	ldr	r3, [pc, #12]	@ (800e15c <TL_Init+0x48>)
 800e150:	4a0c      	ldr	r2, [pc, #48]	@ (800e184 <TL_Init+0x70>)
 800e152:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e154:	f002 fb14 	bl	8010780 <HW_IPCC_Init>

  return;
 800e158:	bf00      	nop
}
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	20030000 	.word	0x20030000
 800e160:	20030028 	.word	0x20030028
 800e164:	20030048 	.word	0x20030048
 800e168:	20030058 	.word	0x20030058
 800e16c:	20030068 	.word	0x20030068
 800e170:	20030070 	.word	0x20030070
 800e174:	20030078 	.word	0x20030078
 800e178:	20030080 	.word	0x20030080
 800e17c:	2003009c 	.word	0x2003009c
 800e180:	200300a0 	.word	0x200300a0
 800e184:	200300ac 	.word	0x200300ac

0800e188 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800e194:	4811      	ldr	r0, [pc, #68]	@ (800e1dc <TL_BLE_Init+0x54>)
 800e196:	f000 faef 	bl	800e778 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800e19a:	4b11      	ldr	r3, [pc, #68]	@ (800e1e0 <TL_BLE_Init+0x58>)
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	689a      	ldr	r2, [r3, #8]
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	68da      	ldr	r2, [r3, #12]
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	4a0c      	ldr	r2, [pc, #48]	@ (800e1e4 <TL_BLE_Init+0x5c>)
 800e1b4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	4a08      	ldr	r2, [pc, #32]	@ (800e1dc <TL_BLE_Init+0x54>)
 800e1ba:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800e1bc:	f002 faf6 	bl	80107ac <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4a08      	ldr	r2, [pc, #32]	@ (800e1e8 <TL_BLE_Init+0x60>)
 800e1c6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	4a07      	ldr	r2, [pc, #28]	@ (800e1ec <TL_BLE_Init+0x64>)
 800e1ce:	6013      	str	r3, [r2, #0]

  return 0;
 800e1d0:	2300      	movs	r3, #0
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3710      	adds	r7, #16
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	200300c8 	.word	0x200300c8
 800e1e0:	20030000 	.word	0x20030000
 800e1e4:	20030a58 	.word	0x20030a58
 800e1e8:	20000540 	.word	0x20000540
 800e1ec:	20000544 	.word	0x20000544

0800e1f0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800e1fc:	4b09      	ldr	r3, [pc, #36]	@ (800e224 <TL_BLE_SendCmd+0x34>)
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2201      	movs	r2, #1
 800e204:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800e206:	4b07      	ldr	r3, [pc, #28]	@ (800e224 <TL_BLE_SendCmd+0x34>)
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4619      	mov	r1, r3
 800e20e:	2001      	movs	r0, #1
 800e210:	f000 f96c 	bl	800e4ec <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e214:	f002 fae4 	bl	80107e0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800e218:	2300      	movs	r3, #0
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3708      	adds	r7, #8
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	20030000 	.word	0x20030000

0800e228 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e22e:	e01c      	b.n	800e26a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e230:	1d3b      	adds	r3, r7, #4
 800e232:	4619      	mov	r1, r3
 800e234:	4812      	ldr	r0, [pc, #72]	@ (800e280 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e236:	f000 fb3e 	bl	800e8b6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	7a5b      	ldrb	r3, [r3, #9]
 800e23e:	2b0f      	cmp	r3, #15
 800e240:	d003      	beq.n	800e24a <HW_IPCC_BLE_RxEvtNot+0x22>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	7a5b      	ldrb	r3, [r3, #9]
 800e246:	2b0e      	cmp	r3, #14
 800e248:	d105      	bne.n	800e256 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4619      	mov	r1, r3
 800e24e:	2002      	movs	r0, #2
 800e250:	f000 f94c 	bl	800e4ec <OutputDbgTrace>
 800e254:	e004      	b.n	800e260 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	4619      	mov	r1, r3
 800e25a:	2003      	movs	r0, #3
 800e25c:	f000 f946 	bl	800e4ec <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e260:	4b08      	ldr	r3, [pc, #32]	@ (800e284 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	4610      	mov	r0, r2
 800e268:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e26a:	4805      	ldr	r0, [pc, #20]	@ (800e280 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e26c:	f000 fa94 	bl	800e798 <LST_is_empty>
 800e270:	4603      	mov	r3, r0
 800e272:	2b00      	cmp	r3, #0
 800e274:	d0dc      	beq.n	800e230 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e276:	bf00      	nop
}
 800e278:	3708      	adds	r7, #8
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}
 800e27e:	bf00      	nop
 800e280:	200300c8 	.word	0x200300c8
 800e284:	20000540 	.word	0x20000540

0800e288 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e28c:	4b02      	ldr	r3, [pc, #8]	@ (800e298 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4798      	blx	r3

  return;
 800e292:	bf00      	nop
}
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	20000544 	.word	0x20000544

0800e29c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b084      	sub	sp, #16
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e2a8:	480d      	ldr	r0, [pc, #52]	@ (800e2e0 <TL_SYS_Init+0x44>)
 800e2aa:	f000 fa65 	bl	800e778 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e2ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e2e4 <TL_SYS_Init+0x48>)
 800e2b0:	68db      	ldr	r3, [r3, #12]
 800e2b2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	689a      	ldr	r2, [r3, #8]
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	4a08      	ldr	r2, [pc, #32]	@ (800e2e0 <TL_SYS_Init+0x44>)
 800e2c0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e2c2:	f002 fabf 	bl	8010844 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4a07      	ldr	r2, [pc, #28]	@ (800e2e8 <TL_SYS_Init+0x4c>)
 800e2cc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	4a06      	ldr	r2, [pc, #24]	@ (800e2ec <TL_SYS_Init+0x50>)
 800e2d4:	6013      	str	r3, [r2, #0]

  return 0;
 800e2d6:	2300      	movs	r3, #0
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3710      	adds	r7, #16
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}
 800e2e0:	200300d0 	.word	0x200300d0
 800e2e4:	20030000 	.word	0x20030000
 800e2e8:	20000548 	.word	0x20000548
 800e2ec:	2000054c 	.word	0x2000054c

0800e2f0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e2fc:	4b09      	ldr	r3, [pc, #36]	@ (800e324 <TL_SYS_SendCmd+0x34>)
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	2210      	movs	r2, #16
 800e304:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e306:	4b07      	ldr	r3, [pc, #28]	@ (800e324 <TL_SYS_SendCmd+0x34>)
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4619      	mov	r1, r3
 800e30e:	2004      	movs	r0, #4
 800e310:	f000 f8ec 	bl	800e4ec <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e314:	f002 fab0 	bl	8010878 <HW_IPCC_SYS_SendCmd>

  return 0;
 800e318:	2300      	movs	r3, #0
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3708      	adds	r7, #8
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
 800e322:	bf00      	nop
 800e324:	20030000 	.word	0x20030000

0800e328 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e32c:	4b07      	ldr	r3, [pc, #28]	@ (800e34c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e32e:	68db      	ldr	r3, [r3, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4619      	mov	r1, r3
 800e334:	2005      	movs	r0, #5
 800e336:	f000 f8d9 	bl	800e4ec <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e33a:	4b05      	ldr	r3, [pc, #20]	@ (800e350 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	4a03      	ldr	r2, [pc, #12]	@ (800e34c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e340:	68d2      	ldr	r2, [r2, #12]
 800e342:	6812      	ldr	r2, [r2, #0]
 800e344:	4610      	mov	r0, r2
 800e346:	4798      	blx	r3

  return;
 800e348:	bf00      	nop
}
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	20030000 	.word	0x20030000
 800e350:	20000548 	.word	0x20000548

0800e354 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e35a:	e00e      	b.n	800e37a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800e35c:	1d3b      	adds	r3, r7, #4
 800e35e:	4619      	mov	r1, r3
 800e360:	480b      	ldr	r0, [pc, #44]	@ (800e390 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e362:	f000 faa8 	bl	800e8b6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4619      	mov	r1, r3
 800e36a:	2006      	movs	r0, #6
 800e36c:	f000 f8be 	bl	800e4ec <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800e370:	4b08      	ldr	r3, [pc, #32]	@ (800e394 <HW_IPCC_SYS_EvtNot+0x40>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	4610      	mov	r0, r2
 800e378:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e37a:	4805      	ldr	r0, [pc, #20]	@ (800e390 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e37c:	f000 fa0c 	bl	800e798 <LST_is_empty>
 800e380:	4603      	mov	r3, r0
 800e382:	2b00      	cmp	r3, #0
 800e384:	d0ea      	beq.n	800e35c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800e386:	bf00      	nop
}
 800e388:	3708      	adds	r7, #8
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	200300d0 	.word	0x200300d0
 800e394:	2000054c 	.word	0x2000054c

0800e398 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800e3a0:	4817      	ldr	r0, [pc, #92]	@ (800e400 <TL_MM_Init+0x68>)
 800e3a2:	f000 f9e9 	bl	800e778 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800e3a6:	4817      	ldr	r0, [pc, #92]	@ (800e404 <TL_MM_Init+0x6c>)
 800e3a8:	f000 f9e6 	bl	800e778 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800e3ac:	4b16      	ldr	r3, [pc, #88]	@ (800e408 <TL_MM_Init+0x70>)
 800e3ae:	691b      	ldr	r3, [r3, #16]
 800e3b0:	4a16      	ldr	r2, [pc, #88]	@ (800e40c <TL_MM_Init+0x74>)
 800e3b2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800e3b4:	4b15      	ldr	r3, [pc, #84]	@ (800e40c <TL_MM_Init+0x74>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	6892      	ldr	r2, [r2, #8]
 800e3bc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800e3be:	4b13      	ldr	r3, [pc, #76]	@ (800e40c <TL_MM_Init+0x74>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	68d2      	ldr	r2, [r2, #12]
 800e3c6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800e3c8:	4b10      	ldr	r3, [pc, #64]	@ (800e40c <TL_MM_Init+0x74>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a0c      	ldr	r2, [pc, #48]	@ (800e400 <TL_MM_Init+0x68>)
 800e3ce:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800e3d0:	4b0e      	ldr	r3, [pc, #56]	@ (800e40c <TL_MM_Init+0x74>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	6812      	ldr	r2, [r2, #0]
 800e3d8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800e3da:	4b0c      	ldr	r3, [pc, #48]	@ (800e40c <TL_MM_Init+0x74>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	6852      	ldr	r2, [r2, #4]
 800e3e2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800e3e4:	4b09      	ldr	r3, [pc, #36]	@ (800e40c <TL_MM_Init+0x74>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	6912      	ldr	r2, [r2, #16]
 800e3ec:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800e3ee:	4b07      	ldr	r3, [pc, #28]	@ (800e40c <TL_MM_Init+0x74>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	6952      	ldr	r2, [r2, #20]
 800e3f6:	619a      	str	r2, [r3, #24]

  return;
 800e3f8:	bf00      	nop
}
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	200300b8 	.word	0x200300b8
 800e404:	20000538 	.word	0x20000538
 800e408:	20030000 	.word	0x20030000
 800e40c:	20000550 	.word	0x20000550

0800e410 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800e418:	6879      	ldr	r1, [r7, #4]
 800e41a:	4807      	ldr	r0, [pc, #28]	@ (800e438 <TL_MM_EvtDone+0x28>)
 800e41c:	f000 fa04 	bl	800e828 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800e420:	6879      	ldr	r1, [r7, #4]
 800e422:	2000      	movs	r0, #0
 800e424:	f000 f862 	bl	800e4ec <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800e428:	4804      	ldr	r0, [pc, #16]	@ (800e43c <TL_MM_EvtDone+0x2c>)
 800e42a:	f002 fa6b 	bl	8010904 <HW_IPCC_MM_SendFreeBuf>

  return;
 800e42e:	bf00      	nop
}
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	20000538 	.word	0x20000538
 800e43c:	0800e441 	.word	0x0800e441

0800e440 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e446:	e00c      	b.n	800e462 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800e448:	1d3b      	adds	r3, r7, #4
 800e44a:	4619      	mov	r1, r3
 800e44c:	480a      	ldr	r0, [pc, #40]	@ (800e478 <SendFreeBuf+0x38>)
 800e44e:	f000 fa32 	bl	800e8b6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800e452:	4b0a      	ldr	r3, [pc, #40]	@ (800e47c <SendFreeBuf+0x3c>)
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	691b      	ldr	r3, [r3, #16]
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	4611      	mov	r1, r2
 800e45c:	4618      	mov	r0, r3
 800e45e:	f000 f9e3 	bl	800e828 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e462:	4805      	ldr	r0, [pc, #20]	@ (800e478 <SendFreeBuf+0x38>)
 800e464:	f000 f998 	bl	800e798 <LST_is_empty>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d0ec      	beq.n	800e448 <SendFreeBuf+0x8>
  }

  return;
 800e46e:	bf00      	nop
}
 800e470:	3708      	adds	r7, #8
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	20000538 	.word	0x20000538
 800e47c:	20030000 	.word	0x20030000

0800e480 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800e480:	b580      	push	{r7, lr}
 800e482:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800e484:	4805      	ldr	r0, [pc, #20]	@ (800e49c <TL_TRACES_Init+0x1c>)
 800e486:	f000 f977 	bl	800e778 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800e48a:	4b05      	ldr	r3, [pc, #20]	@ (800e4a0 <TL_TRACES_Init+0x20>)
 800e48c:	695b      	ldr	r3, [r3, #20]
 800e48e:	4a03      	ldr	r2, [pc, #12]	@ (800e49c <TL_TRACES_Init+0x1c>)
 800e490:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800e492:	f002 fa89 	bl	80109a8 <HW_IPCC_TRACES_Init>

  return;
 800e496:	bf00      	nop
}
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	200300c0 	.word	0x200300c0
 800e4a0:	20030000 	.word	0x20030000

0800e4a4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b082      	sub	sp, #8
 800e4a8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e4aa:	e008      	b.n	800e4be <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800e4ac:	1d3b      	adds	r3, r7, #4
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	4808      	ldr	r0, [pc, #32]	@ (800e4d4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e4b2:	f000 fa00 	bl	800e8b6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f000 f80d 	bl	800e4d8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e4be:	4805      	ldr	r0, [pc, #20]	@ (800e4d4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e4c0:	f000 f96a 	bl	800e798 <LST_is_empty>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d0f0      	beq.n	800e4ac <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800e4ca:	bf00      	nop
}
 800e4cc:	3708      	adds	r7, #8
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	200300c0 	.word	0x200300c0

0800e4d8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800e4e0:	bf00      	nop
 800e4e2:	370c      	adds	r7, #12
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b087      	sub	sp, #28
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	6039      	str	r1, [r7, #0]
 800e4f6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 800e4f8:	79fb      	ldrb	r3, [r7, #7]
 800e4fa:	2b06      	cmp	r3, #6
 800e4fc:	d845      	bhi.n	800e58a <OutputDbgTrace+0x9e>
 800e4fe:	a201      	add	r2, pc, #4	@ (adr r2, 800e504 <OutputDbgTrace+0x18>)
 800e500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e504:	0800e521 	.word	0x0800e521
 800e508:	0800e545 	.word	0x0800e545
 800e50c:	0800e54b 	.word	0x0800e54b
 800e510:	0800e55f 	.word	0x0800e55f
 800e514:	0800e56b 	.word	0x0800e56b
 800e518:	0800e571 	.word	0x0800e571
 800e51c:	0800e57f 	.word	0x0800e57f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	7a5b      	ldrb	r3, [r3, #9]
 800e528:	2bff      	cmp	r3, #255	@ 0xff
 800e52a:	d005      	beq.n	800e538 <OutputDbgTrace+0x4c>
 800e52c:	2bff      	cmp	r3, #255	@ 0xff
 800e52e:	dc05      	bgt.n	800e53c <OutputDbgTrace+0x50>
 800e530:	2b0e      	cmp	r3, #14
 800e532:	d005      	beq.n	800e540 <OutputDbgTrace+0x54>
 800e534:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800e536:	e001      	b.n	800e53c <OutputDbgTrace+0x50>
          break;
 800e538:	bf00      	nop
 800e53a:	e027      	b.n	800e58c <OutputDbgTrace+0xa0>
          break;
 800e53c:	bf00      	nop
 800e53e:	e025      	b.n	800e58c <OutputDbgTrace+0xa0>
          break;
 800e540:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800e542:	e023      	b.n	800e58c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e548:	e020      	b.n	800e58c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	7a5b      	ldrb	r3, [r3, #9]
 800e552:	2b0e      	cmp	r3, #14
 800e554:	d001      	beq.n	800e55a <OutputDbgTrace+0x6e>
 800e556:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e558:	e000      	b.n	800e55c <OutputDbgTrace+0x70>
          break;
 800e55a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e55c:	e016      	b.n	800e58c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	7a5b      	ldrb	r3, [r3, #9]
 800e566:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e568:	e010      	b.n	800e58c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e56e:	e00d      	b.n	800e58c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	785b      	ldrb	r3, [r3, #1]
 800e578:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 800e57a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e57c:	e006      	b.n	800e58c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	7a5b      	ldrb	r3, [r3, #9]
 800e586:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e588:	e000      	b.n	800e58c <OutputDbgTrace+0xa0>

    default:
      break;
 800e58a:	bf00      	nop
  }

  return;
 800e58c:	bf00      	nop
}
 800e58e:	371c      	adds	r7, #28
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800e5a4:	215c      	movs	r1, #92	@ 0x5c
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f003 fbe2 	bl	8011d70 <strrchr>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d007      	beq.n	800e5c2 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800e5b2:	215c      	movs	r1, #92	@ 0x5c
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f003 fbdb 	bl	8011d70 <strrchr>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	3301      	adds	r3, #1
 800e5be:	60fb      	str	r3, [r7, #12]
 800e5c0:	e00d      	b.n	800e5de <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800e5c2:	212f      	movs	r1, #47	@ 0x2f
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f003 fbd3 	bl	8011d70 <strrchr>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d006      	beq.n	800e5de <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800e5d0:	212f      	movs	r1, #47	@ 0x2f
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f003 fbcc 	bl	8011d70 <strrchr>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	3301      	adds	r3, #1
 800e5dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e5de:	68fb      	ldr	r3, [r7, #12]
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b086      	sub	sp, #24
 800e5ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5ee:	f3ef 8310 	mrs	r3, PRIMASK
 800e5f2:	60fb      	str	r3, [r7, #12]
  return(result);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800e5f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e5f8:	b672      	cpsid	i
}
 800e5fa:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800e5fc:	1cbb      	adds	r3, r7, #2
 800e5fe:	4619      	mov	r1, r3
 800e600:	4812      	ldr	r0, [pc, #72]	@ (800e64c <DbgTrace_TxCpltCallback+0x64>)
 800e602:	f000 fb9d 	bl	800ed40 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800e606:	1cbb      	adds	r3, r7, #2
 800e608:	4619      	mov	r1, r3
 800e60a:	4810      	ldr	r0, [pc, #64]	@ (800e64c <DbgTrace_TxCpltCallback+0x64>)
 800e60c:	f000 fc87 	bl	800ef1e <CircularQueue_Sense>
 800e610:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d00c      	beq.n	800e632 <DbgTrace_TxCpltCallback+0x4a>
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	f383 8810 	msr	PRIMASK, r3
}
 800e622:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800e624:	887b      	ldrh	r3, [r7, #2]
 800e626:	4a0a      	ldr	r2, [pc, #40]	@ (800e650 <DbgTrace_TxCpltCallback+0x68>)
 800e628:	4619      	mov	r1, r3
 800e62a:	6938      	ldr	r0, [r7, #16]
 800e62c:	f7f2 f9ea 	bl	8000a04 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800e630:	e008      	b.n	800e644 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800e632:	4b08      	ldr	r3, [pc, #32]	@ (800e654 <DbgTrace_TxCpltCallback+0x6c>)
 800e634:	2201      	movs	r2, #1
 800e636:	701a      	strb	r2, [r3, #0]
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f383 8810 	msr	PRIMASK, r3
}
 800e642:	bf00      	nop
}
 800e644:	bf00      	nop
 800e646:	3718      	adds	r7, #24
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	20000554 	.word	0x20000554
 800e650:	0800e5e9 	.word	0x0800e5e9
 800e654:	2000009e 	.word	0x2000009e

0800e658 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	68b9      	ldr	r1, [r7, #8]
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f000 f805 	bl	800e678 <DbgTraceWrite>
 800e66e:	4603      	mov	r3, r0
}
 800e670:	4618      	mov	r0, r3
 800e672:	3710      	adds	r7, #16
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b08a      	sub	sp, #40	@ 0x28
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	60b9      	str	r1, [r7, #8]
 800e682:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800e684:	2300      	movs	r3, #0
 800e686:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e688:	f3ef 8310 	mrs	r3, PRIMASK
 800e68c:	61bb      	str	r3, [r7, #24]
  return(result);
 800e68e:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800e690:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e698:	d102      	bne.n	800e6a0 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800e69a:	2300      	movs	r3, #0
 800e69c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e69e:	e037      	b.n	800e710 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d006      	beq.n	800e6b4 <DbgTraceWrite+0x3c>
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2b02      	cmp	r3, #2
 800e6aa:	d003      	beq.n	800e6b4 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800e6ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e6b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6b2:	e02d      	b.n	800e710 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d02a      	beq.n	800e710 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800e6be:	b672      	cpsid	i
}
 800e6c0:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	68b9      	ldr	r1, [r7, #8]
 800e6ca:	4814      	ldr	r0, [pc, #80]	@ (800e71c <DbgTraceWrite+0xa4>)
 800e6cc:	f000 f912 	bl	800e8f4 <CircularQueue_Add>
 800e6d0:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d015      	beq.n	800e704 <DbgTraceWrite+0x8c>
 800e6d8:	4b11      	ldr	r3, [pc, #68]	@ (800e720 <DbgTraceWrite+0xa8>)
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d010      	beq.n	800e704 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800e6e2:	4b0f      	ldr	r3, [pc, #60]	@ (800e720 <DbgTraceWrite+0xa8>)
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	701a      	strb	r2, [r3, #0]
 800e6e8:	6a3b      	ldr	r3, [r7, #32]
 800e6ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	f383 8810 	msr	PRIMASK, r3
}
 800e6f2:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	b29b      	uxth	r3, r3
 800e6f8:	4a0a      	ldr	r2, [pc, #40]	@ (800e724 <DbgTraceWrite+0xac>)
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	69f8      	ldr	r0, [r7, #28]
 800e6fe:	f7f2 f981 	bl	8000a04 <DbgOutputTraces>
 800e702:	e005      	b.n	800e710 <DbgTraceWrite+0x98>
 800e704:	6a3b      	ldr	r3, [r7, #32]
 800e706:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	f383 8810 	msr	PRIMASK, r3
}
 800e70e:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800e710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e712:	4618      	mov	r0, r3
 800e714:	3728      	adds	r7, #40	@ 0x28
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	20000554 	.word	0x20000554
 800e720:	2000009e 	.word	0x2000009e
 800e724:	0800e5e9 	.word	0x0800e5e9

0800e728 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	4603      	mov	r3, r0
 800e730:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800e732:	4b0f      	ldr	r3, [pc, #60]	@ (800e770 <OTP_Read+0x48>)
 800e734:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e736:	e002      	b.n	800e73e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	3b08      	subs	r3, #8
 800e73c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	3307      	adds	r3, #7
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	79fa      	ldrb	r2, [r7, #7]
 800e746:	429a      	cmp	r2, r3
 800e748:	d003      	beq.n	800e752 <OTP_Read+0x2a>
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	4a09      	ldr	r2, [pc, #36]	@ (800e774 <OTP_Read+0x4c>)
 800e74e:	4293      	cmp	r3, r2
 800e750:	d1f2      	bne.n	800e738 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	3307      	adds	r3, #7
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	79fa      	ldrb	r2, [r7, #7]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d001      	beq.n	800e762 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800e75e:	2300      	movs	r3, #0
 800e760:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800e762:	68fb      	ldr	r3, [r7, #12]
}
 800e764:	4618      	mov	r0, r3
 800e766:	3714      	adds	r7, #20
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr
 800e770:	1fff73f8 	.word	0x1fff73f8
 800e774:	1fff7000 	.word	0x1fff7000

0800e778 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	605a      	str	r2, [r3, #4]
}
 800e78c:	bf00      	nop
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800e798:	b480      	push	{r7}
 800e79a:	b087      	sub	sp, #28
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7a0:	f3ef 8310 	mrs	r3, PRIMASK
 800e7a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e7a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e7a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e7aa:	b672      	cpsid	i
}
 800e7ac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d102      	bne.n	800e7be <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	75fb      	strb	r3, [r7, #23]
 800e7bc:	e001      	b.n	800e7c2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	75fb      	strb	r3, [r7, #23]
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	f383 8810 	msr	PRIMASK, r3
}
 800e7cc:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800e7ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	371c      	adds	r7, #28
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b087      	sub	sp, #28
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e7ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e7ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e7f0:	b672      	cpsid	i
}
 800e7f2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	683a      	ldr	r2, [r7, #0]
 800e806:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	683a      	ldr	r2, [r7, #0]
 800e80e:	605a      	str	r2, [r3, #4]
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	f383 8810 	msr	PRIMASK, r3
}
 800e81a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e81c:	bf00      	nop
 800e81e:	371c      	adds	r7, #28
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800e828:	b480      	push	{r7}
 800e82a:	b087      	sub	sp, #28
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e832:	f3ef 8310 	mrs	r3, PRIMASK
 800e836:	60fb      	str	r3, [r7, #12]
  return(result);
 800e838:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e83a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e83c:	b672      	cpsid	i
}
 800e83e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	687a      	ldr	r2, [r7, #4]
 800e844:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	685a      	ldr	r2, [r3, #4]
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	683a      	ldr	r2, [r7, #0]
 800e852:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	683a      	ldr	r2, [r7, #0]
 800e85a:	601a      	str	r2, [r3, #0]
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	f383 8810 	msr	PRIMASK, r3
}
 800e866:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e868:	bf00      	nop
 800e86a:	371c      	adds	r7, #28
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr

0800e874 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800e874:	b480      	push	{r7}
 800e876:	b087      	sub	sp, #28
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e87c:	f3ef 8310 	mrs	r3, PRIMASK
 800e880:	60fb      	str	r3, [r7, #12]
  return(result);
 800e882:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e884:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e886:	b672      	cpsid	i
}
 800e888:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	6812      	ldr	r2, [r2, #0]
 800e892:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	6852      	ldr	r2, [r2, #4]
 800e89c:	605a      	str	r2, [r3, #4]
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	f383 8810 	msr	PRIMASK, r3
}
 800e8a8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e8aa:	bf00      	nop
 800e8ac:	371c      	adds	r7, #28
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b4:	4770      	bx	lr

0800e8b6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b086      	sub	sp, #24
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	6078      	str	r0, [r7, #4]
 800e8be:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8c0:	f3ef 8310 	mrs	r3, PRIMASK
 800e8c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8c6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e8c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e8ca:	b672      	cpsid	i
}
 800e8cc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7ff ffca 	bl	800e874 <LST_remove_node>
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	f383 8810 	msr	PRIMASK, r3
}
 800e8ea:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e8ec:	bf00      	nop
 800e8ee:	3718      	adds	r7, #24
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b08e      	sub	sp, #56	@ 0x38
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	603b      	str	r3, [r7, #0]
 800e900:	4613      	mov	r3, r2
 800e902:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800e904:	2300      	movs	r3, #0
 800e906:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800e908:	2300      	movs	r3, #0
 800e90a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800e90c:	2300      	movs	r3, #0
 800e90e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800e910:	2300      	movs	r3, #0
 800e912:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e914:	2300      	movs	r3, #0
 800e916:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800e918:	2300      	movs	r3, #0
 800e91a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800e91c:	2300      	movs	r3, #0
 800e91e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	891b      	ldrh	r3, [r3, #8]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d101      	bne.n	800e92c <CircularQueue_Add+0x38>
 800e928:	2302      	movs	r3, #2
 800e92a:	e000      	b.n	800e92e <CircularQueue_Add+0x3a>
 800e92c:	2300      	movs	r3, #0
 800e92e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	695b      	ldr	r3, [r3, #20]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d029      	beq.n	800e98c <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	891b      	ldrh	r3, [r3, #8]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d122      	bne.n	800e986 <CircularQueue_Add+0x92>
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681a      	ldr	r2, [r3, #0]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	691b      	ldr	r3, [r3, #16]
 800e948:	4413      	add	r3, r2
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	4618      	mov	r0, r3
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	691b      	ldr	r3, [r3, #16]
 800e956:	1c59      	adds	r1, r3, #1
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	4299      	cmp	r1, r3
 800e95e:	d306      	bcc.n	800e96e <CircularQueue_Add+0x7a>
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	6919      	ldr	r1, [r3, #16]
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	685b      	ldr	r3, [r3, #4]
 800e968:	1acb      	subs	r3, r1, r3
 800e96a:	3301      	adds	r3, #1
 800e96c:	e002      	b.n	800e974 <CircularQueue_Add+0x80>
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	691b      	ldr	r3, [r3, #16]
 800e972:	3301      	adds	r3, #1
 800e974:	4413      	add	r3, r2
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	021b      	lsls	r3, r3, #8
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	4403      	add	r3, r0
 800e97e:	b29b      	uxth	r3, r3
 800e980:	3302      	adds	r3, #2
 800e982:	b29b      	uxth	r3, r3
 800e984:	e001      	b.n	800e98a <CircularQueue_Add+0x96>
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	891b      	ldrh	r3, [r3, #8]
 800e98a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	891b      	ldrh	r3, [r3, #8]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d002      	beq.n	800e99a <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	891b      	ldrh	r3, [r3, #8]
 800e998:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	691a      	ldr	r2, [r3, #16]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	68db      	ldr	r3, [r3, #12]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d307      	bcc.n	800e9b6 <CircularQueue_Add+0xc2>
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	685a      	ldr	r2, [r3, #4]
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	6919      	ldr	r1, [r3, #16]
 800e9ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e9b0:	440b      	add	r3, r1
 800e9b2:	1ad3      	subs	r3, r2, r3
 800e9b4:	e000      	b.n	800e9b8 <CircularQueue_Add+0xc4>
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800e9ba:	88fa      	ldrh	r2, [r7, #6]
 800e9bc:	7ffb      	ldrb	r3, [r7, #31]
 800e9be:	4413      	add	r3, r2
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	fb02 f303 	mul.w	r3, r2, r3
 800e9c8:	69ba      	ldr	r2, [r7, #24]
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d80b      	bhi.n	800e9e6 <CircularQueue_Add+0xf2>
 800e9ce:	88fa      	ldrh	r2, [r7, #6]
 800e9d0:	7ffb      	ldrb	r3, [r7, #31]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e9dc:	fb01 f202 	mul.w	r2, r1, r2
 800e9e0:	1a9b      	subs	r3, r3, r2
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	e000      	b.n	800e9e8 <CircularQueue_Add+0xf4>
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800e9ea:	7dfa      	ldrb	r2, [r7, #23]
 800e9ec:	7ffb      	ldrb	r3, [r7, #31]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	bf8c      	ite	hi
 800e9f2:	2301      	movhi	r3, #1
 800e9f4:	2300      	movls	r3, #0
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800e9fa:	7fbb      	ldrb	r3, [r7, #30]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d008      	beq.n	800ea12 <CircularQueue_Add+0x11e>
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	7f1b      	ldrb	r3, [r3, #28]
 800ea04:	f003 0301 	and.w	r3, r3, #1
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d002      	beq.n	800ea12 <CircularQueue_Add+0x11e>
 800ea0c:	7dfb      	ldrb	r3, [r7, #23]
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	e000      	b.n	800ea14 <CircularQueue_Add+0x120>
 800ea12:	8bbb      	ldrh	r3, [r7, #28]
 800ea14:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800ea16:	7fbb      	ldrb	r3, [r7, #30]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d008      	beq.n	800ea2e <CircularQueue_Add+0x13a>
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	7f1b      	ldrb	r3, [r3, #28]
 800ea20:	f003 0302 	and.w	r3, r3, #2
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d002      	beq.n	800ea2e <CircularQueue_Add+0x13a>
 800ea28:	7ffb      	ldrb	r3, [r7, #31]
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	e000      	b.n	800ea30 <CircularQueue_Add+0x13c>
 800ea2e:	8bbb      	ldrh	r3, [r7, #28]
 800ea30:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800ea32:	88fb      	ldrh	r3, [r7, #6]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f000 817e 	beq.w	800ed36 <CircularQueue_Add+0x442>
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	695a      	ldr	r2, [r3, #20]
 800ea3e:	88f9      	ldrh	r1, [r7, #6]
 800ea40:	7ffb      	ldrb	r3, [r7, #31]
 800ea42:	440b      	add	r3, r1
 800ea44:	4619      	mov	r1, r3
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	fb01 f303 	mul.w	r3, r1, r3
 800ea4c:	441a      	add	r2, r3
 800ea4e:	8bbb      	ldrh	r3, [r7, #28]
 800ea50:	441a      	add	r2, r3
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	f200 816d 	bhi.w	800ed36 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ea60:	e14a      	b.n	800ecf8 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	691a      	ldr	r2, [r3, #16]
 800ea66:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ea68:	441a      	add	r2, r3
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d307      	bcc.n	800ea82 <CircularQueue_Add+0x18e>
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	691a      	ldr	r2, [r3, #16]
 800ea76:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ea78:	441a      	add	r2, r3
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	1ad3      	subs	r3, r2, r3
 800ea80:	e003      	b.n	800ea8a <CircularQueue_Add+0x196>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	691a      	ldr	r2, [r3, #16]
 800ea86:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ea88:	4413      	add	r3, r2
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	891b      	ldrh	r3, [r3, #8]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d130      	bne.n	800eafe <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa2:	1c59      	adds	r1, r3, #1
 800eaa4:	6339      	str	r1, [r7, #48]	@ 0x30
 800eaa6:	4413      	add	r3, r2
 800eaa8:	88fa      	ldrh	r2, [r7, #6]
 800eaaa:	b2d2      	uxtb	r2, r2
 800eaac:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d304      	bcc.n	800eac2 <CircularQueue_Add+0x1ce>
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	685b      	ldr	r3, [r3, #4]
 800eabc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eabe:	1ad3      	subs	r3, r2, r3
 800eac0:	e000      	b.n	800eac4 <CircularQueue_Add+0x1d0>
 800eac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac4:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800eac6:	88fb      	ldrh	r3, [r7, #6]
 800eac8:	0a1b      	lsrs	r3, r3, #8
 800eaca:	b298      	uxth	r0, r3
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681a      	ldr	r2, [r3, #0]
 800ead0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ead2:	1c59      	adds	r1, r3, #1
 800ead4:	6339      	str	r1, [r7, #48]	@ 0x30
 800ead6:	4413      	add	r3, r2
 800ead8:	b2c2      	uxtb	r2, r0
 800eada:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d304      	bcc.n	800eaf0 <CircularQueue_Add+0x1fc>
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eaec:	1ad3      	subs	r3, r2, r3
 800eaee:	e000      	b.n	800eaf2 <CircularQueue_Add+0x1fe>
 800eaf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaf2:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	695b      	ldr	r3, [r3, #20]
 800eaf8:	1c9a      	adds	r2, r3, #2
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800eafe:	88fa      	ldrh	r2, [r7, #6]
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6859      	ldr	r1, [r3, #4]
 800eb04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb06:	1acb      	subs	r3, r1, r3
 800eb08:	4293      	cmp	r3, r2
 800eb0a:	bf28      	it	cs
 800eb0c:	4613      	movcs	r3, r2
 800eb0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800eb10:	88fb      	ldrh	r3, [r7, #6]
 800eb12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d007      	beq.n	800eb28 <CircularQueue_Add+0x234>
 800eb18:	88fb      	ldrh	r3, [r7, #6]
 800eb1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d225      	bcs.n	800eb6c <CircularQueue_Add+0x278>
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	7f1b      	ldrb	r3, [r3, #28]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d121      	bne.n	800eb6c <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb2e:	18d0      	adds	r0, r2, r3
 800eb30:	88fb      	ldrh	r3, [r7, #6]
 800eb32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb34:	fb02 f303 	mul.w	r3, r2, r3
 800eb38:	68ba      	ldr	r2, [r7, #8]
 800eb3a:	4413      	add	r3, r2
 800eb3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb3e:	4619      	mov	r1, r3
 800eb40:	f003 f99f 	bl	8011e82 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	695a      	ldr	r2, [r3, #20]
 800eb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb4a:	441a      	add	r2, r3
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800eb50:	2300      	movs	r3, #0
 800eb52:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800eb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb56:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800eb58:	88fa      	ldrh	r2, [r7, #6]
 800eb5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb5c:	1ad3      	subs	r3, r2, r3
 800eb5e:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800eb60:	7ffb      	ldrb	r3, [r7, #31]
 800eb62:	b29a      	uxth	r2, r3
 800eb64:	88fb      	ldrh	r3, [r7, #6]
 800eb66:	4413      	add	r3, r2
 800eb68:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800eb6a:	e0a4      	b.n	800ecb6 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800eb6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	f000 80a1 	beq.w	800ecb6 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	7f1b      	ldrb	r3, [r3, #28]
 800eb78:	f003 0301 	and.w	r3, r3, #1
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d03a      	beq.n	800ebf6 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	891b      	ldrh	r3, [r3, #8]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d10d      	bne.n	800eba4 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681a      	ldr	r2, [r3, #0]
 800eb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb8e:	3b02      	subs	r3, #2
 800eb90:	4413      	add	r3, r2
 800eb92:	22ff      	movs	r2, #255	@ 0xff
 800eb94:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb9c:	3b01      	subs	r3, #1
 800eb9e:	4413      	add	r3, r2
 800eba0:	22ff      	movs	r2, #255	@ 0xff
 800eba2:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	695a      	ldr	r2, [r3, #20]
 800eba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebaa:	441a      	add	r2, r3
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800ebb4:	88fb      	ldrh	r3, [r7, #6]
 800ebb6:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800ebb8:	2300      	movs	r3, #0
 800ebba:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	891b      	ldrh	r3, [r3, #8]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d16f      	bne.n	800eca4 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681a      	ldr	r2, [r3, #0]
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebca:	1c59      	adds	r1, r3, #1
 800ebcc:	6339      	str	r1, [r7, #48]	@ 0x30
 800ebce:	4413      	add	r3, r2
 800ebd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebd2:	b2d2      	uxtb	r2, r2
 800ebd4:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ebd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebd8:	0a18      	lsrs	r0, r3, #8
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebe0:	1c59      	adds	r1, r3, #1
 800ebe2:	6339      	str	r1, [r7, #48]	@ 0x30
 800ebe4:	4413      	add	r3, r2
 800ebe6:	b2c2      	uxtb	r2, r0
 800ebe8:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	695b      	ldr	r3, [r3, #20]
 800ebee:	1c9a      	adds	r2, r3, #2
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	615a      	str	r2, [r3, #20]
 800ebf4:	e056      	b.n	800eca4 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	7f1b      	ldrb	r3, [r3, #28]
 800ebfa:	f003 0302 	and.w	r3, r3, #2
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d050      	beq.n	800eca4 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	891b      	ldrh	r3, [r3, #8]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d14a      	bne.n	800eca0 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681a      	ldr	r2, [r3, #0]
 800ec0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec10:	3b02      	subs	r3, #2
 800ec12:	4413      	add	r3, r2
 800ec14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec16:	b2d2      	uxtb	r2, r2
 800ec18:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ec1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec1c:	0a19      	lsrs	r1, r3, #8
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec24:	3b01      	subs	r3, #1
 800ec26:	4413      	add	r3, r2
 800ec28:	b2ca      	uxtb	r2, r1
 800ec2a:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681a      	ldr	r2, [r3, #0]
 800ec30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec32:	18d0      	adds	r0, r2, r3
 800ec34:	88fb      	ldrh	r3, [r7, #6]
 800ec36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec38:	fb02 f303 	mul.w	r3, r2, r3
 800ec3c:	68ba      	ldr	r2, [r7, #8]
 800ec3e:	4413      	add	r3, r2
 800ec40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec42:	4619      	mov	r1, r3
 800ec44:	f003 f91d 	bl	8011e82 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	695a      	ldr	r2, [r3, #20]
 800ec4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec4e:	441a      	add	r2, r3
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800ec54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec56:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800ec58:	88fa      	ldrh	r2, [r7, #6]
 800ec5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec5c:	1ad3      	subs	r3, r2, r3
 800ec5e:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	699b      	ldr	r3, [r3, #24]
 800ec64:	1c5a      	adds	r2, r3, #1
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec74:	1c59      	adds	r1, r3, #1
 800ec76:	6339      	str	r1, [r7, #48]	@ 0x30
 800ec78:	4413      	add	r3, r2
 800ec7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec7c:	b2d2      	uxtb	r2, r2
 800ec7e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ec80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec82:	0a18      	lsrs	r0, r3, #8
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec8a:	1c59      	adds	r1, r3, #1
 800ec8c:	6339      	str	r1, [r7, #48]	@ 0x30
 800ec8e:	4413      	add	r3, r2
 800ec90:	b2c2      	uxtb	r2, r0
 800ec92:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	695b      	ldr	r3, [r3, #20]
 800ec98:	1c9a      	adds	r2, r3, #2
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	615a      	str	r2, [r3, #20]
 800ec9e:	e001      	b.n	800eca4 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800eca0:	2300      	movs	r3, #0
 800eca2:	e049      	b.n	800ed38 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800eca4:	7ffb      	ldrb	r3, [r7, #31]
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecaa:	b29b      	uxth	r3, r3
 800ecac:	4413      	add	r3, r2
 800ecae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800ecb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d015      	beq.n	800ece8 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681a      	ldr	r2, [r3, #0]
 800ecc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecc2:	18d0      	adds	r0, r2, r3
 800ecc4:	88fb      	ldrh	r3, [r7, #6]
 800ecc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecc8:	fb03 f202 	mul.w	r2, r3, r2
 800eccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecce:	4413      	add	r3, r2
 800ecd0:	68ba      	ldr	r2, [r7, #8]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	f003 f8d3 	bl	8011e82 <memcpy>
        q->byteCount += NbBytesToCopy;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	695a      	ldr	r2, [r3, #20]
 800ece0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ece2:	441a      	add	r2, r3
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	699b      	ldr	r3, [r3, #24]
 800ecec:	1c5a      	adds	r2, r3, #1
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800ecf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ecf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	f4ff aeb0 	bcc.w	800ea62 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681a      	ldr	r2, [r3, #0]
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6919      	ldr	r1, [r3, #16]
 800ed0a:	7ffb      	ldrb	r3, [r7, #31]
 800ed0c:	4419      	add	r1, r3
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	4299      	cmp	r1, r3
 800ed14:	d307      	bcc.n	800ed26 <CircularQueue_Add+0x432>
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	6919      	ldr	r1, [r3, #16]
 800ed1a:	7ffb      	ldrb	r3, [r7, #31]
 800ed1c:	4419      	add	r1, r3
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	1acb      	subs	r3, r1, r3
 800ed24:	e003      	b.n	800ed2e <CircularQueue_Add+0x43a>
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	6919      	ldr	r1, [r3, #16]
 800ed2a:	7ffb      	ldrb	r3, [r7, #31]
 800ed2c:	440b      	add	r3, r1
 800ed2e:	4413      	add	r3, r2
 800ed30:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800ed32:	6a3b      	ldr	r3, [r7, #32]
 800ed34:	e000      	b.n	800ed38 <CircularQueue_Add+0x444>
    return NULL;
 800ed36:	2300      	movs	r3, #0
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3738      	adds	r7, #56	@ 0x38
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}

0800ed40 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b085      	sub	sp, #20
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	891b      	ldrh	r3, [r3, #8]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d101      	bne.n	800ed5e <CircularQueue_Remove+0x1e>
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	e000      	b.n	800ed60 <CircularQueue_Remove+0x20>
 800ed5e:	2300      	movs	r3, #0
 800ed60:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800ed62:	2300      	movs	r3, #0
 800ed64:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	695b      	ldr	r3, [r3, #20]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f000 80ca 	beq.w	800ef04 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	891b      	ldrh	r3, [r3, #8]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d120      	bne.n	800edba <CircularQueue_Remove+0x7a>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	4413      	add	r3, r2
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	4618      	mov	r0, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	68db      	ldr	r3, [r3, #12]
 800ed8e:	1c59      	adds	r1, r3, #1
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	685b      	ldr	r3, [r3, #4]
 800ed94:	4299      	cmp	r1, r3
 800ed96:	d306      	bcc.n	800eda6 <CircularQueue_Remove+0x66>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	68d9      	ldr	r1, [r3, #12]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	1acb      	subs	r3, r1, r3
 800eda2:	3301      	adds	r3, #1
 800eda4:	e002      	b.n	800edac <CircularQueue_Remove+0x6c>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	68db      	ldr	r3, [r3, #12]
 800edaa:	3301      	adds	r3, #1
 800edac:	4413      	add	r3, r2
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	021b      	lsls	r3, r3, #8
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	4403      	add	r3, r0
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	e001      	b.n	800edbe <CircularQueue_Remove+0x7e>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	891b      	ldrh	r3, [r3, #8]
 800edbe:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	7f1b      	ldrb	r3, [r3, #28]
 800edc4:	f003 0301 	and.w	r3, r3, #1
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d056      	beq.n	800ee7a <CircularQueue_Remove+0x13a>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	7f1b      	ldrb	r3, [r3, #28]
 800edd0:	f003 0302 	and.w	r3, r3, #2
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d150      	bne.n	800ee7a <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800edd8:	897b      	ldrh	r3, [r7, #10]
 800edda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800edde:	4293      	cmp	r3, r2
 800ede0:	d103      	bne.n	800edea <CircularQueue_Remove+0xaa>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	891b      	ldrh	r3, [r3, #8]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d012      	beq.n	800ee10 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	68da      	ldr	r2, [r3, #12]
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d941      	bls.n	800ee7a <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	891b      	ldrh	r3, [r3, #8]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d03d      	beq.n	800ee7a <CircularQueue_Remove+0x13a>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	685a      	ldr	r2, [r3, #4]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	68db      	ldr	r3, [r3, #12]
 800ee06:	1ad3      	subs	r3, r2, r3
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	8912      	ldrh	r2, [r2, #8]
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d234      	bcs.n	800ee7a <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	695a      	ldr	r2, [r3, #20]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	68d9      	ldr	r1, [r3, #12]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	1acb      	subs	r3, r1, r3
 800ee1e:	441a      	add	r2, r3
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	891b      	ldrh	r3, [r3, #8]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d120      	bne.n	800ee74 <CircularQueue_Remove+0x134>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	4413      	add	r3, r2
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	4618      	mov	r0, r3
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	68db      	ldr	r3, [r3, #12]
 800ee48:	1c59      	adds	r1, r3, #1
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	4299      	cmp	r1, r3
 800ee50:	d306      	bcc.n	800ee60 <CircularQueue_Remove+0x120>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	68d9      	ldr	r1, [r3, #12]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	1acb      	subs	r3, r1, r3
 800ee5c:	3301      	adds	r3, #1
 800ee5e:	e002      	b.n	800ee66 <CircularQueue_Remove+0x126>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	3301      	adds	r3, #1
 800ee66:	4413      	add	r3, r2
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	021b      	lsls	r3, r3, #8
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	4403      	add	r3, r0
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	e001      	b.n	800ee78 <CircularQueue_Remove+0x138>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	891b      	ldrh	r3, [r3, #8]
 800ee78:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	68d9      	ldr	r1, [r3, #12]
 800ee82:	7a7b      	ldrb	r3, [r7, #9]
 800ee84:	4419      	add	r1, r3
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	4299      	cmp	r1, r3
 800ee8c:	d307      	bcc.n	800ee9e <CircularQueue_Remove+0x15e>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	68d9      	ldr	r1, [r3, #12]
 800ee92:	7a7b      	ldrb	r3, [r7, #9]
 800ee94:	4419      	add	r1, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	1acb      	subs	r3, r1, r3
 800ee9c:	e003      	b.n	800eea6 <CircularQueue_Remove+0x166>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	68d9      	ldr	r1, [r3, #12]
 800eea2:	7a7b      	ldrb	r3, [r7, #9]
 800eea4:	440b      	add	r3, r1
 800eea6:	4413      	add	r3, r2
 800eea8:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	695b      	ldr	r3, [r3, #20]
 800eeae:	8979      	ldrh	r1, [r7, #10]
 800eeb0:	7a7a      	ldrb	r2, [r7, #9]
 800eeb2:	440a      	add	r2, r1
 800eeb4:	1a9a      	subs	r2, r3, r2
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	695b      	ldr	r3, [r3, #20]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d01b      	beq.n	800eefa <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	68da      	ldr	r2, [r3, #12]
 800eec6:	897b      	ldrh	r3, [r7, #10]
 800eec8:	441a      	add	r2, r3
 800eeca:	7a7b      	ldrb	r3, [r7, #9]
 800eecc:	441a      	add	r2, r3
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d309      	bcc.n	800eeea <CircularQueue_Remove+0x1aa>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	68da      	ldr	r2, [r3, #12]
 800eeda:	897b      	ldrh	r3, [r7, #10]
 800eedc:	441a      	add	r2, r3
 800eede:	7a7b      	ldrb	r3, [r7, #9]
 800eee0:	441a      	add	r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	1ad3      	subs	r3, r2, r3
 800eee8:	e005      	b.n	800eef6 <CircularQueue_Remove+0x1b6>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	68da      	ldr	r2, [r3, #12]
 800eeee:	897b      	ldrh	r3, [r7, #10]
 800eef0:	441a      	add	r2, r3
 800eef2:	7a7b      	ldrb	r3, [r7, #9]
 800eef4:	4413      	add	r3, r2
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	699b      	ldr	r3, [r3, #24]
 800eefe:	1e5a      	subs	r2, r3, #1
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d002      	beq.n	800ef10 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	897a      	ldrh	r2, [r7, #10]
 800ef0e:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800ef10:	68fb      	ldr	r3, [r7, #12]
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3714      	adds	r7, #20
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr

0800ef1e <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800ef1e:	b480      	push	{r7}
 800ef20:	b087      	sub	sp, #28
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
 800ef26:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	891b      	ldrh	r3, [r3, #8]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d101      	bne.n	800ef3c <CircularQueue_Sense+0x1e>
 800ef38:	2302      	movs	r3, #2
 800ef3a:	e000      	b.n	800ef3e <CircularQueue_Sense+0x20>
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800ef40:	2300      	movs	r3, #0
 800ef42:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800ef44:	2300      	movs	r3, #0
 800ef46:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	695b      	ldr	r3, [r3, #20]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	f000 808e 	beq.w	800f06e <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	891b      	ldrh	r3, [r3, #8]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d120      	bne.n	800efa2 <CircularQueue_Sense+0x84>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	4413      	add	r3, r2
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	68db      	ldr	r3, [r3, #12]
 800ef76:	1c59      	adds	r1, r3, #1
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	685b      	ldr	r3, [r3, #4]
 800ef7c:	4299      	cmp	r1, r3
 800ef7e:	d306      	bcc.n	800ef8e <CircularQueue_Sense+0x70>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	68d9      	ldr	r1, [r3, #12]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	1acb      	subs	r3, r1, r3
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	e002      	b.n	800ef94 <CircularQueue_Sense+0x76>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	68db      	ldr	r3, [r3, #12]
 800ef92:	3301      	adds	r3, #1
 800ef94:	4413      	add	r3, r2
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	021b      	lsls	r3, r3, #8
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	4403      	add	r3, r0
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	e001      	b.n	800efa6 <CircularQueue_Sense+0x88>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	891b      	ldrh	r3, [r3, #8]
 800efa6:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	7f1b      	ldrb	r3, [r3, #28]
 800efac:	f003 0301 	and.w	r3, r3, #1
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d047      	beq.n	800f044 <CircularQueue_Sense+0x126>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	7f1b      	ldrb	r3, [r3, #28]
 800efb8:	f003 0302 	and.w	r3, r3, #2
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d141      	bne.n	800f044 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800efc0:	8a7b      	ldrh	r3, [r7, #18]
 800efc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d103      	bne.n	800efd2 <CircularQueue_Sense+0xb4>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	891b      	ldrh	r3, [r3, #8]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d012      	beq.n	800eff8 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	68da      	ldr	r2, [r3, #12]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800efda:	429a      	cmp	r2, r3
 800efdc:	d932      	bls.n	800f044 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	891b      	ldrh	r3, [r3, #8]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d02e      	beq.n	800f044 <CircularQueue_Sense+0x126>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	685a      	ldr	r2, [r3, #4]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	68db      	ldr	r3, [r3, #12]
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	8912      	ldrh	r2, [r2, #8]
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d225      	bcs.n	800f044 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800eff8:	2300      	movs	r3, #0
 800effa:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	891b      	ldrh	r3, [r3, #8]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d11c      	bne.n	800f03e <CircularQueue_Sense+0x120>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	4413      	add	r3, r2
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	4618      	mov	r0, r3
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681a      	ldr	r2, [r3, #0]
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	1c59      	adds	r1, r3, #1
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	4299      	cmp	r1, r3
 800f01e:	d305      	bcc.n	800f02c <CircularQueue_Sense+0x10e>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	685b      	ldr	r3, [r3, #4]
 800f024:	68f9      	ldr	r1, [r7, #12]
 800f026:	1acb      	subs	r3, r1, r3
 800f028:	3301      	adds	r3, #1
 800f02a:	e001      	b.n	800f030 <CircularQueue_Sense+0x112>
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	3301      	adds	r3, #1
 800f030:	4413      	add	r3, r2
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	021b      	lsls	r3, r3, #8
 800f036:	b29b      	uxth	r3, r3
 800f038:	4403      	add	r3, r0
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	e001      	b.n	800f042 <CircularQueue_Sense+0x124>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	891b      	ldrh	r3, [r3, #8]
 800f042:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	7af9      	ldrb	r1, [r7, #11]
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	4419      	add	r1, r3
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	4299      	cmp	r1, r3
 800f054:	d306      	bcc.n	800f064 <CircularQueue_Sense+0x146>
 800f056:	7af9      	ldrb	r1, [r7, #11]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	4419      	add	r1, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	1acb      	subs	r3, r1, r3
 800f062:	e002      	b.n	800f06a <CircularQueue_Sense+0x14c>
 800f064:	7af9      	ldrb	r1, [r7, #11]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	440b      	add	r3, r1
 800f06a:	4413      	add	r3, r2
 800f06c:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d002      	beq.n	800f07a <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	8a7a      	ldrh	r2, [r7, #18]
 800f078:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800f07a:	697b      	ldr	r3, [r7, #20]
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	371c      	adds	r7, #28
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr

0800f088 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800f088:	b480      	push	{r7}
 800f08a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800f08c:	4b03      	ldr	r3, [pc, #12]	@ (800f09c <LL_FLASH_GetUDN+0x14>)
 800f08e:	681b      	ldr	r3, [r3, #0]
}
 800f090:	4618      	mov	r0, r3
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr
 800f09a:	bf00      	nop
 800f09c:	1fff7580 	.word	0x1fff7580

0800f0a0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800f0a4:	4b03      	ldr	r3, [pc, #12]	@ (800f0b4 <LL_FLASH_GetDeviceID+0x14>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	b2db      	uxtb	r3, r3
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr
 800f0b4:	1fff7584 	.word	0x1fff7584

0800f0b8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800f0bc:	4b03      	ldr	r3, [pc, #12]	@ (800f0cc <LL_FLASH_GetSTCompanyID+0x14>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	0a1b      	lsrs	r3, r3, #8
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr
 800f0cc:	1fff7584 	.word	0x1fff7584

0800f0d0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800f0d0:	b5b0      	push	{r4, r5, r7, lr}
 800f0d2:	b090      	sub	sp, #64	@ 0x40
 800f0d4:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f0d6:	2392      	movs	r3, #146	@ 0x92
 800f0d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800f0dc:	4b45      	ldr	r3, [pc, #276]	@ (800f1f4 <APP_BLE_Init+0x124>)
 800f0de:	1d3c      	adds	r4, r7, #4
 800f0e0:	461d      	mov	r5, r3
 800f0e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f0f2:	c403      	stmia	r4!, {r0, r1}
 800f0f4:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800f0f6:	f000 fba5 	bl	800f844 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800f0fa:	2101      	movs	r1, #1
 800f0fc:	2002      	movs	r0, #2
 800f0fe:	f002 f9c5 	bl	801148c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800f102:	4a3d      	ldr	r2, [pc, #244]	@ (800f1f8 <APP_BLE_Init+0x128>)
 800f104:	2100      	movs	r1, #0
 800f106:	2002      	movs	r0, #2
 800f108:	f002 faec 	bl	80116e4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800f10c:	1d3b      	adds	r3, r7, #4
 800f10e:	4618      	mov	r0, r3
 800f110:	f7fe fc34 	bl	800d97c <SHCI_C2_BLE_Init>
 800f114:	4603      	mov	r3, r0
 800f116:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800f11a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d012      	beq.n	800f148 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800f122:	4836      	ldr	r0, [pc, #216]	@ (800f1fc <APP_BLE_Init+0x12c>)
 800f124:	f7ff fa38 	bl	800e598 <DbgTraceGetFileName>
 800f128:	4601      	mov	r1, r0
 800f12a:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 800f12e:	4a34      	ldr	r2, [pc, #208]	@ (800f200 <APP_BLE_Init+0x130>)
 800f130:	4834      	ldr	r0, [pc, #208]	@ (800f204 <APP_BLE_Init+0x134>)
 800f132:	f002 fcc5 	bl	8011ac0 <iprintf>
 800f136:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f13a:	4619      	mov	r1, r3
 800f13c:	4832      	ldr	r0, [pc, #200]	@ (800f208 <APP_BLE_Init+0x138>)
 800f13e:	f002 fcbf 	bl	8011ac0 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800f142:	f7f3 f9ed 	bl	8002520 <Error_Handler>
 800f146:	e00c      	b.n	800f162 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800f148:	482c      	ldr	r0, [pc, #176]	@ (800f1fc <APP_BLE_Init+0x12c>)
 800f14a:	f7ff fa25 	bl	800e598 <DbgTraceGetFileName>
 800f14e:	4601      	mov	r1, r0
 800f150:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 800f154:	4a2a      	ldr	r2, [pc, #168]	@ (800f200 <APP_BLE_Init+0x130>)
 800f156:	482b      	ldr	r0, [pc, #172]	@ (800f204 <APP_BLE_Init+0x134>)
 800f158:	f002 fcb2 	bl	8011ac0 <iprintf>
 800f15c:	482b      	ldr	r0, [pc, #172]	@ (800f20c <APP_BLE_Init+0x13c>)
 800f15e:	f002 fcaf 	bl	8011ac0 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800f162:	f000 fb85 	bl	800f870 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800f166:	f7fe fb63 	bl	800d830 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f16a:	4b29      	ldr	r3, [pc, #164]	@ (800f210 <APP_BLE_Init+0x140>)
 800f16c:	2200      	movs	r2, #0
 800f16e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800f172:	4b27      	ldr	r3, [pc, #156]	@ (800f210 <APP_BLE_Init+0x140>)
 800f174:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f178:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800f17a:	4a26      	ldr	r2, [pc, #152]	@ (800f214 <APP_BLE_Init+0x144>)
 800f17c:	2100      	movs	r1, #0
 800f17e:	2001      	movs	r0, #1
 800f180:	f002 fab0 	bl	80116e4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800f184:	2006      	movs	r0, #6
 800f186:	f7fe f9c7 	bl	800d518 <aci_hal_set_radio_activity_mask>
 800f18a:	4603      	mov	r3, r0
 800f18c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800f190:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f194:	2b00      	cmp	r3, #0
 800f196:	d010      	beq.n	800f1ba <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800f198:	4818      	ldr	r0, [pc, #96]	@ (800f1fc <APP_BLE_Init+0x12c>)
 800f19a:	f7ff f9fd 	bl	800e598 <DbgTraceGetFileName>
 800f19e:	4601      	mov	r1, r0
 800f1a0:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 800f1a4:	4a16      	ldr	r2, [pc, #88]	@ (800f200 <APP_BLE_Init+0x130>)
 800f1a6:	4817      	ldr	r0, [pc, #92]	@ (800f204 <APP_BLE_Init+0x134>)
 800f1a8:	f002 fc8a 	bl	8011ac0 <iprintf>
 800f1ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	4819      	ldr	r0, [pc, #100]	@ (800f218 <APP_BLE_Init+0x148>)
 800f1b4:	f002 fc84 	bl	8011ac0 <iprintf>
 800f1b8:	e00c      	b.n	800f1d4 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800f1ba:	4810      	ldr	r0, [pc, #64]	@ (800f1fc <APP_BLE_Init+0x12c>)
 800f1bc:	f7ff f9ec 	bl	800e598 <DbgTraceGetFileName>
 800f1c0:	4601      	mov	r1, r0
 800f1c2:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 800f1c6:	4a0e      	ldr	r2, [pc, #56]	@ (800f200 <APP_BLE_Init+0x130>)
 800f1c8:	480e      	ldr	r0, [pc, #56]	@ (800f204 <APP_BLE_Init+0x134>)
 800f1ca:	f002 fc79 	bl	8011ac0 <iprintf>
 800f1ce:	4813      	ldr	r0, [pc, #76]	@ (800f21c <APP_BLE_Init+0x14c>)
 800f1d0:	f002 fc76 	bl	8011ac0 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800f1d4:	f000 ff7e 	bl	80100d4 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800f1d8:	4b0d      	ldr	r3, [pc, #52]	@ (800f210 <APP_BLE_Init+0x140>)
 800f1da:	2200      	movs	r2, #0
 800f1dc:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800f1de:	4b0c      	ldr	r3, [pc, #48]	@ (800f210 <APP_BLE_Init+0x140>)
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800f1e4:	2001      	movs	r0, #1
 800f1e6:	f000 fdd7 	bl	800fd98 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800f1ea:	bf00      	nop
}
 800f1ec:	3740      	adds	r7, #64	@ 0x40
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bdb0      	pop	{r4, r5, r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	08012e08 	.word	0x08012e08
 800f1f8:	0800db99 	.word	0x0800db99
 800f1fc:	08012cfc 	.word	0x08012cfc
 800f200:	08014164 	.word	0x08014164
 800f204:	08012d18 	.word	0x08012d18
 800f208:	08012d2c 	.word	0x08012d2c
 800f20c:	08012d64 	.word	0x08012d64
 800f210:	2000057c 	.word	0x2000057c
 800f214:	0800ff1d 	.word	0x0800ff1d
 800f218:	08012d8c 	.word	0x08012d8c
 800f21c:	08012dd0 	.word	0x08012dd0

0800f220 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800f220:	b5b0      	push	{r4, r5, r7, lr}
 800f222:	b090      	sub	sp, #64	@ 0x40
 800f224:	af04      	add	r7, sp, #16
 800f226:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800f228:	2392      	movs	r3, #146	@ 0x92
 800f22a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	3301      	adds	r3, #1
 800f232:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 800f234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	2bff      	cmp	r3, #255	@ 0xff
 800f23a:	f000 8143 	beq.w	800f4c4 <SVCCTL_App_Notification+0x2a4>
 800f23e:	2bff      	cmp	r3, #255	@ 0xff
 800f240:	f300 82cd 	bgt.w	800f7de <SVCCTL_App_Notification+0x5be>
 800f244:	2b3e      	cmp	r3, #62	@ 0x3e
 800f246:	d06a      	beq.n	800f31e <SVCCTL_App_Notification+0xfe>
 800f248:	2b3e      	cmp	r3, #62	@ 0x3e
 800f24a:	f300 82c8 	bgt.w	800f7de <SVCCTL_App_Notification+0x5be>
 800f24e:	2b05      	cmp	r3, #5
 800f250:	d002      	beq.n	800f258 <SVCCTL_App_Notification+0x38>
 800f252:	2b10      	cmp	r3, #16
 800f254:	d042      	beq.n	800f2dc <SVCCTL_App_Notification+0xbc>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800f256:	e2c2      	b.n	800f7de <SVCCTL_App_Notification+0x5be>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800f258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f25a:	3302      	adds	r3, #2
 800f25c:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f264:	b29a      	uxth	r2, r3
 800f266:	4bab      	ldr	r3, [pc, #684]	@ (800f514 <SVCCTL_App_Notification+0x2f4>)
 800f268:	8adb      	ldrh	r3, [r3, #22]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d128      	bne.n	800f2c0 <SVCCTL_App_Notification+0xa0>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800f26e:	4ba9      	ldr	r3, [pc, #676]	@ (800f514 <SVCCTL_App_Notification+0x2f4>)
 800f270:	2200      	movs	r2, #0
 800f272:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f274:	4ba7      	ldr	r3, [pc, #668]	@ (800f514 <SVCCTL_App_Notification+0x2f4>)
 800f276:	2200      	movs	r2, #0
 800f278:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800f27c:	48a6      	ldr	r0, [pc, #664]	@ (800f518 <SVCCTL_App_Notification+0x2f8>)
 800f27e:	f7ff f98b 	bl	800e598 <DbgTraceGetFileName>
 800f282:	4601      	mov	r1, r0
 800f284:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 800f288:	4aa4      	ldr	r2, [pc, #656]	@ (800f51c <SVCCTL_App_Notification+0x2fc>)
 800f28a:	48a5      	ldr	r0, [pc, #660]	@ (800f520 <SVCCTL_App_Notification+0x300>)
 800f28c:	f002 fc18 	bl	8011ac0 <iprintf>
 800f290:	48a4      	ldr	r0, [pc, #656]	@ (800f524 <SVCCTL_App_Notification+0x304>)
 800f292:	f002 fc85 	bl	8011ba0 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800f296:	48a0      	ldr	r0, [pc, #640]	@ (800f518 <SVCCTL_App_Notification+0x2f8>)
 800f298:	f7ff f97e 	bl	800e598 <DbgTraceGetFileName>
 800f29c:	4601      	mov	r1, r0
 800f29e:	f240 13bb 	movw	r3, #443	@ 0x1bb
 800f2a2:	4a9e      	ldr	r2, [pc, #632]	@ (800f51c <SVCCTL_App_Notification+0x2fc>)
 800f2a4:	489e      	ldr	r0, [pc, #632]	@ (800f520 <SVCCTL_App_Notification+0x300>)
 800f2a6:	f002 fc0b 	bl	8011ac0 <iprintf>
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	4619      	mov	r1, r3
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	78db      	ldrb	r3, [r3, #3]
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	489b      	ldr	r0, [pc, #620]	@ (800f528 <SVCCTL_App_Notification+0x308>)
 800f2bc:	f002 fc00 	bl	8011ac0 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800f2c0:	2001      	movs	r0, #1
 800f2c2:	f000 fd69 	bl	800fd98 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800f2c6:	4b99      	ldr	r3, [pc, #612]	@ (800f52c <SVCCTL_App_Notification+0x30c>)
 800f2c8:	2201      	movs	r2, #1
 800f2ca:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f2cc:	4b91      	ldr	r3, [pc, #580]	@ (800f514 <SVCCTL_App_Notification+0x2f4>)
 800f2ce:	8ada      	ldrh	r2, [r3, #22]
 800f2d0:	4b96      	ldr	r3, [pc, #600]	@ (800f52c <SVCCTL_App_Notification+0x30c>)
 800f2d2:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800f2d4:	4895      	ldr	r0, [pc, #596]	@ (800f52c <SVCCTL_App_Notification+0x30c>)
 800f2d6:	f000 fee9 	bl	80100ac <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800f2da:	e283      	b.n	800f7e4 <SVCCTL_App_Notification+0x5c4>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 800f2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2de:	3302      	adds	r3, #2
 800f2e0:	60fb      	str	r3, [r7, #12]
      APP_DBG_MSG(">>== HCI_HARDWARE_ERROR_EVT_CODE\n");
 800f2e2:	488d      	ldr	r0, [pc, #564]	@ (800f518 <SVCCTL_App_Notification+0x2f8>)
 800f2e4:	f7ff f958 	bl	800e598 <DbgTraceGetFileName>
 800f2e8:	4601      	mov	r1, r0
 800f2ea:	f240 13dd 	movw	r3, #477	@ 0x1dd
 800f2ee:	4a8b      	ldr	r2, [pc, #556]	@ (800f51c <SVCCTL_App_Notification+0x2fc>)
 800f2f0:	488b      	ldr	r0, [pc, #556]	@ (800f520 <SVCCTL_App_Notification+0x300>)
 800f2f2:	f002 fbe5 	bl	8011ac0 <iprintf>
 800f2f6:	488e      	ldr	r0, [pc, #568]	@ (800f530 <SVCCTL_App_Notification+0x310>)
 800f2f8:	f002 fc52 	bl	8011ba0 <puts>
      APP_DBG_MSG("Hardware Code = 0x%02X\n",p_hardware_error_event->Hardware_Code);
 800f2fc:	4886      	ldr	r0, [pc, #536]	@ (800f518 <SVCCTL_App_Notification+0x2f8>)
 800f2fe:	f7ff f94b 	bl	800e598 <DbgTraceGetFileName>
 800f302:	4601      	mov	r1, r0
 800f304:	f44f 73ef 	mov.w	r3, #478	@ 0x1de
 800f308:	4a84      	ldr	r2, [pc, #528]	@ (800f51c <SVCCTL_App_Notification+0x2fc>)
 800f30a:	4885      	ldr	r0, [pc, #532]	@ (800f520 <SVCCTL_App_Notification+0x300>)
 800f30c:	f002 fbd8 	bl	8011ac0 <iprintf>
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	781b      	ldrb	r3, [r3, #0]
 800f314:	4619      	mov	r1, r3
 800f316:	4887      	ldr	r0, [pc, #540]	@ (800f534 <SVCCTL_App_Notification+0x314>)
 800f318:	f002 fbd2 	bl	8011ac0 <iprintf>
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 800f31c:	e262      	b.n	800f7e4 <SVCCTL_App_Notification+0x5c4>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800f31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f320:	3302      	adds	r3, #2
 800f322:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800f324:	69bb      	ldr	r3, [r7, #24]
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	2b01      	cmp	r3, #1
 800f32a:	d042      	beq.n	800f3b2 <SVCCTL_App_Notification+0x192>
 800f32c:	2b03      	cmp	r3, #3
 800f32e:	f040 80c7 	bne.w	800f4c0 <SVCCTL_App_Notification+0x2a0>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	3301      	adds	r3, #1
 800f336:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800f338:	4877      	ldr	r0, [pc, #476]	@ (800f518 <SVCCTL_App_Notification+0x2f8>)
 800f33a:	f7ff f92d 	bl	800e598 <DbgTraceGetFileName>
 800f33e:	4601      	mov	r1, r0
 800f340:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 800f344:	4a75      	ldr	r2, [pc, #468]	@ (800f51c <SVCCTL_App_Notification+0x2fc>)
 800f346:	4876      	ldr	r0, [pc, #472]	@ (800f520 <SVCCTL_App_Notification+0x300>)
 800f348:	f002 fbba 	bl	8011ac0 <iprintf>
 800f34c:	487a      	ldr	r0, [pc, #488]	@ (800f538 <SVCCTL_App_Notification+0x318>)
 800f34e:	f002 fc27 	bl	8011ba0 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800f352:	4871      	ldr	r0, [pc, #452]	@ (800f518 <SVCCTL_App_Notification+0x2f8>)
 800f354:	f7ff f920 	bl	800e598 <DbgTraceGetFileName>
 800f358:	4601      	mov	r1, r0
 800f35a:	f240 13f1 	movw	r3, #497	@ 0x1f1
 800f35e:	4a6f      	ldr	r2, [pc, #444]	@ (800f51c <SVCCTL_App_Notification+0x2fc>)
 800f360:	486f      	ldr	r0, [pc, #444]	@ (800f520 <SVCCTL_App_Notification+0x300>)
 800f362:	f002 fbad 	bl	8011ac0 <iprintf>
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	4618      	mov	r0, r3
 800f370:	f7f1 f8b0 	bl	80004d4 <__aeabi_i2d>
 800f374:	f04f 0200 	mov.w	r2, #0
 800f378:	4b70      	ldr	r3, [pc, #448]	@ (800f53c <SVCCTL_App_Notification+0x31c>)
 800f37a:	f7f1 f915 	bl	80005a8 <__aeabi_dmul>
 800f37e:	4602      	mov	r2, r0
 800f380:	460b      	mov	r3, r1
 800f382:	4610      	mov	r0, r2
 800f384:	4619      	mov	r1, r3
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	461c      	mov	r4, r3
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f396:	b29b      	uxth	r3, r3
 800f398:	461a      	mov	r2, r3
 800f39a:	4613      	mov	r3, r2
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	4413      	add	r3, r2
 800f3a0:	005b      	lsls	r3, r3, #1
 800f3a2:	9301      	str	r3, [sp, #4]
 800f3a4:	9400      	str	r4, [sp, #0]
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	4865      	ldr	r0, [pc, #404]	@ (800f540 <SVCCTL_App_Notification+0x320>)
 800f3ac:	f002 fb88 	bl	8011ac0 <iprintf>
          break;
 800f3b0:	e087      	b.n	800f4c2 <SVCCTL_App_Notification+0x2a2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800f3b2:	69bb      	ldr	r3, [r7, #24]
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800f3b8:	4857      	ldr	r0, [pc, #348]	@ (800f518 <SVCCTL_App_Notification+0x2f8>)
 800f3ba:	f7ff f8ed 	bl	800e598 <DbgTraceGetFileName>
 800f3be:	4601      	mov	r1, r0
 800f3c0:	f240 2303 	movw	r3, #515	@ 0x203
 800f3c4:	4a55      	ldr	r2, [pc, #340]	@ (800f51c <SVCCTL_App_Notification+0x2fc>)
 800f3c6:	4856      	ldr	r0, [pc, #344]	@ (800f520 <SVCCTL_App_Notification+0x300>)
 800f3c8:	f002 fb7a 	bl	8011ac0 <iprintf>
 800f3cc:	693b      	ldr	r3, [r7, #16]
 800f3ce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	485b      	ldr	r0, [pc, #364]	@ (800f544 <SVCCTL_App_Notification+0x324>)
 800f3d8:	f002 fb72 	bl	8011ac0 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800f3dc:	484e      	ldr	r0, [pc, #312]	@ (800f518 <SVCCTL_App_Notification+0x2f8>)
 800f3de:	f7ff f8db 	bl	800e598 <DbgTraceGetFileName>
 800f3e2:	4601      	mov	r1, r0
 800f3e4:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800f3e8:	4a4c      	ldr	r2, [pc, #304]	@ (800f51c <SVCCTL_App_Notification+0x2fc>)
 800f3ea:	484d      	ldr	r0, [pc, #308]	@ (800f520 <SVCCTL_App_Notification+0x300>)
 800f3ec:	f002 fb68 	bl	8011ac0 <iprintf>
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	7a9b      	ldrb	r3, [r3, #10]
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	7a5b      	ldrb	r3, [r3, #9]
 800f3fa:	461c      	mov	r4, r3
 800f3fc:	693b      	ldr	r3, [r7, #16]
 800f3fe:	7a1b      	ldrb	r3, [r3, #8]
 800f400:	461d      	mov	r5, r3
 800f402:	693b      	ldr	r3, [r7, #16]
 800f404:	79db      	ldrb	r3, [r3, #7]
 800f406:	461a      	mov	r2, r3
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	799b      	ldrb	r3, [r3, #6]
 800f40c:	4619      	mov	r1, r3
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	795b      	ldrb	r3, [r3, #5]
 800f412:	9302      	str	r3, [sp, #8]
 800f414:	9101      	str	r1, [sp, #4]
 800f416:	9200      	str	r2, [sp, #0]
 800f418:	462b      	mov	r3, r5
 800f41a:	4622      	mov	r2, r4
 800f41c:	4601      	mov	r1, r0
 800f41e:	484a      	ldr	r0, [pc, #296]	@ (800f548 <SVCCTL_App_Notification+0x328>)
 800f420:	f002 fb4e 	bl	8011ac0 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800f424:	483c      	ldr	r0, [pc, #240]	@ (800f518 <SVCCTL_App_Notification+0x2f8>)
 800f426:	f7ff f8b7 	bl	800e598 <DbgTraceGetFileName>
 800f42a:	4601      	mov	r1, r0
 800f42c:	f240 230b 	movw	r3, #523	@ 0x20b
 800f430:	4a3a      	ldr	r2, [pc, #232]	@ (800f51c <SVCCTL_App_Notification+0x2fc>)
 800f432:	483b      	ldr	r0, [pc, #236]	@ (800f520 <SVCCTL_App_Notification+0x300>)
 800f434:	f002 fb44 	bl	8011ac0 <iprintf>
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800f43e:	b29b      	uxth	r3, r3
 800f440:	4618      	mov	r0, r3
 800f442:	f7f1 f847 	bl	80004d4 <__aeabi_i2d>
 800f446:	f04f 0200 	mov.w	r2, #0
 800f44a:	4b3c      	ldr	r3, [pc, #240]	@ (800f53c <SVCCTL_App_Notification+0x31c>)
 800f44c:	f7f1 f8ac 	bl	80005a8 <__aeabi_dmul>
 800f450:	4602      	mov	r2, r0
 800f452:	460b      	mov	r3, r1
 800f454:	4610      	mov	r0, r2
 800f456:	4619      	mov	r1, r3
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800f45e:	b29b      	uxth	r3, r3
 800f460:	461c      	mov	r4, r3
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800f468:	b29b      	uxth	r3, r3
 800f46a:	461a      	mov	r2, r3
 800f46c:	4613      	mov	r3, r2
 800f46e:	009b      	lsls	r3, r3, #2
 800f470:	4413      	add	r3, r2
 800f472:	005b      	lsls	r3, r3, #1
 800f474:	9301      	str	r3, [sp, #4]
 800f476:	9400      	str	r4, [sp, #0]
 800f478:	4602      	mov	r2, r0
 800f47a:	460b      	mov	r3, r1
 800f47c:	4830      	ldr	r0, [pc, #192]	@ (800f540 <SVCCTL_App_Notification+0x320>)
 800f47e:	f002 fb1f 	bl	8011ac0 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800f482:	4b24      	ldr	r3, [pc, #144]	@ (800f514 <SVCCTL_App_Notification+0x2f4>)
 800f484:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f488:	2b04      	cmp	r3, #4
 800f48a:	d104      	bne.n	800f496 <SVCCTL_App_Notification+0x276>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800f48c:	4b21      	ldr	r3, [pc, #132]	@ (800f514 <SVCCTL_App_Notification+0x2f4>)
 800f48e:	2206      	movs	r2, #6
 800f490:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800f494:	e003      	b.n	800f49e <SVCCTL_App_Notification+0x27e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800f496:	4b1f      	ldr	r3, [pc, #124]	@ (800f514 <SVCCTL_App_Notification+0x2f4>)
 800f498:	2205      	movs	r2, #5
 800f49a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	4b1b      	ldr	r3, [pc, #108]	@ (800f514 <SVCCTL_App_Notification+0x2f4>)
 800f4a8:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800f4aa:	4b20      	ldr	r3, [pc, #128]	@ (800f52c <SVCCTL_App_Notification+0x30c>)
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f4b0:	4b18      	ldr	r3, [pc, #96]	@ (800f514 <SVCCTL_App_Notification+0x2f4>)
 800f4b2:	8ada      	ldrh	r2, [r3, #22]
 800f4b4:	4b1d      	ldr	r3, [pc, #116]	@ (800f52c <SVCCTL_App_Notification+0x30c>)
 800f4b6:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800f4b8:	481c      	ldr	r0, [pc, #112]	@ (800f52c <SVCCTL_App_Notification+0x30c>)
 800f4ba:	f000 fdf7 	bl	80100ac <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800f4be:	e000      	b.n	800f4c2 <SVCCTL_App_Notification+0x2a2>
          break;
 800f4c0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800f4c2:	e18f      	b.n	800f7e4 <SVCCTL_App_Notification+0x5c4>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800f4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4c6:	3302      	adds	r3, #2
 800f4c8:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4cc:	881b      	ldrh	r3, [r3, #0]
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800f4d4:	4293      	cmp	r3, r2
 800f4d6:	f000 814a 	beq.w	800f76e <SVCCTL_App_Notification+0x54e>
 800f4da:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	f300 817f 	bgt.w	800f7e2 <SVCCTL_App_Notification+0x5c2>
 800f4e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f4e8:	f000 8175 	beq.w	800f7d6 <SVCCTL_App_Notification+0x5b6>
 800f4ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f4f0:	f300 8177 	bgt.w	800f7e2 <SVCCTL_App_Notification+0x5c2>
 800f4f4:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	f300 8172 	bgt.w	800f7e2 <SVCCTL_App_Notification+0x5c2>
 800f4fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f502:	dc23      	bgt.n	800f54c <SVCCTL_App_Notification+0x32c>
 800f504:	2b04      	cmp	r3, #4
 800f506:	f000 8168 	beq.w	800f7da <SVCCTL_App_Notification+0x5ba>
 800f50a:	2b06      	cmp	r3, #6
 800f50c:	f000 8142 	beq.w	800f794 <SVCCTL_App_Notification+0x574>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f510:	e167      	b.n	800f7e2 <SVCCTL_App_Notification+0x5c2>
 800f512:	bf00      	nop
 800f514:	2000057c 	.word	0x2000057c
 800f518:	08012cfc 	.word	0x08012cfc
 800f51c:	08014174 	.word	0x08014174
 800f520:	08012d18 	.word	0x08012d18
 800f524:	08012e44 	.word	0x08012e44
 800f528:	08012e70 	.word	0x08012e70
 800f52c:	20000600 	.word	0x20000600
 800f530:	08012eac 	.word	0x08012eac
 800f534:	08012ed0 	.word	0x08012ed0
 800f538:	08012ee8 	.word	0x08012ee8
 800f53c:	3ff40000 	.word	0x3ff40000
 800f540:	08012f1c 	.word	0x08012f1c
 800f544:	08012f88 	.word	0x08012f88
 800f548:	08012fd0 	.word	0x08012fd0
      switch (p_blecore_evt->ecode)
 800f54c:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800f550:	2b09      	cmp	r3, #9
 800f552:	f200 8146 	bhi.w	800f7e2 <SVCCTL_App_Notification+0x5c2>
 800f556:	a201      	add	r2, pc, #4	@ (adr r2, 800f55c <SVCCTL_App_Notification+0x33c>)
 800f558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f55c:	0800f6e9 	.word	0x0800f6e9
 800f560:	0800f5bd 	.word	0x0800f5bd
 800f564:	0800f7e3 	.word	0x0800f7e3
 800f568:	0800f7e3 	.word	0x0800f7e3
 800f56c:	0800f7e3 	.word	0x0800f7e3
 800f570:	0800f7e3 	.word	0x0800f7e3
 800f574:	0800f585 	.word	0x0800f585
 800f578:	0800f7e3 	.word	0x0800f7e3
 800f57c:	0800f62f 	.word	0x0800f62f
 800f580:	0800f5a1 	.word	0x0800f5a1
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800f584:	489a      	ldr	r0, [pc, #616]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f586:	f7ff f807 	bl	800e598 <DbgTraceGetFileName>
 800f58a:	4601      	mov	r1, r0
 800f58c:	f240 234d 	movw	r3, #589	@ 0x24d
 800f590:	4a98      	ldr	r2, [pc, #608]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f592:	4899      	ldr	r0, [pc, #612]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f594:	f002 fa94 	bl	8011ac0 <iprintf>
 800f598:	4898      	ldr	r0, [pc, #608]	@ (800f7fc <SVCCTL_App_Notification+0x5dc>)
 800f59a:	f002 fa91 	bl	8011ac0 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800f59e:	e11d      	b.n	800f7dc <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800f5a0:	4893      	ldr	r0, [pc, #588]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f5a2:	f7fe fff9 	bl	800e598 <DbgTraceGetFileName>
 800f5a6:	4601      	mov	r1, r0
 800f5a8:	f240 235d 	movw	r3, #605	@ 0x25d
 800f5ac:	4a91      	ldr	r2, [pc, #580]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f5ae:	4892      	ldr	r0, [pc, #584]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f5b0:	f002 fa86 	bl	8011ac0 <iprintf>
 800f5b4:	4892      	ldr	r0, [pc, #584]	@ (800f800 <SVCCTL_App_Notification+0x5e0>)
 800f5b6:	f002 faf3 	bl	8011ba0 <puts>
          break;
 800f5ba:	e10f      	b.n	800f7dc <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800f5bc:	488c      	ldr	r0, [pc, #560]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f5be:	f7fe ffeb 	bl	800e598 <DbgTraceGetFileName>
 800f5c2:	4601      	mov	r1, r0
 800f5c4:	f44f 7319 	mov.w	r3, #612	@ 0x264
 800f5c8:	4a8a      	ldr	r2, [pc, #552]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f5ca:	488b      	ldr	r0, [pc, #556]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f5cc:	f002 fa78 	bl	8011ac0 <iprintf>
 800f5d0:	488c      	ldr	r0, [pc, #560]	@ (800f804 <SVCCTL_App_Notification+0x5e4>)
 800f5d2:	f002 fae5 	bl	8011ba0 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800f5d6:	4b8c      	ldr	r3, [pc, #560]	@ (800f808 <SVCCTL_App_Notification+0x5e8>)
 800f5d8:	8adb      	ldrh	r3, [r3, #22]
 800f5da:	498c      	ldr	r1, [pc, #560]	@ (800f80c <SVCCTL_App_Notification+0x5ec>)
 800f5dc:	4618      	mov	r0, r3
 800f5de:	f7fd f99d 	bl	800c91c <aci_gap_pass_key_resp>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800f5e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d010      	beq.n	800f612 <SVCCTL_App_Notification+0x3f2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800f5f0:	487f      	ldr	r0, [pc, #508]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f5f2:	f7fe ffd1 	bl	800e598 <DbgTraceGetFileName>
 800f5f6:	4601      	mov	r1, r0
 800f5f8:	f240 2369 	movw	r3, #617	@ 0x269
 800f5fc:	4a7d      	ldr	r2, [pc, #500]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f5fe:	487e      	ldr	r0, [pc, #504]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f600:	f002 fa5e 	bl	8011ac0 <iprintf>
 800f604:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f608:	4619      	mov	r1, r3
 800f60a:	4881      	ldr	r0, [pc, #516]	@ (800f810 <SVCCTL_App_Notification+0x5f0>)
 800f60c:	f002 fa58 	bl	8011ac0 <iprintf>
          break;
 800f610:	e0e4      	b.n	800f7dc <SVCCTL_App_Notification+0x5bc>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800f612:	4877      	ldr	r0, [pc, #476]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f614:	f7fe ffc0 	bl	800e598 <DbgTraceGetFileName>
 800f618:	4601      	mov	r1, r0
 800f61a:	f240 236d 	movw	r3, #621	@ 0x26d
 800f61e:	4a75      	ldr	r2, [pc, #468]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f620:	4875      	ldr	r0, [pc, #468]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f622:	f002 fa4d 	bl	8011ac0 <iprintf>
 800f626:	487b      	ldr	r0, [pc, #492]	@ (800f814 <SVCCTL_App_Notification+0x5f4>)
 800f628:	f002 faba 	bl	8011ba0 <puts>
          break;
 800f62c:	e0d6      	b.n	800f7dc <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800f62e:	4870      	ldr	r0, [pc, #448]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f630:	f7fe ffb2 	bl	800e598 <DbgTraceGetFileName>
 800f634:	4601      	mov	r1, r0
 800f636:	f240 2375 	movw	r3, #629	@ 0x275
 800f63a:	4a6e      	ldr	r2, [pc, #440]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f63c:	486e      	ldr	r0, [pc, #440]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f63e:	f002 fa3f 	bl	8011ac0 <iprintf>
 800f642:	4875      	ldr	r0, [pc, #468]	@ (800f818 <SVCCTL_App_Notification+0x5f8>)
 800f644:	f002 faac 	bl	8011ba0 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800f648:	4869      	ldr	r0, [pc, #420]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f64a:	f7fe ffa5 	bl	800e598 <DbgTraceGetFileName>
 800f64e:	4601      	mov	r1, r0
 800f650:	f240 2376 	movw	r3, #630	@ 0x276
 800f654:	4a67      	ldr	r2, [pc, #412]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f656:	4868      	ldr	r0, [pc, #416]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f658:	f002 fa32 	bl	8011ac0 <iprintf>
 800f65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f65e:	3302      	adds	r3, #2
 800f660:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f664:	4619      	mov	r1, r3
 800f666:	486d      	ldr	r0, [pc, #436]	@ (800f81c <SVCCTL_App_Notification+0x5fc>)
 800f668:	f002 fa2a 	bl	8011ac0 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800f66c:	4860      	ldr	r0, [pc, #384]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f66e:	f7fe ff93 	bl	800e598 <DbgTraceGetFileName>
 800f672:	4601      	mov	r1, r0
 800f674:	f44f 731e 	mov.w	r3, #632	@ 0x278
 800f678:	4a5e      	ldr	r2, [pc, #376]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f67a:	485f      	ldr	r0, [pc, #380]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f67c:	f002 fa20 	bl	8011ac0 <iprintf>
 800f680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f682:	3302      	adds	r3, #2
 800f684:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f688:	4619      	mov	r1, r3
 800f68a:	4865      	ldr	r0, [pc, #404]	@ (800f820 <SVCCTL_App_Notification+0x600>)
 800f68c:	f002 fa18 	bl	8011ac0 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800f690:	4b5d      	ldr	r3, [pc, #372]	@ (800f808 <SVCCTL_App_Notification+0x5e8>)
 800f692:	8adb      	ldrh	r3, [r3, #22]
 800f694:	2101      	movs	r1, #1
 800f696:	4618      	mov	r0, r3
 800f698:	f7fd faea 	bl	800cc70 <aci_gap_numeric_comparison_value_confirm_yesno>
 800f69c:	4603      	mov	r3, r0
 800f69e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800f6a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d010      	beq.n	800f6cc <SVCCTL_App_Notification+0x4ac>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800f6aa:	4851      	ldr	r0, [pc, #324]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f6ac:	f7fe ff74 	bl	800e598 <DbgTraceGetFileName>
 800f6b0:	4601      	mov	r1, r0
 800f6b2:	f240 237d 	movw	r3, #637	@ 0x27d
 800f6b6:	4a4f      	ldr	r2, [pc, #316]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f6b8:	484f      	ldr	r0, [pc, #316]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f6ba:	f002 fa01 	bl	8011ac0 <iprintf>
 800f6be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	4857      	ldr	r0, [pc, #348]	@ (800f824 <SVCCTL_App_Notification+0x604>)
 800f6c6:	f002 f9fb 	bl	8011ac0 <iprintf>
          break;
 800f6ca:	e087      	b.n	800f7dc <SVCCTL_App_Notification+0x5bc>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800f6cc:	4848      	ldr	r0, [pc, #288]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f6ce:	f7fe ff63 	bl	800e598 <DbgTraceGetFileName>
 800f6d2:	4601      	mov	r1, r0
 800f6d4:	f240 2381 	movw	r3, #641	@ 0x281
 800f6d8:	4a46      	ldr	r2, [pc, #280]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f6da:	4847      	ldr	r0, [pc, #284]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f6dc:	f002 f9f0 	bl	8011ac0 <iprintf>
 800f6e0:	4851      	ldr	r0, [pc, #324]	@ (800f828 <SVCCTL_App_Notification+0x608>)
 800f6e2:	f002 fa5d 	bl	8011ba0 <puts>
          break;
 800f6e6:	e079      	b.n	800f7dc <SVCCTL_App_Notification+0x5bc>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800f6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ea:	3302      	adds	r3, #2
 800f6ec:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800f6ee:	4840      	ldr	r0, [pc, #256]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f6f0:	f7fe ff52 	bl	800e598 <DbgTraceGetFileName>
 800f6f4:	4601      	mov	r1, r0
 800f6f6:	f240 238b 	movw	r3, #651	@ 0x28b
 800f6fa:	4a3e      	ldr	r2, [pc, #248]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f6fc:	483e      	ldr	r0, [pc, #248]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f6fe:	f002 f9df 	bl	8011ac0 <iprintf>
 800f702:	484a      	ldr	r0, [pc, #296]	@ (800f82c <SVCCTL_App_Notification+0x60c>)
 800f704:	f002 fa4c 	bl	8011ba0 <puts>
          if (p_pairing_complete->Status != 0)
 800f708:	6a3b      	ldr	r3, [r7, #32]
 800f70a:	789b      	ldrb	r3, [r3, #2]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d013      	beq.n	800f738 <SVCCTL_App_Notification+0x518>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800f710:	4837      	ldr	r0, [pc, #220]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f712:	f7fe ff41 	bl	800e598 <DbgTraceGetFileName>
 800f716:	4601      	mov	r1, r0
 800f718:	f240 238e 	movw	r3, #654	@ 0x28e
 800f71c:	4a35      	ldr	r2, [pc, #212]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f71e:	4836      	ldr	r0, [pc, #216]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f720:	f002 f9ce 	bl	8011ac0 <iprintf>
 800f724:	6a3b      	ldr	r3, [r7, #32]
 800f726:	789b      	ldrb	r3, [r3, #2]
 800f728:	4619      	mov	r1, r3
 800f72a:	6a3b      	ldr	r3, [r7, #32]
 800f72c:	78db      	ldrb	r3, [r3, #3]
 800f72e:	461a      	mov	r2, r3
 800f730:	483f      	ldr	r0, [pc, #252]	@ (800f830 <SVCCTL_App_Notification+0x610>)
 800f732:	f002 f9c5 	bl	8011ac0 <iprintf>
 800f736:	e00c      	b.n	800f752 <SVCCTL_App_Notification+0x532>
            APP_DBG_MSG("     - Pairing Success\n");
 800f738:	482d      	ldr	r0, [pc, #180]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f73a:	f7fe ff2d 	bl	800e598 <DbgTraceGetFileName>
 800f73e:	4601      	mov	r1, r0
 800f740:	f240 2392 	movw	r3, #658	@ 0x292
 800f744:	4a2b      	ldr	r2, [pc, #172]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f746:	482c      	ldr	r0, [pc, #176]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f748:	f002 f9ba 	bl	8011ac0 <iprintf>
 800f74c:	4839      	ldr	r0, [pc, #228]	@ (800f834 <SVCCTL_App_Notification+0x614>)
 800f74e:	f002 fa27 	bl	8011ba0 <puts>
          APP_DBG_MSG("\n");
 800f752:	4827      	ldr	r0, [pc, #156]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f754:	f7fe ff20 	bl	800e598 <DbgTraceGetFileName>
 800f758:	4601      	mov	r1, r0
 800f75a:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800f75e:	4a25      	ldr	r2, [pc, #148]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f760:	4825      	ldr	r0, [pc, #148]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f762:	f002 f9ad 	bl	8011ac0 <iprintf>
 800f766:	200a      	movs	r0, #10
 800f768:	f002 f9bc 	bl	8011ae4 <putchar>
          break;
 800f76c:	e036      	b.n	800f7dc <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800f76e:	4820      	ldr	r0, [pc, #128]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f770:	f7fe ff12 	bl	800e598 <DbgTraceGetFileName>
 800f774:	4601      	mov	r1, r0
 800f776:	f240 239d 	movw	r3, #669	@ 0x29d
 800f77a:	4a1e      	ldr	r2, [pc, #120]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f77c:	481e      	ldr	r0, [pc, #120]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f77e:	f002 f99f 	bl	8011ac0 <iprintf>
 800f782:	482d      	ldr	r0, [pc, #180]	@ (800f838 <SVCCTL_App_Notification+0x618>)
 800f784:	f002 f99c 	bl	8011ac0 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800f788:	4b1f      	ldr	r3, [pc, #124]	@ (800f808 <SVCCTL_App_Notification+0x5e8>)
 800f78a:	8adb      	ldrh	r3, [r3, #22]
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7fd fd82 	bl	800d296 <aci_gatt_confirm_indication>
        break;
 800f792:	e023      	b.n	800f7dc <SVCCTL_App_Notification+0x5bc>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 800f794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f796:	3302      	adds	r3, #2
 800f798:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG(">>== ACI_HAL_WARNING_VSEVT_CODE\n");
 800f79a:	4815      	ldr	r0, [pc, #84]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f79c:	f7fe fefc 	bl	800e598 <DbgTraceGetFileName>
 800f7a0:	4601      	mov	r1, r0
 800f7a2:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 800f7a6:	4a13      	ldr	r2, [pc, #76]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f7a8:	4813      	ldr	r0, [pc, #76]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f7aa:	f002 f989 	bl	8011ac0 <iprintf>
 800f7ae:	4823      	ldr	r0, [pc, #140]	@ (800f83c <SVCCTL_App_Notification+0x61c>)
 800f7b0:	f002 f9f6 	bl	8011ba0 <puts>
          APP_DBG_MSG("Warning Type = 0x%02X\n", p_warning_event->Warning_Type);
 800f7b4:	480e      	ldr	r0, [pc, #56]	@ (800f7f0 <SVCCTL_App_Notification+0x5d0>)
 800f7b6:	f7fe feef 	bl	800e598 <DbgTraceGetFileName>
 800f7ba:	4601      	mov	r1, r0
 800f7bc:	f240 23a9 	movw	r3, #681	@ 0x2a9
 800f7c0:	4a0c      	ldr	r2, [pc, #48]	@ (800f7f4 <SVCCTL_App_Notification+0x5d4>)
 800f7c2:	480d      	ldr	r0, [pc, #52]	@ (800f7f8 <SVCCTL_App_Notification+0x5d8>)
 800f7c4:	f002 f97c 	bl	8011ac0 <iprintf>
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	481c      	ldr	r0, [pc, #112]	@ (800f840 <SVCCTL_App_Notification+0x620>)
 800f7d0:	f002 f976 	bl	8011ac0 <iprintf>
          break;
 800f7d4:	e002      	b.n	800f7dc <SVCCTL_App_Notification+0x5bc>
          break;
 800f7d6:	bf00      	nop
 800f7d8:	e003      	b.n	800f7e2 <SVCCTL_App_Notification+0x5c2>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800f7da:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f7dc:	e001      	b.n	800f7e2 <SVCCTL_App_Notification+0x5c2>
      break;
 800f7de:	bf00      	nop
 800f7e0:	e000      	b.n	800f7e4 <SVCCTL_App_Notification+0x5c4>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f7e2:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800f7e4:	2301      	movs	r3, #1
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3730      	adds	r7, #48	@ 0x30
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bdb0      	pop	{r4, r5, r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	08012cfc 	.word	0x08012cfc
 800f7f4:	08014174 	.word	0x08014174
 800f7f8:	08012d18 	.word	0x08012d18
 800f7fc:	08013020 	.word	0x08013020
 800f800:	08013048 	.word	0x08013048
 800f804:	08013078 	.word	0x08013078
 800f808:	2000057c 	.word	0x2000057c
 800f80c:	0001b207 	.word	0x0001b207
 800f810:	080130a0 	.word	0x080130a0
 800f814:	080130d4 	.word	0x080130d4
 800f818:	080130fc 	.word	0x080130fc
 800f81c:	08013130 	.word	0x08013130
 800f820:	0801314c 	.word	0x0801314c
 800f824:	08013164 	.word	0x08013164
 800f828:	080131b4 	.word	0x080131b4
 800f82c:	080131fc 	.word	0x080131fc
 800f830:	08013228 	.word	0x08013228
 800f834:	08013264 	.word	0x08013264
 800f838:	0801327c 	.word	0x0801327c
 800f83c:	080132a4 	.word	0x080132a4
 800f840:	080132c4 	.word	0x080132c4

0800f844 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800f84a:	4b06      	ldr	r3, [pc, #24]	@ (800f864 <Ble_Tl_Init+0x20>)
 800f84c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800f84e:	4b06      	ldr	r3, [pc, #24]	@ (800f868 <Ble_Tl_Init+0x24>)
 800f850:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800f852:	463b      	mov	r3, r7
 800f854:	4619      	mov	r1, r3
 800f856:	4805      	ldr	r0, [pc, #20]	@ (800f86c <Ble_Tl_Init+0x28>)
 800f858:	f7fe f982 	bl	800db60 <hci_init>

  return;
 800f85c:	bf00      	nop
}
 800f85e:	3708      	adds	r7, #8
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	200300d8 	.word	0x200300d8
 800f868:	08010039 	.word	0x08010039
 800f86c:	08010001 	.word	0x08010001

0800f870 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800f870:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f872:	b08d      	sub	sp, #52	@ 0x34
 800f874:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800f876:	2300      	movs	r3, #0
 800f878:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f87a:	2392      	movs	r3, #146	@ 0x92
 800f87c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800f87e:	48a3      	ldr	r0, [pc, #652]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f880:	f7fe fe8a 	bl	800e598 <DbgTraceGetFileName>
 800f884:	4601      	mov	r1, r0
 800f886:	f240 23e7 	movw	r3, #743	@ 0x2e7
 800f88a:	4aa1      	ldr	r2, [pc, #644]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f88c:	48a1      	ldr	r0, [pc, #644]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f88e:	f002 f917 	bl	8011ac0 <iprintf>
 800f892:	48a1      	ldr	r0, [pc, #644]	@ (800fb18 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800f894:	f002 f984 	bl	8011ba0 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800f898:	f7fd fe92 	bl	800d5c0 <hci_reset>
 800f89c:	4603      	mov	r3, r0
 800f89e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f8a0:	7dfb      	ldrb	r3, [r7, #23]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d00f      	beq.n	800f8c6 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800f8a6:	4899      	ldr	r0, [pc, #612]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f8a8:	f7fe fe76 	bl	800e598 <DbgTraceGetFileName>
 800f8ac:	4601      	mov	r1, r0
 800f8ae:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 800f8b2:	4a97      	ldr	r2, [pc, #604]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f8b4:	4897      	ldr	r0, [pc, #604]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f8b6:	f002 f903 	bl	8011ac0 <iprintf>
 800f8ba:	7dfb      	ldrb	r3, [r7, #23]
 800f8bc:	4619      	mov	r1, r3
 800f8be:	4897      	ldr	r0, [pc, #604]	@ (800fb1c <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800f8c0:	f002 f8fe 	bl	8011ac0 <iprintf>
 800f8c4:	e00c      	b.n	800f8e0 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800f8c6:	4891      	ldr	r0, [pc, #580]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f8c8:	f7fe fe66 	bl	800e598 <DbgTraceGetFileName>
 800f8cc:	4601      	mov	r1, r0
 800f8ce:	f44f 733d 	mov.w	r3, #756	@ 0x2f4
 800f8d2:	4a8f      	ldr	r2, [pc, #572]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f8d4:	488f      	ldr	r0, [pc, #572]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f8d6:	f002 f8f3 	bl	8011ac0 <iprintf>
 800f8da:	4891      	ldr	r0, [pc, #580]	@ (800fb20 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800f8dc:	f002 f960 	bl	8011ba0 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800f8e0:	f000 fad8 	bl	800fe94 <BleGetBdAddress>
 800f8e4:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 800f8e6:	693a      	ldr	r2, [r7, #16]
 800f8e8:	2106      	movs	r1, #6
 800f8ea:	2000      	movs	r0, #0
 800f8ec:	f7fd fd28 	bl	800d340 <aci_hal_write_config_data>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f8f4:	7dfb      	ldrb	r3, [r7, #23]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d00f      	beq.n	800f91a <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, result: 0x%x \n", ret);
 800f8fa:	4884      	ldr	r0, [pc, #528]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f8fc:	f7fe fe4c 	bl	800e598 <DbgTraceGetFileName>
 800f900:	4601      	mov	r1, r0
 800f902:	f240 23fe 	movw	r3, #766	@ 0x2fe
 800f906:	4a82      	ldr	r2, [pc, #520]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f908:	4882      	ldr	r0, [pc, #520]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f90a:	f002 f8d9 	bl	8011ac0 <iprintf>
 800f90e:	7dfb      	ldrb	r3, [r7, #23]
 800f910:	4619      	mov	r1, r3
 800f912:	4884      	ldr	r0, [pc, #528]	@ (800fb24 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800f914:	f002 f8d4 	bl	8011ac0 <iprintf>
 800f918:	e035      	b.n	800f986 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBLIC_ADDRESS_OFFSET\n");
 800f91a:	487c      	ldr	r0, [pc, #496]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f91c:	f7fe fe3c 	bl	800e598 <DbgTraceGetFileName>
 800f920:	4601      	mov	r1, r0
 800f922:	f240 3302 	movw	r3, #770	@ 0x302
 800f926:	4a7a      	ldr	r2, [pc, #488]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f928:	487a      	ldr	r0, [pc, #488]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f92a:	f002 f8c9 	bl	8011ac0 <iprintf>
 800f92e:	487e      	ldr	r0, [pc, #504]	@ (800fb28 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800f930:	f002 f936 	bl	8011ba0 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800f934:	4875      	ldr	r0, [pc, #468]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f936:	f7fe fe2f 	bl	800e598 <DbgTraceGetFileName>
 800f93a:	4601      	mov	r1, r0
 800f93c:	f240 3303 	movw	r3, #771	@ 0x303
 800f940:	4a73      	ldr	r2, [pc, #460]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f942:	4874      	ldr	r0, [pc, #464]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f944:	f002 f8bc 	bl	8011ac0 <iprintf>
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	3305      	adds	r3, #5
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	4618      	mov	r0, r3
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	3304      	adds	r3, #4
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	461c      	mov	r4, r3
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	3303      	adds	r3, #3
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	461d      	mov	r5, r3
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	3302      	adds	r3, #2
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	461a      	mov	r2, r3
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	3301      	adds	r3, #1
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	4619      	mov	r1, r3
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	9302      	str	r3, [sp, #8]
 800f976:	9101      	str	r1, [sp, #4]
 800f978:	9200      	str	r2, [sp, #0]
 800f97a:	462b      	mov	r3, r5
 800f97c:	4622      	mov	r2, r4
 800f97e:	4601      	mov	r1, r0
 800f980:	486a      	ldr	r0, [pc, #424]	@ (800fb2c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800f982:	f002 f89d 	bl	8011ac0 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800f986:	4a6a      	ldr	r2, [pc, #424]	@ (800fb30 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800f988:	2110      	movs	r1, #16
 800f98a:	2018      	movs	r0, #24
 800f98c:	f7fd fcd8 	bl	800d340 <aci_hal_write_config_data>
 800f990:	4603      	mov	r3, r0
 800f992:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f994:	7dfb      	ldrb	r3, [r7, #23]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d00f      	beq.n	800f9ba <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800f99a:	485c      	ldr	r0, [pc, #368]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f99c:	f7fe fdfc 	bl	800e598 <DbgTraceGetFileName>
 800f9a0:	4601      	mov	r1, r0
 800f9a2:	f240 3325 	movw	r3, #805	@ 0x325
 800f9a6:	4a5a      	ldr	r2, [pc, #360]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f9a8:	485a      	ldr	r0, [pc, #360]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f9aa:	f002 f889 	bl	8011ac0 <iprintf>
 800f9ae:	7dfb      	ldrb	r3, [r7, #23]
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	4860      	ldr	r0, [pc, #384]	@ (800fb34 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800f9b4:	f002 f884 	bl	8011ac0 <iprintf>
 800f9b8:	e00c      	b.n	800f9d4 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800f9ba:	4854      	ldr	r0, [pc, #336]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f9bc:	f7fe fdec 	bl	800e598 <DbgTraceGetFileName>
 800f9c0:	4601      	mov	r1, r0
 800f9c2:	f240 3329 	movw	r3, #809	@ 0x329
 800f9c6:	4a52      	ldr	r2, [pc, #328]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f9c8:	4852      	ldr	r0, [pc, #328]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f9ca:	f002 f879 	bl	8011ac0 <iprintf>
 800f9ce:	485a      	ldr	r0, [pc, #360]	@ (800fb38 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800f9d0:	f002 f8e6 	bl	8011ba0 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800f9d4:	4a59      	ldr	r2, [pc, #356]	@ (800fb3c <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800f9d6:	2110      	movs	r1, #16
 800f9d8:	2008      	movs	r0, #8
 800f9da:	f7fd fcb1 	bl	800d340 <aci_hal_write_config_data>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f9e2:	7dfb      	ldrb	r3, [r7, #23]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d00f      	beq.n	800fa08 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800f9e8:	4848      	ldr	r0, [pc, #288]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f9ea:	f7fe fdd5 	bl	800e598 <DbgTraceGetFileName>
 800f9ee:	4601      	mov	r1, r0
 800f9f0:	f240 3332 	movw	r3, #818	@ 0x332
 800f9f4:	4a46      	ldr	r2, [pc, #280]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f9f6:	4847      	ldr	r0, [pc, #284]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f9f8:	f002 f862 	bl	8011ac0 <iprintf>
 800f9fc:	7dfb      	ldrb	r3, [r7, #23]
 800f9fe:	4619      	mov	r1, r3
 800fa00:	484f      	ldr	r0, [pc, #316]	@ (800fb40 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800fa02:	f002 f85d 	bl	8011ac0 <iprintf>
 800fa06:	e00c      	b.n	800fa22 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800fa08:	4840      	ldr	r0, [pc, #256]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800fa0a:	f7fe fdc5 	bl	800e598 <DbgTraceGetFileName>
 800fa0e:	4601      	mov	r1, r0
 800fa10:	f240 3336 	movw	r3, #822	@ 0x336
 800fa14:	4a3e      	ldr	r2, [pc, #248]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800fa16:	483f      	ldr	r0, [pc, #252]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800fa18:	f002 f852 	bl	8011ac0 <iprintf>
 800fa1c:	4849      	ldr	r0, [pc, #292]	@ (800fb44 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800fa1e:	f002 f8bf 	bl	8011ba0 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800fa22:	2118      	movs	r1, #24
 800fa24:	2001      	movs	r0, #1
 800fa26:	f7fd fd10 	bl	800d44a <aci_hal_set_tx_power_level>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800fa2e:	7dfb      	ldrb	r3, [r7, #23]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d00f      	beq.n	800fa54 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800fa34:	4835      	ldr	r0, [pc, #212]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800fa36:	f7fe fdaf 	bl	800e598 <DbgTraceGetFileName>
 800fa3a:	4601      	mov	r1, r0
 800fa3c:	f240 333f 	movw	r3, #831	@ 0x33f
 800fa40:	4a33      	ldr	r2, [pc, #204]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800fa42:	4834      	ldr	r0, [pc, #208]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800fa44:	f002 f83c 	bl	8011ac0 <iprintf>
 800fa48:	7dfb      	ldrb	r3, [r7, #23]
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	483e      	ldr	r0, [pc, #248]	@ (800fb48 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800fa4e:	f002 f837 	bl	8011ac0 <iprintf>
 800fa52:	e00c      	b.n	800fa6e <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800fa54:	482d      	ldr	r0, [pc, #180]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800fa56:	f7fe fd9f 	bl	800e598 <DbgTraceGetFileName>
 800fa5a:	4601      	mov	r1, r0
 800fa5c:	f240 3343 	movw	r3, #835	@ 0x343
 800fa60:	4a2b      	ldr	r2, [pc, #172]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800fa62:	482c      	ldr	r0, [pc, #176]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800fa64:	f002 f82c 	bl	8011ac0 <iprintf>
 800fa68:	4838      	ldr	r0, [pc, #224]	@ (800fb4c <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800fa6a:	f002 f899 	bl	8011ba0 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800fa6e:	f7fd f966 	bl	800cd3e <aci_gatt_init>
 800fa72:	4603      	mov	r3, r0
 800fa74:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800fa76:	7dfb      	ldrb	r3, [r7, #23]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d00f      	beq.n	800fa9c <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800fa7c:	4823      	ldr	r0, [pc, #140]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800fa7e:	f7fe fd8b 	bl	800e598 <DbgTraceGetFileName>
 800fa82:	4601      	mov	r1, r0
 800fa84:	f44f 7353 	mov.w	r3, #844	@ 0x34c
 800fa88:	4a21      	ldr	r2, [pc, #132]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800fa8a:	4822      	ldr	r0, [pc, #136]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800fa8c:	f002 f818 	bl	8011ac0 <iprintf>
 800fa90:	7dfb      	ldrb	r3, [r7, #23]
 800fa92:	4619      	mov	r1, r3
 800fa94:	482e      	ldr	r0, [pc, #184]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800fa96:	f002 f813 	bl	8011ac0 <iprintf>
 800fa9a:	e00c      	b.n	800fab6 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800fa9c:	481b      	ldr	r0, [pc, #108]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800fa9e:	f7fe fd7b 	bl	800e598 <DbgTraceGetFileName>
 800faa2:	4601      	mov	r1, r0
 800faa4:	f44f 7354 	mov.w	r3, #848	@ 0x350
 800faa8:	4a19      	ldr	r2, [pc, #100]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800faaa:	481a      	ldr	r0, [pc, #104]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800faac:	f002 f808 	bl	8011ac0 <iprintf>
 800fab0:	4828      	ldr	r0, [pc, #160]	@ (800fb54 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800fab2:	f002 f875 	bl	8011ba0 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800fab6:	2300      	movs	r3, #0
 800fab8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800faba:	7bfb      	ldrb	r3, [r7, #15]
 800fabc:	f043 0301 	orr.w	r3, r3, #1
 800fac0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800fac2:	7bfb      	ldrb	r3, [r7, #15]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d069      	beq.n	800fb9c <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800fac8:	4b23      	ldr	r3, [pc, #140]	@ (800fb58 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800faca:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800facc:	1dba      	adds	r2, r7, #6
 800face:	7bf8      	ldrb	r0, [r7, #15]
 800fad0:	1cbb      	adds	r3, r7, #2
 800fad2:	9301      	str	r3, [sp, #4]
 800fad4:	1d3b      	adds	r3, r7, #4
 800fad6:	9300      	str	r3, [sp, #0]
 800fad8:	4613      	mov	r3, r2
 800fada:	2208      	movs	r2, #8
 800fadc:	2100      	movs	r1, #0
 800fade:	f7fc ff84 	bl	800c9ea <aci_gap_init>
 800fae2:	4603      	mov	r3, r0
 800fae4:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800fae6:	7dfb      	ldrb	r3, [r7, #23]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d039      	beq.n	800fb60 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800faec:	4807      	ldr	r0, [pc, #28]	@ (800fb0c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800faee:	f7fe fd53 	bl	800e598 <DbgTraceGetFileName>
 800faf2:	4601      	mov	r1, r0
 800faf4:	f44f 735c 	mov.w	r3, #880	@ 0x370
 800faf8:	4a05      	ldr	r2, [pc, #20]	@ (800fb10 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800fafa:	4806      	ldr	r0, [pc, #24]	@ (800fb14 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800fafc:	f001 ffe0 	bl	8011ac0 <iprintf>
 800fb00:	7dfb      	ldrb	r3, [r7, #23]
 800fb02:	4619      	mov	r1, r3
 800fb04:	4815      	ldr	r0, [pc, #84]	@ (800fb5c <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800fb06:	f001 ffdb 	bl	8011ac0 <iprintf>
 800fb0a:	e036      	b.n	800fb7a <Ble_Hci_Gap_Gatt_Init+0x30a>
 800fb0c:	08012cfc 	.word	0x08012cfc
 800fb10:	0801418c 	.word	0x0801418c
 800fb14:	08012d18 	.word	0x08012d18
 800fb18:	080132dc 	.word	0x080132dc
 800fb1c:	08013308 	.word	0x08013308
 800fb20:	08013338 	.word	0x08013338
 800fb24:	08013358 	.word	0x08013358
 800fb28:	080133bc 	.word	0x080133bc
 800fb2c:	08013410 	.word	0x08013410
 800fb30:	08014144 	.word	0x08014144
 800fb34:	0801344c 	.word	0x0801344c
 800fb38:	080134a4 	.word	0x080134a4
 800fb3c:	08014154 	.word	0x08014154
 800fb40:	080134ec 	.word	0x080134ec
 800fb44:	08013544 	.word	0x08013544
 800fb48:	0801358c 	.word	0x0801358c
 800fb4c:	080135cc 	.word	0x080135cc
 800fb50:	080135fc 	.word	0x080135fc
 800fb54:	08013630 	.word	0x08013630
 800fb58:	08013654 	.word	0x08013654
 800fb5c:	08013660 	.word	0x08013660
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800fb60:	487e      	ldr	r0, [pc, #504]	@ (800fd5c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fb62:	f7fe fd19 	bl	800e598 <DbgTraceGetFileName>
 800fb66:	4601      	mov	r1, r0
 800fb68:	f44f 735d 	mov.w	r3, #884	@ 0x374
 800fb6c:	4a7c      	ldr	r2, [pc, #496]	@ (800fd60 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fb6e:	487d      	ldr	r0, [pc, #500]	@ (800fd64 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fb70:	f001 ffa6 	bl	8011ac0 <iprintf>
 800fb74:	487c      	ldr	r0, [pc, #496]	@ (800fd68 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800fb76:	f002 f813 	bl	8011ba0 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800fb7a:	88fc      	ldrh	r4, [r7, #6]
 800fb7c:	88bd      	ldrh	r5, [r7, #4]
 800fb7e:	68b8      	ldr	r0, [r7, #8]
 800fb80:	f7f0 fafe 	bl	8000180 <strlen>
 800fb84:	4603      	mov	r3, r0
 800fb86:	b2da      	uxtb	r2, r3
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	9300      	str	r3, [sp, #0]
 800fb8c:	4613      	mov	r3, r2
 800fb8e:	2200      	movs	r2, #0
 800fb90:	4629      	mov	r1, r5
 800fb92:	4620      	mov	r0, r4
 800fb94:	f7fd fad6 	bl	800d144 <aci_gatt_update_char_value>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800fb9c:	88f8      	ldrh	r0, [r7, #6]
 800fb9e:	8879      	ldrh	r1, [r7, #2]
 800fba0:	463b      	mov	r3, r7
 800fba2:	9300      	str	r3, [sp, #0]
 800fba4:	2302      	movs	r3, #2
 800fba6:	2200      	movs	r2, #0
 800fba8:	f7fd facc 	bl	800d144 <aci_gatt_update_char_value>
 800fbac:	4603      	mov	r3, r0
 800fbae:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800fbb0:	2202      	movs	r2, #2
 800fbb2:	2102      	movs	r1, #2
 800fbb4:	2000      	movs	r0, #0
 800fbb6:	f7fd fd27 	bl	800d608 <hci_le_set_default_phy>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800fbbe:	7dfb      	ldrb	r3, [r7, #23]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d00f      	beq.n	800fbe4 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800fbc4:	4865      	ldr	r0, [pc, #404]	@ (800fd5c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fbc6:	f7fe fce7 	bl	800e598 <DbgTraceGetFileName>
 800fbca:	4601      	mov	r1, r0
 800fbcc:	f240 3396 	movw	r3, #918	@ 0x396
 800fbd0:	4a63      	ldr	r2, [pc, #396]	@ (800fd60 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fbd2:	4864      	ldr	r0, [pc, #400]	@ (800fd64 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fbd4:	f001 ff74 	bl	8011ac0 <iprintf>
 800fbd8:	7dfb      	ldrb	r3, [r7, #23]
 800fbda:	4619      	mov	r1, r3
 800fbdc:	4863      	ldr	r0, [pc, #396]	@ (800fd6c <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800fbde:	f001 ff6f 	bl	8011ac0 <iprintf>
 800fbe2:	e00c      	b.n	800fbfe <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800fbe4:	485d      	ldr	r0, [pc, #372]	@ (800fd5c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fbe6:	f7fe fcd7 	bl	800e598 <DbgTraceGetFileName>
 800fbea:	4601      	mov	r1, r0
 800fbec:	f240 339a 	movw	r3, #922	@ 0x39a
 800fbf0:	4a5b      	ldr	r2, [pc, #364]	@ (800fd60 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fbf2:	485c      	ldr	r0, [pc, #368]	@ (800fd64 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fbf4:	f001 ff64 	bl	8011ac0 <iprintf>
 800fbf8:	485d      	ldr	r0, [pc, #372]	@ (800fd70 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800fbfa:	f001 ffd1 	bl	8011ba0 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800fbfe:	4b5d      	ldr	r3, [pc, #372]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc00:	2201      	movs	r2, #1
 800fc02:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800fc04:	4b5b      	ldr	r3, [pc, #364]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc06:	781b      	ldrb	r3, [r3, #0]
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7fc fd6f 	bl	800c6ec <aci_gap_set_io_capability>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800fc12:	7dfb      	ldrb	r3, [r7, #23]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d00f      	beq.n	800fc38 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800fc18:	4850      	ldr	r0, [pc, #320]	@ (800fd5c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fc1a:	f7fe fcbd 	bl	800e598 <DbgTraceGetFileName>
 800fc1e:	4601      	mov	r1, r0
 800fc20:	f44f 7369 	mov.w	r3, #932	@ 0x3a4
 800fc24:	4a4e      	ldr	r2, [pc, #312]	@ (800fd60 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fc26:	484f      	ldr	r0, [pc, #316]	@ (800fd64 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fc28:	f001 ff4a 	bl	8011ac0 <iprintf>
 800fc2c:	7dfb      	ldrb	r3, [r7, #23]
 800fc2e:	4619      	mov	r1, r3
 800fc30:	4851      	ldr	r0, [pc, #324]	@ (800fd78 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800fc32:	f001 ff45 	bl	8011ac0 <iprintf>
 800fc36:	e00c      	b.n	800fc52 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800fc38:	4848      	ldr	r0, [pc, #288]	@ (800fd5c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fc3a:	f7fe fcad 	bl	800e598 <DbgTraceGetFileName>
 800fc3e:	4601      	mov	r1, r0
 800fc40:	f44f 736a 	mov.w	r3, #936	@ 0x3a8
 800fc44:	4a46      	ldr	r2, [pc, #280]	@ (800fd60 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fc46:	4847      	ldr	r0, [pc, #284]	@ (800fd64 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fc48:	f001 ff3a 	bl	8011ac0 <iprintf>
 800fc4c:	484b      	ldr	r0, [pc, #300]	@ (800fd7c <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800fc4e:	f001 ffa7 	bl	8011ba0 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800fc52:	4b48      	ldr	r3, [pc, #288]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc54:	2201      	movs	r2, #1
 800fc56:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800fc58:	4b46      	ldr	r3, [pc, #280]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc5a:	2208      	movs	r2, #8
 800fc5c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800fc5e:	4b45      	ldr	r3, [pc, #276]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc60:	2210      	movs	r2, #16
 800fc62:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800fc64:	4b43      	ldr	r3, [pc, #268]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc66:	2200      	movs	r2, #0
 800fc68:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800fc6a:	4b42      	ldr	r3, [pc, #264]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc6c:	4a44      	ldr	r2, [pc, #272]	@ (800fd80 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800fc6e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800fc70:	4b40      	ldr	r3, [pc, #256]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc72:	2200      	movs	r2, #0
 800fc74:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800fc76:	4b3f      	ldr	r3, [pc, #252]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc78:	789c      	ldrb	r4, [r3, #2]
 800fc7a:	4b3e      	ldr	r3, [pc, #248]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc7c:	785d      	ldrb	r5, [r3, #1]
 800fc7e:	4b3d      	ldr	r3, [pc, #244]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc80:	791b      	ldrb	r3, [r3, #4]
 800fc82:	4a3c      	ldr	r2, [pc, #240]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc84:	7952      	ldrb	r2, [r2, #5]
 800fc86:	493b      	ldr	r1, [pc, #236]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc88:	78c9      	ldrb	r1, [r1, #3]
 800fc8a:	483a      	ldr	r0, [pc, #232]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc8c:	6880      	ldr	r0, [r0, #8]
 800fc8e:	2600      	movs	r6, #0
 800fc90:	9604      	str	r6, [sp, #16]
 800fc92:	9003      	str	r0, [sp, #12]
 800fc94:	9102      	str	r1, [sp, #8]
 800fc96:	9201      	str	r2, [sp, #4]
 800fc98:	9300      	str	r3, [sp, #0]
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	4629      	mov	r1, r5
 800fca0:	4620      	mov	r0, r4
 800fca2:	f7fc fd77 	bl	800c794 <aci_gap_set_authentication_requirement>
 800fca6:	4603      	mov	r3, r0
 800fca8:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800fcaa:	7dfb      	ldrb	r3, [r7, #23]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d00f      	beq.n	800fcd0 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800fcb0:	482a      	ldr	r0, [pc, #168]	@ (800fd5c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fcb2:	f7fe fc71 	bl	800e598 <DbgTraceGetFileName>
 800fcb6:	4601      	mov	r1, r0
 800fcb8:	f240 33c3 	movw	r3, #963	@ 0x3c3
 800fcbc:	4a28      	ldr	r2, [pc, #160]	@ (800fd60 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fcbe:	4829      	ldr	r0, [pc, #164]	@ (800fd64 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fcc0:	f001 fefe 	bl	8011ac0 <iprintf>
 800fcc4:	7dfb      	ldrb	r3, [r7, #23]
 800fcc6:	4619      	mov	r1, r3
 800fcc8:	482e      	ldr	r0, [pc, #184]	@ (800fd84 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800fcca:	f001 fef9 	bl	8011ac0 <iprintf>
 800fcce:	e00c      	b.n	800fcea <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800fcd0:	4822      	ldr	r0, [pc, #136]	@ (800fd5c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fcd2:	f7fe fc61 	bl	800e598 <DbgTraceGetFileName>
 800fcd6:	4601      	mov	r1, r0
 800fcd8:	f240 33c7 	movw	r3, #967	@ 0x3c7
 800fcdc:	4a20      	ldr	r2, [pc, #128]	@ (800fd60 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fcde:	4821      	ldr	r0, [pc, #132]	@ (800fd64 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fce0:	f001 feee 	bl	8011ac0 <iprintf>
 800fce4:	4828      	ldr	r0, [pc, #160]	@ (800fd88 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800fce6:	f001 ff5b 	bl	8011ba0 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800fcea:	4b22      	ldr	r3, [pc, #136]	@ (800fd74 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fcec:	789b      	ldrb	r3, [r3, #2]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d023      	beq.n	800fd3a <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800fcf2:	f7fc ff99 	bl	800cc28 <aci_gap_configure_filter_accept_list>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800fcfa:	7dfb      	ldrb	r3, [r7, #23]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d00f      	beq.n	800fd20 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800fd00:	4816      	ldr	r0, [pc, #88]	@ (800fd5c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fd02:	f7fe fc49 	bl	800e598 <DbgTraceGetFileName>
 800fd06:	4601      	mov	r1, r0
 800fd08:	f240 33d2 	movw	r3, #978	@ 0x3d2
 800fd0c:	4a14      	ldr	r2, [pc, #80]	@ (800fd60 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fd0e:	4815      	ldr	r0, [pc, #84]	@ (800fd64 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fd10:	f001 fed6 	bl	8011ac0 <iprintf>
 800fd14:	7dfb      	ldrb	r3, [r7, #23]
 800fd16:	4619      	mov	r1, r3
 800fd18:	481c      	ldr	r0, [pc, #112]	@ (800fd8c <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800fd1a:	f001 fed1 	bl	8011ac0 <iprintf>
 800fd1e:	e00c      	b.n	800fd3a <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800fd20:	480e      	ldr	r0, [pc, #56]	@ (800fd5c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fd22:	f7fe fc39 	bl	800e598 <DbgTraceGetFileName>
 800fd26:	4601      	mov	r1, r0
 800fd28:	f240 33d6 	movw	r3, #982	@ 0x3d6
 800fd2c:	4a0c      	ldr	r2, [pc, #48]	@ (800fd60 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fd2e:	480d      	ldr	r0, [pc, #52]	@ (800fd64 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fd30:	f001 fec6 	bl	8011ac0 <iprintf>
 800fd34:	4816      	ldr	r0, [pc, #88]	@ (800fd90 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800fd36:	f001 ff33 	bl	8011ba0 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800fd3a:	4808      	ldr	r0, [pc, #32]	@ (800fd5c <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fd3c:	f7fe fc2c 	bl	800e598 <DbgTraceGetFileName>
 800fd40:	4601      	mov	r1, r0
 800fd42:	f240 33d9 	movw	r3, #985	@ 0x3d9
 800fd46:	4a06      	ldr	r2, [pc, #24]	@ (800fd60 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fd48:	4806      	ldr	r0, [pc, #24]	@ (800fd64 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fd4a:	f001 feb9 	bl	8011ac0 <iprintf>
 800fd4e:	4811      	ldr	r0, [pc, #68]	@ (800fd94 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800fd50:	f001 feb6 	bl	8011ac0 <iprintf>
}
 800fd54:	bf00      	nop
 800fd56:	371c      	adds	r7, #28
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd5c:	08012cfc 	.word	0x08012cfc
 800fd60:	0801418c 	.word	0x0801418c
 800fd64:	08012d18 	.word	0x08012d18
 800fd68:	08013690 	.word	0x08013690
 800fd6c:	080136b0 	.word	0x080136b0
 800fd70:	080136ec 	.word	0x080136ec
 800fd74:	2000057c 	.word	0x2000057c
 800fd78:	08013718 	.word	0x08013718
 800fd7c:	08013758 	.word	0x08013758
 800fd80:	0001b207 	.word	0x0001b207
 800fd84:	08013788 	.word	0x08013788
 800fd88:	080137d4 	.word	0x080137d4
 800fd8c:	08013810 	.word	0x08013810
 800fd90:	08013850 	.word	0x08013850
 800fd94:	08013880 	.word	0x08013880

0800fd98 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b08c      	sub	sp, #48	@ 0x30
 800fd9c:	af08      	add	r7, sp, #32
 800fd9e:	4603      	mov	r3, r0
 800fda0:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fda2:	2392      	movs	r3, #146	@ 0x92
 800fda4:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800fda6:	4a32      	ldr	r2, [pc, #200]	@ (800fe70 <Adv_Request+0xd8>)
 800fda8:	79fb      	ldrb	r3, [r7, #7]
 800fdaa:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800fdae:	2300      	movs	r3, #0
 800fdb0:	9306      	str	r3, [sp, #24]
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	9305      	str	r3, [sp, #20]
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	9304      	str	r3, [sp, #16]
 800fdba:	2300      	movs	r3, #0
 800fdbc:	9303      	str	r3, [sp, #12]
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	9302      	str	r3, [sp, #8]
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	9301      	str	r3, [sp, #4]
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	9300      	str	r3, [sp, #0]
 800fdca:	2300      	movs	r3, #0
 800fdcc:	22a0      	movs	r2, #160	@ 0xa0
 800fdce:	2180      	movs	r1, #128	@ 0x80
 800fdd0:	2000      	movs	r0, #0
 800fdd2:	f7fc fb91 	bl	800c4f8 <aci_gap_set_discoverable>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800fdda:	7bfb      	ldrb	r3, [r7, #15]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d00f      	beq.n	800fe00 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800fde0:	4824      	ldr	r0, [pc, #144]	@ (800fe74 <Adv_Request+0xdc>)
 800fde2:	f7fe fbd9 	bl	800e598 <DbgTraceGetFileName>
 800fde6:	4601      	mov	r1, r0
 800fde8:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 800fdec:	4a22      	ldr	r2, [pc, #136]	@ (800fe78 <Adv_Request+0xe0>)
 800fdee:	4823      	ldr	r0, [pc, #140]	@ (800fe7c <Adv_Request+0xe4>)
 800fdf0:	f001 fe66 	bl	8011ac0 <iprintf>
 800fdf4:	7bfb      	ldrb	r3, [r7, #15]
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	4821      	ldr	r0, [pc, #132]	@ (800fe80 <Adv_Request+0xe8>)
 800fdfa:	f001 fe61 	bl	8011ac0 <iprintf>
 800fdfe:	e00c      	b.n	800fe1a <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800fe00:	481c      	ldr	r0, [pc, #112]	@ (800fe74 <Adv_Request+0xdc>)
 800fe02:	f7fe fbc9 	bl	800e598 <DbgTraceGetFileName>
 800fe06:	4601      	mov	r1, r0
 800fe08:	f240 33f3 	movw	r3, #1011	@ 0x3f3
 800fe0c:	4a1a      	ldr	r2, [pc, #104]	@ (800fe78 <Adv_Request+0xe0>)
 800fe0e:	481b      	ldr	r0, [pc, #108]	@ (800fe7c <Adv_Request+0xe4>)
 800fe10:	f001 fe56 	bl	8011ac0 <iprintf>
 800fe14:	481b      	ldr	r0, [pc, #108]	@ (800fe84 <Adv_Request+0xec>)
 800fe16:	f001 fec3 	bl	8011ba0 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800fe1a:	491b      	ldr	r1, [pc, #108]	@ (800fe88 <Adv_Request+0xf0>)
 800fe1c:	2013      	movs	r0, #19
 800fe1e:	f7fc fe91 	bl	800cb44 <aci_gap_update_adv_data>
 800fe22:	4603      	mov	r3, r0
 800fe24:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800fe26:	7bfb      	ldrb	r3, [r7, #15]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d00f      	beq.n	800fe4c <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800fe2c:	4811      	ldr	r0, [pc, #68]	@ (800fe74 <Adv_Request+0xdc>)
 800fe2e:	f7fe fbb3 	bl	800e598 <DbgTraceGetFileName>
 800fe32:	4601      	mov	r1, r0
 800fe34:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800fe38:	4a0f      	ldr	r2, [pc, #60]	@ (800fe78 <Adv_Request+0xe0>)
 800fe3a:	4810      	ldr	r0, [pc, #64]	@ (800fe7c <Adv_Request+0xe4>)
 800fe3c:	f001 fe40 	bl	8011ac0 <iprintf>
 800fe40:	7bfb      	ldrb	r3, [r7, #15]
 800fe42:	4619      	mov	r1, r3
 800fe44:	4811      	ldr	r0, [pc, #68]	@ (800fe8c <Adv_Request+0xf4>)
 800fe46:	f001 fe3b 	bl	8011ac0 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800fe4a:	e00d      	b.n	800fe68 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800fe4c:	4809      	ldr	r0, [pc, #36]	@ (800fe74 <Adv_Request+0xdc>)
 800fe4e:	f7fe fba3 	bl	800e598 <DbgTraceGetFileName>
 800fe52:	4601      	mov	r1, r0
 800fe54:	f240 4302 	movw	r3, #1026	@ 0x402
 800fe58:	4a07      	ldr	r2, [pc, #28]	@ (800fe78 <Adv_Request+0xe0>)
 800fe5a:	4808      	ldr	r0, [pc, #32]	@ (800fe7c <Adv_Request+0xe4>)
 800fe5c:	f001 fe30 	bl	8011ac0 <iprintf>
 800fe60:	480b      	ldr	r0, [pc, #44]	@ (800fe90 <Adv_Request+0xf8>)
 800fe62:	f001 fe2d 	bl	8011ac0 <iprintf>
  return;
 800fe66:	bf00      	nop
}
 800fe68:	3710      	adds	r7, #16
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	2000057c 	.word	0x2000057c
 800fe74:	08012cfc 	.word	0x08012cfc
 800fe78:	080141a4 	.word	0x080141a4
 800fe7c:	08012d18 	.word	0x08012d18
 800fe80:	080138ac 	.word	0x080138ac
 800fe84:	080138e4 	.word	0x080138e4
 800fe88:	200000a0 	.word	0x200000a0
 800fe8c:	0801390c 	.word	0x0801390c
 800fe90:	08013940 	.word	0x08013940

0800fe94 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b086      	sub	sp, #24
 800fe98:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800fe9a:	f7ff f8f5 	bl	800f088 <LL_FLASH_GetUDN>
 800fe9e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fea6:	d023      	beq.n	800fef0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800fea8:	f7ff f906 	bl	800f0b8 <LL_FLASH_GetSTCompanyID>
 800feac:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800feae:	f7ff f8f7 	bl	800f0a0 <LL_FLASH_GetDeviceID>
 800feb2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	b2da      	uxtb	r2, r3
 800feb8:	4b16      	ldr	r3, [pc, #88]	@ (800ff14 <BleGetBdAddress+0x80>)
 800feba:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	0a1b      	lsrs	r3, r3, #8
 800fec0:	b2da      	uxtb	r2, r3
 800fec2:	4b14      	ldr	r3, [pc, #80]	@ (800ff14 <BleGetBdAddress+0x80>)
 800fec4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	b2da      	uxtb	r2, r3
 800feca:	4b12      	ldr	r3, [pc, #72]	@ (800ff14 <BleGetBdAddress+0x80>)
 800fecc:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	b2da      	uxtb	r2, r3
 800fed2:	4b10      	ldr	r3, [pc, #64]	@ (800ff14 <BleGetBdAddress+0x80>)
 800fed4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	0a1b      	lsrs	r3, r3, #8
 800feda:	b2da      	uxtb	r2, r3
 800fedc:	4b0d      	ldr	r3, [pc, #52]	@ (800ff14 <BleGetBdAddress+0x80>)
 800fede:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	0c1b      	lsrs	r3, r3, #16
 800fee4:	b2da      	uxtb	r2, r3
 800fee6:	4b0b      	ldr	r3, [pc, #44]	@ (800ff14 <BleGetBdAddress+0x80>)
 800fee8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800feea:	4b0a      	ldr	r3, [pc, #40]	@ (800ff14 <BleGetBdAddress+0x80>)
 800feec:	617b      	str	r3, [r7, #20]
 800feee:	e00b      	b.n	800ff08 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800fef0:	2000      	movs	r0, #0
 800fef2:	f7fe fc19 	bl	800e728 <OTP_Read>
 800fef6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d002      	beq.n	800ff04 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	617b      	str	r3, [r7, #20]
 800ff02:	e001      	b.n	800ff08 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800ff04:	4b04      	ldr	r3, [pc, #16]	@ (800ff18 <BleGetBdAddress+0x84>)
 800ff06:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800ff08:	697b      	ldr	r3, [r7, #20]
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3718      	adds	r7, #24
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}
 800ff12:	bf00      	nop
 800ff14:	20000574 	.word	0x20000574
 800ff18:	0801413c 	.word	0x0801413c

0800ff1c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b082      	sub	sp, #8
 800ff20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800ff22:	4b1f      	ldr	r3, [pc, #124]	@ (800ffa0 <Adv_Cancel+0x84>)
 800ff24:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ff28:	2b05      	cmp	r3, #5
 800ff2a:	d035      	beq.n	800ff98 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ff2c:	2392      	movs	r3, #146	@ 0x92
 800ff2e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800ff30:	f7fc fabe 	bl	800c4b0 <aci_gap_set_non_discoverable>
 800ff34:	4603      	mov	r3, r0
 800ff36:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ff38:	4b19      	ldr	r3, [pc, #100]	@ (800ffa0 <Adv_Cancel+0x84>)
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800ff40:	79fb      	ldrb	r3, [r7, #7]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d00d      	beq.n	800ff62 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800ff46:	4817      	ldr	r0, [pc, #92]	@ (800ffa4 <Adv_Cancel+0x88>)
 800ff48:	f7fe fb26 	bl	800e598 <DbgTraceGetFileName>
 800ff4c:	4601      	mov	r1, r0
 800ff4e:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 800ff52:	4a15      	ldr	r2, [pc, #84]	@ (800ffa8 <Adv_Cancel+0x8c>)
 800ff54:	4815      	ldr	r0, [pc, #84]	@ (800ffac <Adv_Cancel+0x90>)
 800ff56:	f001 fdb3 	bl	8011ac0 <iprintf>
 800ff5a:	4815      	ldr	r0, [pc, #84]	@ (800ffb0 <Adv_Cancel+0x94>)
 800ff5c:	f001 fdb0 	bl	8011ac0 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800ff60:	e01a      	b.n	800ff98 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800ff62:	4810      	ldr	r0, [pc, #64]	@ (800ffa4 <Adv_Cancel+0x88>)
 800ff64:	f7fe fb18 	bl	800e598 <DbgTraceGetFileName>
 800ff68:	4601      	mov	r1, r0
 800ff6a:	f240 4354 	movw	r3, #1108	@ 0x454
 800ff6e:	4a0e      	ldr	r2, [pc, #56]	@ (800ffa8 <Adv_Cancel+0x8c>)
 800ff70:	480e      	ldr	r0, [pc, #56]	@ (800ffac <Adv_Cancel+0x90>)
 800ff72:	f001 fda5 	bl	8011ac0 <iprintf>
 800ff76:	480f      	ldr	r0, [pc, #60]	@ (800ffb4 <Adv_Cancel+0x98>)
 800ff78:	f001 fda2 	bl	8011ac0 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800ff7c:	4809      	ldr	r0, [pc, #36]	@ (800ffa4 <Adv_Cancel+0x88>)
 800ff7e:	f7fe fb0b 	bl	800e598 <DbgTraceGetFileName>
 800ff82:	4601      	mov	r1, r0
 800ff84:	f240 4355 	movw	r3, #1109	@ 0x455
 800ff88:	4a07      	ldr	r2, [pc, #28]	@ (800ffa8 <Adv_Cancel+0x8c>)
 800ff8a:	4808      	ldr	r0, [pc, #32]	@ (800ffac <Adv_Cancel+0x90>)
 800ff8c:	f001 fd98 	bl	8011ac0 <iprintf>
 800ff90:	4809      	ldr	r0, [pc, #36]	@ (800ffb8 <Adv_Cancel+0x9c>)
 800ff92:	f001 fd95 	bl	8011ac0 <iprintf>
  return;
 800ff96:	bf00      	nop
 800ff98:	bf00      	nop
}
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	2000057c 	.word	0x2000057c
 800ffa4:	08012cfc 	.word	0x08012cfc
 800ffa8:	080141b0 	.word	0x080141b0
 800ffac:	08012d18 	.word	0x08012d18
 800ffb0:	08013968 	.word	0x08013968
 800ffb4:	0801398c 	.word	0x0801398c
 800ffb8:	08013994 	.word	0x08013994

0800ffbc <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800ffc4:	2100      	movs	r1, #0
 800ffc6:	2002      	movs	r0, #2
 800ffc8:	f001 fbae 	bl	8011728 <UTIL_SEQ_SetTask>

  return;
 800ffcc:	bf00      	nop
}
 800ffce:	3708      	adds	r7, #8
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ffdc:	2001      	movs	r0, #1
 800ffde:	f001 fc0f 	bl	8011800 <UTIL_SEQ_SetEvt>

  return;
 800ffe2:	bf00      	nop
}
 800ffe4:	3708      	adds	r7, #8
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}

0800ffea <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800ffea:	b580      	push	{r7, lr}
 800ffec:	b082      	sub	sp, #8
 800ffee:	af00      	add	r7, sp, #0
 800fff0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800fff2:	2001      	movs	r0, #1
 800fff4:	f001 fc24 	bl	8011840 <UTIL_SEQ_WaitEvt>

  return;
 800fff8:	bf00      	nop
}
 800fffa:	3708      	adds	r7, #8
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	685b      	ldr	r3, [r3, #4]
 8010010:	3308      	adds	r3, #8
 8010012:	4618      	mov	r0, r3
 8010014:	f7fd fc5e 	bl	800d8d4 <SVCCTL_UserEvtRx>
 8010018:	4603      	mov	r3, r0
 801001a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 801001c:	7afb      	ldrb	r3, [r7, #11]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d003      	beq.n	801002a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2201      	movs	r2, #1
 8010026:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8010028:	e003      	b.n	8010032 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2200      	movs	r2, #0
 801002e:	701a      	strb	r2, [r3, #0]
  return;
 8010030:	bf00      	nop
}
 8010032:	3710      	adds	r7, #16
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b084      	sub	sp, #16
 801003c:	af00      	add	r7, sp, #0
 801003e:	4603      	mov	r3, r0
 8010040:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8010042:	79fb      	ldrb	r3, [r7, #7]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d002      	beq.n	801004e <BLE_StatusNot+0x16>
 8010048:	2b01      	cmp	r3, #1
 801004a:	d006      	beq.n	801005a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 801004c:	e00b      	b.n	8010066 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801004e:	2303      	movs	r3, #3
 8010050:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8010052:	68f8      	ldr	r0, [r7, #12]
 8010054:	f001 fb94 	bl	8011780 <UTIL_SEQ_PauseTask>
      break;
 8010058:	e005      	b.n	8010066 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801005a:	2303      	movs	r3, #3
 801005c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 801005e:	68f8      	ldr	r0, [r7, #12]
 8010060:	f001 fbae 	bl	80117c0 <UTIL_SEQ_ResumeTask>
      break;
 8010064:	bf00      	nop
  }

  return;
 8010066:	bf00      	nop
}
 8010068:	3710      	adds	r7, #16
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
	...

08010070 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	2b04      	cmp	r3, #4
 801007e:	d80d      	bhi.n	801009c <Custom_STM_App_Notification+0x2c>
 8010080:	a201      	add	r2, pc, #4	@ (adr r2, 8010088 <Custom_STM_App_Notification+0x18>)
 8010082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010086:	bf00      	nop
 8010088:	0801009d 	.word	0x0801009d
 801008c:	0801009d 	.word	0x0801009d
 8010090:	0801009d 	.word	0x0801009d
 8010094:	0801009d 	.word	0x0801009d
 8010098:	0801009d 	.word	0x0801009d

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 801009c:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 801009e:	bf00      	nop
}
 80100a0:	370c      	adds	r7, #12
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr
 80100aa:	bf00      	nop

080100ac <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d002      	beq.n	80100c2 <Custom_APP_Notification+0x16>
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d002      	beq.n	80100c6 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80100c0:	e002      	b.n	80100c8 <Custom_APP_Notification+0x1c>
      break;
 80100c2:	bf00      	nop
 80100c4:	e000      	b.n	80100c8 <Custom_APP_Notification+0x1c>
      break;
 80100c6:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80100c8:	bf00      	nop
}
 80100ca:	370c      	adds	r7, #12
 80100cc:	46bd      	mov	sp, r7
 80100ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d2:	4770      	bx	lr

080100d4 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80100d4:	b480      	push	{r7}
 80100d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80100d8:	bf00      	nop
}
 80100da:	46bd      	mov	sp, r7
 80100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e0:	4770      	bx	lr
	...

080100e4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b08c      	sub	sp, #48	@ 0x30
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80100ec:	2300      	movs	r3, #0
 80100ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	3301      	adds	r3, #1
 80100f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 80100f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	2bff      	cmp	r3, #255	@ 0xff
 80100fe:	f040 808a 	bne.w	8010216 <Custom_STM_Event_Handler+0x132>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8010102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010104:	3302      	adds	r3, #2
 8010106:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8010108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801010a:	881b      	ldrh	r3, [r3, #0]
 801010c:	b29b      	uxth	r3, r3
 801010e:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8010112:	2b1a      	cmp	r3, #26
 8010114:	d87b      	bhi.n	801020e <Custom_STM_Event_Handler+0x12a>
 8010116:	a201      	add	r2, pc, #4	@ (adr r2, 801011c <Custom_STM_Event_Handler+0x38>)
 8010118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801011c:	08010189 	.word	0x08010189
 8010120:	0801020f 	.word	0x0801020f
 8010124:	0801020f 	.word	0x0801020f
 8010128:	0801020f 	.word	0x0801020f
 801012c:	0801020f 	.word	0x0801020f
 8010130:	0801020f 	.word	0x0801020f
 8010134:	0801020f 	.word	0x0801020f
 8010138:	0801020f 	.word	0x0801020f
 801013c:	0801020f 	.word	0x0801020f
 8010140:	0801020f 	.word	0x0801020f
 8010144:	0801020f 	.word	0x0801020f
 8010148:	0801020f 	.word	0x0801020f
 801014c:	0801020f 	.word	0x0801020f
 8010150:	0801020f 	.word	0x0801020f
 8010154:	0801020f 	.word	0x0801020f
 8010158:	0801020f 	.word	0x0801020f
 801015c:	0801020f 	.word	0x0801020f
 8010160:	0801020f 	.word	0x0801020f
 8010164:	0801020f 	.word	0x0801020f
 8010168:	0801020f 	.word	0x0801020f
 801016c:	0801020f 	.word	0x0801020f
 8010170:	0801020f 	.word	0x0801020f
 8010174:	0801020f 	.word	0x0801020f
 8010178:	0801020f 	.word	0x0801020f
 801017c:	0801020f 	.word	0x0801020f
 8010180:	0801020f 	.word	0x0801020f
 8010184:	080101f1 	.word	0x080101f1
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8010188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801018a:	3302      	adds	r3, #2
 801018c:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 801018e:	69fb      	ldr	r3, [r7, #28]
 8010190:	885b      	ldrh	r3, [r3, #2]
 8010192:	b29b      	uxth	r3, r3
 8010194:	461a      	mov	r2, r3
 8010196:	4b23      	ldr	r3, [pc, #140]	@ (8010224 <Custom_STM_Event_Handler+0x140>)
 8010198:	889b      	ldrh	r3, [r3, #4]
 801019a:	3302      	adds	r3, #2
 801019c:	429a      	cmp	r2, r3
 801019e:	d119      	bne.n	80101d4 <Custom_STM_Event_Handler+0xf0>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80101a0:	2301      	movs	r3, #1
 80101a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 80101a6:	69fb      	ldr	r3, [r7, #28]
 80101a8:	7a1b      	ldrb	r3, [r3, #8]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d002      	beq.n	80101b4 <Custom_STM_Event_Handler+0xd0>
 80101ae:	2b01      	cmp	r3, #1
 80101b0:	d008      	beq.n	80101c4 <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 80101b2:	e01c      	b.n	80101ee <Custom_STM_Event_Handler+0x10a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 80101b4:	2303      	movs	r3, #3
 80101b6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80101b8:	f107 0308 	add.w	r3, r7, #8
 80101bc:	4618      	mov	r0, r3
 80101be:	f7ff ff57 	bl	8010070 <Custom_STM_App_Notification>
                break;
 80101c2:	e014      	b.n	80101ee <Custom_STM_Event_Handler+0x10a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 80101c4:	2302      	movs	r3, #2
 80101c6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80101c8:	f107 0308 	add.w	r3, r7, #8
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7ff ff4f 	bl	8010070 <Custom_STM_App_Notification>
                break;
 80101d2:	e00c      	b.n	80101ee <Custom_STM_Event_Handler+0x10a>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	885b      	ldrh	r3, [r3, #2]
 80101d8:	b29b      	uxth	r3, r3
 80101da:	461a      	mov	r2, r3
 80101dc:	4b11      	ldr	r3, [pc, #68]	@ (8010224 <Custom_STM_Event_Handler+0x140>)
 80101de:	885b      	ldrh	r3, [r3, #2]
 80101e0:	3301      	adds	r3, #1
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d115      	bne.n	8010212 <Custom_STM_Event_Handler+0x12e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80101e6:	2301      	movs	r3, #1
 80101e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80101ec:	e011      	b.n	8010212 <Custom_STM_Event_Handler+0x12e>
 80101ee:	e010      	b.n	8010212 <Custom_STM_Event_Handler+0x12e>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80101f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101f2:	3302      	adds	r3, #2
 80101f4:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 80101f6:	2304      	movs	r3, #4
 80101f8:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 80101fa:	6a3b      	ldr	r3, [r7, #32]
 80101fc:	881b      	ldrh	r3, [r3, #0]
 80101fe:	b29b      	uxth	r3, r3
 8010200:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8010202:	f107 0308 	add.w	r3, r7, #8
 8010206:	4618      	mov	r0, r3
 8010208:	f7ff ff32 	bl	8010070 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 801020c:	e002      	b.n	8010214 <Custom_STM_Event_Handler+0x130>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 801020e:	bf00      	nop
 8010210:	e002      	b.n	8010218 <Custom_STM_Event_Handler+0x134>
          break;
 8010212:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010214:	e000      	b.n	8010218 <Custom_STM_Event_Handler+0x134>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8010216:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8010218:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 801021c:	4618      	mov	r0, r3
 801021e:	3730      	adds	r7, #48	@ 0x30
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}
 8010224:	20000604 	.word	0x20000604

08010228 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b08c      	sub	sp, #48	@ 0x30
 801022c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801022e:	2392      	movs	r3, #146	@ 0x92
 8010230:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8010232:	487f      	ldr	r0, [pc, #508]	@ (8010430 <SVCCTL_InitCustomSvc+0x208>)
 8010234:	f7fd fb34 	bl	800d8a0 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8010238:	2306      	movs	r3, #6
 801023a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 801023c:	238f      	movs	r3, #143	@ 0x8f
 801023e:	713b      	strb	r3, [r7, #4]
 8010240:	23e5      	movs	r3, #229	@ 0xe5
 8010242:	717b      	strb	r3, [r7, #5]
 8010244:	23b3      	movs	r3, #179	@ 0xb3
 8010246:	71bb      	strb	r3, [r7, #6]
 8010248:	23d5      	movs	r3, #213	@ 0xd5
 801024a:	71fb      	strb	r3, [r7, #7]
 801024c:	232e      	movs	r3, #46	@ 0x2e
 801024e:	723b      	strb	r3, [r7, #8]
 8010250:	237f      	movs	r3, #127	@ 0x7f
 8010252:	727b      	strb	r3, [r7, #9]
 8010254:	234a      	movs	r3, #74	@ 0x4a
 8010256:	72bb      	strb	r3, [r7, #10]
 8010258:	2398      	movs	r3, #152	@ 0x98
 801025a:	72fb      	strb	r3, [r7, #11]
 801025c:	232a      	movs	r3, #42	@ 0x2a
 801025e:	733b      	strb	r3, [r7, #12]
 8010260:	2348      	movs	r3, #72	@ 0x48
 8010262:	737b      	strb	r3, [r7, #13]
 8010264:	237a      	movs	r3, #122	@ 0x7a
 8010266:	73bb      	strb	r3, [r7, #14]
 8010268:	23cc      	movs	r3, #204	@ 0xcc
 801026a:	73fb      	strb	r3, [r7, #15]
 801026c:	2340      	movs	r3, #64	@ 0x40
 801026e:	743b      	strb	r3, [r7, #16]
 8010270:	23fe      	movs	r3, #254	@ 0xfe
 8010272:	747b      	strb	r3, [r7, #17]
 8010274:	2300      	movs	r3, #0
 8010276:	74bb      	strb	r3, [r7, #18]
 8010278:	2300      	movs	r3, #0
 801027a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 801027c:	7dbb      	ldrb	r3, [r7, #22]
 801027e:	1d39      	adds	r1, r7, #4
 8010280:	4a6c      	ldr	r2, [pc, #432]	@ (8010434 <SVCCTL_InitCustomSvc+0x20c>)
 8010282:	9200      	str	r2, [sp, #0]
 8010284:	2201      	movs	r2, #1
 8010286:	2002      	movs	r0, #2
 8010288:	f7fc fd7e 	bl	800cd88 <aci_gatt_add_service>
 801028c:	4603      	mov	r3, r0
 801028e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomMy_P2PsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8010290:	7dfb      	ldrb	r3, [r7, #23]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d00f      	beq.n	80102b6 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: My_P2PS, error code: 0x%x \n\r", ret);
 8010296:	4868      	ldr	r0, [pc, #416]	@ (8010438 <SVCCTL_InitCustomSvc+0x210>)
 8010298:	f7fe f97e 	bl	800e598 <DbgTraceGetFileName>
 801029c:	4601      	mov	r1, r0
 801029e:	f240 133f 	movw	r3, #319	@ 0x13f
 80102a2:	4a66      	ldr	r2, [pc, #408]	@ (801043c <SVCCTL_InitCustomSvc+0x214>)
 80102a4:	4866      	ldr	r0, [pc, #408]	@ (8010440 <SVCCTL_InitCustomSvc+0x218>)
 80102a6:	f001 fc0b 	bl	8011ac0 <iprintf>
 80102aa:	7dfb      	ldrb	r3, [r7, #23]
 80102ac:	4619      	mov	r1, r3
 80102ae:	4865      	ldr	r0, [pc, #404]	@ (8010444 <SVCCTL_InitCustomSvc+0x21c>)
 80102b0:	f001 fc06 	bl	8011ac0 <iprintf>
 80102b4:	e00c      	b.n	80102d0 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: My_P2PS \n\r");
 80102b6:	4860      	ldr	r0, [pc, #384]	@ (8010438 <SVCCTL_InitCustomSvc+0x210>)
 80102b8:	f7fe f96e 	bl	800e598 <DbgTraceGetFileName>
 80102bc:	4601      	mov	r1, r0
 80102be:	f240 1343 	movw	r3, #323	@ 0x143
 80102c2:	4a5e      	ldr	r2, [pc, #376]	@ (801043c <SVCCTL_InitCustomSvc+0x214>)
 80102c4:	485e      	ldr	r0, [pc, #376]	@ (8010440 <SVCCTL_InitCustomSvc+0x218>)
 80102c6:	f001 fbfb 	bl	8011ac0 <iprintf>
 80102ca:	485f      	ldr	r0, [pc, #380]	@ (8010448 <SVCCTL_InitCustomSvc+0x220>)
 80102cc:	f001 fbf8 	bl	8011ac0 <iprintf>
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 80102d0:	2319      	movs	r3, #25
 80102d2:	713b      	strb	r3, [r7, #4]
 80102d4:	23ed      	movs	r3, #237	@ 0xed
 80102d6:	717b      	strb	r3, [r7, #5]
 80102d8:	2382      	movs	r3, #130	@ 0x82
 80102da:	71bb      	strb	r3, [r7, #6]
 80102dc:	23ae      	movs	r3, #174	@ 0xae
 80102de:	71fb      	strb	r3, [r7, #7]
 80102e0:	23ed      	movs	r3, #237	@ 0xed
 80102e2:	723b      	strb	r3, [r7, #8]
 80102e4:	2321      	movs	r3, #33	@ 0x21
 80102e6:	727b      	strb	r3, [r7, #9]
 80102e8:	234c      	movs	r3, #76	@ 0x4c
 80102ea:	72bb      	strb	r3, [r7, #10]
 80102ec:	239d      	movs	r3, #157	@ 0x9d
 80102ee:	72fb      	strb	r3, [r7, #11]
 80102f0:	2341      	movs	r3, #65	@ 0x41
 80102f2:	733b      	strb	r3, [r7, #12]
 80102f4:	2345      	movs	r3, #69	@ 0x45
 80102f6:	737b      	strb	r3, [r7, #13]
 80102f8:	2322      	movs	r3, #34	@ 0x22
 80102fa:	73bb      	strb	r3, [r7, #14]
 80102fc:	238e      	movs	r3, #142	@ 0x8e
 80102fe:	73fb      	strb	r3, [r7, #15]
 8010300:	2341      	movs	r3, #65	@ 0x41
 8010302:	743b      	strb	r3, [r7, #16]
 8010304:	23fe      	movs	r3, #254	@ 0xfe
 8010306:	747b      	strb	r3, [r7, #17]
 8010308:	2300      	movs	r3, #0
 801030a:	74bb      	strb	r3, [r7, #18]
 801030c:	2300      	movs	r3, #0
 801030e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 8010310:	4b48      	ldr	r3, [pc, #288]	@ (8010434 <SVCCTL_InitCustomSvc+0x20c>)
 8010312:	8818      	ldrh	r0, [r3, #0]
 8010314:	4b4d      	ldr	r3, [pc, #308]	@ (801044c <SVCCTL_InitCustomSvc+0x224>)
 8010316:	881b      	ldrh	r3, [r3, #0]
 8010318:	1d3a      	adds	r2, r7, #4
 801031a:	494d      	ldr	r1, [pc, #308]	@ (8010450 <SVCCTL_InitCustomSvc+0x228>)
 801031c:	9105      	str	r1, [sp, #20]
 801031e:	2101      	movs	r1, #1
 8010320:	9104      	str	r1, [sp, #16]
 8010322:	2110      	movs	r1, #16
 8010324:	9103      	str	r1, [sp, #12]
 8010326:	2101      	movs	r1, #1
 8010328:	9102      	str	r1, [sp, #8]
 801032a:	2100      	movs	r1, #0
 801032c:	9101      	str	r1, [sp, #4]
 801032e:	2106      	movs	r1, #6
 8010330:	9100      	str	r1, [sp, #0]
 8010332:	2102      	movs	r1, #2
 8010334:	f7fc fdfe 	bl	800cf34 <aci_gatt_add_char>
 8010338:	4603      	mov	r3, r0
 801033a:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomLed_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801033c:	7dfb      	ldrb	r3, [r7, #23]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d00f      	beq.n	8010362 <SVCCTL_InitCustomSvc+0x13a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LED_C, error code: 0x%x \n\r", ret);
 8010342:	483d      	ldr	r0, [pc, #244]	@ (8010438 <SVCCTL_InitCustomSvc+0x210>)
 8010344:	f7fe f928 	bl	800e598 <DbgTraceGetFileName>
 8010348:	4601      	mov	r1, r0
 801034a:	f240 1355 	movw	r3, #341	@ 0x155
 801034e:	4a3b      	ldr	r2, [pc, #236]	@ (801043c <SVCCTL_InitCustomSvc+0x214>)
 8010350:	483b      	ldr	r0, [pc, #236]	@ (8010440 <SVCCTL_InitCustomSvc+0x218>)
 8010352:	f001 fbb5 	bl	8011ac0 <iprintf>
 8010356:	7dfb      	ldrb	r3, [r7, #23]
 8010358:	4619      	mov	r1, r3
 801035a:	483e      	ldr	r0, [pc, #248]	@ (8010454 <SVCCTL_InitCustomSvc+0x22c>)
 801035c:	f001 fbb0 	bl	8011ac0 <iprintf>
 8010360:	e00c      	b.n	801037c <SVCCTL_InitCustomSvc+0x154>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LED_C \n\r");
 8010362:	4835      	ldr	r0, [pc, #212]	@ (8010438 <SVCCTL_InitCustomSvc+0x210>)
 8010364:	f7fe f918 	bl	800e598 <DbgTraceGetFileName>
 8010368:	4601      	mov	r1, r0
 801036a:	f240 1359 	movw	r3, #345	@ 0x159
 801036e:	4a33      	ldr	r2, [pc, #204]	@ (801043c <SVCCTL_InitCustomSvc+0x214>)
 8010370:	4833      	ldr	r0, [pc, #204]	@ (8010440 <SVCCTL_InitCustomSvc+0x218>)
 8010372:	f001 fba5 	bl	8011ac0 <iprintf>
 8010376:	4838      	ldr	r0, [pc, #224]	@ (8010458 <SVCCTL_InitCustomSvc+0x230>)
 8010378:	f001 fba2 	bl	8011ac0 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  My_Switch_Char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 801037c:	2319      	movs	r3, #25
 801037e:	713b      	strb	r3, [r7, #4]
 8010380:	23ed      	movs	r3, #237	@ 0xed
 8010382:	717b      	strb	r3, [r7, #5]
 8010384:	2382      	movs	r3, #130	@ 0x82
 8010386:	71bb      	strb	r3, [r7, #6]
 8010388:	23ae      	movs	r3, #174	@ 0xae
 801038a:	71fb      	strb	r3, [r7, #7]
 801038c:	23ed      	movs	r3, #237	@ 0xed
 801038e:	723b      	strb	r3, [r7, #8]
 8010390:	2321      	movs	r3, #33	@ 0x21
 8010392:	727b      	strb	r3, [r7, #9]
 8010394:	234c      	movs	r3, #76	@ 0x4c
 8010396:	72bb      	strb	r3, [r7, #10]
 8010398:	239d      	movs	r3, #157	@ 0x9d
 801039a:	72fb      	strb	r3, [r7, #11]
 801039c:	2341      	movs	r3, #65	@ 0x41
 801039e:	733b      	strb	r3, [r7, #12]
 80103a0:	2345      	movs	r3, #69	@ 0x45
 80103a2:	737b      	strb	r3, [r7, #13]
 80103a4:	2322      	movs	r3, #34	@ 0x22
 80103a6:	73bb      	strb	r3, [r7, #14]
 80103a8:	238e      	movs	r3, #142	@ 0x8e
 80103aa:	73fb      	strb	r3, [r7, #15]
 80103ac:	2342      	movs	r3, #66	@ 0x42
 80103ae:	743b      	strb	r3, [r7, #16]
 80103b0:	23fe      	movs	r3, #254	@ 0xfe
 80103b2:	747b      	strb	r3, [r7, #17]
 80103b4:	2300      	movs	r3, #0
 80103b6:	74bb      	strb	r3, [r7, #18]
 80103b8:	2300      	movs	r3, #0
 80103ba:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 80103bc:	4b1d      	ldr	r3, [pc, #116]	@ (8010434 <SVCCTL_InitCustomSvc+0x20c>)
 80103be:	8818      	ldrh	r0, [r3, #0]
 80103c0:	4b26      	ldr	r3, [pc, #152]	@ (801045c <SVCCTL_InitCustomSvc+0x234>)
 80103c2:	881b      	ldrh	r3, [r3, #0]
 80103c4:	1d3a      	adds	r2, r7, #4
 80103c6:	4926      	ldr	r1, [pc, #152]	@ (8010460 <SVCCTL_InitCustomSvc+0x238>)
 80103c8:	9105      	str	r1, [sp, #20]
 80103ca:	2101      	movs	r1, #1
 80103cc:	9104      	str	r1, [sp, #16]
 80103ce:	2110      	movs	r1, #16
 80103d0:	9103      	str	r1, [sp, #12]
 80103d2:	2101      	movs	r1, #1
 80103d4:	9102      	str	r1, [sp, #8]
 80103d6:	2100      	movs	r1, #0
 80103d8:	9101      	str	r1, [sp, #4]
 80103da:	2110      	movs	r1, #16
 80103dc:	9100      	str	r1, [sp, #0]
 80103de:	2102      	movs	r1, #2
 80103e0:	f7fc fda8 	bl	800cf34 <aci_gatt_add_char>
 80103e4:	4603      	mov	r3, r0
 80103e6:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomSwitch_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80103e8:	7dfb      	ldrb	r3, [r7, #23]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d00f      	beq.n	801040e <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : SWITCH_C, error code: 0x%x \n\r", ret);
 80103ee:	4812      	ldr	r0, [pc, #72]	@ (8010438 <SVCCTL_InitCustomSvc+0x210>)
 80103f0:	f7fe f8d2 	bl	800e598 <DbgTraceGetFileName>
 80103f4:	4601      	mov	r1, r0
 80103f6:	f240 136f 	movw	r3, #367	@ 0x16f
 80103fa:	4a10      	ldr	r2, [pc, #64]	@ (801043c <SVCCTL_InitCustomSvc+0x214>)
 80103fc:	4810      	ldr	r0, [pc, #64]	@ (8010440 <SVCCTL_InitCustomSvc+0x218>)
 80103fe:	f001 fb5f 	bl	8011ac0 <iprintf>
 8010402:	7dfb      	ldrb	r3, [r7, #23]
 8010404:	4619      	mov	r1, r3
 8010406:	4817      	ldr	r0, [pc, #92]	@ (8010464 <SVCCTL_InitCustomSvc+0x23c>)
 8010408:	f001 fb5a 	bl	8011ac0 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 801040c:	e00d      	b.n	801042a <SVCCTL_InitCustomSvc+0x202>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : SWITCH_C \n\r");
 801040e:	480a      	ldr	r0, [pc, #40]	@ (8010438 <SVCCTL_InitCustomSvc+0x210>)
 8010410:	f7fe f8c2 	bl	800e598 <DbgTraceGetFileName>
 8010414:	4601      	mov	r1, r0
 8010416:	f240 1373 	movw	r3, #371	@ 0x173
 801041a:	4a08      	ldr	r2, [pc, #32]	@ (801043c <SVCCTL_InitCustomSvc+0x214>)
 801041c:	4808      	ldr	r0, [pc, #32]	@ (8010440 <SVCCTL_InitCustomSvc+0x218>)
 801041e:	f001 fb4f 	bl	8011ac0 <iprintf>
 8010422:	4811      	ldr	r0, [pc, #68]	@ (8010468 <SVCCTL_InitCustomSvc+0x240>)
 8010424:	f001 fb4c 	bl	8011ac0 <iprintf>
  return;
 8010428:	bf00      	nop
}
 801042a:	3718      	adds	r7, #24
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}
 8010430:	080100e5 	.word	0x080100e5
 8010434:	20000604 	.word	0x20000604
 8010438:	080139b0 	.word	0x080139b0
 801043c:	080141bc 	.word	0x080141bc
 8010440:	080139d0 	.word	0x080139d0
 8010444:	080139e4 	.word	0x080139e4
 8010448:	08013a2c 	.word	0x08013a2c
 801044c:	200000b4 	.word	0x200000b4
 8010450:	20000606 	.word	0x20000606
 8010454:	08013a60 	.word	0x08013a60
 8010458:	08013aa4 	.word	0x08013aa4
 801045c:	200000b6 	.word	0x200000b6
 8010460:	20000608 	.word	0x20000608
 8010464:	08013ad8 	.word	0x08013ad8
 8010468:	08013b20 	.word	0x08013b20

0801046c <LL_PWR_EnableBootC2>:
{
 801046c:	b480      	push	{r7}
 801046e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8010470:	4b05      	ldr	r3, [pc, #20]	@ (8010488 <LL_PWR_EnableBootC2+0x1c>)
 8010472:	68db      	ldr	r3, [r3, #12]
 8010474:	4a04      	ldr	r2, [pc, #16]	@ (8010488 <LL_PWR_EnableBootC2+0x1c>)
 8010476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801047a:	60d3      	str	r3, [r2, #12]
}
 801047c:	bf00      	nop
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr
 8010486:	bf00      	nop
 8010488:	58000400 	.word	0x58000400

0801048c <LL_C2_EXTI_EnableEvent_32_63>:
{
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8010494:	4b06      	ldr	r3, [pc, #24]	@ (80104b0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010496:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 801049a:	4905      	ldr	r1, [pc, #20]	@ (80104b0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	4313      	orrs	r3, r2
 80104a0:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80104a4:	bf00      	nop
 80104a6:	370c      	adds	r7, #12
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr
 80104b0:	58000800 	.word	0x58000800

080104b4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80104b4:	b480      	push	{r7}
 80104b6:	b083      	sub	sp, #12
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80104bc:	4b05      	ldr	r3, [pc, #20]	@ (80104d4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80104be:	6a1a      	ldr	r2, [r3, #32]
 80104c0:	4904      	ldr	r1, [pc, #16]	@ (80104d4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	4313      	orrs	r3, r2
 80104c6:	620b      	str	r3, [r1, #32]
}
 80104c8:	bf00      	nop
 80104ca:	370c      	adds	r7, #12
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr
 80104d4:	58000800 	.word	0x58000800

080104d8 <LL_AHB3_GRP1_EnableClock>:
{
 80104d8:	b480      	push	{r7}
 80104da:	b085      	sub	sp, #20
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80104e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80104e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80104e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4313      	orrs	r3, r2
 80104ee:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80104f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80104f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	4013      	ands	r3, r2
 80104fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80104fc:	68fb      	ldr	r3, [r7, #12]
}
 80104fe:	bf00      	nop
 8010500:	3714      	adds	r7, #20
 8010502:	46bd      	mov	sp, r7
 8010504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010508:	4770      	bx	lr

0801050a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 801050a:	b480      	push	{r7}
 801050c:	b085      	sub	sp, #20
 801050e:	af00      	add	r7, sp, #0
 8010510:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8010512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010516:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 801051a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	4313      	orrs	r3, r2
 8010522:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8010526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801052a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	4013      	ands	r3, r2
 8010532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010534:	68fb      	ldr	r3, [r7, #12]
}
 8010536:	bf00      	nop
 8010538:	3714      	adds	r7, #20
 801053a:	46bd      	mov	sp, r7
 801053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010540:	4770      	bx	lr

08010542 <LL_C1_IPCC_EnableIT_TXF>:
{
 8010542:	b480      	push	{r7}
 8010544:	b083      	sub	sp, #12
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	601a      	str	r2, [r3, #0]
}
 8010556:	bf00      	nop
 8010558:	370c      	adds	r7, #12
 801055a:	46bd      	mov	sp, r7
 801055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010560:	4770      	bx	lr

08010562 <LL_C1_IPCC_EnableIT_RXO>:
{
 8010562:	b480      	push	{r7}
 8010564:	b083      	sub	sp, #12
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	f043 0201 	orr.w	r2, r3, #1
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	601a      	str	r2, [r3, #0]
}
 8010576:	bf00      	nop
 8010578:	370c      	adds	r7, #12
 801057a:	46bd      	mov	sp, r7
 801057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010580:	4770      	bx	lr

08010582 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8010582:	b480      	push	{r7}
 8010584:	b083      	sub	sp, #12
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
 801058a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	685a      	ldr	r2, [r3, #4]
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	041b      	lsls	r3, r3, #16
 8010594:	43db      	mvns	r3, r3
 8010596:	401a      	ands	r2, r3
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	605a      	str	r2, [r3, #4]
}
 801059c:	bf00      	nop
 801059e:	370c      	adds	r7, #12
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr

080105a8 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	685a      	ldr	r2, [r3, #4]
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	041b      	lsls	r3, r3, #16
 80105ba:	431a      	orrs	r2, r3
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	605a      	str	r2, [r3, #4]
}
 80105c0:	bf00      	nop
 80105c2:	370c      	adds	r7, #12
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <LL_C1_IPCC_EnableReceiveChannel>:
{
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	685a      	ldr	r2, [r3, #4]
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	43db      	mvns	r3, r3
 80105de:	401a      	ands	r2, r3
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	605a      	str	r2, [r3, #4]
}
 80105e4:	bf00      	nop
 80105e6:	370c      	adds	r7, #12
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr

080105f0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	683a      	ldr	r2, [r7, #0]
 80105fe:	609a      	str	r2, [r3, #8]
}
 8010600:	bf00      	nop
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <LL_C1_IPCC_SetFlag_CHx>:
{
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	041a      	lsls	r2, r3, #16
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	609a      	str	r2, [r3, #8]
}
 801061e:	bf00      	nop
 8010620:	370c      	adds	r7, #12
 8010622:	46bd      	mov	sp, r7
 8010624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010628:	4770      	bx	lr

0801062a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 801062a:	b480      	push	{r7}
 801062c:	b083      	sub	sp, #12
 801062e:	af00      	add	r7, sp, #0
 8010630:	6078      	str	r0, [r7, #4]
 8010632:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	68da      	ldr	r2, [r3, #12]
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	4013      	ands	r3, r2
 801063c:	683a      	ldr	r2, [r7, #0]
 801063e:	429a      	cmp	r2, r3
 8010640:	d101      	bne.n	8010646 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8010642:	2301      	movs	r3, #1
 8010644:	e000      	b.n	8010648 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8010646:	2300      	movs	r3, #0
}
 8010648:	4618      	mov	r0, r3
 801064a:	370c      	adds	r7, #12
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr

08010654 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8010654:	b480      	push	{r7}
 8010656:	b083      	sub	sp, #12
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	69da      	ldr	r2, [r3, #28]
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	4013      	ands	r3, r2
 8010666:	683a      	ldr	r2, [r7, #0]
 8010668:	429a      	cmp	r2, r3
 801066a:	d101      	bne.n	8010670 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 801066c:	2301      	movs	r3, #1
 801066e:	e000      	b.n	8010672 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8010670:	2300      	movs	r3, #0
}
 8010672:	4618      	mov	r0, r3
 8010674:	370c      	adds	r7, #12
 8010676:	46bd      	mov	sp, r7
 8010678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067c:	4770      	bx	lr
	...

08010680 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8010680:	b580      	push	{r7, lr}
 8010682:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8010684:	2102      	movs	r1, #2
 8010686:	4818      	ldr	r0, [pc, #96]	@ (80106e8 <HW_IPCC_Rx_Handler+0x68>)
 8010688:	f7ff ffe4 	bl	8010654 <LL_C2_IPCC_IsActiveFlag_CHx>
 801068c:	4603      	mov	r3, r0
 801068e:	2b00      	cmp	r3, #0
 8010690:	d008      	beq.n	80106a4 <HW_IPCC_Rx_Handler+0x24>
 8010692:	4b15      	ldr	r3, [pc, #84]	@ (80106e8 <HW_IPCC_Rx_Handler+0x68>)
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	f003 0302 	and.w	r3, r3, #2
 801069a:	2b00      	cmp	r3, #0
 801069c:	d102      	bne.n	80106a4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 801069e:	f000 f925 	bl	80108ec <HW_IPCC_SYS_EvtHandler>
 80106a2:	e01e      	b.n	80106e2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80106a4:	2101      	movs	r1, #1
 80106a6:	4810      	ldr	r0, [pc, #64]	@ (80106e8 <HW_IPCC_Rx_Handler+0x68>)
 80106a8:	f7ff ffd4 	bl	8010654 <LL_C2_IPCC_IsActiveFlag_CHx>
 80106ac:	4603      	mov	r3, r0
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d008      	beq.n	80106c4 <HW_IPCC_Rx_Handler+0x44>
 80106b2:	4b0d      	ldr	r3, [pc, #52]	@ (80106e8 <HW_IPCC_Rx_Handler+0x68>)
 80106b4:	685b      	ldr	r3, [r3, #4]
 80106b6:	f003 0301 	and.w	r3, r3, #1
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d102      	bne.n	80106c4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80106be:	f000 f899 	bl	80107f4 <HW_IPCC_BLE_EvtHandler>
 80106c2:	e00e      	b.n	80106e2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80106c4:	2108      	movs	r1, #8
 80106c6:	4808      	ldr	r0, [pc, #32]	@ (80106e8 <HW_IPCC_Rx_Handler+0x68>)
 80106c8:	f7ff ffc4 	bl	8010654 <LL_C2_IPCC_IsActiveFlag_CHx>
 80106cc:	4603      	mov	r3, r0
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d008      	beq.n	80106e4 <HW_IPCC_Rx_Handler+0x64>
 80106d2:	4b05      	ldr	r3, [pc, #20]	@ (80106e8 <HW_IPCC_Rx_Handler+0x68>)
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	f003 0308 	and.w	r3, r3, #8
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d102      	bne.n	80106e4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80106de:	f000 f97d 	bl	80109dc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80106e2:	bf00      	nop
 80106e4:	bf00      	nop
}
 80106e6:	bd80      	pop	{r7, pc}
 80106e8:	58000c00 	.word	0x58000c00

080106ec <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80106f0:	2102      	movs	r1, #2
 80106f2:	4818      	ldr	r0, [pc, #96]	@ (8010754 <HW_IPCC_Tx_Handler+0x68>)
 80106f4:	f7ff ff99 	bl	801062a <LL_C1_IPCC_IsActiveFlag_CHx>
 80106f8:	4603      	mov	r3, r0
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d108      	bne.n	8010710 <HW_IPCC_Tx_Handler+0x24>
 80106fe:	4b15      	ldr	r3, [pc, #84]	@ (8010754 <HW_IPCC_Tx_Handler+0x68>)
 8010700:	685b      	ldr	r3, [r3, #4]
 8010702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010706:	2b00      	cmp	r3, #0
 8010708:	d102      	bne.n	8010710 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801070a:	f000 f8d3 	bl	80108b4 <HW_IPCC_SYS_CmdEvtHandler>
 801070e:	e01e      	b.n	801074e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8010710:	2108      	movs	r1, #8
 8010712:	4810      	ldr	r0, [pc, #64]	@ (8010754 <HW_IPCC_Tx_Handler+0x68>)
 8010714:	f7ff ff89 	bl	801062a <LL_C1_IPCC_IsActiveFlag_CHx>
 8010718:	4603      	mov	r3, r0
 801071a:	2b00      	cmp	r3, #0
 801071c:	d108      	bne.n	8010730 <HW_IPCC_Tx_Handler+0x44>
 801071e:	4b0d      	ldr	r3, [pc, #52]	@ (8010754 <HW_IPCC_Tx_Handler+0x68>)
 8010720:	685b      	ldr	r3, [r3, #4]
 8010722:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010726:	2b00      	cmp	r3, #0
 8010728:	d102      	bne.n	8010730 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 801072a:	f000 f919 	bl	8010960 <HW_IPCC_MM_FreeBufHandler>
 801072e:	e00e      	b.n	801074e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8010730:	2120      	movs	r1, #32
 8010732:	4808      	ldr	r0, [pc, #32]	@ (8010754 <HW_IPCC_Tx_Handler+0x68>)
 8010734:	f7ff ff79 	bl	801062a <LL_C1_IPCC_IsActiveFlag_CHx>
 8010738:	4603      	mov	r3, r0
 801073a:	2b00      	cmp	r3, #0
 801073c:	d108      	bne.n	8010750 <HW_IPCC_Tx_Handler+0x64>
 801073e:	4b05      	ldr	r3, [pc, #20]	@ (8010754 <HW_IPCC_Tx_Handler+0x68>)
 8010740:	685b      	ldr	r3, [r3, #4]
 8010742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010746:	2b00      	cmp	r3, #0
 8010748:	d102      	bne.n	8010750 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801074a:	f000 f85f 	bl	801080c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801074e:	bf00      	nop
 8010750:	bf00      	nop
}
 8010752:	bd80      	pop	{r7, pc}
 8010754:	58000c00 	.word	0x58000c00

08010758 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8010758:	b580      	push	{r7, lr}
 801075a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 801075c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8010760:	f7ff fed3 	bl	801050a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8010764:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010768:	f7ff fea4 	bl	80104b4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 801076c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010770:	f7ff fe8c 	bl	801048c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8010774:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8010776:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8010778:	f7ff fe78 	bl	801046c <LL_PWR_EnableBootC2>

  return;
 801077c:	bf00      	nop
}
 801077e:	bd80      	pop	{r7, pc}

08010780 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8010780:	b580      	push	{r7, lr}
 8010782:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8010784:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8010788:	f7ff fea6 	bl	80104d8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 801078c:	4806      	ldr	r0, [pc, #24]	@ (80107a8 <HW_IPCC_Init+0x28>)
 801078e:	f7ff fee8 	bl	8010562 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8010792:	4805      	ldr	r0, [pc, #20]	@ (80107a8 <HW_IPCC_Init+0x28>)
 8010794:	f7ff fed5 	bl	8010542 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8010798:	202c      	movs	r0, #44	@ 0x2c
 801079a:	f7f2 fd92 	bl	80032c2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801079e:	202d      	movs	r0, #45	@ 0x2d
 80107a0:	f7f2 fd8f 	bl	80032c2 <HAL_NVIC_EnableIRQ>

  return;
 80107a4:	bf00      	nop
}
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	58000c00 	.word	0x58000c00

080107ac <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b084      	sub	sp, #16
 80107b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107b2:	f3ef 8310 	mrs	r3, PRIMASK
 80107b6:	607b      	str	r3, [r7, #4]
  return(result);
 80107b8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80107ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80107bc:	b672      	cpsid	i
}
 80107be:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80107c0:	2101      	movs	r1, #1
 80107c2:	4806      	ldr	r0, [pc, #24]	@ (80107dc <HW_IPCC_BLE_Init+0x30>)
 80107c4:	f7ff ff02 	bl	80105cc <LL_C1_IPCC_EnableReceiveChannel>
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	f383 8810 	msr	PRIMASK, r3
}
 80107d2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80107d4:	bf00      	nop
}
 80107d6:	3710      	adds	r7, #16
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	58000c00 	.word	0x58000c00

080107e0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80107e4:	2101      	movs	r1, #1
 80107e6:	4802      	ldr	r0, [pc, #8]	@ (80107f0 <HW_IPCC_BLE_SendCmd+0x10>)
 80107e8:	f7ff ff10 	bl	801060c <LL_C1_IPCC_SetFlag_CHx>

  return;
 80107ec:	bf00      	nop
}
 80107ee:	bd80      	pop	{r7, pc}
 80107f0:	58000c00 	.word	0x58000c00

080107f4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80107f8:	f7fd fd16 	bl	800e228 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80107fc:	2101      	movs	r1, #1
 80107fe:	4802      	ldr	r0, [pc, #8]	@ (8010808 <HW_IPCC_BLE_EvtHandler+0x14>)
 8010800:	f7ff fef6 	bl	80105f0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010804:	bf00      	nop
}
 8010806:	bd80      	pop	{r7, pc}
 8010808:	58000c00 	.word	0x58000c00

0801080c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b084      	sub	sp, #16
 8010810:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010812:	f3ef 8310 	mrs	r3, PRIMASK
 8010816:	607b      	str	r3, [r7, #4]
  return(result);
 8010818:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 801081a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801081c:	b672      	cpsid	i
}
 801081e:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8010820:	2120      	movs	r1, #32
 8010822:	4807      	ldr	r0, [pc, #28]	@ (8010840 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 8010824:	f7ff fec0 	bl	80105a8 <LL_C1_IPCC_DisableTransmitChannel>
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	f383 8810 	msr	PRIMASK, r3
}
 8010832:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 8010834:	f7fd fd28 	bl	800e288 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8010838:	bf00      	nop
}
 801083a:	3710      	adds	r7, #16
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	58000c00 	.word	0x58000c00

08010844 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b084      	sub	sp, #16
 8010848:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801084a:	f3ef 8310 	mrs	r3, PRIMASK
 801084e:	607b      	str	r3, [r7, #4]
  return(result);
 8010850:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8010852:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010854:	b672      	cpsid	i
}
 8010856:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010858:	2102      	movs	r1, #2
 801085a:	4806      	ldr	r0, [pc, #24]	@ (8010874 <HW_IPCC_SYS_Init+0x30>)
 801085c:	f7ff feb6 	bl	80105cc <LL_C1_IPCC_EnableReceiveChannel>
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	f383 8810 	msr	PRIMASK, r3
}
 801086a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 801086c:	bf00      	nop
}
 801086e:	3710      	adds	r7, #16
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	58000c00 	.word	0x58000c00

08010878 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b084      	sub	sp, #16
 801087c:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801087e:	2102      	movs	r1, #2
 8010880:	480b      	ldr	r0, [pc, #44]	@ (80108b0 <HW_IPCC_SYS_SendCmd+0x38>)
 8010882:	f7ff fec3 	bl	801060c <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010886:	f3ef 8310 	mrs	r3, PRIMASK
 801088a:	607b      	str	r3, [r7, #4]
  return(result);
 801088c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 801088e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010890:	b672      	cpsid	i
}
 8010892:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010894:	2102      	movs	r1, #2
 8010896:	4806      	ldr	r0, [pc, #24]	@ (80108b0 <HW_IPCC_SYS_SendCmd+0x38>)
 8010898:	f7ff fe73 	bl	8010582 <LL_C1_IPCC_EnableTransmitChannel>
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	f383 8810 	msr	PRIMASK, r3
}
 80108a6:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80108a8:	bf00      	nop
}
 80108aa:	3710      	adds	r7, #16
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}
 80108b0:	58000c00 	.word	0x58000c00

080108b4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b084      	sub	sp, #16
 80108b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108ba:	f3ef 8310 	mrs	r3, PRIMASK
 80108be:	607b      	str	r3, [r7, #4]
  return(result);
 80108c0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80108c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80108c4:	b672      	cpsid	i
}
 80108c6:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80108c8:	2102      	movs	r1, #2
 80108ca:	4807      	ldr	r0, [pc, #28]	@ (80108e8 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 80108cc:	f7ff fe6c 	bl	80105a8 <LL_C1_IPCC_DisableTransmitChannel>
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	f383 8810 	msr	PRIMASK, r3
}
 80108da:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 80108dc:	f7fd fd24 	bl	800e328 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80108e0:	bf00      	nop
}
 80108e2:	3710      	adds	r7, #16
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	58000c00 	.word	0x58000c00

080108ec <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80108f0:	f7fd fd30 	bl	800e354 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80108f4:	2102      	movs	r1, #2
 80108f6:	4802      	ldr	r0, [pc, #8]	@ (8010900 <HW_IPCC_SYS_EvtHandler+0x14>)
 80108f8:	f7ff fe7a 	bl	80105f0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80108fc:	bf00      	nop
}
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	58000c00 	.word	0x58000c00

08010904 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b086      	sub	sp, #24
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 801090c:	2108      	movs	r1, #8
 801090e:	4812      	ldr	r0, [pc, #72]	@ (8010958 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8010910:	f7ff fe8b 	bl	801062a <LL_C1_IPCC_IsActiveFlag_CHx>
 8010914:	4603      	mov	r3, r0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d013      	beq.n	8010942 <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 801091a:	4a10      	ldr	r2, [pc, #64]	@ (801095c <HW_IPCC_MM_SendFreeBuf+0x58>)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010920:	f3ef 8310 	mrs	r3, PRIMASK
 8010924:	60fb      	str	r3, [r7, #12]
  return(result);
 8010926:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 8010928:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801092a:	b672      	cpsid	i
}
 801092c:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801092e:	2108      	movs	r1, #8
 8010930:	4809      	ldr	r0, [pc, #36]	@ (8010958 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8010932:	f7ff fe26 	bl	8010582 <LL_C1_IPCC_EnableTransmitChannel>
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801093a:	693b      	ldr	r3, [r7, #16]
 801093c:	f383 8810 	msr	PRIMASK, r3
}
 8010940:	e005      	b.n	801094e <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010946:	2108      	movs	r1, #8
 8010948:	4803      	ldr	r0, [pc, #12]	@ (8010958 <HW_IPCC_MM_SendFreeBuf+0x54>)
 801094a:	f7ff fe5f 	bl	801060c <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 801094e:	bf00      	nop
}
 8010950:	3718      	adds	r7, #24
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}
 8010956:	bf00      	nop
 8010958:	58000c00 	.word	0x58000c00
 801095c:	2000060c 	.word	0x2000060c

08010960 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b084      	sub	sp, #16
 8010964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010966:	f3ef 8310 	mrs	r3, PRIMASK
 801096a:	607b      	str	r3, [r7, #4]
  return(result);
 801096c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 801096e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010970:	b672      	cpsid	i
}
 8010972:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010974:	2108      	movs	r1, #8
 8010976:	480a      	ldr	r0, [pc, #40]	@ (80109a0 <HW_IPCC_MM_FreeBufHandler+0x40>)
 8010978:	f7ff fe16 	bl	80105a8 <LL_C1_IPCC_DisableTransmitChannel>
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	f383 8810 	msr	PRIMASK, r3
}
 8010986:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 8010988:	4b06      	ldr	r3, [pc, #24]	@ (80109a4 <HW_IPCC_MM_FreeBufHandler+0x44>)
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801098e:	2108      	movs	r1, #8
 8010990:	4803      	ldr	r0, [pc, #12]	@ (80109a0 <HW_IPCC_MM_FreeBufHandler+0x40>)
 8010992:	f7ff fe3b 	bl	801060c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010996:	bf00      	nop
}
 8010998:	3710      	adds	r7, #16
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	58000c00 	.word	0x58000c00
 80109a4:	2000060c 	.word	0x2000060c

080109a8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b084      	sub	sp, #16
 80109ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80109ae:	f3ef 8310 	mrs	r3, PRIMASK
 80109b2:	607b      	str	r3, [r7, #4]
  return(result);
 80109b4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80109b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80109b8:	b672      	cpsid	i
}
 80109ba:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80109bc:	2108      	movs	r1, #8
 80109be:	4806      	ldr	r0, [pc, #24]	@ (80109d8 <HW_IPCC_TRACES_Init+0x30>)
 80109c0:	f7ff fe04 	bl	80105cc <LL_C1_IPCC_EnableReceiveChannel>
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	f383 8810 	msr	PRIMASK, r3
}
 80109ce:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80109d0:	bf00      	nop
}
 80109d2:	3710      	adds	r7, #16
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}
 80109d8:	58000c00 	.word	0x58000c00

080109dc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80109e0:	f7fd fd60 	bl	800e4a4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80109e4:	2108      	movs	r1, #8
 80109e6:	4802      	ldr	r0, [pc, #8]	@ (80109f0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80109e8:	f7ff fe02 	bl	80105f0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80109ec:	bf00      	nop
}
 80109ee:	bd80      	pop	{r7, pc}
 80109f0:	58000c00 	.word	0x58000c00

080109f4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80109f8:	2200      	movs	r2, #0
 80109fa:	4912      	ldr	r1, [pc, #72]	@ (8010a44 <MX_USB_Device_Init+0x50>)
 80109fc:	4812      	ldr	r0, [pc, #72]	@ (8010a48 <MX_USB_Device_Init+0x54>)
 80109fe:	f7fa fabd 	bl	800af7c <USBD_Init>
 8010a02:	4603      	mov	r3, r0
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d001      	beq.n	8010a0c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010a08:	f7f1 fd8a 	bl	8002520 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010a0c:	490f      	ldr	r1, [pc, #60]	@ (8010a4c <MX_USB_Device_Init+0x58>)
 8010a0e:	480e      	ldr	r0, [pc, #56]	@ (8010a48 <MX_USB_Device_Init+0x54>)
 8010a10:	f7fa fae4 	bl	800afdc <USBD_RegisterClass>
 8010a14:	4603      	mov	r3, r0
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d001      	beq.n	8010a1e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8010a1a:	f7f1 fd81 	bl	8002520 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8010a1e:	490c      	ldr	r1, [pc, #48]	@ (8010a50 <MX_USB_Device_Init+0x5c>)
 8010a20:	4809      	ldr	r0, [pc, #36]	@ (8010a48 <MX_USB_Device_Init+0x54>)
 8010a22:	f7fa fa1b 	bl	800ae5c <USBD_CDC_RegisterInterface>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d001      	beq.n	8010a30 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010a2c:	f7f1 fd78 	bl	8002520 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010a30:	4805      	ldr	r0, [pc, #20]	@ (8010a48 <MX_USB_Device_Init+0x54>)
 8010a32:	f7fa fb09 	bl	800b048 <USBD_Start>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d001      	beq.n	8010a40 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010a3c:	f7f1 fd70 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010a40:	bf00      	nop
 8010a42:	bd80      	pop	{r7, pc}
 8010a44:	200000cc 	.word	0x200000cc
 8010a48:	20000610 	.word	0x20000610
 8010a4c:	20000020 	.word	0x20000020
 8010a50:	200000b8 	.word	0x200000b8

08010a54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010a58:	2200      	movs	r2, #0
 8010a5a:	4905      	ldr	r1, [pc, #20]	@ (8010a70 <CDC_Init_FS+0x1c>)
 8010a5c:	4805      	ldr	r0, [pc, #20]	@ (8010a74 <CDC_Init_FS+0x20>)
 8010a5e:	f7fa fa17 	bl	800ae90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010a62:	4905      	ldr	r1, [pc, #20]	@ (8010a78 <CDC_Init_FS+0x24>)
 8010a64:	4803      	ldr	r0, [pc, #12]	@ (8010a74 <CDC_Init_FS+0x20>)
 8010a66:	f7fa fa35 	bl	800aed4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010a6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	200010ec 	.word	0x200010ec
 8010a74:	20000610 	.word	0x20000610
 8010a78:	200008ec 	.word	0x200008ec

08010a7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010a80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr

08010a8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b083      	sub	sp, #12
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	4603      	mov	r3, r0
 8010a94:	6039      	str	r1, [r7, #0]
 8010a96:	71fb      	strb	r3, [r7, #7]
 8010a98:	4613      	mov	r3, r2
 8010a9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010a9c:	79fb      	ldrb	r3, [r7, #7]
 8010a9e:	2b23      	cmp	r3, #35	@ 0x23
 8010aa0:	d84a      	bhi.n	8010b38 <CDC_Control_FS+0xac>
 8010aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8010aa8 <CDC_Control_FS+0x1c>)
 8010aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa8:	08010b39 	.word	0x08010b39
 8010aac:	08010b39 	.word	0x08010b39
 8010ab0:	08010b39 	.word	0x08010b39
 8010ab4:	08010b39 	.word	0x08010b39
 8010ab8:	08010b39 	.word	0x08010b39
 8010abc:	08010b39 	.word	0x08010b39
 8010ac0:	08010b39 	.word	0x08010b39
 8010ac4:	08010b39 	.word	0x08010b39
 8010ac8:	08010b39 	.word	0x08010b39
 8010acc:	08010b39 	.word	0x08010b39
 8010ad0:	08010b39 	.word	0x08010b39
 8010ad4:	08010b39 	.word	0x08010b39
 8010ad8:	08010b39 	.word	0x08010b39
 8010adc:	08010b39 	.word	0x08010b39
 8010ae0:	08010b39 	.word	0x08010b39
 8010ae4:	08010b39 	.word	0x08010b39
 8010ae8:	08010b39 	.word	0x08010b39
 8010aec:	08010b39 	.word	0x08010b39
 8010af0:	08010b39 	.word	0x08010b39
 8010af4:	08010b39 	.word	0x08010b39
 8010af8:	08010b39 	.word	0x08010b39
 8010afc:	08010b39 	.word	0x08010b39
 8010b00:	08010b39 	.word	0x08010b39
 8010b04:	08010b39 	.word	0x08010b39
 8010b08:	08010b39 	.word	0x08010b39
 8010b0c:	08010b39 	.word	0x08010b39
 8010b10:	08010b39 	.word	0x08010b39
 8010b14:	08010b39 	.word	0x08010b39
 8010b18:	08010b39 	.word	0x08010b39
 8010b1c:	08010b39 	.word	0x08010b39
 8010b20:	08010b39 	.word	0x08010b39
 8010b24:	08010b39 	.word	0x08010b39
 8010b28:	08010b39 	.word	0x08010b39
 8010b2c:	08010b39 	.word	0x08010b39
 8010b30:	08010b39 	.word	0x08010b39
 8010b34:	08010b39 	.word	0x08010b39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010b38:	bf00      	nop
  }

  return (USBD_OK);
 8010b3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	370c      	adds	r7, #12
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr

08010b48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b082      	sub	sp, #8
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010b52:	6879      	ldr	r1, [r7, #4]
 8010b54:	4805      	ldr	r0, [pc, #20]	@ (8010b6c <CDC_Receive_FS+0x24>)
 8010b56:	f7fa f9bd 	bl	800aed4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010b5a:	4804      	ldr	r0, [pc, #16]	@ (8010b6c <CDC_Receive_FS+0x24>)
 8010b5c:	f7fa f9d8 	bl	800af10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010b60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3708      	adds	r7, #8
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	20000610 	.word	0x20000610

08010b70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010b70:	b480      	push	{r7}
 8010b72:	b087      	sub	sp, #28
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	60f8      	str	r0, [r7, #12]
 8010b78:	60b9      	str	r1, [r7, #8]
 8010b7a:	4613      	mov	r3, r2
 8010b7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010b82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	371c      	adds	r7, #28
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b90:	4770      	bx	lr
	...

08010b94 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b94:	b480      	push	{r7}
 8010b96:	b083      	sub	sp, #12
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	6039      	str	r1, [r7, #0]
 8010b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	2212      	movs	r2, #18
 8010ba4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8010ba6:	4b03      	ldr	r3, [pc, #12]	@ (8010bb4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	370c      	adds	r7, #12
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr
 8010bb4:	200000ec 	.word	0x200000ec

08010bb8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bb8:	b480      	push	{r7}
 8010bba:	b083      	sub	sp, #12
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	6039      	str	r1, [r7, #0]
 8010bc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	2204      	movs	r2, #4
 8010bc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010bca:	4b03      	ldr	r3, [pc, #12]	@ (8010bd8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	370c      	adds	r7, #12
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd6:	4770      	bx	lr
 8010bd8:	20000100 	.word	0x20000100

08010bdc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	4603      	mov	r3, r0
 8010be4:	6039      	str	r1, [r7, #0]
 8010be6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010be8:	79fb      	ldrb	r3, [r7, #7]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d105      	bne.n	8010bfa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010bee:	683a      	ldr	r2, [r7, #0]
 8010bf0:	4907      	ldr	r1, [pc, #28]	@ (8010c10 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010bf2:	4808      	ldr	r0, [pc, #32]	@ (8010c14 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010bf4:	f7fb fb70 	bl	800c2d8 <USBD_GetString>
 8010bf8:	e004      	b.n	8010c04 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010bfa:	683a      	ldr	r2, [r7, #0]
 8010bfc:	4904      	ldr	r1, [pc, #16]	@ (8010c10 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010bfe:	4805      	ldr	r0, [pc, #20]	@ (8010c14 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010c00:	f7fb fb6a 	bl	800c2d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c04:	4b02      	ldr	r3, [pc, #8]	@ (8010c10 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3708      	adds	r7, #8
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	200018ec 	.word	0x200018ec
 8010c14:	08013f00 	.word	0x08013f00

08010c18 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	4603      	mov	r3, r0
 8010c20:	6039      	str	r1, [r7, #0]
 8010c22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010c24:	683a      	ldr	r2, [r7, #0]
 8010c26:	4904      	ldr	r1, [pc, #16]	@ (8010c38 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8010c28:	4804      	ldr	r0, [pc, #16]	@ (8010c3c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8010c2a:	f7fb fb55 	bl	800c2d8 <USBD_GetString>
  return USBD_StrDesc;
 8010c2e:	4b02      	ldr	r3, [pc, #8]	@ (8010c38 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3708      	adds	r7, #8
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}
 8010c38:	200018ec 	.word	0x200018ec
 8010c3c:	08013f18 	.word	0x08013f18

08010c40 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	4603      	mov	r3, r0
 8010c48:	6039      	str	r1, [r7, #0]
 8010c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	221a      	movs	r2, #26
 8010c50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010c52:	f000 f843 	bl	8010cdc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010c56:	4b02      	ldr	r3, [pc, #8]	@ (8010c60 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	3708      	adds	r7, #8
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	bd80      	pop	{r7, pc}
 8010c60:	20000104 	.word	0x20000104

08010c64 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b082      	sub	sp, #8
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	6039      	str	r1, [r7, #0]
 8010c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010c70:	79fb      	ldrb	r3, [r7, #7]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d105      	bne.n	8010c82 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010c76:	683a      	ldr	r2, [r7, #0]
 8010c78:	4907      	ldr	r1, [pc, #28]	@ (8010c98 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010c7a:	4808      	ldr	r0, [pc, #32]	@ (8010c9c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010c7c:	f7fb fb2c 	bl	800c2d8 <USBD_GetString>
 8010c80:	e004      	b.n	8010c8c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010c82:	683a      	ldr	r2, [r7, #0]
 8010c84:	4904      	ldr	r1, [pc, #16]	@ (8010c98 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010c86:	4805      	ldr	r0, [pc, #20]	@ (8010c9c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010c88:	f7fb fb26 	bl	800c2d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c8c:	4b02      	ldr	r3, [pc, #8]	@ (8010c98 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3708      	adds	r7, #8
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	200018ec 	.word	0x200018ec
 8010c9c:	08013f2c 	.word	0x08013f2c

08010ca0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	6039      	str	r1, [r7, #0]
 8010caa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010cac:	79fb      	ldrb	r3, [r7, #7]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d105      	bne.n	8010cbe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010cb2:	683a      	ldr	r2, [r7, #0]
 8010cb4:	4907      	ldr	r1, [pc, #28]	@ (8010cd4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010cb6:	4808      	ldr	r0, [pc, #32]	@ (8010cd8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010cb8:	f7fb fb0e 	bl	800c2d8 <USBD_GetString>
 8010cbc:	e004      	b.n	8010cc8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010cbe:	683a      	ldr	r2, [r7, #0]
 8010cc0:	4904      	ldr	r1, [pc, #16]	@ (8010cd4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010cc2:	4805      	ldr	r0, [pc, #20]	@ (8010cd8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010cc4:	f7fb fb08 	bl	800c2d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010cc8:	4b02      	ldr	r3, [pc, #8]	@ (8010cd4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8010cca:	4618      	mov	r0, r3
 8010ccc:	3708      	adds	r7, #8
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	200018ec 	.word	0x200018ec
 8010cd8:	08013f38 	.word	0x08013f38

08010cdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b084      	sub	sp, #16
 8010ce0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8010d20 <Get_SerialNum+0x44>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8010d24 <Get_SerialNum+0x48>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010cee:	4b0e      	ldr	r3, [pc, #56]	@ (8010d28 <Get_SerialNum+0x4c>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010cf4:	68fa      	ldr	r2, [r7, #12]
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	4413      	add	r3, r2
 8010cfa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d009      	beq.n	8010d16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010d02:	2208      	movs	r2, #8
 8010d04:	4909      	ldr	r1, [pc, #36]	@ (8010d2c <Get_SerialNum+0x50>)
 8010d06:	68f8      	ldr	r0, [r7, #12]
 8010d08:	f000 f814 	bl	8010d34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010d0c:	2204      	movs	r2, #4
 8010d0e:	4908      	ldr	r1, [pc, #32]	@ (8010d30 <Get_SerialNum+0x54>)
 8010d10:	68b8      	ldr	r0, [r7, #8]
 8010d12:	f000 f80f 	bl	8010d34 <IntToUnicode>
  }
}
 8010d16:	bf00      	nop
 8010d18:	3710      	adds	r7, #16
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	1fff7590 	.word	0x1fff7590
 8010d24:	1fff7594 	.word	0x1fff7594
 8010d28:	1fff7598 	.word	0x1fff7598
 8010d2c:	20000106 	.word	0x20000106
 8010d30:	20000116 	.word	0x20000116

08010d34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010d34:	b480      	push	{r7}
 8010d36:	b087      	sub	sp, #28
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	60f8      	str	r0, [r7, #12]
 8010d3c:	60b9      	str	r1, [r7, #8]
 8010d3e:	4613      	mov	r3, r2
 8010d40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010d42:	2300      	movs	r3, #0
 8010d44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010d46:	2300      	movs	r3, #0
 8010d48:	75fb      	strb	r3, [r7, #23]
 8010d4a:	e027      	b.n	8010d9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	0f1b      	lsrs	r3, r3, #28
 8010d50:	2b09      	cmp	r3, #9
 8010d52:	d80b      	bhi.n	8010d6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	0f1b      	lsrs	r3, r3, #28
 8010d58:	b2da      	uxtb	r2, r3
 8010d5a:	7dfb      	ldrb	r3, [r7, #23]
 8010d5c:	005b      	lsls	r3, r3, #1
 8010d5e:	4619      	mov	r1, r3
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	440b      	add	r3, r1
 8010d64:	3230      	adds	r2, #48	@ 0x30
 8010d66:	b2d2      	uxtb	r2, r2
 8010d68:	701a      	strb	r2, [r3, #0]
 8010d6a:	e00a      	b.n	8010d82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	0f1b      	lsrs	r3, r3, #28
 8010d70:	b2da      	uxtb	r2, r3
 8010d72:	7dfb      	ldrb	r3, [r7, #23]
 8010d74:	005b      	lsls	r3, r3, #1
 8010d76:	4619      	mov	r1, r3
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	440b      	add	r3, r1
 8010d7c:	3237      	adds	r2, #55	@ 0x37
 8010d7e:	b2d2      	uxtb	r2, r2
 8010d80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	011b      	lsls	r3, r3, #4
 8010d86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010d88:	7dfb      	ldrb	r3, [r7, #23]
 8010d8a:	005b      	lsls	r3, r3, #1
 8010d8c:	3301      	adds	r3, #1
 8010d8e:	68ba      	ldr	r2, [r7, #8]
 8010d90:	4413      	add	r3, r2
 8010d92:	2200      	movs	r2, #0
 8010d94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010d96:	7dfb      	ldrb	r3, [r7, #23]
 8010d98:	3301      	adds	r3, #1
 8010d9a:	75fb      	strb	r3, [r7, #23]
 8010d9c:	7dfa      	ldrb	r2, [r7, #23]
 8010d9e:	79fb      	ldrb	r3, [r7, #7]
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d3d3      	bcc.n	8010d4c <IntToUnicode+0x18>
  }
}
 8010da4:	bf00      	nop
 8010da6:	bf00      	nop
 8010da8:	371c      	adds	r7, #28
 8010daa:	46bd      	mov	sp, r7
 8010dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db0:	4770      	bx	lr

08010db2 <LL_AHB2_GRP1_EnableClock>:
{
 8010db2:	b480      	push	{r7}
 8010db4:	b085      	sub	sp, #20
 8010db6:	af00      	add	r7, sp, #0
 8010db8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8010dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010dbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	4313      	orrs	r3, r2
 8010dc8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8010dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010dce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	4013      	ands	r3, r2
 8010dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
}
 8010dd8:	bf00      	nop
 8010dda:	3714      	adds	r7, #20
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de2:	4770      	bx	lr

08010de4 <LL_APB1_GRP1_EnableClock>:
{
 8010de4:	b480      	push	{r7}
 8010de6:	b085      	sub	sp, #20
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8010dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010df0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010df2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	4313      	orrs	r3, r2
 8010dfa:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8010dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010e00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4013      	ands	r3, r2
 8010e06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010e08:	68fb      	ldr	r3, [r7, #12]
}
 8010e0a:	bf00      	nop
 8010e0c:	3714      	adds	r7, #20
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e14:	4770      	bx	lr
	...

08010e18 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b09c      	sub	sp, #112	@ 0x70
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e20:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8010e24:	2200      	movs	r2, #0
 8010e26:	601a      	str	r2, [r3, #0]
 8010e28:	605a      	str	r2, [r3, #4]
 8010e2a:	609a      	str	r2, [r3, #8]
 8010e2c:	60da      	str	r2, [r3, #12]
 8010e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010e30:	f107 030c 	add.w	r3, r7, #12
 8010e34:	2250      	movs	r2, #80	@ 0x50
 8010e36:	2100      	movs	r1, #0
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f000 ff91 	bl	8011d60 <memset>
  if(pcdHandle->Instance==USB)
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	4a23      	ldr	r2, [pc, #140]	@ (8010ed0 <HAL_PCD_MspInit+0xb8>)
 8010e44:	4293      	cmp	r3, r2
 8010e46:	d13e      	bne.n	8010ec6 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010e48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e4c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8010e4e:	2318      	movs	r3, #24
 8010e50:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8010e52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010e56:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8010e58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010e5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8010e5e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8010e62:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8010e64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8010e68:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8010e6a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8010e6e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010e70:	f107 030c 	add.w	r3, r7, #12
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7f6 f815 	bl	8006ea4 <HAL_RCCEx_PeriphCLKConfig>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d001      	beq.n	8010e84 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8010e80:	f7f1 fb4e 	bl	8002520 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e84:	2001      	movs	r0, #1
 8010e86:	f7ff ff94 	bl	8010db2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010e8a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010e8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e90:	2302      	movs	r3, #2
 8010e92:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e94:	2300      	movs	r3, #0
 8010e96:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010e98:	2300      	movs	r3, #0
 8010e9a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8010e9c:	230a      	movs	r3, #10
 8010e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ea0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8010eaa:	f7f2 fc75 	bl	8003798 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010eae:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8010eb2:	f7ff ff97 	bl	8010de4 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	2100      	movs	r1, #0
 8010eba:	2014      	movs	r0, #20
 8010ebc:	f7f2 f9e7 	bl	800328e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010ec0:	2014      	movs	r0, #20
 8010ec2:	f7f2 f9fe 	bl	80032c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010ec6:	bf00      	nop
 8010ec8:	3770      	adds	r7, #112	@ 0x70
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}
 8010ece:	bf00      	nop
 8010ed0:	40006800 	.word	0x40006800

08010ed4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8010ee8:	4619      	mov	r1, r3
 8010eea:	4610      	mov	r0, r2
 8010eec:	f7fa f8f9 	bl	800b0e2 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010ef0:	bf00      	nop
 8010ef2:	3708      	adds	r7, #8
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	460b      	mov	r3, r1
 8010f02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010f0a:	78fa      	ldrb	r2, [r7, #3]
 8010f0c:	6879      	ldr	r1, [r7, #4]
 8010f0e:	4613      	mov	r3, r2
 8010f10:	009b      	lsls	r3, r3, #2
 8010f12:	4413      	add	r3, r2
 8010f14:	00db      	lsls	r3, r3, #3
 8010f16:	440b      	add	r3, r1
 8010f18:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	78fb      	ldrb	r3, [r7, #3]
 8010f20:	4619      	mov	r1, r3
 8010f22:	f7fa f933 	bl	800b18c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8010f26:	bf00      	nop
 8010f28:	3708      	adds	r7, #8
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}

08010f2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f2e:	b580      	push	{r7, lr}
 8010f30:	b082      	sub	sp, #8
 8010f32:	af00      	add	r7, sp, #0
 8010f34:	6078      	str	r0, [r7, #4]
 8010f36:	460b      	mov	r3, r1
 8010f38:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010f40:	78fa      	ldrb	r2, [r7, #3]
 8010f42:	6879      	ldr	r1, [r7, #4]
 8010f44:	4613      	mov	r3, r2
 8010f46:	009b      	lsls	r3, r3, #2
 8010f48:	4413      	add	r3, r2
 8010f4a:	00db      	lsls	r3, r3, #3
 8010f4c:	440b      	add	r3, r1
 8010f4e:	3324      	adds	r3, #36	@ 0x24
 8010f50:	681a      	ldr	r2, [r3, #0]
 8010f52:	78fb      	ldrb	r3, [r7, #3]
 8010f54:	4619      	mov	r1, r3
 8010f56:	f7fa f9cc 	bl	800b2f2 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8010f5a:	bf00      	nop
 8010f5c:	3708      	adds	r7, #8
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	bd80      	pop	{r7, pc}

08010f62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f62:	b580      	push	{r7, lr}
 8010f64:	b082      	sub	sp, #8
 8010f66:	af00      	add	r7, sp, #0
 8010f68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7fa fb06 	bl	800b582 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8010f76:	bf00      	nop
 8010f78:	3708      	adds	r7, #8
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}

08010f7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f7e:	b580      	push	{r7, lr}
 8010f80:	b084      	sub	sp, #16
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010f86:	2301      	movs	r3, #1
 8010f88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	795b      	ldrb	r3, [r3, #5]
 8010f8e:	2b02      	cmp	r3, #2
 8010f90:	d001      	beq.n	8010f96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010f92:	f7f1 fac5 	bl	8002520 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010f9c:	7bfa      	ldrb	r2, [r7, #15]
 8010f9e:	4611      	mov	r1, r2
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f7fa faaa 	bl	800b4fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fa fa52 	bl	800b456 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010fb2:	bf00      	nop
 8010fb4:	3710      	adds	r7, #16
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
	...

08010fbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7fa faa5 	bl	800b51a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	7a5b      	ldrb	r3, [r3, #9]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d005      	beq.n	8010fe4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010fd8:	4b04      	ldr	r3, [pc, #16]	@ (8010fec <HAL_PCD_SuspendCallback+0x30>)
 8010fda:	691b      	ldr	r3, [r3, #16]
 8010fdc:	4a03      	ldr	r2, [pc, #12]	@ (8010fec <HAL_PCD_SuspendCallback+0x30>)
 8010fde:	f043 0306 	orr.w	r3, r3, #6
 8010fe2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8010fe4:	bf00      	nop
 8010fe6:	3708      	adds	r7, #8
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}
 8010fec:	e000ed00 	.word	0xe000ed00

08010ff0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b082      	sub	sp, #8
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	7a5b      	ldrb	r3, [r3, #9]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d007      	beq.n	8011010 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011000:	4b08      	ldr	r3, [pc, #32]	@ (8011024 <HAL_PCD_ResumeCallback+0x34>)
 8011002:	691b      	ldr	r3, [r3, #16]
 8011004:	4a07      	ldr	r2, [pc, #28]	@ (8011024 <HAL_PCD_ResumeCallback+0x34>)
 8011006:	f023 0306 	bic.w	r3, r3, #6
 801100a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801100c:	f000 f9fa 	bl	8011404 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011016:	4618      	mov	r0, r3
 8011018:	f7fa fa9b 	bl	800b552 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801101c:	bf00      	nop
 801101e:	3708      	adds	r7, #8
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	e000ed00 	.word	0xe000ed00

08011028 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b082      	sub	sp, #8
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011030:	4a2c      	ldr	r2, [pc, #176]	@ (80110e4 <USBD_LL_Init+0xbc>)
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	4a2a      	ldr	r2, [pc, #168]	@ (80110e4 <USBD_LL_Init+0xbc>)
 801103c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8011040:	f7f4 fc2e 	bl	80058a0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8011044:	4b27      	ldr	r3, [pc, #156]	@ (80110e4 <USBD_LL_Init+0xbc>)
 8011046:	4a28      	ldr	r2, [pc, #160]	@ (80110e8 <USBD_LL_Init+0xc0>)
 8011048:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801104a:	4b26      	ldr	r3, [pc, #152]	@ (80110e4 <USBD_LL_Init+0xbc>)
 801104c:	2208      	movs	r2, #8
 801104e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011050:	4b24      	ldr	r3, [pc, #144]	@ (80110e4 <USBD_LL_Init+0xbc>)
 8011052:	2202      	movs	r2, #2
 8011054:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011056:	4b23      	ldr	r3, [pc, #140]	@ (80110e4 <USBD_LL_Init+0xbc>)
 8011058:	2202      	movs	r2, #2
 801105a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801105c:	4b21      	ldr	r3, [pc, #132]	@ (80110e4 <USBD_LL_Init+0xbc>)
 801105e:	2200      	movs	r2, #0
 8011060:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011062:	4b20      	ldr	r3, [pc, #128]	@ (80110e4 <USBD_LL_Init+0xbc>)
 8011064:	2200      	movs	r2, #0
 8011066:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011068:	4b1e      	ldr	r3, [pc, #120]	@ (80110e4 <USBD_LL_Init+0xbc>)
 801106a:	2200      	movs	r2, #0
 801106c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801106e:	4b1d      	ldr	r3, [pc, #116]	@ (80110e4 <USBD_LL_Init+0xbc>)
 8011070:	2200      	movs	r2, #0
 8011072:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011074:	481b      	ldr	r0, [pc, #108]	@ (80110e4 <USBD_LL_Init+0xbc>)
 8011076:	f7f2 fef3 	bl	8003e60 <HAL_PCD_Init>
 801107a:	4603      	mov	r3, r0
 801107c:	2b00      	cmp	r3, #0
 801107e:	d001      	beq.n	8011084 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8011080:	f7f1 fa4e 	bl	8002520 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801108a:	2318      	movs	r3, #24
 801108c:	2200      	movs	r2, #0
 801108e:	2100      	movs	r1, #0
 8011090:	f7f4 fb7a 	bl	8005788 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801109a:	2358      	movs	r3, #88	@ 0x58
 801109c:	2200      	movs	r2, #0
 801109e:	2180      	movs	r1, #128	@ 0x80
 80110a0:	f7f4 fb72 	bl	8005788 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80110aa:	23c0      	movs	r3, #192	@ 0xc0
 80110ac:	2200      	movs	r2, #0
 80110ae:	2181      	movs	r1, #129	@ 0x81
 80110b0:	f7f4 fb6a 	bl	8005788 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80110ba:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80110be:	2200      	movs	r2, #0
 80110c0:	2101      	movs	r1, #1
 80110c2:	f7f4 fb61 	bl	8005788 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80110cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80110d0:	2200      	movs	r2, #0
 80110d2:	2182      	movs	r1, #130	@ 0x82
 80110d4:	f7f4 fb58 	bl	8005788 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80110d8:	2300      	movs	r3, #0
}
 80110da:	4618      	mov	r0, r3
 80110dc:	3708      	adds	r7, #8
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}
 80110e2:	bf00      	nop
 80110e4:	20001aec 	.word	0x20001aec
 80110e8:	40006800 	.word	0x40006800

080110ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110f4:	2300      	movs	r3, #0
 80110f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110f8:	2300      	movs	r3, #0
 80110fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011102:	4618      	mov	r0, r3
 8011104:	f7f2 ff7a 	bl	8003ffc <HAL_PCD_Start>
 8011108:	4603      	mov	r3, r0
 801110a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801110c:	7bfb      	ldrb	r3, [r7, #15]
 801110e:	4618      	mov	r0, r3
 8011110:	f000 f97e 	bl	8011410 <USBD_Get_USB_Status>
 8011114:	4603      	mov	r3, r0
 8011116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011118:	7bbb      	ldrb	r3, [r7, #14]
}
 801111a:	4618      	mov	r0, r3
 801111c:	3710      	adds	r7, #16
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}

08011122 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011122:	b580      	push	{r7, lr}
 8011124:	b084      	sub	sp, #16
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	4608      	mov	r0, r1
 801112c:	4611      	mov	r1, r2
 801112e:	461a      	mov	r2, r3
 8011130:	4603      	mov	r3, r0
 8011132:	70fb      	strb	r3, [r7, #3]
 8011134:	460b      	mov	r3, r1
 8011136:	70bb      	strb	r3, [r7, #2]
 8011138:	4613      	mov	r3, r2
 801113a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801113c:	2300      	movs	r3, #0
 801113e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011140:	2300      	movs	r3, #0
 8011142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801114a:	78bb      	ldrb	r3, [r7, #2]
 801114c:	883a      	ldrh	r2, [r7, #0]
 801114e:	78f9      	ldrb	r1, [r7, #3]
 8011150:	f7f3 f8c1 	bl	80042d6 <HAL_PCD_EP_Open>
 8011154:	4603      	mov	r3, r0
 8011156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011158:	7bfb      	ldrb	r3, [r7, #15]
 801115a:	4618      	mov	r0, r3
 801115c:	f000 f958 	bl	8011410 <USBD_Get_USB_Status>
 8011160:	4603      	mov	r3, r0
 8011162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011164:	7bbb      	ldrb	r3, [r7, #14]
}
 8011166:	4618      	mov	r0, r3
 8011168:	3710      	adds	r7, #16
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}

0801116e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801116e:	b580      	push	{r7, lr}
 8011170:	b084      	sub	sp, #16
 8011172:	af00      	add	r7, sp, #0
 8011174:	6078      	str	r0, [r7, #4]
 8011176:	460b      	mov	r3, r1
 8011178:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801117a:	2300      	movs	r3, #0
 801117c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801117e:	2300      	movs	r3, #0
 8011180:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011188:	78fa      	ldrb	r2, [r7, #3]
 801118a:	4611      	mov	r1, r2
 801118c:	4618      	mov	r0, r3
 801118e:	f7f3 f901 	bl	8004394 <HAL_PCD_EP_Close>
 8011192:	4603      	mov	r3, r0
 8011194:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011196:	7bfb      	ldrb	r3, [r7, #15]
 8011198:	4618      	mov	r0, r3
 801119a:	f000 f939 	bl	8011410 <USBD_Get_USB_Status>
 801119e:	4603      	mov	r3, r0
 80111a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3710      	adds	r7, #16
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	460b      	mov	r3, r1
 80111b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111b8:	2300      	movs	r3, #0
 80111ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111bc:	2300      	movs	r3, #0
 80111be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80111c6:	78fa      	ldrb	r2, [r7, #3]
 80111c8:	4611      	mov	r1, r2
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7f3 f9aa 	bl	8004524 <HAL_PCD_EP_SetStall>
 80111d0:	4603      	mov	r3, r0
 80111d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111d4:	7bfb      	ldrb	r3, [r7, #15]
 80111d6:	4618      	mov	r0, r3
 80111d8:	f000 f91a 	bl	8011410 <USBD_Get_USB_Status>
 80111dc:	4603      	mov	r3, r0
 80111de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3710      	adds	r7, #16
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}

080111ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111ea:	b580      	push	{r7, lr}
 80111ec:	b084      	sub	sp, #16
 80111ee:	af00      	add	r7, sp, #0
 80111f0:	6078      	str	r0, [r7, #4]
 80111f2:	460b      	mov	r3, r1
 80111f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80111f6:	2300      	movs	r3, #0
 80111f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80111fa:	2300      	movs	r3, #0
 80111fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011204:	78fa      	ldrb	r2, [r7, #3]
 8011206:	4611      	mov	r1, r2
 8011208:	4618      	mov	r0, r3
 801120a:	f7f3 f9dd 	bl	80045c8 <HAL_PCD_EP_ClrStall>
 801120e:	4603      	mov	r3, r0
 8011210:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011212:	7bfb      	ldrb	r3, [r7, #15]
 8011214:	4618      	mov	r0, r3
 8011216:	f000 f8fb 	bl	8011410 <USBD_Get_USB_Status>
 801121a:	4603      	mov	r3, r0
 801121c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801121e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011220:	4618      	mov	r0, r3
 8011222:	3710      	adds	r7, #16
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}

08011228 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011228:	b480      	push	{r7}
 801122a:	b085      	sub	sp, #20
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	460b      	mov	r3, r1
 8011232:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801123a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801123c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011240:	2b00      	cmp	r3, #0
 8011242:	da0b      	bge.n	801125c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011244:	78fb      	ldrb	r3, [r7, #3]
 8011246:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801124a:	68f9      	ldr	r1, [r7, #12]
 801124c:	4613      	mov	r3, r2
 801124e:	009b      	lsls	r3, r3, #2
 8011250:	4413      	add	r3, r2
 8011252:	00db      	lsls	r3, r3, #3
 8011254:	440b      	add	r3, r1
 8011256:	3312      	adds	r3, #18
 8011258:	781b      	ldrb	r3, [r3, #0]
 801125a:	e00b      	b.n	8011274 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801125c:	78fb      	ldrb	r3, [r7, #3]
 801125e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011262:	68f9      	ldr	r1, [r7, #12]
 8011264:	4613      	mov	r3, r2
 8011266:	009b      	lsls	r3, r3, #2
 8011268:	4413      	add	r3, r2
 801126a:	00db      	lsls	r3, r3, #3
 801126c:	440b      	add	r3, r1
 801126e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8011272:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011274:	4618      	mov	r0, r3
 8011276:	3714      	adds	r7, #20
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b084      	sub	sp, #16
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	460b      	mov	r3, r1
 801128a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801128c:	2300      	movs	r3, #0
 801128e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011290:	2300      	movs	r3, #0
 8011292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801129a:	78fa      	ldrb	r2, [r7, #3]
 801129c:	4611      	mov	r1, r2
 801129e:	4618      	mov	r0, r3
 80112a0:	f7f2 fff5 	bl	800428e <HAL_PCD_SetAddress>
 80112a4:	4603      	mov	r3, r0
 80112a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112a8:	7bfb      	ldrb	r3, [r7, #15]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f000 f8b0 	bl	8011410 <USBD_Get_USB_Status>
 80112b0:	4603      	mov	r3, r0
 80112b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3710      	adds	r7, #16
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}

080112be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80112be:	b580      	push	{r7, lr}
 80112c0:	b086      	sub	sp, #24
 80112c2:	af00      	add	r7, sp, #0
 80112c4:	60f8      	str	r0, [r7, #12]
 80112c6:	607a      	str	r2, [r7, #4]
 80112c8:	603b      	str	r3, [r7, #0]
 80112ca:	460b      	mov	r3, r1
 80112cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112ce:	2300      	movs	r3, #0
 80112d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112d2:	2300      	movs	r3, #0
 80112d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80112dc:	7af9      	ldrb	r1, [r7, #11]
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	687a      	ldr	r2, [r7, #4]
 80112e2:	f7f3 f8e8 	bl	80044b6 <HAL_PCD_EP_Transmit>
 80112e6:	4603      	mov	r3, r0
 80112e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112ea:	7dfb      	ldrb	r3, [r7, #23]
 80112ec:	4618      	mov	r0, r3
 80112ee:	f000 f88f 	bl	8011410 <USBD_Get_USB_Status>
 80112f2:	4603      	mov	r3, r0
 80112f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80112f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3718      	adds	r7, #24
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}

08011300 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b086      	sub	sp, #24
 8011304:	af00      	add	r7, sp, #0
 8011306:	60f8      	str	r0, [r7, #12]
 8011308:	607a      	str	r2, [r7, #4]
 801130a:	603b      	str	r3, [r7, #0]
 801130c:	460b      	mov	r3, r1
 801130e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011310:	2300      	movs	r3, #0
 8011312:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011314:	2300      	movs	r3, #0
 8011316:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801131e:	7af9      	ldrb	r1, [r7, #11]
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	f7f3 f87e 	bl	8004424 <HAL_PCD_EP_Receive>
 8011328:	4603      	mov	r3, r0
 801132a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801132c:	7dfb      	ldrb	r3, [r7, #23]
 801132e:	4618      	mov	r0, r3
 8011330:	f000 f86e 	bl	8011410 <USBD_Get_USB_Status>
 8011334:	4603      	mov	r3, r0
 8011336:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011338:	7dbb      	ldrb	r3, [r7, #22]
}
 801133a:	4618      	mov	r0, r3
 801133c:	3718      	adds	r7, #24
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}

08011342 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011342:	b580      	push	{r7, lr}
 8011344:	b082      	sub	sp, #8
 8011346:	af00      	add	r7, sp, #0
 8011348:	6078      	str	r0, [r7, #4]
 801134a:	460b      	mov	r3, r1
 801134c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011354:	78fa      	ldrb	r2, [r7, #3]
 8011356:	4611      	mov	r1, r2
 8011358:	4618      	mov	r0, r3
 801135a:	f7f3 f894 	bl	8004486 <HAL_PCD_EP_GetRxCount>
 801135e:	4603      	mov	r3, r0
}
 8011360:	4618      	mov	r0, r3
 8011362:	3708      	adds	r7, #8
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}

08011368 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
 8011370:	460b      	mov	r3, r1
 8011372:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011374:	78fb      	ldrb	r3, [r7, #3]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d002      	beq.n	8011380 <HAL_PCDEx_LPM_Callback+0x18>
 801137a:	2b01      	cmp	r3, #1
 801137c:	d013      	beq.n	80113a6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801137e:	e023      	b.n	80113c8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	7a5b      	ldrb	r3, [r3, #9]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d007      	beq.n	8011398 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011388:	f000 f83c 	bl	8011404 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801138c:	4b10      	ldr	r3, [pc, #64]	@ (80113d0 <HAL_PCDEx_LPM_Callback+0x68>)
 801138e:	691b      	ldr	r3, [r3, #16]
 8011390:	4a0f      	ldr	r2, [pc, #60]	@ (80113d0 <HAL_PCDEx_LPM_Callback+0x68>)
 8011392:	f023 0306 	bic.w	r3, r3, #6
 8011396:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fa f8d7 	bl	800b552 <USBD_LL_Resume>
    break;
 80113a4:	e010      	b.n	80113c8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7fa f8b4 	bl	800b51a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	7a5b      	ldrb	r3, [r3, #9]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d005      	beq.n	80113c6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80113ba:	4b05      	ldr	r3, [pc, #20]	@ (80113d0 <HAL_PCDEx_LPM_Callback+0x68>)
 80113bc:	691b      	ldr	r3, [r3, #16]
 80113be:	4a04      	ldr	r2, [pc, #16]	@ (80113d0 <HAL_PCDEx_LPM_Callback+0x68>)
 80113c0:	f043 0306 	orr.w	r3, r3, #6
 80113c4:	6113      	str	r3, [r2, #16]
    break;
 80113c6:	bf00      	nop
}
 80113c8:	bf00      	nop
 80113ca:	3708      	adds	r7, #8
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	e000ed00 	.word	0xe000ed00

080113d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80113d4:	b480      	push	{r7}
 80113d6:	b083      	sub	sp, #12
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80113dc:	4b03      	ldr	r3, [pc, #12]	@ (80113ec <USBD_static_malloc+0x18>)
}
 80113de:	4618      	mov	r0, r3
 80113e0:	370c      	adds	r7, #12
 80113e2:	46bd      	mov	sp, r7
 80113e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e8:	4770      	bx	lr
 80113ea:	bf00      	nop
 80113ec:	20001dc8 	.word	0x20001dc8

080113f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80113f0:	b480      	push	{r7}
 80113f2:	b083      	sub	sp, #12
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80113f8:	bf00      	nop
 80113fa:	370c      	adds	r7, #12
 80113fc:	46bd      	mov	sp, r7
 80113fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011402:	4770      	bx	lr

08011404 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011408:	f7f0 ffee 	bl	80023e8 <SystemClock_Config>
}
 801140c:	bf00      	nop
 801140e:	bd80      	pop	{r7, pc}

08011410 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011410:	b480      	push	{r7}
 8011412:	b085      	sub	sp, #20
 8011414:	af00      	add	r7, sp, #0
 8011416:	4603      	mov	r3, r0
 8011418:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801141a:	2300      	movs	r3, #0
 801141c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801141e:	79fb      	ldrb	r3, [r7, #7]
 8011420:	2b03      	cmp	r3, #3
 8011422:	d817      	bhi.n	8011454 <USBD_Get_USB_Status+0x44>
 8011424:	a201      	add	r2, pc, #4	@ (adr r2, 801142c <USBD_Get_USB_Status+0x1c>)
 8011426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801142a:	bf00      	nop
 801142c:	0801143d 	.word	0x0801143d
 8011430:	08011443 	.word	0x08011443
 8011434:	08011449 	.word	0x08011449
 8011438:	0801144f 	.word	0x0801144f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801143c:	2300      	movs	r3, #0
 801143e:	73fb      	strb	r3, [r7, #15]
    break;
 8011440:	e00b      	b.n	801145a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011442:	2303      	movs	r3, #3
 8011444:	73fb      	strb	r3, [r7, #15]
    break;
 8011446:	e008      	b.n	801145a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011448:	2301      	movs	r3, #1
 801144a:	73fb      	strb	r3, [r7, #15]
    break;
 801144c:	e005      	b.n	801145a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801144e:	2303      	movs	r3, #3
 8011450:	73fb      	strb	r3, [r7, #15]
    break;
 8011452:	e002      	b.n	801145a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011454:	2303      	movs	r3, #3
 8011456:	73fb      	strb	r3, [r7, #15]
    break;
 8011458:	bf00      	nop
  }
  return usb_status;
 801145a:	7bfb      	ldrb	r3, [r7, #15]
}
 801145c:	4618      	mov	r0, r3
 801145e:	3714      	adds	r7, #20
 8011460:	46bd      	mov	sp, r7
 8011462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011466:	4770      	bx	lr

08011468 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8011468:	b480      	push	{r7}
 801146a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801146c:	4b05      	ldr	r3, [pc, #20]	@ (8011484 <UTIL_LPM_Init+0x1c>)
 801146e:	2200      	movs	r2, #0
 8011470:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8011472:	4b05      	ldr	r3, [pc, #20]	@ (8011488 <UTIL_LPM_Init+0x20>)
 8011474:	2200      	movs	r2, #0
 8011476:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011478:	bf00      	nop
 801147a:	46bd      	mov	sp, r7
 801147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011480:	4770      	bx	lr
 8011482:	bf00      	nop
 8011484:	20001fe8 	.word	0x20001fe8
 8011488:	20001fec 	.word	0x20001fec

0801148c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801148c:	b480      	push	{r7}
 801148e:	b087      	sub	sp, #28
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
 8011494:	460b      	mov	r3, r1
 8011496:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011498:	f3ef 8310 	mrs	r3, PRIMASK
 801149c:	613b      	str	r3, [r7, #16]
  return(result);
 801149e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80114a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80114a2:	b672      	cpsid	i
}
 80114a4:	bf00      	nop
  
  switch(state)
 80114a6:	78fb      	ldrb	r3, [r7, #3]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d008      	beq.n	80114be <UTIL_LPM_SetOffMode+0x32>
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	d10e      	bne.n	80114ce <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80114b0:	4b0d      	ldr	r3, [pc, #52]	@ (80114e8 <UTIL_LPM_SetOffMode+0x5c>)
 80114b2:	681a      	ldr	r2, [r3, #0]
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	4313      	orrs	r3, r2
 80114b8:	4a0b      	ldr	r2, [pc, #44]	@ (80114e8 <UTIL_LPM_SetOffMode+0x5c>)
 80114ba:	6013      	str	r3, [r2, #0]
      break;
 80114bc:	e008      	b.n	80114d0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	43da      	mvns	r2, r3
 80114c2:	4b09      	ldr	r3, [pc, #36]	@ (80114e8 <UTIL_LPM_SetOffMode+0x5c>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	4013      	ands	r3, r2
 80114c8:	4a07      	ldr	r2, [pc, #28]	@ (80114e8 <UTIL_LPM_SetOffMode+0x5c>)
 80114ca:	6013      	str	r3, [r2, #0]
      break;
 80114cc:	e000      	b.n	80114d0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80114ce:	bf00      	nop
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	f383 8810 	msr	PRIMASK, r3
}
 80114da:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80114dc:	bf00      	nop
 80114de:	371c      	adds	r7, #28
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	4770      	bx	lr
 80114e8:	20001fec 	.word	0x20001fec

080114ec <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b090      	sub	sp, #64	@ 0x40
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80114f4:	4b73      	ldr	r3, [pc, #460]	@ (80116c4 <UTIL_SEQ_Run+0x1d8>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80114fa:	4b72      	ldr	r3, [pc, #456]	@ (80116c4 <UTIL_SEQ_Run+0x1d8>)
 80114fc:	681a      	ldr	r2, [r3, #0]
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	4013      	ands	r3, r2
 8011502:	4a70      	ldr	r2, [pc, #448]	@ (80116c4 <UTIL_SEQ_Run+0x1d8>)
 8011504:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8011506:	4b70      	ldr	r3, [pc, #448]	@ (80116c8 <UTIL_SEQ_Run+0x1dc>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801150c:	4b6f      	ldr	r3, [pc, #444]	@ (80116cc <UTIL_SEQ_Run+0x1e0>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8011512:	4b6f      	ldr	r3, [pc, #444]	@ (80116d0 <UTIL_SEQ_Run+0x1e4>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8011518:	4b6e      	ldr	r3, [pc, #440]	@ (80116d4 <UTIL_SEQ_Run+0x1e8>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801151e:	e08d      	b.n	801163c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8011520:	2300      	movs	r3, #0
 8011522:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011524:	e002      	b.n	801152c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8011526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011528:	3301      	adds	r3, #1
 801152a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801152c:	4a6a      	ldr	r2, [pc, #424]	@ (80116d8 <UTIL_SEQ_Run+0x1ec>)
 801152e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011530:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011536:	401a      	ands	r2, r3
 8011538:	4b62      	ldr	r3, [pc, #392]	@ (80116c4 <UTIL_SEQ_Run+0x1d8>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	4013      	ands	r3, r2
 801153e:	2b00      	cmp	r3, #0
 8011540:	d0f1      	beq.n	8011526 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8011542:	4a65      	ldr	r2, [pc, #404]	@ (80116d8 <UTIL_SEQ_Run+0x1ec>)
 8011544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011546:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801154a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801154c:	401a      	ands	r2, r3
 801154e:	4b5d      	ldr	r3, [pc, #372]	@ (80116c4 <UTIL_SEQ_Run+0x1d8>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	4013      	ands	r3, r2
 8011554:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011556:	4a60      	ldr	r2, [pc, #384]	@ (80116d8 <UTIL_SEQ_Run+0x1ec>)
 8011558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801155a:	00db      	lsls	r3, r3, #3
 801155c:	4413      	add	r3, r2
 801155e:	685a      	ldr	r2, [r3, #4]
 8011560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011562:	4013      	ands	r3, r2
 8011564:	2b00      	cmp	r3, #0
 8011566:	d106      	bne.n	8011576 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011568:	4a5b      	ldr	r2, [pc, #364]	@ (80116d8 <UTIL_SEQ_Run+0x1ec>)
 801156a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801156c:	00db      	lsls	r3, r3, #3
 801156e:	4413      	add	r3, r2
 8011570:	f04f 32ff 	mov.w	r2, #4294967295
 8011574:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011576:	4a58      	ldr	r2, [pc, #352]	@ (80116d8 <UTIL_SEQ_Run+0x1ec>)
 8011578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801157a:	00db      	lsls	r3, r3, #3
 801157c:	4413      	add	r3, r2
 801157e:	685a      	ldr	r2, [r3, #4]
 8011580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011582:	4013      	ands	r3, r2
 8011584:	4618      	mov	r0, r3
 8011586:	f000 f9c1 	bl	801190c <SEQ_BitPosition>
 801158a:	4603      	mov	r3, r0
 801158c:	461a      	mov	r2, r3
 801158e:	4b53      	ldr	r3, [pc, #332]	@ (80116dc <UTIL_SEQ_Run+0x1f0>)
 8011590:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8011592:	4a51      	ldr	r2, [pc, #324]	@ (80116d8 <UTIL_SEQ_Run+0x1ec>)
 8011594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011596:	00db      	lsls	r3, r3, #3
 8011598:	4413      	add	r3, r2
 801159a:	685a      	ldr	r2, [r3, #4]
 801159c:	4b4f      	ldr	r3, [pc, #316]	@ (80116dc <UTIL_SEQ_Run+0x1f0>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2101      	movs	r1, #1
 80115a2:	fa01 f303 	lsl.w	r3, r1, r3
 80115a6:	43db      	mvns	r3, r3
 80115a8:	401a      	ands	r2, r3
 80115aa:	494b      	ldr	r1, [pc, #300]	@ (80116d8 <UTIL_SEQ_Run+0x1ec>)
 80115ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115ae:	00db      	lsls	r3, r3, #3
 80115b0:	440b      	add	r3, r1
 80115b2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115b4:	f3ef 8310 	mrs	r3, PRIMASK
 80115b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80115ba:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80115bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80115be:	b672      	cpsid	i
}
 80115c0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80115c2:	4b46      	ldr	r3, [pc, #280]	@ (80116dc <UTIL_SEQ_Run+0x1f0>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	2201      	movs	r2, #1
 80115c8:	fa02 f303 	lsl.w	r3, r2, r3
 80115cc:	43da      	mvns	r2, r3
 80115ce:	4b3e      	ldr	r3, [pc, #248]	@ (80116c8 <UTIL_SEQ_Run+0x1dc>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	4013      	ands	r3, r2
 80115d4:	4a3c      	ldr	r2, [pc, #240]	@ (80116c8 <UTIL_SEQ_Run+0x1dc>)
 80115d6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80115d8:	2301      	movs	r3, #1
 80115da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80115dc:	e013      	b.n	8011606 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80115de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115e0:	3b01      	subs	r3, #1
 80115e2:	4a3d      	ldr	r2, [pc, #244]	@ (80116d8 <UTIL_SEQ_Run+0x1ec>)
 80115e4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80115e8:	4b3c      	ldr	r3, [pc, #240]	@ (80116dc <UTIL_SEQ_Run+0x1f0>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	2201      	movs	r2, #1
 80115ee:	fa02 f303 	lsl.w	r3, r2, r3
 80115f2:	43da      	mvns	r2, r3
 80115f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115f6:	3b01      	subs	r3, #1
 80115f8:	400a      	ands	r2, r1
 80115fa:	4937      	ldr	r1, [pc, #220]	@ (80116d8 <UTIL_SEQ_Run+0x1ec>)
 80115fc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011602:	3b01      	subs	r3, #1
 8011604:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011608:	2b00      	cmp	r3, #0
 801160a:	d1e8      	bne.n	80115de <UTIL_SEQ_Run+0xf2>
 801160c:	6a3b      	ldr	r3, [r7, #32]
 801160e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011610:	697b      	ldr	r3, [r7, #20]
 8011612:	f383 8810 	msr	PRIMASK, r3
}
 8011616:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8011618:	4b30      	ldr	r3, [pc, #192]	@ (80116dc <UTIL_SEQ_Run+0x1f0>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	4a30      	ldr	r2, [pc, #192]	@ (80116e0 <UTIL_SEQ_Run+0x1f4>)
 801161e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011622:	4798      	blx	r3

    local_taskset = TaskSet;
 8011624:	4b28      	ldr	r3, [pc, #160]	@ (80116c8 <UTIL_SEQ_Run+0x1dc>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801162a:	4b28      	ldr	r3, [pc, #160]	@ (80116cc <UTIL_SEQ_Run+0x1e0>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8011630:	4b27      	ldr	r3, [pc, #156]	@ (80116d0 <UTIL_SEQ_Run+0x1e4>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8011636:	4b27      	ldr	r3, [pc, #156]	@ (80116d4 <UTIL_SEQ_Run+0x1e8>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801163c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801163e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011640:	401a      	ands	r2, r3
 8011642:	4b20      	ldr	r3, [pc, #128]	@ (80116c4 <UTIL_SEQ_Run+0x1d8>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	4013      	ands	r3, r2
 8011648:	2b00      	cmp	r3, #0
 801164a:	d005      	beq.n	8011658 <UTIL_SEQ_Run+0x16c>
 801164c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801164e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011650:	4013      	ands	r3, r2
 8011652:	2b00      	cmp	r3, #0
 8011654:	f43f af64 	beq.w	8011520 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011658:	4b20      	ldr	r3, [pc, #128]	@ (80116dc <UTIL_SEQ_Run+0x1f0>)
 801165a:	f04f 32ff 	mov.w	r2, #4294967295
 801165e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011660:	f000 f946 	bl	80118f0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011664:	f3ef 8310 	mrs	r3, PRIMASK
 8011668:	613b      	str	r3, [r7, #16]
  return(result);
 801166a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801166c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801166e:	b672      	cpsid	i
}
 8011670:	bf00      	nop
  local_taskset = TaskSet;
 8011672:	4b15      	ldr	r3, [pc, #84]	@ (80116c8 <UTIL_SEQ_Run+0x1dc>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8011678:	4b14      	ldr	r3, [pc, #80]	@ (80116cc <UTIL_SEQ_Run+0x1e0>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801167e:	4b14      	ldr	r3, [pc, #80]	@ (80116d0 <UTIL_SEQ_Run+0x1e4>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8011684:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011688:	401a      	ands	r2, r3
 801168a:	4b0e      	ldr	r3, [pc, #56]	@ (80116c4 <UTIL_SEQ_Run+0x1d8>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	4013      	ands	r3, r2
 8011690:	2b00      	cmp	r3, #0
 8011692:	d107      	bne.n	80116a4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8011694:	4b0f      	ldr	r3, [pc, #60]	@ (80116d4 <UTIL_SEQ_Run+0x1e8>)
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801169a:	4013      	ands	r3, r2
 801169c:	2b00      	cmp	r3, #0
 801169e:	d101      	bne.n	80116a4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80116a0:	f7ef fe3b 	bl	800131a <UTIL_SEQ_Idle>
 80116a4:	69fb      	ldr	r3, [r7, #28]
 80116a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	f383 8810 	msr	PRIMASK, r3
}
 80116ae:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80116b0:	f000 f925 	bl	80118fe <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80116b4:	4a03      	ldr	r2, [pc, #12]	@ (80116c4 <UTIL_SEQ_Run+0x1d8>)
 80116b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116b8:	6013      	str	r3, [r2, #0]

  return;
 80116ba:	bf00      	nop
}
 80116bc:	3740      	adds	r7, #64	@ 0x40
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	20000124 	.word	0x20000124
 80116c8:	20001ff0 	.word	0x20001ff0
 80116cc:	20001ff4 	.word	0x20001ff4
 80116d0:	20000120 	.word	0x20000120
 80116d4:	20001ff8 	.word	0x20001ff8
 80116d8:	20002080 	.word	0x20002080
 80116dc:	20001ffc 	.word	0x20001ffc
 80116e0:	20002000 	.word	0x20002000

080116e4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b088      	sub	sp, #32
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	60f8      	str	r0, [r7, #12]
 80116ec:	60b9      	str	r1, [r7, #8]
 80116ee:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116f0:	f3ef 8310 	mrs	r3, PRIMASK
 80116f4:	617b      	str	r3, [r7, #20]
  return(result);
 80116f6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80116f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80116fa:	b672      	cpsid	i
}
 80116fc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80116fe:	68f8      	ldr	r0, [r7, #12]
 8011700:	f000 f904 	bl	801190c <SEQ_BitPosition>
 8011704:	4603      	mov	r3, r0
 8011706:	4619      	mov	r1, r3
 8011708:	4a06      	ldr	r2, [pc, #24]	@ (8011724 <UTIL_SEQ_RegTask+0x40>)
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011710:	69fb      	ldr	r3, [r7, #28]
 8011712:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011714:	69bb      	ldr	r3, [r7, #24]
 8011716:	f383 8810 	msr	PRIMASK, r3
}
 801171a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801171c:	bf00      	nop
}
 801171e:	3720      	adds	r7, #32
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}
 8011724:	20002000 	.word	0x20002000

08011728 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8011728:	b480      	push	{r7}
 801172a:	b087      	sub	sp, #28
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011732:	f3ef 8310 	mrs	r3, PRIMASK
 8011736:	60fb      	str	r3, [r7, #12]
  return(result);
 8011738:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801173a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801173c:	b672      	cpsid	i
}
 801173e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8011740:	4b0d      	ldr	r3, [pc, #52]	@ (8011778 <UTIL_SEQ_SetTask+0x50>)
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	4313      	orrs	r3, r2
 8011748:	4a0b      	ldr	r2, [pc, #44]	@ (8011778 <UTIL_SEQ_SetTask+0x50>)
 801174a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801174c:	4a0b      	ldr	r2, [pc, #44]	@ (801177c <UTIL_SEQ_SetTask+0x54>)
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	431a      	orrs	r2, r3
 8011758:	4908      	ldr	r1, [pc, #32]	@ (801177c <UTIL_SEQ_SetTask+0x54>)
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	f383 8810 	msr	PRIMASK, r3
}
 801176a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801176c:	bf00      	nop
}
 801176e:	371c      	adds	r7, #28
 8011770:	46bd      	mov	sp, r7
 8011772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011776:	4770      	bx	lr
 8011778:	20001ff0 	.word	0x20001ff0
 801177c:	20002080 	.word	0x20002080

08011780 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8011780:	b480      	push	{r7}
 8011782:	b087      	sub	sp, #28
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011788:	f3ef 8310 	mrs	r3, PRIMASK
 801178c:	60fb      	str	r3, [r7, #12]
  return(result);
 801178e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011792:	b672      	cpsid	i
}
 8011794:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	43da      	mvns	r2, r3
 801179a:	4b08      	ldr	r3, [pc, #32]	@ (80117bc <UTIL_SEQ_PauseTask+0x3c>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	4013      	ands	r3, r2
 80117a0:	4a06      	ldr	r2, [pc, #24]	@ (80117bc <UTIL_SEQ_PauseTask+0x3c>)
 80117a2:	6013      	str	r3, [r2, #0]
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	f383 8810 	msr	PRIMASK, r3
}
 80117ae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80117b0:	bf00      	nop
}
 80117b2:	371c      	adds	r7, #28
 80117b4:	46bd      	mov	sp, r7
 80117b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ba:	4770      	bx	lr
 80117bc:	20000120 	.word	0x20000120

080117c0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80117c0:	b480      	push	{r7}
 80117c2:	b087      	sub	sp, #28
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117c8:	f3ef 8310 	mrs	r3, PRIMASK
 80117cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80117ce:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80117d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80117d2:	b672      	cpsid	i
}
 80117d4:	bf00      	nop

  TaskMask |= TaskId_bm;
 80117d6:	4b09      	ldr	r3, [pc, #36]	@ (80117fc <UTIL_SEQ_ResumeTask+0x3c>)
 80117d8:	681a      	ldr	r2, [r3, #0]
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	4313      	orrs	r3, r2
 80117de:	4a07      	ldr	r2, [pc, #28]	@ (80117fc <UTIL_SEQ_ResumeTask+0x3c>)
 80117e0:	6013      	str	r3, [r2, #0]
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	f383 8810 	msr	PRIMASK, r3
}
 80117ec:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80117ee:	bf00      	nop
}
 80117f0:	371c      	adds	r7, #28
 80117f2:	46bd      	mov	sp, r7
 80117f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f8:	4770      	bx	lr
 80117fa:	bf00      	nop
 80117fc:	20000120 	.word	0x20000120

08011800 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8011800:	b480      	push	{r7}
 8011802:	b087      	sub	sp, #28
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011808:	f3ef 8310 	mrs	r3, PRIMASK
 801180c:	60fb      	str	r3, [r7, #12]
  return(result);
 801180e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011810:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011812:	b672      	cpsid	i
}
 8011814:	bf00      	nop

  EvtSet |= EvtId_bm;
 8011816:	4b09      	ldr	r3, [pc, #36]	@ (801183c <UTIL_SEQ_SetEvt+0x3c>)
 8011818:	681a      	ldr	r2, [r3, #0]
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	4313      	orrs	r3, r2
 801181e:	4a07      	ldr	r2, [pc, #28]	@ (801183c <UTIL_SEQ_SetEvt+0x3c>)
 8011820:	6013      	str	r3, [r2, #0]
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011826:	693b      	ldr	r3, [r7, #16]
 8011828:	f383 8810 	msr	PRIMASK, r3
}
 801182c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801182e:	bf00      	nop
}
 8011830:	371c      	adds	r7, #28
 8011832:	46bd      	mov	sp, r7
 8011834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011838:	4770      	bx	lr
 801183a:	bf00      	nop
 801183c:	20001ff4 	.word	0x20001ff4

08011840 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b088      	sub	sp, #32
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8011848:	4b1f      	ldr	r3, [pc, #124]	@ (80118c8 <UTIL_SEQ_WaitEvt+0x88>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801184e:	4b1e      	ldr	r3, [pc, #120]	@ (80118c8 <UTIL_SEQ_WaitEvt+0x88>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011856:	d102      	bne.n	801185e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8011858:	2300      	movs	r3, #0
 801185a:	61fb      	str	r3, [r7, #28]
 801185c:	e005      	b.n	801186a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801185e:	4b1a      	ldr	r3, [pc, #104]	@ (80118c8 <UTIL_SEQ_WaitEvt+0x88>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2201      	movs	r2, #1
 8011864:	fa02 f303 	lsl.w	r3, r2, r3
 8011868:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801186a:	4b18      	ldr	r3, [pc, #96]	@ (80118cc <UTIL_SEQ_WaitEvt+0x8c>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8011870:	4a16      	ldr	r2, [pc, #88]	@ (80118cc <UTIL_SEQ_WaitEvt+0x8c>)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8011876:	e003      	b.n	8011880 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8011878:	6879      	ldr	r1, [r7, #4]
 801187a:	69f8      	ldr	r0, [r7, #28]
 801187c:	f000 f82a 	bl	80118d4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8011880:	4b13      	ldr	r3, [pc, #76]	@ (80118d0 <UTIL_SEQ_WaitEvt+0x90>)
 8011882:	681a      	ldr	r2, [r3, #0]
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	4013      	ands	r3, r2
 8011888:	2b00      	cmp	r3, #0
 801188a:	d0f5      	beq.n	8011878 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801188c:	4a0e      	ldr	r2, [pc, #56]	@ (80118c8 <UTIL_SEQ_WaitEvt+0x88>)
 801188e:	69bb      	ldr	r3, [r7, #24]
 8011890:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011892:	f3ef 8310 	mrs	r3, PRIMASK
 8011896:	60bb      	str	r3, [r7, #8]
  return(result);
 8011898:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801189a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801189c:	b672      	cpsid	i
}
 801189e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	43da      	mvns	r2, r3
 80118a4:	4b0a      	ldr	r3, [pc, #40]	@ (80118d0 <UTIL_SEQ_WaitEvt+0x90>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	4013      	ands	r3, r2
 80118aa:	4a09      	ldr	r2, [pc, #36]	@ (80118d0 <UTIL_SEQ_WaitEvt+0x90>)
 80118ac:	6013      	str	r3, [r2, #0]
 80118ae:	693b      	ldr	r3, [r7, #16]
 80118b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	f383 8810 	msr	PRIMASK, r3
}
 80118b8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80118ba:	4a04      	ldr	r2, [pc, #16]	@ (80118cc <UTIL_SEQ_WaitEvt+0x8c>)
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	6013      	str	r3, [r2, #0]
  return;
 80118c0:	bf00      	nop
}
 80118c2:	3720      	adds	r7, #32
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	20001ffc 	.word	0x20001ffc
 80118cc:	20001ff8 	.word	0x20001ff8
 80118d0:	20001ff4 	.word	0x20001ff4

080118d4 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b082      	sub	sp, #8
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	43db      	mvns	r3, r3
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7ff fe02 	bl	80114ec <UTIL_SEQ_Run>
  return;
 80118e8:	bf00      	nop
}
 80118ea:	3708      	adds	r7, #8
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}

080118f0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80118f0:	b480      	push	{r7}
 80118f2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80118f4:	bf00      	nop
}
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr

080118fe <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80118fe:	b480      	push	{r7}
 8011900:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8011902:	bf00      	nop
}
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr

0801190c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801190c:	b480      	push	{r7}
 801190e:	b085      	sub	sp, #20
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d101      	bne.n	8011922 <SEQ_BitPosition+0x16>
    return 32U;
 801191e:	2320      	movs	r3, #32
 8011920:	e003      	b.n	801192a <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	fab3 f383 	clz	r3, r3
 8011928:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 801192a:	f1c3 031f 	rsb	r3, r3, #31
 801192e:	b2db      	uxtb	r3, r3
}
 8011930:	4618      	mov	r0, r3
 8011932:	3714      	adds	r7, #20
 8011934:	46bd      	mov	sp, r7
 8011936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193a:	4770      	bx	lr

0801193c <std>:
 801193c:	2300      	movs	r3, #0
 801193e:	b510      	push	{r4, lr}
 8011940:	4604      	mov	r4, r0
 8011942:	e9c0 3300 	strd	r3, r3, [r0]
 8011946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801194a:	6083      	str	r3, [r0, #8]
 801194c:	8181      	strh	r1, [r0, #12]
 801194e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011950:	81c2      	strh	r2, [r0, #14]
 8011952:	6183      	str	r3, [r0, #24]
 8011954:	4619      	mov	r1, r3
 8011956:	2208      	movs	r2, #8
 8011958:	305c      	adds	r0, #92	@ 0x5c
 801195a:	f000 fa01 	bl	8011d60 <memset>
 801195e:	4b0d      	ldr	r3, [pc, #52]	@ (8011994 <std+0x58>)
 8011960:	6263      	str	r3, [r4, #36]	@ 0x24
 8011962:	4b0d      	ldr	r3, [pc, #52]	@ (8011998 <std+0x5c>)
 8011964:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011966:	4b0d      	ldr	r3, [pc, #52]	@ (801199c <std+0x60>)
 8011968:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801196a:	4b0d      	ldr	r3, [pc, #52]	@ (80119a0 <std+0x64>)
 801196c:	6323      	str	r3, [r4, #48]	@ 0x30
 801196e:	4b0d      	ldr	r3, [pc, #52]	@ (80119a4 <std+0x68>)
 8011970:	6224      	str	r4, [r4, #32]
 8011972:	429c      	cmp	r4, r3
 8011974:	d006      	beq.n	8011984 <std+0x48>
 8011976:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801197a:	4294      	cmp	r4, r2
 801197c:	d002      	beq.n	8011984 <std+0x48>
 801197e:	33d0      	adds	r3, #208	@ 0xd0
 8011980:	429c      	cmp	r4, r3
 8011982:	d105      	bne.n	8011990 <std+0x54>
 8011984:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801198c:	f000 ba76 	b.w	8011e7c <__retarget_lock_init_recursive>
 8011990:	bd10      	pop	{r4, pc}
 8011992:	bf00      	nop
 8011994:	08011bb1 	.word	0x08011bb1
 8011998:	08011bd3 	.word	0x08011bd3
 801199c:	08011c0b 	.word	0x08011c0b
 80119a0:	08011c2f 	.word	0x08011c2f
 80119a4:	20002088 	.word	0x20002088

080119a8 <stdio_exit_handler>:
 80119a8:	4a02      	ldr	r2, [pc, #8]	@ (80119b4 <stdio_exit_handler+0xc>)
 80119aa:	4903      	ldr	r1, [pc, #12]	@ (80119b8 <stdio_exit_handler+0x10>)
 80119ac:	4803      	ldr	r0, [pc, #12]	@ (80119bc <stdio_exit_handler+0x14>)
 80119ae:	f000 b869 	b.w	8011a84 <_fwalk_sglue>
 80119b2:	bf00      	nop
 80119b4:	20000128 	.word	0x20000128
 80119b8:	08012735 	.word	0x08012735
 80119bc:	20000138 	.word	0x20000138

080119c0 <cleanup_stdio>:
 80119c0:	6841      	ldr	r1, [r0, #4]
 80119c2:	4b0c      	ldr	r3, [pc, #48]	@ (80119f4 <cleanup_stdio+0x34>)
 80119c4:	4299      	cmp	r1, r3
 80119c6:	b510      	push	{r4, lr}
 80119c8:	4604      	mov	r4, r0
 80119ca:	d001      	beq.n	80119d0 <cleanup_stdio+0x10>
 80119cc:	f000 feb2 	bl	8012734 <_fflush_r>
 80119d0:	68a1      	ldr	r1, [r4, #8]
 80119d2:	4b09      	ldr	r3, [pc, #36]	@ (80119f8 <cleanup_stdio+0x38>)
 80119d4:	4299      	cmp	r1, r3
 80119d6:	d002      	beq.n	80119de <cleanup_stdio+0x1e>
 80119d8:	4620      	mov	r0, r4
 80119da:	f000 feab 	bl	8012734 <_fflush_r>
 80119de:	68e1      	ldr	r1, [r4, #12]
 80119e0:	4b06      	ldr	r3, [pc, #24]	@ (80119fc <cleanup_stdio+0x3c>)
 80119e2:	4299      	cmp	r1, r3
 80119e4:	d004      	beq.n	80119f0 <cleanup_stdio+0x30>
 80119e6:	4620      	mov	r0, r4
 80119e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119ec:	f000 bea2 	b.w	8012734 <_fflush_r>
 80119f0:	bd10      	pop	{r4, pc}
 80119f2:	bf00      	nop
 80119f4:	20002088 	.word	0x20002088
 80119f8:	200020f0 	.word	0x200020f0
 80119fc:	20002158 	.word	0x20002158

08011a00 <global_stdio_init.part.0>:
 8011a00:	b510      	push	{r4, lr}
 8011a02:	4b0b      	ldr	r3, [pc, #44]	@ (8011a30 <global_stdio_init.part.0+0x30>)
 8011a04:	4c0b      	ldr	r4, [pc, #44]	@ (8011a34 <global_stdio_init.part.0+0x34>)
 8011a06:	4a0c      	ldr	r2, [pc, #48]	@ (8011a38 <global_stdio_init.part.0+0x38>)
 8011a08:	601a      	str	r2, [r3, #0]
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	2104      	movs	r1, #4
 8011a10:	f7ff ff94 	bl	801193c <std>
 8011a14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011a18:	2201      	movs	r2, #1
 8011a1a:	2109      	movs	r1, #9
 8011a1c:	f7ff ff8e 	bl	801193c <std>
 8011a20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011a24:	2202      	movs	r2, #2
 8011a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a2a:	2112      	movs	r1, #18
 8011a2c:	f7ff bf86 	b.w	801193c <std>
 8011a30:	200021c0 	.word	0x200021c0
 8011a34:	20002088 	.word	0x20002088
 8011a38:	080119a9 	.word	0x080119a9

08011a3c <__sfp_lock_acquire>:
 8011a3c:	4801      	ldr	r0, [pc, #4]	@ (8011a44 <__sfp_lock_acquire+0x8>)
 8011a3e:	f000 ba1e 	b.w	8011e7e <__retarget_lock_acquire_recursive>
 8011a42:	bf00      	nop
 8011a44:	200021c9 	.word	0x200021c9

08011a48 <__sfp_lock_release>:
 8011a48:	4801      	ldr	r0, [pc, #4]	@ (8011a50 <__sfp_lock_release+0x8>)
 8011a4a:	f000 ba19 	b.w	8011e80 <__retarget_lock_release_recursive>
 8011a4e:	bf00      	nop
 8011a50:	200021c9 	.word	0x200021c9

08011a54 <__sinit>:
 8011a54:	b510      	push	{r4, lr}
 8011a56:	4604      	mov	r4, r0
 8011a58:	f7ff fff0 	bl	8011a3c <__sfp_lock_acquire>
 8011a5c:	6a23      	ldr	r3, [r4, #32]
 8011a5e:	b11b      	cbz	r3, 8011a68 <__sinit+0x14>
 8011a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a64:	f7ff bff0 	b.w	8011a48 <__sfp_lock_release>
 8011a68:	4b04      	ldr	r3, [pc, #16]	@ (8011a7c <__sinit+0x28>)
 8011a6a:	6223      	str	r3, [r4, #32]
 8011a6c:	4b04      	ldr	r3, [pc, #16]	@ (8011a80 <__sinit+0x2c>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d1f5      	bne.n	8011a60 <__sinit+0xc>
 8011a74:	f7ff ffc4 	bl	8011a00 <global_stdio_init.part.0>
 8011a78:	e7f2      	b.n	8011a60 <__sinit+0xc>
 8011a7a:	bf00      	nop
 8011a7c:	080119c1 	.word	0x080119c1
 8011a80:	200021c0 	.word	0x200021c0

08011a84 <_fwalk_sglue>:
 8011a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a88:	4607      	mov	r7, r0
 8011a8a:	4688      	mov	r8, r1
 8011a8c:	4614      	mov	r4, r2
 8011a8e:	2600      	movs	r6, #0
 8011a90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a94:	f1b9 0901 	subs.w	r9, r9, #1
 8011a98:	d505      	bpl.n	8011aa6 <_fwalk_sglue+0x22>
 8011a9a:	6824      	ldr	r4, [r4, #0]
 8011a9c:	2c00      	cmp	r4, #0
 8011a9e:	d1f7      	bne.n	8011a90 <_fwalk_sglue+0xc>
 8011aa0:	4630      	mov	r0, r6
 8011aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aa6:	89ab      	ldrh	r3, [r5, #12]
 8011aa8:	2b01      	cmp	r3, #1
 8011aaa:	d907      	bls.n	8011abc <_fwalk_sglue+0x38>
 8011aac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	d003      	beq.n	8011abc <_fwalk_sglue+0x38>
 8011ab4:	4629      	mov	r1, r5
 8011ab6:	4638      	mov	r0, r7
 8011ab8:	47c0      	blx	r8
 8011aba:	4306      	orrs	r6, r0
 8011abc:	3568      	adds	r5, #104	@ 0x68
 8011abe:	e7e9      	b.n	8011a94 <_fwalk_sglue+0x10>

08011ac0 <iprintf>:
 8011ac0:	b40f      	push	{r0, r1, r2, r3}
 8011ac2:	b507      	push	{r0, r1, r2, lr}
 8011ac4:	4906      	ldr	r1, [pc, #24]	@ (8011ae0 <iprintf+0x20>)
 8011ac6:	ab04      	add	r3, sp, #16
 8011ac8:	6808      	ldr	r0, [r1, #0]
 8011aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ace:	6881      	ldr	r1, [r0, #8]
 8011ad0:	9301      	str	r3, [sp, #4]
 8011ad2:	f000 fb07 	bl	80120e4 <_vfiprintf_r>
 8011ad6:	b003      	add	sp, #12
 8011ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011adc:	b004      	add	sp, #16
 8011ade:	4770      	bx	lr
 8011ae0:	20000134 	.word	0x20000134

08011ae4 <putchar>:
 8011ae4:	4b02      	ldr	r3, [pc, #8]	@ (8011af0 <putchar+0xc>)
 8011ae6:	4601      	mov	r1, r0
 8011ae8:	6818      	ldr	r0, [r3, #0]
 8011aea:	6882      	ldr	r2, [r0, #8]
 8011aec:	f000 beac 	b.w	8012848 <_putc_r>
 8011af0:	20000134 	.word	0x20000134

08011af4 <_puts_r>:
 8011af4:	6a03      	ldr	r3, [r0, #32]
 8011af6:	b570      	push	{r4, r5, r6, lr}
 8011af8:	6884      	ldr	r4, [r0, #8]
 8011afa:	4605      	mov	r5, r0
 8011afc:	460e      	mov	r6, r1
 8011afe:	b90b      	cbnz	r3, 8011b04 <_puts_r+0x10>
 8011b00:	f7ff ffa8 	bl	8011a54 <__sinit>
 8011b04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b06:	07db      	lsls	r3, r3, #31
 8011b08:	d405      	bmi.n	8011b16 <_puts_r+0x22>
 8011b0a:	89a3      	ldrh	r3, [r4, #12]
 8011b0c:	0598      	lsls	r0, r3, #22
 8011b0e:	d402      	bmi.n	8011b16 <_puts_r+0x22>
 8011b10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b12:	f000 f9b4 	bl	8011e7e <__retarget_lock_acquire_recursive>
 8011b16:	89a3      	ldrh	r3, [r4, #12]
 8011b18:	0719      	lsls	r1, r3, #28
 8011b1a:	d502      	bpl.n	8011b22 <_puts_r+0x2e>
 8011b1c:	6923      	ldr	r3, [r4, #16]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d135      	bne.n	8011b8e <_puts_r+0x9a>
 8011b22:	4621      	mov	r1, r4
 8011b24:	4628      	mov	r0, r5
 8011b26:	f000 f8c5 	bl	8011cb4 <__swsetup_r>
 8011b2a:	b380      	cbz	r0, 8011b8e <_puts_r+0x9a>
 8011b2c:	f04f 35ff 	mov.w	r5, #4294967295
 8011b30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b32:	07da      	lsls	r2, r3, #31
 8011b34:	d405      	bmi.n	8011b42 <_puts_r+0x4e>
 8011b36:	89a3      	ldrh	r3, [r4, #12]
 8011b38:	059b      	lsls	r3, r3, #22
 8011b3a:	d402      	bmi.n	8011b42 <_puts_r+0x4e>
 8011b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b3e:	f000 f99f 	bl	8011e80 <__retarget_lock_release_recursive>
 8011b42:	4628      	mov	r0, r5
 8011b44:	bd70      	pop	{r4, r5, r6, pc}
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	da04      	bge.n	8011b54 <_puts_r+0x60>
 8011b4a:	69a2      	ldr	r2, [r4, #24]
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	dc17      	bgt.n	8011b80 <_puts_r+0x8c>
 8011b50:	290a      	cmp	r1, #10
 8011b52:	d015      	beq.n	8011b80 <_puts_r+0x8c>
 8011b54:	6823      	ldr	r3, [r4, #0]
 8011b56:	1c5a      	adds	r2, r3, #1
 8011b58:	6022      	str	r2, [r4, #0]
 8011b5a:	7019      	strb	r1, [r3, #0]
 8011b5c:	68a3      	ldr	r3, [r4, #8]
 8011b5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011b62:	3b01      	subs	r3, #1
 8011b64:	60a3      	str	r3, [r4, #8]
 8011b66:	2900      	cmp	r1, #0
 8011b68:	d1ed      	bne.n	8011b46 <_puts_r+0x52>
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	da11      	bge.n	8011b92 <_puts_r+0x9e>
 8011b6e:	4622      	mov	r2, r4
 8011b70:	210a      	movs	r1, #10
 8011b72:	4628      	mov	r0, r5
 8011b74:	f000 f85f 	bl	8011c36 <__swbuf_r>
 8011b78:	3001      	adds	r0, #1
 8011b7a:	d0d7      	beq.n	8011b2c <_puts_r+0x38>
 8011b7c:	250a      	movs	r5, #10
 8011b7e:	e7d7      	b.n	8011b30 <_puts_r+0x3c>
 8011b80:	4622      	mov	r2, r4
 8011b82:	4628      	mov	r0, r5
 8011b84:	f000 f857 	bl	8011c36 <__swbuf_r>
 8011b88:	3001      	adds	r0, #1
 8011b8a:	d1e7      	bne.n	8011b5c <_puts_r+0x68>
 8011b8c:	e7ce      	b.n	8011b2c <_puts_r+0x38>
 8011b8e:	3e01      	subs	r6, #1
 8011b90:	e7e4      	b.n	8011b5c <_puts_r+0x68>
 8011b92:	6823      	ldr	r3, [r4, #0]
 8011b94:	1c5a      	adds	r2, r3, #1
 8011b96:	6022      	str	r2, [r4, #0]
 8011b98:	220a      	movs	r2, #10
 8011b9a:	701a      	strb	r2, [r3, #0]
 8011b9c:	e7ee      	b.n	8011b7c <_puts_r+0x88>
	...

08011ba0 <puts>:
 8011ba0:	4b02      	ldr	r3, [pc, #8]	@ (8011bac <puts+0xc>)
 8011ba2:	4601      	mov	r1, r0
 8011ba4:	6818      	ldr	r0, [r3, #0]
 8011ba6:	f7ff bfa5 	b.w	8011af4 <_puts_r>
 8011baa:	bf00      	nop
 8011bac:	20000134 	.word	0x20000134

08011bb0 <__sread>:
 8011bb0:	b510      	push	{r4, lr}
 8011bb2:	460c      	mov	r4, r1
 8011bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bb8:	f000 f912 	bl	8011de0 <_read_r>
 8011bbc:	2800      	cmp	r0, #0
 8011bbe:	bfab      	itete	ge
 8011bc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8011bc4:	181b      	addge	r3, r3, r0
 8011bc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011bca:	bfac      	ite	ge
 8011bcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011bce:	81a3      	strhlt	r3, [r4, #12]
 8011bd0:	bd10      	pop	{r4, pc}

08011bd2 <__swrite>:
 8011bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd6:	461f      	mov	r7, r3
 8011bd8:	898b      	ldrh	r3, [r1, #12]
 8011bda:	05db      	lsls	r3, r3, #23
 8011bdc:	4605      	mov	r5, r0
 8011bde:	460c      	mov	r4, r1
 8011be0:	4616      	mov	r6, r2
 8011be2:	d505      	bpl.n	8011bf0 <__swrite+0x1e>
 8011be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011be8:	2302      	movs	r3, #2
 8011bea:	2200      	movs	r2, #0
 8011bec:	f000 f8e6 	bl	8011dbc <_lseek_r>
 8011bf0:	89a3      	ldrh	r3, [r4, #12]
 8011bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011bfa:	81a3      	strh	r3, [r4, #12]
 8011bfc:	4632      	mov	r2, r6
 8011bfe:	463b      	mov	r3, r7
 8011c00:	4628      	mov	r0, r5
 8011c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c06:	f000 b8fd 	b.w	8011e04 <_write_r>

08011c0a <__sseek>:
 8011c0a:	b510      	push	{r4, lr}
 8011c0c:	460c      	mov	r4, r1
 8011c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c12:	f000 f8d3 	bl	8011dbc <_lseek_r>
 8011c16:	1c43      	adds	r3, r0, #1
 8011c18:	89a3      	ldrh	r3, [r4, #12]
 8011c1a:	bf15      	itete	ne
 8011c1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011c1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011c22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011c26:	81a3      	strheq	r3, [r4, #12]
 8011c28:	bf18      	it	ne
 8011c2a:	81a3      	strhne	r3, [r4, #12]
 8011c2c:	bd10      	pop	{r4, pc}

08011c2e <__sclose>:
 8011c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c32:	f000 b8b3 	b.w	8011d9c <_close_r>

08011c36 <__swbuf_r>:
 8011c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c38:	460e      	mov	r6, r1
 8011c3a:	4614      	mov	r4, r2
 8011c3c:	4605      	mov	r5, r0
 8011c3e:	b118      	cbz	r0, 8011c48 <__swbuf_r+0x12>
 8011c40:	6a03      	ldr	r3, [r0, #32]
 8011c42:	b90b      	cbnz	r3, 8011c48 <__swbuf_r+0x12>
 8011c44:	f7ff ff06 	bl	8011a54 <__sinit>
 8011c48:	69a3      	ldr	r3, [r4, #24]
 8011c4a:	60a3      	str	r3, [r4, #8]
 8011c4c:	89a3      	ldrh	r3, [r4, #12]
 8011c4e:	071a      	lsls	r2, r3, #28
 8011c50:	d501      	bpl.n	8011c56 <__swbuf_r+0x20>
 8011c52:	6923      	ldr	r3, [r4, #16]
 8011c54:	b943      	cbnz	r3, 8011c68 <__swbuf_r+0x32>
 8011c56:	4621      	mov	r1, r4
 8011c58:	4628      	mov	r0, r5
 8011c5a:	f000 f82b 	bl	8011cb4 <__swsetup_r>
 8011c5e:	b118      	cbz	r0, 8011c68 <__swbuf_r+0x32>
 8011c60:	f04f 37ff 	mov.w	r7, #4294967295
 8011c64:	4638      	mov	r0, r7
 8011c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c68:	6823      	ldr	r3, [r4, #0]
 8011c6a:	6922      	ldr	r2, [r4, #16]
 8011c6c:	1a98      	subs	r0, r3, r2
 8011c6e:	6963      	ldr	r3, [r4, #20]
 8011c70:	b2f6      	uxtb	r6, r6
 8011c72:	4283      	cmp	r3, r0
 8011c74:	4637      	mov	r7, r6
 8011c76:	dc05      	bgt.n	8011c84 <__swbuf_r+0x4e>
 8011c78:	4621      	mov	r1, r4
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	f000 fd5a 	bl	8012734 <_fflush_r>
 8011c80:	2800      	cmp	r0, #0
 8011c82:	d1ed      	bne.n	8011c60 <__swbuf_r+0x2a>
 8011c84:	68a3      	ldr	r3, [r4, #8]
 8011c86:	3b01      	subs	r3, #1
 8011c88:	60a3      	str	r3, [r4, #8]
 8011c8a:	6823      	ldr	r3, [r4, #0]
 8011c8c:	1c5a      	adds	r2, r3, #1
 8011c8e:	6022      	str	r2, [r4, #0]
 8011c90:	701e      	strb	r6, [r3, #0]
 8011c92:	6962      	ldr	r2, [r4, #20]
 8011c94:	1c43      	adds	r3, r0, #1
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d004      	beq.n	8011ca4 <__swbuf_r+0x6e>
 8011c9a:	89a3      	ldrh	r3, [r4, #12]
 8011c9c:	07db      	lsls	r3, r3, #31
 8011c9e:	d5e1      	bpl.n	8011c64 <__swbuf_r+0x2e>
 8011ca0:	2e0a      	cmp	r6, #10
 8011ca2:	d1df      	bne.n	8011c64 <__swbuf_r+0x2e>
 8011ca4:	4621      	mov	r1, r4
 8011ca6:	4628      	mov	r0, r5
 8011ca8:	f000 fd44 	bl	8012734 <_fflush_r>
 8011cac:	2800      	cmp	r0, #0
 8011cae:	d0d9      	beq.n	8011c64 <__swbuf_r+0x2e>
 8011cb0:	e7d6      	b.n	8011c60 <__swbuf_r+0x2a>
	...

08011cb4 <__swsetup_r>:
 8011cb4:	b538      	push	{r3, r4, r5, lr}
 8011cb6:	4b29      	ldr	r3, [pc, #164]	@ (8011d5c <__swsetup_r+0xa8>)
 8011cb8:	4605      	mov	r5, r0
 8011cba:	6818      	ldr	r0, [r3, #0]
 8011cbc:	460c      	mov	r4, r1
 8011cbe:	b118      	cbz	r0, 8011cc8 <__swsetup_r+0x14>
 8011cc0:	6a03      	ldr	r3, [r0, #32]
 8011cc2:	b90b      	cbnz	r3, 8011cc8 <__swsetup_r+0x14>
 8011cc4:	f7ff fec6 	bl	8011a54 <__sinit>
 8011cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ccc:	0719      	lsls	r1, r3, #28
 8011cce:	d422      	bmi.n	8011d16 <__swsetup_r+0x62>
 8011cd0:	06da      	lsls	r2, r3, #27
 8011cd2:	d407      	bmi.n	8011ce4 <__swsetup_r+0x30>
 8011cd4:	2209      	movs	r2, #9
 8011cd6:	602a      	str	r2, [r5, #0]
 8011cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011cdc:	81a3      	strh	r3, [r4, #12]
 8011cde:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce2:	e033      	b.n	8011d4c <__swsetup_r+0x98>
 8011ce4:	0758      	lsls	r0, r3, #29
 8011ce6:	d512      	bpl.n	8011d0e <__swsetup_r+0x5a>
 8011ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011cea:	b141      	cbz	r1, 8011cfe <__swsetup_r+0x4a>
 8011cec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011cf0:	4299      	cmp	r1, r3
 8011cf2:	d002      	beq.n	8011cfa <__swsetup_r+0x46>
 8011cf4:	4628      	mov	r0, r5
 8011cf6:	f000 f8d3 	bl	8011ea0 <_free_r>
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8011cfe:	89a3      	ldrh	r3, [r4, #12]
 8011d00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011d04:	81a3      	strh	r3, [r4, #12]
 8011d06:	2300      	movs	r3, #0
 8011d08:	6063      	str	r3, [r4, #4]
 8011d0a:	6923      	ldr	r3, [r4, #16]
 8011d0c:	6023      	str	r3, [r4, #0]
 8011d0e:	89a3      	ldrh	r3, [r4, #12]
 8011d10:	f043 0308 	orr.w	r3, r3, #8
 8011d14:	81a3      	strh	r3, [r4, #12]
 8011d16:	6923      	ldr	r3, [r4, #16]
 8011d18:	b94b      	cbnz	r3, 8011d2e <__swsetup_r+0x7a>
 8011d1a:	89a3      	ldrh	r3, [r4, #12]
 8011d1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011d24:	d003      	beq.n	8011d2e <__swsetup_r+0x7a>
 8011d26:	4621      	mov	r1, r4
 8011d28:	4628      	mov	r0, r5
 8011d2a:	f000 fd51 	bl	80127d0 <__smakebuf_r>
 8011d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d32:	f013 0201 	ands.w	r2, r3, #1
 8011d36:	d00a      	beq.n	8011d4e <__swsetup_r+0x9a>
 8011d38:	2200      	movs	r2, #0
 8011d3a:	60a2      	str	r2, [r4, #8]
 8011d3c:	6962      	ldr	r2, [r4, #20]
 8011d3e:	4252      	negs	r2, r2
 8011d40:	61a2      	str	r2, [r4, #24]
 8011d42:	6922      	ldr	r2, [r4, #16]
 8011d44:	b942      	cbnz	r2, 8011d58 <__swsetup_r+0xa4>
 8011d46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011d4a:	d1c5      	bne.n	8011cd8 <__swsetup_r+0x24>
 8011d4c:	bd38      	pop	{r3, r4, r5, pc}
 8011d4e:	0799      	lsls	r1, r3, #30
 8011d50:	bf58      	it	pl
 8011d52:	6962      	ldrpl	r2, [r4, #20]
 8011d54:	60a2      	str	r2, [r4, #8]
 8011d56:	e7f4      	b.n	8011d42 <__swsetup_r+0x8e>
 8011d58:	2000      	movs	r0, #0
 8011d5a:	e7f7      	b.n	8011d4c <__swsetup_r+0x98>
 8011d5c:	20000134 	.word	0x20000134

08011d60 <memset>:
 8011d60:	4402      	add	r2, r0
 8011d62:	4603      	mov	r3, r0
 8011d64:	4293      	cmp	r3, r2
 8011d66:	d100      	bne.n	8011d6a <memset+0xa>
 8011d68:	4770      	bx	lr
 8011d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8011d6e:	e7f9      	b.n	8011d64 <memset+0x4>

08011d70 <strrchr>:
 8011d70:	b538      	push	{r3, r4, r5, lr}
 8011d72:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8011d76:	4603      	mov	r3, r0
 8011d78:	d10e      	bne.n	8011d98 <strrchr+0x28>
 8011d7a:	4621      	mov	r1, r4
 8011d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d80:	f000 bd96 	b.w	80128b0 <strchr>
 8011d84:	1c43      	adds	r3, r0, #1
 8011d86:	4605      	mov	r5, r0
 8011d88:	4621      	mov	r1, r4
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f000 fd90 	bl	80128b0 <strchr>
 8011d90:	2800      	cmp	r0, #0
 8011d92:	d1f7      	bne.n	8011d84 <strrchr+0x14>
 8011d94:	4628      	mov	r0, r5
 8011d96:	bd38      	pop	{r3, r4, r5, pc}
 8011d98:	2500      	movs	r5, #0
 8011d9a:	e7f5      	b.n	8011d88 <strrchr+0x18>

08011d9c <_close_r>:
 8011d9c:	b538      	push	{r3, r4, r5, lr}
 8011d9e:	4d06      	ldr	r5, [pc, #24]	@ (8011db8 <_close_r+0x1c>)
 8011da0:	2300      	movs	r3, #0
 8011da2:	4604      	mov	r4, r0
 8011da4:	4608      	mov	r0, r1
 8011da6:	602b      	str	r3, [r5, #0]
 8011da8:	f7f0 ffad 	bl	8002d06 <_close>
 8011dac:	1c43      	adds	r3, r0, #1
 8011dae:	d102      	bne.n	8011db6 <_close_r+0x1a>
 8011db0:	682b      	ldr	r3, [r5, #0]
 8011db2:	b103      	cbz	r3, 8011db6 <_close_r+0x1a>
 8011db4:	6023      	str	r3, [r4, #0]
 8011db6:	bd38      	pop	{r3, r4, r5, pc}
 8011db8:	200021c4 	.word	0x200021c4

08011dbc <_lseek_r>:
 8011dbc:	b538      	push	{r3, r4, r5, lr}
 8011dbe:	4d07      	ldr	r5, [pc, #28]	@ (8011ddc <_lseek_r+0x20>)
 8011dc0:	4604      	mov	r4, r0
 8011dc2:	4608      	mov	r0, r1
 8011dc4:	4611      	mov	r1, r2
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	602a      	str	r2, [r5, #0]
 8011dca:	461a      	mov	r2, r3
 8011dcc:	f7f0 ffc2 	bl	8002d54 <_lseek>
 8011dd0:	1c43      	adds	r3, r0, #1
 8011dd2:	d102      	bne.n	8011dda <_lseek_r+0x1e>
 8011dd4:	682b      	ldr	r3, [r5, #0]
 8011dd6:	b103      	cbz	r3, 8011dda <_lseek_r+0x1e>
 8011dd8:	6023      	str	r3, [r4, #0]
 8011dda:	bd38      	pop	{r3, r4, r5, pc}
 8011ddc:	200021c4 	.word	0x200021c4

08011de0 <_read_r>:
 8011de0:	b538      	push	{r3, r4, r5, lr}
 8011de2:	4d07      	ldr	r5, [pc, #28]	@ (8011e00 <_read_r+0x20>)
 8011de4:	4604      	mov	r4, r0
 8011de6:	4608      	mov	r0, r1
 8011de8:	4611      	mov	r1, r2
 8011dea:	2200      	movs	r2, #0
 8011dec:	602a      	str	r2, [r5, #0]
 8011dee:	461a      	mov	r2, r3
 8011df0:	f7f0 ff6c 	bl	8002ccc <_read>
 8011df4:	1c43      	adds	r3, r0, #1
 8011df6:	d102      	bne.n	8011dfe <_read_r+0x1e>
 8011df8:	682b      	ldr	r3, [r5, #0]
 8011dfa:	b103      	cbz	r3, 8011dfe <_read_r+0x1e>
 8011dfc:	6023      	str	r3, [r4, #0]
 8011dfe:	bd38      	pop	{r3, r4, r5, pc}
 8011e00:	200021c4 	.word	0x200021c4

08011e04 <_write_r>:
 8011e04:	b538      	push	{r3, r4, r5, lr}
 8011e06:	4d07      	ldr	r5, [pc, #28]	@ (8011e24 <_write_r+0x20>)
 8011e08:	4604      	mov	r4, r0
 8011e0a:	4608      	mov	r0, r1
 8011e0c:	4611      	mov	r1, r2
 8011e0e:	2200      	movs	r2, #0
 8011e10:	602a      	str	r2, [r5, #0]
 8011e12:	461a      	mov	r2, r3
 8011e14:	f7fc fc20 	bl	800e658 <_write>
 8011e18:	1c43      	adds	r3, r0, #1
 8011e1a:	d102      	bne.n	8011e22 <_write_r+0x1e>
 8011e1c:	682b      	ldr	r3, [r5, #0]
 8011e1e:	b103      	cbz	r3, 8011e22 <_write_r+0x1e>
 8011e20:	6023      	str	r3, [r4, #0]
 8011e22:	bd38      	pop	{r3, r4, r5, pc}
 8011e24:	200021c4 	.word	0x200021c4

08011e28 <__errno>:
 8011e28:	4b01      	ldr	r3, [pc, #4]	@ (8011e30 <__errno+0x8>)
 8011e2a:	6818      	ldr	r0, [r3, #0]
 8011e2c:	4770      	bx	lr
 8011e2e:	bf00      	nop
 8011e30:	20000134 	.word	0x20000134

08011e34 <__libc_init_array>:
 8011e34:	b570      	push	{r4, r5, r6, lr}
 8011e36:	4d0d      	ldr	r5, [pc, #52]	@ (8011e6c <__libc_init_array+0x38>)
 8011e38:	4c0d      	ldr	r4, [pc, #52]	@ (8011e70 <__libc_init_array+0x3c>)
 8011e3a:	1b64      	subs	r4, r4, r5
 8011e3c:	10a4      	asrs	r4, r4, #2
 8011e3e:	2600      	movs	r6, #0
 8011e40:	42a6      	cmp	r6, r4
 8011e42:	d109      	bne.n	8011e58 <__libc_init_array+0x24>
 8011e44:	4d0b      	ldr	r5, [pc, #44]	@ (8011e74 <__libc_init_array+0x40>)
 8011e46:	4c0c      	ldr	r4, [pc, #48]	@ (8011e78 <__libc_init_array+0x44>)
 8011e48:	f000 fd72 	bl	8012930 <_init>
 8011e4c:	1b64      	subs	r4, r4, r5
 8011e4e:	10a4      	asrs	r4, r4, #2
 8011e50:	2600      	movs	r6, #0
 8011e52:	42a6      	cmp	r6, r4
 8011e54:	d105      	bne.n	8011e62 <__libc_init_array+0x2e>
 8011e56:	bd70      	pop	{r4, r5, r6, pc}
 8011e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e5c:	4798      	blx	r3
 8011e5e:	3601      	adds	r6, #1
 8011e60:	e7ee      	b.n	8011e40 <__libc_init_array+0xc>
 8011e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e66:	4798      	blx	r3
 8011e68:	3601      	adds	r6, #1
 8011e6a:	e7f2      	b.n	8011e52 <__libc_init_array+0x1e>
 8011e6c:	0801420c 	.word	0x0801420c
 8011e70:	0801420c 	.word	0x0801420c
 8011e74:	0801420c 	.word	0x0801420c
 8011e78:	08014210 	.word	0x08014210

08011e7c <__retarget_lock_init_recursive>:
 8011e7c:	4770      	bx	lr

08011e7e <__retarget_lock_acquire_recursive>:
 8011e7e:	4770      	bx	lr

08011e80 <__retarget_lock_release_recursive>:
 8011e80:	4770      	bx	lr

08011e82 <memcpy>:
 8011e82:	440a      	add	r2, r1
 8011e84:	4291      	cmp	r1, r2
 8011e86:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e8a:	d100      	bne.n	8011e8e <memcpy+0xc>
 8011e8c:	4770      	bx	lr
 8011e8e:	b510      	push	{r4, lr}
 8011e90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e98:	4291      	cmp	r1, r2
 8011e9a:	d1f9      	bne.n	8011e90 <memcpy+0xe>
 8011e9c:	bd10      	pop	{r4, pc}
	...

08011ea0 <_free_r>:
 8011ea0:	b538      	push	{r3, r4, r5, lr}
 8011ea2:	4605      	mov	r5, r0
 8011ea4:	2900      	cmp	r1, #0
 8011ea6:	d041      	beq.n	8011f2c <_free_r+0x8c>
 8011ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011eac:	1f0c      	subs	r4, r1, #4
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	bfb8      	it	lt
 8011eb2:	18e4      	addlt	r4, r4, r3
 8011eb4:	f000 f8e0 	bl	8012078 <__malloc_lock>
 8011eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8011f30 <_free_r+0x90>)
 8011eba:	6813      	ldr	r3, [r2, #0]
 8011ebc:	b933      	cbnz	r3, 8011ecc <_free_r+0x2c>
 8011ebe:	6063      	str	r3, [r4, #4]
 8011ec0:	6014      	str	r4, [r2, #0]
 8011ec2:	4628      	mov	r0, r5
 8011ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ec8:	f000 b8dc 	b.w	8012084 <__malloc_unlock>
 8011ecc:	42a3      	cmp	r3, r4
 8011ece:	d908      	bls.n	8011ee2 <_free_r+0x42>
 8011ed0:	6820      	ldr	r0, [r4, #0]
 8011ed2:	1821      	adds	r1, r4, r0
 8011ed4:	428b      	cmp	r3, r1
 8011ed6:	bf01      	itttt	eq
 8011ed8:	6819      	ldreq	r1, [r3, #0]
 8011eda:	685b      	ldreq	r3, [r3, #4]
 8011edc:	1809      	addeq	r1, r1, r0
 8011ede:	6021      	streq	r1, [r4, #0]
 8011ee0:	e7ed      	b.n	8011ebe <_free_r+0x1e>
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	b10b      	cbz	r3, 8011eec <_free_r+0x4c>
 8011ee8:	42a3      	cmp	r3, r4
 8011eea:	d9fa      	bls.n	8011ee2 <_free_r+0x42>
 8011eec:	6811      	ldr	r1, [r2, #0]
 8011eee:	1850      	adds	r0, r2, r1
 8011ef0:	42a0      	cmp	r0, r4
 8011ef2:	d10b      	bne.n	8011f0c <_free_r+0x6c>
 8011ef4:	6820      	ldr	r0, [r4, #0]
 8011ef6:	4401      	add	r1, r0
 8011ef8:	1850      	adds	r0, r2, r1
 8011efa:	4283      	cmp	r3, r0
 8011efc:	6011      	str	r1, [r2, #0]
 8011efe:	d1e0      	bne.n	8011ec2 <_free_r+0x22>
 8011f00:	6818      	ldr	r0, [r3, #0]
 8011f02:	685b      	ldr	r3, [r3, #4]
 8011f04:	6053      	str	r3, [r2, #4]
 8011f06:	4408      	add	r0, r1
 8011f08:	6010      	str	r0, [r2, #0]
 8011f0a:	e7da      	b.n	8011ec2 <_free_r+0x22>
 8011f0c:	d902      	bls.n	8011f14 <_free_r+0x74>
 8011f0e:	230c      	movs	r3, #12
 8011f10:	602b      	str	r3, [r5, #0]
 8011f12:	e7d6      	b.n	8011ec2 <_free_r+0x22>
 8011f14:	6820      	ldr	r0, [r4, #0]
 8011f16:	1821      	adds	r1, r4, r0
 8011f18:	428b      	cmp	r3, r1
 8011f1a:	bf04      	itt	eq
 8011f1c:	6819      	ldreq	r1, [r3, #0]
 8011f1e:	685b      	ldreq	r3, [r3, #4]
 8011f20:	6063      	str	r3, [r4, #4]
 8011f22:	bf04      	itt	eq
 8011f24:	1809      	addeq	r1, r1, r0
 8011f26:	6021      	streq	r1, [r4, #0]
 8011f28:	6054      	str	r4, [r2, #4]
 8011f2a:	e7ca      	b.n	8011ec2 <_free_r+0x22>
 8011f2c:	bd38      	pop	{r3, r4, r5, pc}
 8011f2e:	bf00      	nop
 8011f30:	200021d0 	.word	0x200021d0

08011f34 <sbrk_aligned>:
 8011f34:	b570      	push	{r4, r5, r6, lr}
 8011f36:	4e0f      	ldr	r6, [pc, #60]	@ (8011f74 <sbrk_aligned+0x40>)
 8011f38:	460c      	mov	r4, r1
 8011f3a:	6831      	ldr	r1, [r6, #0]
 8011f3c:	4605      	mov	r5, r0
 8011f3e:	b911      	cbnz	r1, 8011f46 <sbrk_aligned+0x12>
 8011f40:	f000 fce6 	bl	8012910 <_sbrk_r>
 8011f44:	6030      	str	r0, [r6, #0]
 8011f46:	4621      	mov	r1, r4
 8011f48:	4628      	mov	r0, r5
 8011f4a:	f000 fce1 	bl	8012910 <_sbrk_r>
 8011f4e:	1c43      	adds	r3, r0, #1
 8011f50:	d103      	bne.n	8011f5a <sbrk_aligned+0x26>
 8011f52:	f04f 34ff 	mov.w	r4, #4294967295
 8011f56:	4620      	mov	r0, r4
 8011f58:	bd70      	pop	{r4, r5, r6, pc}
 8011f5a:	1cc4      	adds	r4, r0, #3
 8011f5c:	f024 0403 	bic.w	r4, r4, #3
 8011f60:	42a0      	cmp	r0, r4
 8011f62:	d0f8      	beq.n	8011f56 <sbrk_aligned+0x22>
 8011f64:	1a21      	subs	r1, r4, r0
 8011f66:	4628      	mov	r0, r5
 8011f68:	f000 fcd2 	bl	8012910 <_sbrk_r>
 8011f6c:	3001      	adds	r0, #1
 8011f6e:	d1f2      	bne.n	8011f56 <sbrk_aligned+0x22>
 8011f70:	e7ef      	b.n	8011f52 <sbrk_aligned+0x1e>
 8011f72:	bf00      	nop
 8011f74:	200021cc 	.word	0x200021cc

08011f78 <_malloc_r>:
 8011f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f7c:	1ccd      	adds	r5, r1, #3
 8011f7e:	f025 0503 	bic.w	r5, r5, #3
 8011f82:	3508      	adds	r5, #8
 8011f84:	2d0c      	cmp	r5, #12
 8011f86:	bf38      	it	cc
 8011f88:	250c      	movcc	r5, #12
 8011f8a:	2d00      	cmp	r5, #0
 8011f8c:	4606      	mov	r6, r0
 8011f8e:	db01      	blt.n	8011f94 <_malloc_r+0x1c>
 8011f90:	42a9      	cmp	r1, r5
 8011f92:	d904      	bls.n	8011f9e <_malloc_r+0x26>
 8011f94:	230c      	movs	r3, #12
 8011f96:	6033      	str	r3, [r6, #0]
 8011f98:	2000      	movs	r0, #0
 8011f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012074 <_malloc_r+0xfc>
 8011fa2:	f000 f869 	bl	8012078 <__malloc_lock>
 8011fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8011faa:	461c      	mov	r4, r3
 8011fac:	bb44      	cbnz	r4, 8012000 <_malloc_r+0x88>
 8011fae:	4629      	mov	r1, r5
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	f7ff ffbf 	bl	8011f34 <sbrk_aligned>
 8011fb6:	1c43      	adds	r3, r0, #1
 8011fb8:	4604      	mov	r4, r0
 8011fba:	d158      	bne.n	801206e <_malloc_r+0xf6>
 8011fbc:	f8d8 4000 	ldr.w	r4, [r8]
 8011fc0:	4627      	mov	r7, r4
 8011fc2:	2f00      	cmp	r7, #0
 8011fc4:	d143      	bne.n	801204e <_malloc_r+0xd6>
 8011fc6:	2c00      	cmp	r4, #0
 8011fc8:	d04b      	beq.n	8012062 <_malloc_r+0xea>
 8011fca:	6823      	ldr	r3, [r4, #0]
 8011fcc:	4639      	mov	r1, r7
 8011fce:	4630      	mov	r0, r6
 8011fd0:	eb04 0903 	add.w	r9, r4, r3
 8011fd4:	f000 fc9c 	bl	8012910 <_sbrk_r>
 8011fd8:	4581      	cmp	r9, r0
 8011fda:	d142      	bne.n	8012062 <_malloc_r+0xea>
 8011fdc:	6821      	ldr	r1, [r4, #0]
 8011fde:	1a6d      	subs	r5, r5, r1
 8011fe0:	4629      	mov	r1, r5
 8011fe2:	4630      	mov	r0, r6
 8011fe4:	f7ff ffa6 	bl	8011f34 <sbrk_aligned>
 8011fe8:	3001      	adds	r0, #1
 8011fea:	d03a      	beq.n	8012062 <_malloc_r+0xea>
 8011fec:	6823      	ldr	r3, [r4, #0]
 8011fee:	442b      	add	r3, r5
 8011ff0:	6023      	str	r3, [r4, #0]
 8011ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8011ff6:	685a      	ldr	r2, [r3, #4]
 8011ff8:	bb62      	cbnz	r2, 8012054 <_malloc_r+0xdc>
 8011ffa:	f8c8 7000 	str.w	r7, [r8]
 8011ffe:	e00f      	b.n	8012020 <_malloc_r+0xa8>
 8012000:	6822      	ldr	r2, [r4, #0]
 8012002:	1b52      	subs	r2, r2, r5
 8012004:	d420      	bmi.n	8012048 <_malloc_r+0xd0>
 8012006:	2a0b      	cmp	r2, #11
 8012008:	d917      	bls.n	801203a <_malloc_r+0xc2>
 801200a:	1961      	adds	r1, r4, r5
 801200c:	42a3      	cmp	r3, r4
 801200e:	6025      	str	r5, [r4, #0]
 8012010:	bf18      	it	ne
 8012012:	6059      	strne	r1, [r3, #4]
 8012014:	6863      	ldr	r3, [r4, #4]
 8012016:	bf08      	it	eq
 8012018:	f8c8 1000 	streq.w	r1, [r8]
 801201c:	5162      	str	r2, [r4, r5]
 801201e:	604b      	str	r3, [r1, #4]
 8012020:	4630      	mov	r0, r6
 8012022:	f000 f82f 	bl	8012084 <__malloc_unlock>
 8012026:	f104 000b 	add.w	r0, r4, #11
 801202a:	1d23      	adds	r3, r4, #4
 801202c:	f020 0007 	bic.w	r0, r0, #7
 8012030:	1ac2      	subs	r2, r0, r3
 8012032:	bf1c      	itt	ne
 8012034:	1a1b      	subne	r3, r3, r0
 8012036:	50a3      	strne	r3, [r4, r2]
 8012038:	e7af      	b.n	8011f9a <_malloc_r+0x22>
 801203a:	6862      	ldr	r2, [r4, #4]
 801203c:	42a3      	cmp	r3, r4
 801203e:	bf0c      	ite	eq
 8012040:	f8c8 2000 	streq.w	r2, [r8]
 8012044:	605a      	strne	r2, [r3, #4]
 8012046:	e7eb      	b.n	8012020 <_malloc_r+0xa8>
 8012048:	4623      	mov	r3, r4
 801204a:	6864      	ldr	r4, [r4, #4]
 801204c:	e7ae      	b.n	8011fac <_malloc_r+0x34>
 801204e:	463c      	mov	r4, r7
 8012050:	687f      	ldr	r7, [r7, #4]
 8012052:	e7b6      	b.n	8011fc2 <_malloc_r+0x4a>
 8012054:	461a      	mov	r2, r3
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	42a3      	cmp	r3, r4
 801205a:	d1fb      	bne.n	8012054 <_malloc_r+0xdc>
 801205c:	2300      	movs	r3, #0
 801205e:	6053      	str	r3, [r2, #4]
 8012060:	e7de      	b.n	8012020 <_malloc_r+0xa8>
 8012062:	230c      	movs	r3, #12
 8012064:	6033      	str	r3, [r6, #0]
 8012066:	4630      	mov	r0, r6
 8012068:	f000 f80c 	bl	8012084 <__malloc_unlock>
 801206c:	e794      	b.n	8011f98 <_malloc_r+0x20>
 801206e:	6005      	str	r5, [r0, #0]
 8012070:	e7d6      	b.n	8012020 <_malloc_r+0xa8>
 8012072:	bf00      	nop
 8012074:	200021d0 	.word	0x200021d0

08012078 <__malloc_lock>:
 8012078:	4801      	ldr	r0, [pc, #4]	@ (8012080 <__malloc_lock+0x8>)
 801207a:	f7ff bf00 	b.w	8011e7e <__retarget_lock_acquire_recursive>
 801207e:	bf00      	nop
 8012080:	200021c8 	.word	0x200021c8

08012084 <__malloc_unlock>:
 8012084:	4801      	ldr	r0, [pc, #4]	@ (801208c <__malloc_unlock+0x8>)
 8012086:	f7ff befb 	b.w	8011e80 <__retarget_lock_release_recursive>
 801208a:	bf00      	nop
 801208c:	200021c8 	.word	0x200021c8

08012090 <__sfputc_r>:
 8012090:	6893      	ldr	r3, [r2, #8]
 8012092:	3b01      	subs	r3, #1
 8012094:	2b00      	cmp	r3, #0
 8012096:	b410      	push	{r4}
 8012098:	6093      	str	r3, [r2, #8]
 801209a:	da08      	bge.n	80120ae <__sfputc_r+0x1e>
 801209c:	6994      	ldr	r4, [r2, #24]
 801209e:	42a3      	cmp	r3, r4
 80120a0:	db01      	blt.n	80120a6 <__sfputc_r+0x16>
 80120a2:	290a      	cmp	r1, #10
 80120a4:	d103      	bne.n	80120ae <__sfputc_r+0x1e>
 80120a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120aa:	f7ff bdc4 	b.w	8011c36 <__swbuf_r>
 80120ae:	6813      	ldr	r3, [r2, #0]
 80120b0:	1c58      	adds	r0, r3, #1
 80120b2:	6010      	str	r0, [r2, #0]
 80120b4:	7019      	strb	r1, [r3, #0]
 80120b6:	4608      	mov	r0, r1
 80120b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120bc:	4770      	bx	lr

080120be <__sfputs_r>:
 80120be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120c0:	4606      	mov	r6, r0
 80120c2:	460f      	mov	r7, r1
 80120c4:	4614      	mov	r4, r2
 80120c6:	18d5      	adds	r5, r2, r3
 80120c8:	42ac      	cmp	r4, r5
 80120ca:	d101      	bne.n	80120d0 <__sfputs_r+0x12>
 80120cc:	2000      	movs	r0, #0
 80120ce:	e007      	b.n	80120e0 <__sfputs_r+0x22>
 80120d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120d4:	463a      	mov	r2, r7
 80120d6:	4630      	mov	r0, r6
 80120d8:	f7ff ffda 	bl	8012090 <__sfputc_r>
 80120dc:	1c43      	adds	r3, r0, #1
 80120de:	d1f3      	bne.n	80120c8 <__sfputs_r+0xa>
 80120e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080120e4 <_vfiprintf_r>:
 80120e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120e8:	460d      	mov	r5, r1
 80120ea:	b09d      	sub	sp, #116	@ 0x74
 80120ec:	4614      	mov	r4, r2
 80120ee:	4698      	mov	r8, r3
 80120f0:	4606      	mov	r6, r0
 80120f2:	b118      	cbz	r0, 80120fc <_vfiprintf_r+0x18>
 80120f4:	6a03      	ldr	r3, [r0, #32]
 80120f6:	b90b      	cbnz	r3, 80120fc <_vfiprintf_r+0x18>
 80120f8:	f7ff fcac 	bl	8011a54 <__sinit>
 80120fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120fe:	07d9      	lsls	r1, r3, #31
 8012100:	d405      	bmi.n	801210e <_vfiprintf_r+0x2a>
 8012102:	89ab      	ldrh	r3, [r5, #12]
 8012104:	059a      	lsls	r2, r3, #22
 8012106:	d402      	bmi.n	801210e <_vfiprintf_r+0x2a>
 8012108:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801210a:	f7ff feb8 	bl	8011e7e <__retarget_lock_acquire_recursive>
 801210e:	89ab      	ldrh	r3, [r5, #12]
 8012110:	071b      	lsls	r3, r3, #28
 8012112:	d501      	bpl.n	8012118 <_vfiprintf_r+0x34>
 8012114:	692b      	ldr	r3, [r5, #16]
 8012116:	b99b      	cbnz	r3, 8012140 <_vfiprintf_r+0x5c>
 8012118:	4629      	mov	r1, r5
 801211a:	4630      	mov	r0, r6
 801211c:	f7ff fdca 	bl	8011cb4 <__swsetup_r>
 8012120:	b170      	cbz	r0, 8012140 <_vfiprintf_r+0x5c>
 8012122:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012124:	07dc      	lsls	r4, r3, #31
 8012126:	d504      	bpl.n	8012132 <_vfiprintf_r+0x4e>
 8012128:	f04f 30ff 	mov.w	r0, #4294967295
 801212c:	b01d      	add	sp, #116	@ 0x74
 801212e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012132:	89ab      	ldrh	r3, [r5, #12]
 8012134:	0598      	lsls	r0, r3, #22
 8012136:	d4f7      	bmi.n	8012128 <_vfiprintf_r+0x44>
 8012138:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801213a:	f7ff fea1 	bl	8011e80 <__retarget_lock_release_recursive>
 801213e:	e7f3      	b.n	8012128 <_vfiprintf_r+0x44>
 8012140:	2300      	movs	r3, #0
 8012142:	9309      	str	r3, [sp, #36]	@ 0x24
 8012144:	2320      	movs	r3, #32
 8012146:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801214a:	f8cd 800c 	str.w	r8, [sp, #12]
 801214e:	2330      	movs	r3, #48	@ 0x30
 8012150:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012300 <_vfiprintf_r+0x21c>
 8012154:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012158:	f04f 0901 	mov.w	r9, #1
 801215c:	4623      	mov	r3, r4
 801215e:	469a      	mov	sl, r3
 8012160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012164:	b10a      	cbz	r2, 801216a <_vfiprintf_r+0x86>
 8012166:	2a25      	cmp	r2, #37	@ 0x25
 8012168:	d1f9      	bne.n	801215e <_vfiprintf_r+0x7a>
 801216a:	ebba 0b04 	subs.w	fp, sl, r4
 801216e:	d00b      	beq.n	8012188 <_vfiprintf_r+0xa4>
 8012170:	465b      	mov	r3, fp
 8012172:	4622      	mov	r2, r4
 8012174:	4629      	mov	r1, r5
 8012176:	4630      	mov	r0, r6
 8012178:	f7ff ffa1 	bl	80120be <__sfputs_r>
 801217c:	3001      	adds	r0, #1
 801217e:	f000 80a7 	beq.w	80122d0 <_vfiprintf_r+0x1ec>
 8012182:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012184:	445a      	add	r2, fp
 8012186:	9209      	str	r2, [sp, #36]	@ 0x24
 8012188:	f89a 3000 	ldrb.w	r3, [sl]
 801218c:	2b00      	cmp	r3, #0
 801218e:	f000 809f 	beq.w	80122d0 <_vfiprintf_r+0x1ec>
 8012192:	2300      	movs	r3, #0
 8012194:	f04f 32ff 	mov.w	r2, #4294967295
 8012198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801219c:	f10a 0a01 	add.w	sl, sl, #1
 80121a0:	9304      	str	r3, [sp, #16]
 80121a2:	9307      	str	r3, [sp, #28]
 80121a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80121a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80121aa:	4654      	mov	r4, sl
 80121ac:	2205      	movs	r2, #5
 80121ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121b2:	4853      	ldr	r0, [pc, #332]	@ (8012300 <_vfiprintf_r+0x21c>)
 80121b4:	f7ed ffec 	bl	8000190 <memchr>
 80121b8:	9a04      	ldr	r2, [sp, #16]
 80121ba:	b9d8      	cbnz	r0, 80121f4 <_vfiprintf_r+0x110>
 80121bc:	06d1      	lsls	r1, r2, #27
 80121be:	bf44      	itt	mi
 80121c0:	2320      	movmi	r3, #32
 80121c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121c6:	0713      	lsls	r3, r2, #28
 80121c8:	bf44      	itt	mi
 80121ca:	232b      	movmi	r3, #43	@ 0x2b
 80121cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121d0:	f89a 3000 	ldrb.w	r3, [sl]
 80121d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80121d6:	d015      	beq.n	8012204 <_vfiprintf_r+0x120>
 80121d8:	9a07      	ldr	r2, [sp, #28]
 80121da:	4654      	mov	r4, sl
 80121dc:	2000      	movs	r0, #0
 80121de:	f04f 0c0a 	mov.w	ip, #10
 80121e2:	4621      	mov	r1, r4
 80121e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121e8:	3b30      	subs	r3, #48	@ 0x30
 80121ea:	2b09      	cmp	r3, #9
 80121ec:	d94b      	bls.n	8012286 <_vfiprintf_r+0x1a2>
 80121ee:	b1b0      	cbz	r0, 801221e <_vfiprintf_r+0x13a>
 80121f0:	9207      	str	r2, [sp, #28]
 80121f2:	e014      	b.n	801221e <_vfiprintf_r+0x13a>
 80121f4:	eba0 0308 	sub.w	r3, r0, r8
 80121f8:	fa09 f303 	lsl.w	r3, r9, r3
 80121fc:	4313      	orrs	r3, r2
 80121fe:	9304      	str	r3, [sp, #16]
 8012200:	46a2      	mov	sl, r4
 8012202:	e7d2      	b.n	80121aa <_vfiprintf_r+0xc6>
 8012204:	9b03      	ldr	r3, [sp, #12]
 8012206:	1d19      	adds	r1, r3, #4
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	9103      	str	r1, [sp, #12]
 801220c:	2b00      	cmp	r3, #0
 801220e:	bfbb      	ittet	lt
 8012210:	425b      	neglt	r3, r3
 8012212:	f042 0202 	orrlt.w	r2, r2, #2
 8012216:	9307      	strge	r3, [sp, #28]
 8012218:	9307      	strlt	r3, [sp, #28]
 801221a:	bfb8      	it	lt
 801221c:	9204      	strlt	r2, [sp, #16]
 801221e:	7823      	ldrb	r3, [r4, #0]
 8012220:	2b2e      	cmp	r3, #46	@ 0x2e
 8012222:	d10a      	bne.n	801223a <_vfiprintf_r+0x156>
 8012224:	7863      	ldrb	r3, [r4, #1]
 8012226:	2b2a      	cmp	r3, #42	@ 0x2a
 8012228:	d132      	bne.n	8012290 <_vfiprintf_r+0x1ac>
 801222a:	9b03      	ldr	r3, [sp, #12]
 801222c:	1d1a      	adds	r2, r3, #4
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	9203      	str	r2, [sp, #12]
 8012232:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012236:	3402      	adds	r4, #2
 8012238:	9305      	str	r3, [sp, #20]
 801223a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012310 <_vfiprintf_r+0x22c>
 801223e:	7821      	ldrb	r1, [r4, #0]
 8012240:	2203      	movs	r2, #3
 8012242:	4650      	mov	r0, sl
 8012244:	f7ed ffa4 	bl	8000190 <memchr>
 8012248:	b138      	cbz	r0, 801225a <_vfiprintf_r+0x176>
 801224a:	9b04      	ldr	r3, [sp, #16]
 801224c:	eba0 000a 	sub.w	r0, r0, sl
 8012250:	2240      	movs	r2, #64	@ 0x40
 8012252:	4082      	lsls	r2, r0
 8012254:	4313      	orrs	r3, r2
 8012256:	3401      	adds	r4, #1
 8012258:	9304      	str	r3, [sp, #16]
 801225a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801225e:	4829      	ldr	r0, [pc, #164]	@ (8012304 <_vfiprintf_r+0x220>)
 8012260:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012264:	2206      	movs	r2, #6
 8012266:	f7ed ff93 	bl	8000190 <memchr>
 801226a:	2800      	cmp	r0, #0
 801226c:	d03f      	beq.n	80122ee <_vfiprintf_r+0x20a>
 801226e:	4b26      	ldr	r3, [pc, #152]	@ (8012308 <_vfiprintf_r+0x224>)
 8012270:	bb1b      	cbnz	r3, 80122ba <_vfiprintf_r+0x1d6>
 8012272:	9b03      	ldr	r3, [sp, #12]
 8012274:	3307      	adds	r3, #7
 8012276:	f023 0307 	bic.w	r3, r3, #7
 801227a:	3308      	adds	r3, #8
 801227c:	9303      	str	r3, [sp, #12]
 801227e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012280:	443b      	add	r3, r7
 8012282:	9309      	str	r3, [sp, #36]	@ 0x24
 8012284:	e76a      	b.n	801215c <_vfiprintf_r+0x78>
 8012286:	fb0c 3202 	mla	r2, ip, r2, r3
 801228a:	460c      	mov	r4, r1
 801228c:	2001      	movs	r0, #1
 801228e:	e7a8      	b.n	80121e2 <_vfiprintf_r+0xfe>
 8012290:	2300      	movs	r3, #0
 8012292:	3401      	adds	r4, #1
 8012294:	9305      	str	r3, [sp, #20]
 8012296:	4619      	mov	r1, r3
 8012298:	f04f 0c0a 	mov.w	ip, #10
 801229c:	4620      	mov	r0, r4
 801229e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122a2:	3a30      	subs	r2, #48	@ 0x30
 80122a4:	2a09      	cmp	r2, #9
 80122a6:	d903      	bls.n	80122b0 <_vfiprintf_r+0x1cc>
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d0c6      	beq.n	801223a <_vfiprintf_r+0x156>
 80122ac:	9105      	str	r1, [sp, #20]
 80122ae:	e7c4      	b.n	801223a <_vfiprintf_r+0x156>
 80122b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80122b4:	4604      	mov	r4, r0
 80122b6:	2301      	movs	r3, #1
 80122b8:	e7f0      	b.n	801229c <_vfiprintf_r+0x1b8>
 80122ba:	ab03      	add	r3, sp, #12
 80122bc:	9300      	str	r3, [sp, #0]
 80122be:	462a      	mov	r2, r5
 80122c0:	4b12      	ldr	r3, [pc, #72]	@ (801230c <_vfiprintf_r+0x228>)
 80122c2:	a904      	add	r1, sp, #16
 80122c4:	4630      	mov	r0, r6
 80122c6:	f3af 8000 	nop.w
 80122ca:	4607      	mov	r7, r0
 80122cc:	1c78      	adds	r0, r7, #1
 80122ce:	d1d6      	bne.n	801227e <_vfiprintf_r+0x19a>
 80122d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80122d2:	07d9      	lsls	r1, r3, #31
 80122d4:	d405      	bmi.n	80122e2 <_vfiprintf_r+0x1fe>
 80122d6:	89ab      	ldrh	r3, [r5, #12]
 80122d8:	059a      	lsls	r2, r3, #22
 80122da:	d402      	bmi.n	80122e2 <_vfiprintf_r+0x1fe>
 80122dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80122de:	f7ff fdcf 	bl	8011e80 <__retarget_lock_release_recursive>
 80122e2:	89ab      	ldrh	r3, [r5, #12]
 80122e4:	065b      	lsls	r3, r3, #25
 80122e6:	f53f af1f 	bmi.w	8012128 <_vfiprintf_r+0x44>
 80122ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122ec:	e71e      	b.n	801212c <_vfiprintf_r+0x48>
 80122ee:	ab03      	add	r3, sp, #12
 80122f0:	9300      	str	r3, [sp, #0]
 80122f2:	462a      	mov	r2, r5
 80122f4:	4b05      	ldr	r3, [pc, #20]	@ (801230c <_vfiprintf_r+0x228>)
 80122f6:	a904      	add	r1, sp, #16
 80122f8:	4630      	mov	r0, r6
 80122fa:	f000 f879 	bl	80123f0 <_printf_i>
 80122fe:	e7e4      	b.n	80122ca <_vfiprintf_r+0x1e6>
 8012300:	080141d1 	.word	0x080141d1
 8012304:	080141db 	.word	0x080141db
 8012308:	00000000 	.word	0x00000000
 801230c:	080120bf 	.word	0x080120bf
 8012310:	080141d7 	.word	0x080141d7

08012314 <_printf_common>:
 8012314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012318:	4616      	mov	r6, r2
 801231a:	4698      	mov	r8, r3
 801231c:	688a      	ldr	r2, [r1, #8]
 801231e:	690b      	ldr	r3, [r1, #16]
 8012320:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012324:	4293      	cmp	r3, r2
 8012326:	bfb8      	it	lt
 8012328:	4613      	movlt	r3, r2
 801232a:	6033      	str	r3, [r6, #0]
 801232c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012330:	4607      	mov	r7, r0
 8012332:	460c      	mov	r4, r1
 8012334:	b10a      	cbz	r2, 801233a <_printf_common+0x26>
 8012336:	3301      	adds	r3, #1
 8012338:	6033      	str	r3, [r6, #0]
 801233a:	6823      	ldr	r3, [r4, #0]
 801233c:	0699      	lsls	r1, r3, #26
 801233e:	bf42      	ittt	mi
 8012340:	6833      	ldrmi	r3, [r6, #0]
 8012342:	3302      	addmi	r3, #2
 8012344:	6033      	strmi	r3, [r6, #0]
 8012346:	6825      	ldr	r5, [r4, #0]
 8012348:	f015 0506 	ands.w	r5, r5, #6
 801234c:	d106      	bne.n	801235c <_printf_common+0x48>
 801234e:	f104 0a19 	add.w	sl, r4, #25
 8012352:	68e3      	ldr	r3, [r4, #12]
 8012354:	6832      	ldr	r2, [r6, #0]
 8012356:	1a9b      	subs	r3, r3, r2
 8012358:	42ab      	cmp	r3, r5
 801235a:	dc26      	bgt.n	80123aa <_printf_common+0x96>
 801235c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012360:	6822      	ldr	r2, [r4, #0]
 8012362:	3b00      	subs	r3, #0
 8012364:	bf18      	it	ne
 8012366:	2301      	movne	r3, #1
 8012368:	0692      	lsls	r2, r2, #26
 801236a:	d42b      	bmi.n	80123c4 <_printf_common+0xb0>
 801236c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012370:	4641      	mov	r1, r8
 8012372:	4638      	mov	r0, r7
 8012374:	47c8      	blx	r9
 8012376:	3001      	adds	r0, #1
 8012378:	d01e      	beq.n	80123b8 <_printf_common+0xa4>
 801237a:	6823      	ldr	r3, [r4, #0]
 801237c:	6922      	ldr	r2, [r4, #16]
 801237e:	f003 0306 	and.w	r3, r3, #6
 8012382:	2b04      	cmp	r3, #4
 8012384:	bf02      	ittt	eq
 8012386:	68e5      	ldreq	r5, [r4, #12]
 8012388:	6833      	ldreq	r3, [r6, #0]
 801238a:	1aed      	subeq	r5, r5, r3
 801238c:	68a3      	ldr	r3, [r4, #8]
 801238e:	bf0c      	ite	eq
 8012390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012394:	2500      	movne	r5, #0
 8012396:	4293      	cmp	r3, r2
 8012398:	bfc4      	itt	gt
 801239a:	1a9b      	subgt	r3, r3, r2
 801239c:	18ed      	addgt	r5, r5, r3
 801239e:	2600      	movs	r6, #0
 80123a0:	341a      	adds	r4, #26
 80123a2:	42b5      	cmp	r5, r6
 80123a4:	d11a      	bne.n	80123dc <_printf_common+0xc8>
 80123a6:	2000      	movs	r0, #0
 80123a8:	e008      	b.n	80123bc <_printf_common+0xa8>
 80123aa:	2301      	movs	r3, #1
 80123ac:	4652      	mov	r2, sl
 80123ae:	4641      	mov	r1, r8
 80123b0:	4638      	mov	r0, r7
 80123b2:	47c8      	blx	r9
 80123b4:	3001      	adds	r0, #1
 80123b6:	d103      	bne.n	80123c0 <_printf_common+0xac>
 80123b8:	f04f 30ff 	mov.w	r0, #4294967295
 80123bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123c0:	3501      	adds	r5, #1
 80123c2:	e7c6      	b.n	8012352 <_printf_common+0x3e>
 80123c4:	18e1      	adds	r1, r4, r3
 80123c6:	1c5a      	adds	r2, r3, #1
 80123c8:	2030      	movs	r0, #48	@ 0x30
 80123ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80123ce:	4422      	add	r2, r4
 80123d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80123d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80123d8:	3302      	adds	r3, #2
 80123da:	e7c7      	b.n	801236c <_printf_common+0x58>
 80123dc:	2301      	movs	r3, #1
 80123de:	4622      	mov	r2, r4
 80123e0:	4641      	mov	r1, r8
 80123e2:	4638      	mov	r0, r7
 80123e4:	47c8      	blx	r9
 80123e6:	3001      	adds	r0, #1
 80123e8:	d0e6      	beq.n	80123b8 <_printf_common+0xa4>
 80123ea:	3601      	adds	r6, #1
 80123ec:	e7d9      	b.n	80123a2 <_printf_common+0x8e>
	...

080123f0 <_printf_i>:
 80123f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80123f4:	7e0f      	ldrb	r7, [r1, #24]
 80123f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80123f8:	2f78      	cmp	r7, #120	@ 0x78
 80123fa:	4691      	mov	r9, r2
 80123fc:	4680      	mov	r8, r0
 80123fe:	460c      	mov	r4, r1
 8012400:	469a      	mov	sl, r3
 8012402:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012406:	d807      	bhi.n	8012418 <_printf_i+0x28>
 8012408:	2f62      	cmp	r7, #98	@ 0x62
 801240a:	d80a      	bhi.n	8012422 <_printf_i+0x32>
 801240c:	2f00      	cmp	r7, #0
 801240e:	f000 80d1 	beq.w	80125b4 <_printf_i+0x1c4>
 8012412:	2f58      	cmp	r7, #88	@ 0x58
 8012414:	f000 80b8 	beq.w	8012588 <_printf_i+0x198>
 8012418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801241c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012420:	e03a      	b.n	8012498 <_printf_i+0xa8>
 8012422:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012426:	2b15      	cmp	r3, #21
 8012428:	d8f6      	bhi.n	8012418 <_printf_i+0x28>
 801242a:	a101      	add	r1, pc, #4	@ (adr r1, 8012430 <_printf_i+0x40>)
 801242c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012430:	08012489 	.word	0x08012489
 8012434:	0801249d 	.word	0x0801249d
 8012438:	08012419 	.word	0x08012419
 801243c:	08012419 	.word	0x08012419
 8012440:	08012419 	.word	0x08012419
 8012444:	08012419 	.word	0x08012419
 8012448:	0801249d 	.word	0x0801249d
 801244c:	08012419 	.word	0x08012419
 8012450:	08012419 	.word	0x08012419
 8012454:	08012419 	.word	0x08012419
 8012458:	08012419 	.word	0x08012419
 801245c:	0801259b 	.word	0x0801259b
 8012460:	080124c7 	.word	0x080124c7
 8012464:	08012555 	.word	0x08012555
 8012468:	08012419 	.word	0x08012419
 801246c:	08012419 	.word	0x08012419
 8012470:	080125bd 	.word	0x080125bd
 8012474:	08012419 	.word	0x08012419
 8012478:	080124c7 	.word	0x080124c7
 801247c:	08012419 	.word	0x08012419
 8012480:	08012419 	.word	0x08012419
 8012484:	0801255d 	.word	0x0801255d
 8012488:	6833      	ldr	r3, [r6, #0]
 801248a:	1d1a      	adds	r2, r3, #4
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	6032      	str	r2, [r6, #0]
 8012490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012494:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012498:	2301      	movs	r3, #1
 801249a:	e09c      	b.n	80125d6 <_printf_i+0x1e6>
 801249c:	6833      	ldr	r3, [r6, #0]
 801249e:	6820      	ldr	r0, [r4, #0]
 80124a0:	1d19      	adds	r1, r3, #4
 80124a2:	6031      	str	r1, [r6, #0]
 80124a4:	0606      	lsls	r6, r0, #24
 80124a6:	d501      	bpl.n	80124ac <_printf_i+0xbc>
 80124a8:	681d      	ldr	r5, [r3, #0]
 80124aa:	e003      	b.n	80124b4 <_printf_i+0xc4>
 80124ac:	0645      	lsls	r5, r0, #25
 80124ae:	d5fb      	bpl.n	80124a8 <_printf_i+0xb8>
 80124b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80124b4:	2d00      	cmp	r5, #0
 80124b6:	da03      	bge.n	80124c0 <_printf_i+0xd0>
 80124b8:	232d      	movs	r3, #45	@ 0x2d
 80124ba:	426d      	negs	r5, r5
 80124bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80124c0:	4858      	ldr	r0, [pc, #352]	@ (8012624 <_printf_i+0x234>)
 80124c2:	230a      	movs	r3, #10
 80124c4:	e011      	b.n	80124ea <_printf_i+0xfa>
 80124c6:	6821      	ldr	r1, [r4, #0]
 80124c8:	6833      	ldr	r3, [r6, #0]
 80124ca:	0608      	lsls	r0, r1, #24
 80124cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80124d0:	d402      	bmi.n	80124d8 <_printf_i+0xe8>
 80124d2:	0649      	lsls	r1, r1, #25
 80124d4:	bf48      	it	mi
 80124d6:	b2ad      	uxthmi	r5, r5
 80124d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80124da:	4852      	ldr	r0, [pc, #328]	@ (8012624 <_printf_i+0x234>)
 80124dc:	6033      	str	r3, [r6, #0]
 80124de:	bf14      	ite	ne
 80124e0:	230a      	movne	r3, #10
 80124e2:	2308      	moveq	r3, #8
 80124e4:	2100      	movs	r1, #0
 80124e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80124ea:	6866      	ldr	r6, [r4, #4]
 80124ec:	60a6      	str	r6, [r4, #8]
 80124ee:	2e00      	cmp	r6, #0
 80124f0:	db05      	blt.n	80124fe <_printf_i+0x10e>
 80124f2:	6821      	ldr	r1, [r4, #0]
 80124f4:	432e      	orrs	r6, r5
 80124f6:	f021 0104 	bic.w	r1, r1, #4
 80124fa:	6021      	str	r1, [r4, #0]
 80124fc:	d04b      	beq.n	8012596 <_printf_i+0x1a6>
 80124fe:	4616      	mov	r6, r2
 8012500:	fbb5 f1f3 	udiv	r1, r5, r3
 8012504:	fb03 5711 	mls	r7, r3, r1, r5
 8012508:	5dc7      	ldrb	r7, [r0, r7]
 801250a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801250e:	462f      	mov	r7, r5
 8012510:	42bb      	cmp	r3, r7
 8012512:	460d      	mov	r5, r1
 8012514:	d9f4      	bls.n	8012500 <_printf_i+0x110>
 8012516:	2b08      	cmp	r3, #8
 8012518:	d10b      	bne.n	8012532 <_printf_i+0x142>
 801251a:	6823      	ldr	r3, [r4, #0]
 801251c:	07df      	lsls	r7, r3, #31
 801251e:	d508      	bpl.n	8012532 <_printf_i+0x142>
 8012520:	6923      	ldr	r3, [r4, #16]
 8012522:	6861      	ldr	r1, [r4, #4]
 8012524:	4299      	cmp	r1, r3
 8012526:	bfde      	ittt	le
 8012528:	2330      	movle	r3, #48	@ 0x30
 801252a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801252e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012532:	1b92      	subs	r2, r2, r6
 8012534:	6122      	str	r2, [r4, #16]
 8012536:	f8cd a000 	str.w	sl, [sp]
 801253a:	464b      	mov	r3, r9
 801253c:	aa03      	add	r2, sp, #12
 801253e:	4621      	mov	r1, r4
 8012540:	4640      	mov	r0, r8
 8012542:	f7ff fee7 	bl	8012314 <_printf_common>
 8012546:	3001      	adds	r0, #1
 8012548:	d14a      	bne.n	80125e0 <_printf_i+0x1f0>
 801254a:	f04f 30ff 	mov.w	r0, #4294967295
 801254e:	b004      	add	sp, #16
 8012550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012554:	6823      	ldr	r3, [r4, #0]
 8012556:	f043 0320 	orr.w	r3, r3, #32
 801255a:	6023      	str	r3, [r4, #0]
 801255c:	4832      	ldr	r0, [pc, #200]	@ (8012628 <_printf_i+0x238>)
 801255e:	2778      	movs	r7, #120	@ 0x78
 8012560:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012564:	6823      	ldr	r3, [r4, #0]
 8012566:	6831      	ldr	r1, [r6, #0]
 8012568:	061f      	lsls	r7, r3, #24
 801256a:	f851 5b04 	ldr.w	r5, [r1], #4
 801256e:	d402      	bmi.n	8012576 <_printf_i+0x186>
 8012570:	065f      	lsls	r7, r3, #25
 8012572:	bf48      	it	mi
 8012574:	b2ad      	uxthmi	r5, r5
 8012576:	6031      	str	r1, [r6, #0]
 8012578:	07d9      	lsls	r1, r3, #31
 801257a:	bf44      	itt	mi
 801257c:	f043 0320 	orrmi.w	r3, r3, #32
 8012580:	6023      	strmi	r3, [r4, #0]
 8012582:	b11d      	cbz	r5, 801258c <_printf_i+0x19c>
 8012584:	2310      	movs	r3, #16
 8012586:	e7ad      	b.n	80124e4 <_printf_i+0xf4>
 8012588:	4826      	ldr	r0, [pc, #152]	@ (8012624 <_printf_i+0x234>)
 801258a:	e7e9      	b.n	8012560 <_printf_i+0x170>
 801258c:	6823      	ldr	r3, [r4, #0]
 801258e:	f023 0320 	bic.w	r3, r3, #32
 8012592:	6023      	str	r3, [r4, #0]
 8012594:	e7f6      	b.n	8012584 <_printf_i+0x194>
 8012596:	4616      	mov	r6, r2
 8012598:	e7bd      	b.n	8012516 <_printf_i+0x126>
 801259a:	6833      	ldr	r3, [r6, #0]
 801259c:	6825      	ldr	r5, [r4, #0]
 801259e:	6961      	ldr	r1, [r4, #20]
 80125a0:	1d18      	adds	r0, r3, #4
 80125a2:	6030      	str	r0, [r6, #0]
 80125a4:	062e      	lsls	r6, r5, #24
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	d501      	bpl.n	80125ae <_printf_i+0x1be>
 80125aa:	6019      	str	r1, [r3, #0]
 80125ac:	e002      	b.n	80125b4 <_printf_i+0x1c4>
 80125ae:	0668      	lsls	r0, r5, #25
 80125b0:	d5fb      	bpl.n	80125aa <_printf_i+0x1ba>
 80125b2:	8019      	strh	r1, [r3, #0]
 80125b4:	2300      	movs	r3, #0
 80125b6:	6123      	str	r3, [r4, #16]
 80125b8:	4616      	mov	r6, r2
 80125ba:	e7bc      	b.n	8012536 <_printf_i+0x146>
 80125bc:	6833      	ldr	r3, [r6, #0]
 80125be:	1d1a      	adds	r2, r3, #4
 80125c0:	6032      	str	r2, [r6, #0]
 80125c2:	681e      	ldr	r6, [r3, #0]
 80125c4:	6862      	ldr	r2, [r4, #4]
 80125c6:	2100      	movs	r1, #0
 80125c8:	4630      	mov	r0, r6
 80125ca:	f7ed fde1 	bl	8000190 <memchr>
 80125ce:	b108      	cbz	r0, 80125d4 <_printf_i+0x1e4>
 80125d0:	1b80      	subs	r0, r0, r6
 80125d2:	6060      	str	r0, [r4, #4]
 80125d4:	6863      	ldr	r3, [r4, #4]
 80125d6:	6123      	str	r3, [r4, #16]
 80125d8:	2300      	movs	r3, #0
 80125da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80125de:	e7aa      	b.n	8012536 <_printf_i+0x146>
 80125e0:	6923      	ldr	r3, [r4, #16]
 80125e2:	4632      	mov	r2, r6
 80125e4:	4649      	mov	r1, r9
 80125e6:	4640      	mov	r0, r8
 80125e8:	47d0      	blx	sl
 80125ea:	3001      	adds	r0, #1
 80125ec:	d0ad      	beq.n	801254a <_printf_i+0x15a>
 80125ee:	6823      	ldr	r3, [r4, #0]
 80125f0:	079b      	lsls	r3, r3, #30
 80125f2:	d413      	bmi.n	801261c <_printf_i+0x22c>
 80125f4:	68e0      	ldr	r0, [r4, #12]
 80125f6:	9b03      	ldr	r3, [sp, #12]
 80125f8:	4298      	cmp	r0, r3
 80125fa:	bfb8      	it	lt
 80125fc:	4618      	movlt	r0, r3
 80125fe:	e7a6      	b.n	801254e <_printf_i+0x15e>
 8012600:	2301      	movs	r3, #1
 8012602:	4632      	mov	r2, r6
 8012604:	4649      	mov	r1, r9
 8012606:	4640      	mov	r0, r8
 8012608:	47d0      	blx	sl
 801260a:	3001      	adds	r0, #1
 801260c:	d09d      	beq.n	801254a <_printf_i+0x15a>
 801260e:	3501      	adds	r5, #1
 8012610:	68e3      	ldr	r3, [r4, #12]
 8012612:	9903      	ldr	r1, [sp, #12]
 8012614:	1a5b      	subs	r3, r3, r1
 8012616:	42ab      	cmp	r3, r5
 8012618:	dcf2      	bgt.n	8012600 <_printf_i+0x210>
 801261a:	e7eb      	b.n	80125f4 <_printf_i+0x204>
 801261c:	2500      	movs	r5, #0
 801261e:	f104 0619 	add.w	r6, r4, #25
 8012622:	e7f5      	b.n	8012610 <_printf_i+0x220>
 8012624:	080141e2 	.word	0x080141e2
 8012628:	080141f3 	.word	0x080141f3

0801262c <__sflush_r>:
 801262c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012634:	0716      	lsls	r6, r2, #28
 8012636:	4605      	mov	r5, r0
 8012638:	460c      	mov	r4, r1
 801263a:	d454      	bmi.n	80126e6 <__sflush_r+0xba>
 801263c:	684b      	ldr	r3, [r1, #4]
 801263e:	2b00      	cmp	r3, #0
 8012640:	dc02      	bgt.n	8012648 <__sflush_r+0x1c>
 8012642:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012644:	2b00      	cmp	r3, #0
 8012646:	dd48      	ble.n	80126da <__sflush_r+0xae>
 8012648:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801264a:	2e00      	cmp	r6, #0
 801264c:	d045      	beq.n	80126da <__sflush_r+0xae>
 801264e:	2300      	movs	r3, #0
 8012650:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012654:	682f      	ldr	r7, [r5, #0]
 8012656:	6a21      	ldr	r1, [r4, #32]
 8012658:	602b      	str	r3, [r5, #0]
 801265a:	d030      	beq.n	80126be <__sflush_r+0x92>
 801265c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801265e:	89a3      	ldrh	r3, [r4, #12]
 8012660:	0759      	lsls	r1, r3, #29
 8012662:	d505      	bpl.n	8012670 <__sflush_r+0x44>
 8012664:	6863      	ldr	r3, [r4, #4]
 8012666:	1ad2      	subs	r2, r2, r3
 8012668:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801266a:	b10b      	cbz	r3, 8012670 <__sflush_r+0x44>
 801266c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801266e:	1ad2      	subs	r2, r2, r3
 8012670:	2300      	movs	r3, #0
 8012672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012674:	6a21      	ldr	r1, [r4, #32]
 8012676:	4628      	mov	r0, r5
 8012678:	47b0      	blx	r6
 801267a:	1c43      	adds	r3, r0, #1
 801267c:	89a3      	ldrh	r3, [r4, #12]
 801267e:	d106      	bne.n	801268e <__sflush_r+0x62>
 8012680:	6829      	ldr	r1, [r5, #0]
 8012682:	291d      	cmp	r1, #29
 8012684:	d82b      	bhi.n	80126de <__sflush_r+0xb2>
 8012686:	4a2a      	ldr	r2, [pc, #168]	@ (8012730 <__sflush_r+0x104>)
 8012688:	40ca      	lsrs	r2, r1
 801268a:	07d6      	lsls	r6, r2, #31
 801268c:	d527      	bpl.n	80126de <__sflush_r+0xb2>
 801268e:	2200      	movs	r2, #0
 8012690:	6062      	str	r2, [r4, #4]
 8012692:	04d9      	lsls	r1, r3, #19
 8012694:	6922      	ldr	r2, [r4, #16]
 8012696:	6022      	str	r2, [r4, #0]
 8012698:	d504      	bpl.n	80126a4 <__sflush_r+0x78>
 801269a:	1c42      	adds	r2, r0, #1
 801269c:	d101      	bne.n	80126a2 <__sflush_r+0x76>
 801269e:	682b      	ldr	r3, [r5, #0]
 80126a0:	b903      	cbnz	r3, 80126a4 <__sflush_r+0x78>
 80126a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80126a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80126a6:	602f      	str	r7, [r5, #0]
 80126a8:	b1b9      	cbz	r1, 80126da <__sflush_r+0xae>
 80126aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80126ae:	4299      	cmp	r1, r3
 80126b0:	d002      	beq.n	80126b8 <__sflush_r+0x8c>
 80126b2:	4628      	mov	r0, r5
 80126b4:	f7ff fbf4 	bl	8011ea0 <_free_r>
 80126b8:	2300      	movs	r3, #0
 80126ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80126bc:	e00d      	b.n	80126da <__sflush_r+0xae>
 80126be:	2301      	movs	r3, #1
 80126c0:	4628      	mov	r0, r5
 80126c2:	47b0      	blx	r6
 80126c4:	4602      	mov	r2, r0
 80126c6:	1c50      	adds	r0, r2, #1
 80126c8:	d1c9      	bne.n	801265e <__sflush_r+0x32>
 80126ca:	682b      	ldr	r3, [r5, #0]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d0c6      	beq.n	801265e <__sflush_r+0x32>
 80126d0:	2b1d      	cmp	r3, #29
 80126d2:	d001      	beq.n	80126d8 <__sflush_r+0xac>
 80126d4:	2b16      	cmp	r3, #22
 80126d6:	d11e      	bne.n	8012716 <__sflush_r+0xea>
 80126d8:	602f      	str	r7, [r5, #0]
 80126da:	2000      	movs	r0, #0
 80126dc:	e022      	b.n	8012724 <__sflush_r+0xf8>
 80126de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80126e2:	b21b      	sxth	r3, r3
 80126e4:	e01b      	b.n	801271e <__sflush_r+0xf2>
 80126e6:	690f      	ldr	r7, [r1, #16]
 80126e8:	2f00      	cmp	r7, #0
 80126ea:	d0f6      	beq.n	80126da <__sflush_r+0xae>
 80126ec:	0793      	lsls	r3, r2, #30
 80126ee:	680e      	ldr	r6, [r1, #0]
 80126f0:	bf08      	it	eq
 80126f2:	694b      	ldreq	r3, [r1, #20]
 80126f4:	600f      	str	r7, [r1, #0]
 80126f6:	bf18      	it	ne
 80126f8:	2300      	movne	r3, #0
 80126fa:	eba6 0807 	sub.w	r8, r6, r7
 80126fe:	608b      	str	r3, [r1, #8]
 8012700:	f1b8 0f00 	cmp.w	r8, #0
 8012704:	dde9      	ble.n	80126da <__sflush_r+0xae>
 8012706:	6a21      	ldr	r1, [r4, #32]
 8012708:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801270a:	4643      	mov	r3, r8
 801270c:	463a      	mov	r2, r7
 801270e:	4628      	mov	r0, r5
 8012710:	47b0      	blx	r6
 8012712:	2800      	cmp	r0, #0
 8012714:	dc08      	bgt.n	8012728 <__sflush_r+0xfc>
 8012716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801271a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801271e:	81a3      	strh	r3, [r4, #12]
 8012720:	f04f 30ff 	mov.w	r0, #4294967295
 8012724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012728:	4407      	add	r7, r0
 801272a:	eba8 0800 	sub.w	r8, r8, r0
 801272e:	e7e7      	b.n	8012700 <__sflush_r+0xd4>
 8012730:	20400001 	.word	0x20400001

08012734 <_fflush_r>:
 8012734:	b538      	push	{r3, r4, r5, lr}
 8012736:	690b      	ldr	r3, [r1, #16]
 8012738:	4605      	mov	r5, r0
 801273a:	460c      	mov	r4, r1
 801273c:	b913      	cbnz	r3, 8012744 <_fflush_r+0x10>
 801273e:	2500      	movs	r5, #0
 8012740:	4628      	mov	r0, r5
 8012742:	bd38      	pop	{r3, r4, r5, pc}
 8012744:	b118      	cbz	r0, 801274e <_fflush_r+0x1a>
 8012746:	6a03      	ldr	r3, [r0, #32]
 8012748:	b90b      	cbnz	r3, 801274e <_fflush_r+0x1a>
 801274a:	f7ff f983 	bl	8011a54 <__sinit>
 801274e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d0f3      	beq.n	801273e <_fflush_r+0xa>
 8012756:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012758:	07d0      	lsls	r0, r2, #31
 801275a:	d404      	bmi.n	8012766 <_fflush_r+0x32>
 801275c:	0599      	lsls	r1, r3, #22
 801275e:	d402      	bmi.n	8012766 <_fflush_r+0x32>
 8012760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012762:	f7ff fb8c 	bl	8011e7e <__retarget_lock_acquire_recursive>
 8012766:	4628      	mov	r0, r5
 8012768:	4621      	mov	r1, r4
 801276a:	f7ff ff5f 	bl	801262c <__sflush_r>
 801276e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012770:	07da      	lsls	r2, r3, #31
 8012772:	4605      	mov	r5, r0
 8012774:	d4e4      	bmi.n	8012740 <_fflush_r+0xc>
 8012776:	89a3      	ldrh	r3, [r4, #12]
 8012778:	059b      	lsls	r3, r3, #22
 801277a:	d4e1      	bmi.n	8012740 <_fflush_r+0xc>
 801277c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801277e:	f7ff fb7f 	bl	8011e80 <__retarget_lock_release_recursive>
 8012782:	e7dd      	b.n	8012740 <_fflush_r+0xc>

08012784 <__swhatbuf_r>:
 8012784:	b570      	push	{r4, r5, r6, lr}
 8012786:	460c      	mov	r4, r1
 8012788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801278c:	2900      	cmp	r1, #0
 801278e:	b096      	sub	sp, #88	@ 0x58
 8012790:	4615      	mov	r5, r2
 8012792:	461e      	mov	r6, r3
 8012794:	da0d      	bge.n	80127b2 <__swhatbuf_r+0x2e>
 8012796:	89a3      	ldrh	r3, [r4, #12]
 8012798:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801279c:	f04f 0100 	mov.w	r1, #0
 80127a0:	bf14      	ite	ne
 80127a2:	2340      	movne	r3, #64	@ 0x40
 80127a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80127a8:	2000      	movs	r0, #0
 80127aa:	6031      	str	r1, [r6, #0]
 80127ac:	602b      	str	r3, [r5, #0]
 80127ae:	b016      	add	sp, #88	@ 0x58
 80127b0:	bd70      	pop	{r4, r5, r6, pc}
 80127b2:	466a      	mov	r2, sp
 80127b4:	f000 f88a 	bl	80128cc <_fstat_r>
 80127b8:	2800      	cmp	r0, #0
 80127ba:	dbec      	blt.n	8012796 <__swhatbuf_r+0x12>
 80127bc:	9901      	ldr	r1, [sp, #4]
 80127be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80127c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80127c6:	4259      	negs	r1, r3
 80127c8:	4159      	adcs	r1, r3
 80127ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80127ce:	e7eb      	b.n	80127a8 <__swhatbuf_r+0x24>

080127d0 <__smakebuf_r>:
 80127d0:	898b      	ldrh	r3, [r1, #12]
 80127d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127d4:	079d      	lsls	r5, r3, #30
 80127d6:	4606      	mov	r6, r0
 80127d8:	460c      	mov	r4, r1
 80127da:	d507      	bpl.n	80127ec <__smakebuf_r+0x1c>
 80127dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80127e0:	6023      	str	r3, [r4, #0]
 80127e2:	6123      	str	r3, [r4, #16]
 80127e4:	2301      	movs	r3, #1
 80127e6:	6163      	str	r3, [r4, #20]
 80127e8:	b003      	add	sp, #12
 80127ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127ec:	ab01      	add	r3, sp, #4
 80127ee:	466a      	mov	r2, sp
 80127f0:	f7ff ffc8 	bl	8012784 <__swhatbuf_r>
 80127f4:	9f00      	ldr	r7, [sp, #0]
 80127f6:	4605      	mov	r5, r0
 80127f8:	4639      	mov	r1, r7
 80127fa:	4630      	mov	r0, r6
 80127fc:	f7ff fbbc 	bl	8011f78 <_malloc_r>
 8012800:	b948      	cbnz	r0, 8012816 <__smakebuf_r+0x46>
 8012802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012806:	059a      	lsls	r2, r3, #22
 8012808:	d4ee      	bmi.n	80127e8 <__smakebuf_r+0x18>
 801280a:	f023 0303 	bic.w	r3, r3, #3
 801280e:	f043 0302 	orr.w	r3, r3, #2
 8012812:	81a3      	strh	r3, [r4, #12]
 8012814:	e7e2      	b.n	80127dc <__smakebuf_r+0xc>
 8012816:	89a3      	ldrh	r3, [r4, #12]
 8012818:	6020      	str	r0, [r4, #0]
 801281a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801281e:	81a3      	strh	r3, [r4, #12]
 8012820:	9b01      	ldr	r3, [sp, #4]
 8012822:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012826:	b15b      	cbz	r3, 8012840 <__smakebuf_r+0x70>
 8012828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801282c:	4630      	mov	r0, r6
 801282e:	f000 f85f 	bl	80128f0 <_isatty_r>
 8012832:	b128      	cbz	r0, 8012840 <__smakebuf_r+0x70>
 8012834:	89a3      	ldrh	r3, [r4, #12]
 8012836:	f023 0303 	bic.w	r3, r3, #3
 801283a:	f043 0301 	orr.w	r3, r3, #1
 801283e:	81a3      	strh	r3, [r4, #12]
 8012840:	89a3      	ldrh	r3, [r4, #12]
 8012842:	431d      	orrs	r5, r3
 8012844:	81a5      	strh	r5, [r4, #12]
 8012846:	e7cf      	b.n	80127e8 <__smakebuf_r+0x18>

08012848 <_putc_r>:
 8012848:	b570      	push	{r4, r5, r6, lr}
 801284a:	460d      	mov	r5, r1
 801284c:	4614      	mov	r4, r2
 801284e:	4606      	mov	r6, r0
 8012850:	b118      	cbz	r0, 801285a <_putc_r+0x12>
 8012852:	6a03      	ldr	r3, [r0, #32]
 8012854:	b90b      	cbnz	r3, 801285a <_putc_r+0x12>
 8012856:	f7ff f8fd 	bl	8011a54 <__sinit>
 801285a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801285c:	07d8      	lsls	r0, r3, #31
 801285e:	d405      	bmi.n	801286c <_putc_r+0x24>
 8012860:	89a3      	ldrh	r3, [r4, #12]
 8012862:	0599      	lsls	r1, r3, #22
 8012864:	d402      	bmi.n	801286c <_putc_r+0x24>
 8012866:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012868:	f7ff fb09 	bl	8011e7e <__retarget_lock_acquire_recursive>
 801286c:	68a3      	ldr	r3, [r4, #8]
 801286e:	3b01      	subs	r3, #1
 8012870:	2b00      	cmp	r3, #0
 8012872:	60a3      	str	r3, [r4, #8]
 8012874:	da05      	bge.n	8012882 <_putc_r+0x3a>
 8012876:	69a2      	ldr	r2, [r4, #24]
 8012878:	4293      	cmp	r3, r2
 801287a:	db12      	blt.n	80128a2 <_putc_r+0x5a>
 801287c:	b2eb      	uxtb	r3, r5
 801287e:	2b0a      	cmp	r3, #10
 8012880:	d00f      	beq.n	80128a2 <_putc_r+0x5a>
 8012882:	6823      	ldr	r3, [r4, #0]
 8012884:	1c5a      	adds	r2, r3, #1
 8012886:	6022      	str	r2, [r4, #0]
 8012888:	701d      	strb	r5, [r3, #0]
 801288a:	b2ed      	uxtb	r5, r5
 801288c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801288e:	07da      	lsls	r2, r3, #31
 8012890:	d405      	bmi.n	801289e <_putc_r+0x56>
 8012892:	89a3      	ldrh	r3, [r4, #12]
 8012894:	059b      	lsls	r3, r3, #22
 8012896:	d402      	bmi.n	801289e <_putc_r+0x56>
 8012898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801289a:	f7ff faf1 	bl	8011e80 <__retarget_lock_release_recursive>
 801289e:	4628      	mov	r0, r5
 80128a0:	bd70      	pop	{r4, r5, r6, pc}
 80128a2:	4629      	mov	r1, r5
 80128a4:	4622      	mov	r2, r4
 80128a6:	4630      	mov	r0, r6
 80128a8:	f7ff f9c5 	bl	8011c36 <__swbuf_r>
 80128ac:	4605      	mov	r5, r0
 80128ae:	e7ed      	b.n	801288c <_putc_r+0x44>

080128b0 <strchr>:
 80128b0:	b2c9      	uxtb	r1, r1
 80128b2:	4603      	mov	r3, r0
 80128b4:	4618      	mov	r0, r3
 80128b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80128ba:	b112      	cbz	r2, 80128c2 <strchr+0x12>
 80128bc:	428a      	cmp	r2, r1
 80128be:	d1f9      	bne.n	80128b4 <strchr+0x4>
 80128c0:	4770      	bx	lr
 80128c2:	2900      	cmp	r1, #0
 80128c4:	bf18      	it	ne
 80128c6:	2000      	movne	r0, #0
 80128c8:	4770      	bx	lr
	...

080128cc <_fstat_r>:
 80128cc:	b538      	push	{r3, r4, r5, lr}
 80128ce:	4d07      	ldr	r5, [pc, #28]	@ (80128ec <_fstat_r+0x20>)
 80128d0:	2300      	movs	r3, #0
 80128d2:	4604      	mov	r4, r0
 80128d4:	4608      	mov	r0, r1
 80128d6:	4611      	mov	r1, r2
 80128d8:	602b      	str	r3, [r5, #0]
 80128da:	f7f0 fa20 	bl	8002d1e <_fstat>
 80128de:	1c43      	adds	r3, r0, #1
 80128e0:	d102      	bne.n	80128e8 <_fstat_r+0x1c>
 80128e2:	682b      	ldr	r3, [r5, #0]
 80128e4:	b103      	cbz	r3, 80128e8 <_fstat_r+0x1c>
 80128e6:	6023      	str	r3, [r4, #0]
 80128e8:	bd38      	pop	{r3, r4, r5, pc}
 80128ea:	bf00      	nop
 80128ec:	200021c4 	.word	0x200021c4

080128f0 <_isatty_r>:
 80128f0:	b538      	push	{r3, r4, r5, lr}
 80128f2:	4d06      	ldr	r5, [pc, #24]	@ (801290c <_isatty_r+0x1c>)
 80128f4:	2300      	movs	r3, #0
 80128f6:	4604      	mov	r4, r0
 80128f8:	4608      	mov	r0, r1
 80128fa:	602b      	str	r3, [r5, #0]
 80128fc:	f7f0 fa1f 	bl	8002d3e <_isatty>
 8012900:	1c43      	adds	r3, r0, #1
 8012902:	d102      	bne.n	801290a <_isatty_r+0x1a>
 8012904:	682b      	ldr	r3, [r5, #0]
 8012906:	b103      	cbz	r3, 801290a <_isatty_r+0x1a>
 8012908:	6023      	str	r3, [r4, #0]
 801290a:	bd38      	pop	{r3, r4, r5, pc}
 801290c:	200021c4 	.word	0x200021c4

08012910 <_sbrk_r>:
 8012910:	b538      	push	{r3, r4, r5, lr}
 8012912:	4d06      	ldr	r5, [pc, #24]	@ (801292c <_sbrk_r+0x1c>)
 8012914:	2300      	movs	r3, #0
 8012916:	4604      	mov	r4, r0
 8012918:	4608      	mov	r0, r1
 801291a:	602b      	str	r3, [r5, #0]
 801291c:	f7f0 fa28 	bl	8002d70 <_sbrk>
 8012920:	1c43      	adds	r3, r0, #1
 8012922:	d102      	bne.n	801292a <_sbrk_r+0x1a>
 8012924:	682b      	ldr	r3, [r5, #0]
 8012926:	b103      	cbz	r3, 801292a <_sbrk_r+0x1a>
 8012928:	6023      	str	r3, [r4, #0]
 801292a:	bd38      	pop	{r3, r4, r5, pc}
 801292c:	200021c4 	.word	0x200021c4

08012930 <_init>:
 8012930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012932:	bf00      	nop
 8012934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012936:	bc08      	pop	{r3}
 8012938:	469e      	mov	lr, r3
 801293a:	4770      	bx	lr

0801293c <_fini>:
 801293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801293e:	bf00      	nop
 8012940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012942:	bc08      	pop	{r3}
 8012944:	469e      	mov	lr, r3
 8012946:	4770      	bx	lr
