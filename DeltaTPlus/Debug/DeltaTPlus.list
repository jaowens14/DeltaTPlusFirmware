
DeltaTPlus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132ec  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018e0  0801342c  0801342c  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014d0c  08014d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014d14  08014d14  00015d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014d18  08014d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000017c  20000008  08014d1c  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000184  08014e98  00016184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001bc  08014ecd  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002004  200001d0  08014ede  000161d0  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200021d4  08014ede  000161d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00017000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00017000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08014ede  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   000430f5  00000000  00000000  00016a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000097e4  00000000  00000000  00059b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003590  00000000  00000000  00063370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000028d0  00000000  00000000  00066900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00037835  00000000  00000000  000691d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00047a43  00000000  00000000  000a0a05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001075bd  00000000  00000000  000e8448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001efa05  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e878  00000000  00000000  001efa48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006e  00000000  00000000  001fe2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d0 	.word	0x200001d0
 800015c:	00000000 	.word	0x00000000
 8000160:	08013414 	.word	0x08013414

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d4 	.word	0x200001d4
 800017c:	08013414 	.word	0x08013414

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <_ZN14STM32_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
    @param  spi_mosi Bitbang SPI MOSI
    @param  spi_miso Bitbang SPI MISO
    @param  spi_clk Bitbang SPI Clock
*/
/**************************************************************************/
STM32_MAX31856::STM32_MAX31856(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin){
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	807b      	strh	r3, [r7, #2]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2200      	movs	r2, #0
 80009de:	729a      	strb	r2, [r3, #10]
	_hspi = hspi;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	601a      	str	r2, [r3, #0]
	_cs_port = cs_port;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	605a      	str	r2, [r3, #4]
	_cs_pin = cs_pin;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	887a      	ldrh	r2, [r7, #2]
 80009f0:	811a      	strh	r2, [r3, #8]
}
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	4618      	mov	r0, r3
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <_ZN14STM32_MAX318568csSelectEv>:

void STM32_MAX31856::csSelect(){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_RESET);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6858      	ldr	r0, [r3, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	891b      	ldrh	r3, [r3, #8]
 8000a10:	2200      	movs	r2, #0
 8000a12:	4619      	mov	r1, r3
 8000a14:	f003 f940 	bl	8003c98 <HAL_GPIO_WritePin>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_ZN14STM32_MAX3185610csDeselectEv>:
void STM32_MAX31856::csDeselect(){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_SET);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6858      	ldr	r0, [r3, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	891b      	ldrh	r3, [r3, #8]
 8000a30:	2201      	movs	r2, #1
 8000a32:	4619      	mov	r1, r3
 8000a34:	f003 f930 	bl	8003c98 <HAL_GPIO_WritePin>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <_ZN14STM32_MAX318565beginEv>:
   thermocouple
    @returns Always returns true at this time (no known way of detecting chip
   ID)
*/
/**************************************************************************/
bool STM32_MAX31856::begin(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  //initialized = spi_dev.begin();
	initialized = true;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	729a      	strb	r2, [r3, #10]
  if (!initialized)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	7a9b      	ldrb	r3, [r3, #10]
 8000a52:	f083 0301 	eor.w	r3, r3, #1
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <_ZN14STM32_MAX318565beginEv+0x20>
    return false;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e017      	b.n	8000a90 <_ZN14STM32_MAX318565beginEv+0x50>

  // assert on any fault
  writeRegister8(MAX31856_MASK_REG, 0x0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2102      	movs	r1, #2
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 f9db 	bl	8000e20 <_ZN14STM32_MAX3185614writeRegister8Ehh>

  // enable open circuit fault detection
  writeRegister8(MAX31856_CR0_REG, MAX31856_CR0_OCFAULT0);
 8000a6a:	2210      	movs	r2, #16
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f000 f9d6 	bl	8000e20 <_ZN14STM32_MAX3185614writeRegister8Ehh>

  // set cold junction temperature offset to zero
  writeRegister8(MAX31856_CJTO_REG, 0x0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2109      	movs	r1, #9
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 f9d1 	bl	8000e20 <_ZN14STM32_MAX3185614writeRegister8Ehh>

  // set Type K by default
  setThermocoupleType(MAX31856_TCTYPE_K);
 8000a7e:	2103      	movs	r1, #3
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 f837 	bl	8000af4 <_ZN14STM32_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>

  // set One-Shot conversion mode
  setConversionMode(MAX31856_ONESHOT);
 8000a86:	2100      	movs	r1, #0
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f805 	bl	8000a98 <_ZN14STM32_MAX3185617setConversionModeE26max31856_conversion_mode_t>

  return true;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_ZN14STM32_MAX3185617setConversionModeE26max31856_conversion_mode_t>:
/*!
    @brief  Set temperature conversion mode
    @param mode The conversion mode
*/
/**************************************************************************/
void STM32_MAX31856::setConversionMode(max31856_conversion_mode_t mode) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	70fb      	strb	r3, [r7, #3]
  conversionMode = mode;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	78fa      	ldrb	r2, [r7, #3]
 8000aa8:	72da      	strb	r2, [r3, #11]
  uint8_t t = readRegister8(MAX31856_CR0_REG); // get current register value
 8000aaa:	2100      	movs	r1, #0
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 f8d0 	bl	8000c52 <_ZN14STM32_MAX3185613readRegister8Eh>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	73fb      	strb	r3, [r7, #15]
  if (conversionMode == MAX31856_CONTINUOUS) {
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	7adb      	ldrb	r3, [r3, #11]
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d108      	bne.n	8000ad0 <_ZN14STM32_MAX3185617setConversionModeE26max31856_conversion_mode_t+0x38>
    t |= MAX31856_CR0_AUTOCONVERT; // turn on automatic
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ac4:	73fb      	strb	r3, [r7, #15]
    t &= ~MAX31856_CR0_1SHOT;      // turn off one-shot
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000acc:	73fb      	strb	r3, [r7, #15]
 8000ace:	e007      	b.n	8000ae0 <_ZN14STM32_MAX3185617setConversionModeE26max31856_conversion_mode_t+0x48>
  } else {
    t &= ~MAX31856_CR0_AUTOCONVERT; // turn off automatic
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ad6:	73fb      	strb	r3, [r7, #15]
    t |= MAX31856_CR0_1SHOT;        // turn on one-shot
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ade:	73fb      	strb	r3, [r7, #15]
  }
  writeRegister8(MAX31856_CR0_REG, t); // write value back to register
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 f99a 	bl	8000e20 <_ZN14STM32_MAX3185614writeRegister8Ehh>
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_ZN14STM32_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>:
/*!
    @brief  Set which kind of Thermocouple (K, J, T, etc) to detect & decode
    @param type The enumeration type of the thermocouple
*/
/**************************************************************************/
void STM32_MAX31856::setThermocoupleType(max31856_thermocoupletype_t type) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	70fb      	strb	r3, [r7, #3]
  uint8_t t = readRegister8(MAX31856_CR1_REG);
 8000b00:	2101      	movs	r1, #1
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f000 f8a5 	bl	8000c52 <_ZN14STM32_MAX3185613readRegister8Eh>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	73fb      	strb	r3, [r7, #15]
  t &= 0xF0; // mask off bottom 4 bits
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	f023 030f 	bic.w	r3, r3, #15
 8000b12:	73fb      	strb	r3, [r7, #15]
  t |= (uint8_t)type & 0x0F;
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	73fb      	strb	r3, [r7, #15]
  writeRegister8(MAX31856_CR1_REG, t);
 8000b22:	7bfb      	ldrb	r3, [r7, #15]
 8000b24:	461a      	mov	r2, r3
 8000b26:	2101      	movs	r1, #1
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f000 f979 	bl	8000e20 <_ZN14STM32_MAX3185614writeRegister8Ehh>
}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_ZN14STM32_MAX3185619getThermocoupleTypeEv>:
/*!
    @brief  Get which kind of Thermocouple (K, J, T, etc) we are using
    @returns The enumeration type of the thermocouple
*/
/**************************************************************************/
max31856_thermocoupletype_t STM32_MAX31856::getThermocoupleType(void) {
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  uint8_t t = readRegister8(MAX31856_CR1_REG);
 8000b3e:	2101      	movs	r1, #1
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f000 f886 	bl	8000c52 <_ZN14STM32_MAX3185613readRegister8Eh>
 8000b46:	4603      	mov	r3, r0
 8000b48:	73fb      	strb	r3, [r7, #15]
  t &= 0x0F;
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	73fb      	strb	r3, [r7, #15]

  return (max31856_thermocoupletype_t)(t);
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <_ZN14STM32_MAX3185614triggerOneShotEv>:
/*!
    @brief  Begin a one-shot (read temperature only upon request) measurement.
    Value must be read later, not returned here!
*/
/**************************************************************************/
void STM32_MAX31856::triggerOneShot(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

  if (conversionMode == MAX31856_CONTINUOUS)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	7adb      	ldrb	r3, [r3, #11]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d014      	beq.n	8000b96 <_ZN14STM32_MAX3185614triggerOneShotEv+0x3a>
    return;

  uint8_t t = readRegister8(MAX31856_CR0_REG); // get current register value
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f000 f86f 	bl	8000c52 <_ZN14STM32_MAX3185613readRegister8Eh>
 8000b74:	4603      	mov	r3, r0
 8000b76:	73fb      	strb	r3, [r7, #15]
  t &= ~MAX31856_CR0_AUTOCONVERT;              // turn off autoconvert
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b7e:	73fb      	strb	r3, [r7, #15]
  t |= MAX31856_CR0_1SHOT;                     // turn on one-shot
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b86:	73fb      	strb	r3, [r7, #15]
  writeRegister8(MAX31856_CR0_REG, t);         // write value back to register
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 f946 	bl	8000e20 <_ZN14STM32_MAX3185614writeRegister8Ehh>
 8000b94:	e000      	b.n	8000b98 <_ZN14STM32_MAX3185614triggerOneShotEv+0x3c>
    return;
 8000b96:	bf00      	nop
                                       // conversion starts when CS goes high
}
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_ZN14STM32_MAX3185618conversionCompleteEv>:
/*!
    @brief  Return status of temperature conversion.
    @returns true if conversion complete, otherwise false
*/
/**************************************************************************/
bool STM32_MAX31856::conversionComplete(void) {
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]

  if (conversionMode == MAX31856_CONTINUOUS)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	7adb      	ldrb	r3, [r3, #11]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d101      	bne.n	8000bb2 <_ZN14STM32_MAX3185618conversionCompleteEv+0x14>
    return true;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00b      	b.n	8000bca <_ZN14STM32_MAX3185618conversionCompleteEv+0x2c>
  return !(readRegister8(MAX31856_CR0_REG) & MAX31856_CR0_1SHOT);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 f84c 	bl	8000c52 <_ZN14STM32_MAX3185613readRegister8Eh>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	bf0c      	ite	eq
 8000bc4:	2301      	moveq	r3, #1
 8000bc6:	2300      	movne	r3, #0
 8000bc8:	b2db      	uxtb	r3, r3
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_ZN14STM32_MAX3185627readThermocoupleTemperatureEv>:
/*!
    @brief  Return hot-junction (thermocouple) temperature
    @returns Floating point temperature in Celsius
*/
/**************************************************************************/
int32_t STM32_MAX31856::readThermocoupleTemperature(void) {
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b084      	sub	sp, #16
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]

  // for one-shot, make it happen
  if (conversionMode == MAX31856_ONESHOT) {
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	7adb      	ldrb	r3, [r3, #11]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d120      	bne.n	8000c24 <_ZN14STM32_MAX3185627readThermocoupleTemperatureEv+0x52>
    triggerOneShot();
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffba 	bl	8000b5c <_ZN14STM32_MAX3185614triggerOneShotEv>
    uint32_t start = HAL_GetTick();
 8000be8:	f002 fb02 	bl	80031f0 <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
    while (!conversionComplete()) {
 8000bee:	e010      	b.n	8000c12 <_ZN14STM32_MAX3185627readThermocoupleTemperatureEv+0x40>
      if (HAL_GetTick() - start > 250)
 8000bf0:	f002 fafe 	bl	80031f0 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	2bfa      	cmp	r3, #250	@ 0xfa
 8000bfc:	bf8c      	ite	hi
 8000bfe:	2301      	movhi	r3, #1
 8000c00:	2300      	movls	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <_ZN14STM32_MAX3185627readThermocoupleTemperatureEv+0x3a>
        return 0.0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e01e      	b.n	8000c4a <_ZN14STM32_MAX3185627readThermocoupleTemperatureEv+0x78>
      //delay(10);
      HAL_Delay(10);
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f000 fda3 	bl	8001758 <HAL_Delay>
    while (!conversionComplete()) {
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff ffc3 	bl	8000b9e <_ZN14STM32_MAX3185618conversionCompleteEv>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	f083 0301 	eor.w	r3, r3, #1
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1e5      	bne.n	8000bf0 <_ZN14STM32_MAX3185627readThermocoupleTemperatureEv+0x1e>
    }
  }

  // read the thermocouple temperature registers (3 bytes)
  int32_t temp24 = readRegister24(MAX31856_LTCBH_REG);
 8000c24:	210c      	movs	r1, #12
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 f827 	bl	8000c7a <_ZN14STM32_MAX3185614readRegister24Eh>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60fb      	str	r3, [r7, #12]
  // and compute temperature
  if (temp24 & 0x800000) {
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <_ZN14STM32_MAX3185627readThermocoupleTemperatureEv+0x70>
    temp24 |= 0xFF000000; // fix sign
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  temp24 >>= 5; // bottom 5 bits are unused
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	115b      	asrs	r3, r3, #5
 8000c46:	60fb      	str	r3, [r7, #12]

  //return temp24 * 0.0078125;
  return temp24;
 8000c48:	68fb      	ldr	r3, [r7, #12]

}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_ZN14STM32_MAX3185613readRegister8Eh>:

/**********************************************/

uint8_t STM32_MAX31856::readRegister8(uint8_t addr) {
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b084      	sub	sp, #16
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
  readRegisterN(addr, &ret, 1);
 8000c62:	f107 020f 	add.w	r2, r7, #15
 8000c66:	78f9      	ldrb	r1, [r7, #3]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 f830 	bl	8000cd0 <_ZN14STM32_MAX3185613readRegisterNEhPhh>

  return ret;
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_ZN14STM32_MAX3185614readRegister24Eh>:
  ret |= buffer[1];

  return ret;
}

uint32_t STM32_MAX31856::readRegister24(uint8_t addr) {
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	460b      	mov	r3, r1
 8000c84:	70fb      	strb	r3, [r7, #3]
  uint8_t buffer[3] = {0, 0, 0};
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	801a      	strh	r2, [r3, #0]
 8000c90:	460a      	mov	r2, r1
 8000c92:	709a      	strb	r2, [r3, #2]
  readRegisterN(addr, buffer, 3);
 8000c94:	f107 0208 	add.w	r2, r7, #8
 8000c98:	78f9      	ldrb	r1, [r7, #3]
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f000 f817 	bl	8000cd0 <_ZN14STM32_MAX3185613readRegisterNEhPhh>

  uint32_t ret = buffer[0];
 8000ca2:	7a3b      	ldrb	r3, [r7, #8]
 8000ca4:	60fb      	str	r3, [r7, #12]
  ret <<= 8;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	60fb      	str	r3, [r7, #12]
  ret |= buffer[1];
 8000cac:	7a7b      	ldrb	r3, [r7, #9]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
  ret <<= 8;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	60fb      	str	r3, [r7, #12]
  ret |= buffer[2];
 8000cbc:	7abb      	ldrb	r3, [r7, #10]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]

  return ret;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_ZN14STM32_MAX3185613readRegisterNEhPhh>:

void STM32_MAX31856::readRegisterN(uint8_t addr, uint8_t buffer[], uint8_t n) {
 8000cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd4:	b08f      	sub	sp, #60	@ 0x3c
 8000cd6:	af02      	add	r7, sp, #8
 8000cd8:	6178      	str	r0, [r7, #20]
 8000cda:	60fa      	str	r2, [r7, #12]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	460b      	mov	r3, r1
 8000ce0:	74fb      	strb	r3, [r7, #19]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	74bb      	strb	r3, [r7, #18]
    // The first byte in rx is garbage (received while sending the address)
    // The next n bytes are the actual data
    for (uint8_t i = 0; i < n; i++) {
        buffer[i] = rx[i + 1];
    }
}
 8000ce6:	466b      	mov	r3, sp
 8000ce8:	461e      	mov	r6, r3
    addr &= 0x7F; // MSB=0 for read
 8000cea:	7cfb      	ldrb	r3, [r7, #19]
 8000cec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000cf0:	74fb      	strb	r3, [r7, #19]
    uint8_t tx[1 + n];
 8000cf2:	7cbb      	ldrb	r3, [r7, #18]
 8000cf4:	1c59      	adds	r1, r3, #1
 8000cf6:	1e4b      	subs	r3, r1, #1
 8000cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cfa:	460a      	mov	r2, r1
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	603a      	str	r2, [r7, #0]
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	f04f 0200 	mov.w	r2, #0
 8000d06:	f04f 0300 	mov.w	r3, #0
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	00c3      	lsls	r3, r0, #3
 8000d0e:	6838      	ldr	r0, [r7, #0]
 8000d10:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d14:	6838      	ldr	r0, [r7, #0]
 8000d16:	00c2      	lsls	r2, r0, #3
 8000d18:	460a      	mov	r2, r1
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	4692      	mov	sl, r2
 8000d1e:	469b      	mov	fp, r3
 8000d20:	f04f 0200 	mov.w	r2, #0
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000d2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000d34:	460b      	mov	r3, r1
 8000d36:	3307      	adds	r3, #7
 8000d38:	08db      	lsrs	r3, r3, #3
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	ebad 0d03 	sub.w	sp, sp, r3
 8000d40:	ab02      	add	r3, sp, #8
 8000d42:	3300      	adds	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx[1 + n];
 8000d46:	7cbb      	ldrb	r3, [r7, #18]
 8000d48:	1c59      	adds	r1, r3, #1
 8000d4a:	1e4b      	subs	r3, r1, #1
 8000d4c:	623b      	str	r3, [r7, #32]
 8000d4e:	460a      	mov	r2, r1
 8000d50:	2300      	movs	r3, #0
 8000d52:	4690      	mov	r8, r2
 8000d54:	4699      	mov	r9, r3
 8000d56:	f04f 0200 	mov.w	r2, #0
 8000d5a:	f04f 0300 	mov.w	r3, #0
 8000d5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d6a:	460a      	mov	r2, r1
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4614      	mov	r4, r2
 8000d70:	461d      	mov	r5, r3
 8000d72:	f04f 0200 	mov.w	r2, #0
 8000d76:	f04f 0300 	mov.w	r3, #0
 8000d7a:	00eb      	lsls	r3, r5, #3
 8000d7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d80:	00e2      	lsls	r2, r4, #3
 8000d82:	460b      	mov	r3, r1
 8000d84:	3307      	adds	r3, #7
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	ebad 0d03 	sub.w	sp, sp, r3
 8000d8e:	ab02      	add	r3, sp, #8
 8000d90:	3300      	adds	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
    tx[0] = addr;
 8000d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d96:	7cfa      	ldrb	r2, [r7, #19]
 8000d98:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 1; i < 1 + n; i++) {
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000da0:	e009      	b.n	8000db6 <_ZN14STM32_MAX3185613readRegisterNEhPhh+0xe6>
        tx[i] = 0x00; // Dummy bytes
 8000da2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000da8:	2100      	movs	r1, #0
 8000daa:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i < 1 + n; i++) {
 8000dac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000db0:	3301      	adds	r3, #1
 8000db2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000db6:	7cba      	ldrb	r2, [r7, #18]
 8000db8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d2f0      	bcs.n	8000da2 <_ZN14STM32_MAX3185613readRegisterNEhPhh+0xd2>
    csSelect();
 8000dc0:	6978      	ldr	r0, [r7, #20]
 8000dc2:	f7ff fe1d 	bl	8000a00 <_ZN14STM32_MAX318568csSelectEv>
    HAL_SPI_TransmitReceive(_hspi, tx, rx, 1 + n, 100);
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	6818      	ldr	r0, [r3, #0]
 8000dca:	7cbb      	ldrb	r3, [r7, #18]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	2264      	movs	r2, #100	@ 0x64
 8000dd4:	9200      	str	r2, [sp, #0]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000dda:	f006 fff4 	bl	8007dc6 <HAL_SPI_TransmitReceive>
    csDeselect();
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff fe1e 	bl	8000a20 <_ZN14STM32_MAX3185610csDeselectEv>
    for (uint8_t i = 0; i < n; i++) {
 8000de4:	2300      	movs	r3, #0
 8000de6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000dea:	e00e      	b.n	8000e0a <_ZN14STM32_MAX3185613readRegisterNEhPhh+0x13a>
        buffer[i] = rx[i + 1];
 8000dec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000df6:	68f9      	ldr	r1, [r7, #12]
 8000df8:	440b      	add	r3, r1
 8000dfa:	69f9      	ldr	r1, [r7, #28]
 8000dfc:	5c8a      	ldrb	r2, [r1, r2]
 8000dfe:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < n; i++) {
 8000e00:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000e04:	3301      	adds	r3, #1
 8000e06:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000e0a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000e0e:	7cbb      	ldrb	r3, [r7, #18]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d3eb      	bcc.n	8000dec <_ZN14STM32_MAX3185613readRegisterNEhPhh+0x11c>
 8000e14:	46b5      	mov	sp, r6
}
 8000e16:	bf00      	nop
 8000e18:	3734      	adds	r7, #52	@ 0x34
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e20 <_ZN14STM32_MAX3185614writeRegister8Ehh>:


void STM32_MAX31856::writeRegister8(uint8_t addr, uint8_t data) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	70bb      	strb	r3, [r7, #2]

  addr |= 0x80; // MSB=1 for write, make sure top bit is set
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e36:	70fb      	strb	r3, [r7, #3]

  uint8_t buffer[2] = {addr, data};
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	733b      	strb	r3, [r7, #12]
 8000e3c:	78bb      	ldrb	r3, [r7, #2]
 8000e3e:	737b      	strb	r3, [r7, #13]

  csSelect();
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff fddd 	bl	8000a00 <_ZN14STM32_MAX318568csSelectEv>
  HAL_SPI_Transmit(_hspi, buffer, 2, 100);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6818      	ldr	r0, [r3, #0]
 8000e4a:	f107 010c 	add.w	r1, r7, #12
 8000e4e:	2364      	movs	r3, #100	@ 0x64
 8000e50:	2202      	movs	r2, #2
 8000e52:	f006 fe42 	bl	8007ada <HAL_SPI_Transmit>
  csDeselect();
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff fde2 	bl	8000a20 <_ZN14STM32_MAX3185610csDeselectEv>

  //spi_dev.write(buffer, 2);
}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000e64:	b5b0      	push	{r4, r5, r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <APPD_EnableCPU2+0x34>)
 8000e6c:	1d3c      	adds	r4, r7, #4
 8000e6e:	461d      	mov	r5, r3
 8000e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e78:	c403      	stmia	r4!, {r0, r1}
 8000e7a:	8022      	strh	r2, [r4, #0]
 8000e7c:	3402      	adds	r4, #2
 8000e7e:	0c13      	lsrs	r3, r2, #16
 8000e80:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000e82:	f00d fe6b 	bl	800eb5c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f00d f8fc 	bl	800e086 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000e8e:	bf00      	nop
}
 8000e90:	3720      	adds	r7, #32
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bdb0      	pop	{r4, r5, r7, pc}
 8000e96:	bf00      	nop
 8000e98:	0801342c 	.word	0x0801342c

08000e9c <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000eaa:	897a      	ldrh	r2, [r7, #10]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	68f9      	ldr	r1, [r7, #12]
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f001 fb39 	bl	8002528 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000eb6:	bf00      	nop
}
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000ec8:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <LL_C2_PWR_SetPowerMode+0x28>)
 8000eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ece:	f023 0207 	bic.w	r2, r3, #7
 8000ed2:	4905      	ldr	r1, [pc, #20]	@ (8000ee8 <LL_C2_PWR_SetPowerMode+0x28>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	58000400 	.word	0x58000400

08000eec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <LL_EXTI_EnableIT_32_63+0x24>)
 8000ef6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000efa:	4905      	ldr	r1, [pc, #20]	@ (8000f10 <LL_EXTI_EnableIT_32_63+0x24>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	58000800 	.word	0x58000800

08000f14 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f20:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000f22:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f2e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	cafecafe 	.word	0xcafecafe

08000f50 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000f62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	608b      	str	r3, [r1, #8]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fa6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000faa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fc8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000fd0:	d101      	bne.n	8000fd6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000ff6:	d101      	bne.n	8000ffc <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001014:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001016:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001024:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102c:	68fb      	ldr	r3, [r7, #12]
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001040:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <LL_DBGMCU_GetDeviceID+0x18>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e0042000 	.word	0xe0042000

08001058 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800105c:	4b04      	ldr	r3, [pc, #16]	@ (8001070 <LL_DBGMCU_GetRevisionID+0x18>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	0c1b      	lsrs	r3, r3, #16
 8001062:	b29b      	uxth	r3, r3
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e0042000 	.word	0xe0042000

08001074 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	041b      	lsls	r3, r3, #16
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	605a      	str	r2, [r3, #4]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	605a      	str	r2, [r3, #4]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695a      	ldr	r2, [r3, #20]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	041b      	lsls	r3, r3, #16
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	615a      	str	r2, [r3, #20]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695a      	ldr	r2, [r3, #20]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	615a      	str	r2, [r3, #20]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	609a      	str	r2, [r3, #8]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	619a      	str	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800113c:	4b05      	ldr	r3, [pc, #20]	@ (8001154 <LL_LPM_EnableSleep+0x1c>)
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <LL_LPM_EnableSleep+0x1c>)
 8001142:	f023 0304 	bic.w	r3, r3, #4
 8001146:	6113      	str	r3, [r2, #16]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	22ff      	movs	r2, #255	@ 0xff
 8001164:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	22ca      	movs	r2, #202	@ 0xca
 800117e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2253      	movs	r2, #83	@ 0x53
 8001184:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f023 0207 	bic.w	r2, r3, #7
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	609a      	str	r2, [r3, #8]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <MX_APPE_Config+0x18>)
 80011be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011c2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80011c4:	f000 f824 	bl	8001210 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80011c8:	f000 f864 	bl	8001294 <Config_HSE>

  return;
 80011cc:	bf00      	nop
}
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	58004000 	.word	0x58004000

080011d4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80011d8:	f000 f870 	bl	80012bc <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80011dc:	f000 f888 	bl	80012f0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80011e0:	4903      	ldr	r1, [pc, #12]	@ (80011f0 <MX_APPE_Init+0x1c>)
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 ffae 	bl	8002144 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80011e8:	f000 f890 	bl	800130c <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80011ec:	bf00      	nop
}
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000320 	.word	0x20000320

080011f4 <Init_Smps>:

void Init_Smps(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80011f8:	bf00      	nop
}
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <Init_Exti>:

void Init_Exti(void)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001206:	2050      	movs	r0, #80	@ 0x50
 8001208:	f7ff fe70 	bl	8000eec <LL_EXTI_EnableIT_32_63>

  return;
 800120c:	bf00      	nop
}
 800120e:	bd80      	pop	{r7, pc}

08001210 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001214:	f000 f804 	bl	8001220 <Reset_BackupDomain>

  Reset_IPCC();
 8001218:	f000 f81a 	bl	8001250 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800121c:	bf00      	nop
}
 800121e:	bd80      	pop	{r7, pc}

08001220 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001224:	f7ff feca 	bl	8000fbc <LL_RCC_IsActiveFlag_PINRST>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00d      	beq.n	800124a <Reset_BackupDomain+0x2a>
 800122e:	f7ff fed8 	bl	8000fe2 <LL_RCC_IsActiveFlag_SFTRST>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d108      	bne.n	800124a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001238:	f004 fc24 	bl	8005a84 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800123c:	f004 fc22 	bl	8005a84 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001240:	f7ff fe9a 	bl	8000f78 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001244:	f7ff fea9 	bl	8000f9a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001248:	bf00      	nop
 800124a:	bf00      	nop
}
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001254:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001258:	f7ff fed6 	bl	8001008 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800125c:	213f      	movs	r1, #63	@ 0x3f
 800125e:	480c      	ldr	r0, [pc, #48]	@ (8001290 <Reset_IPCC+0x40>)
 8001260:	f7ff ff4e 	bl	8001100 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001264:	213f      	movs	r1, #63	@ 0x3f
 8001266:	480a      	ldr	r0, [pc, #40]	@ (8001290 <Reset_IPCC+0x40>)
 8001268:	f7ff ff58 	bl	800111c <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800126c:	213f      	movs	r1, #63	@ 0x3f
 800126e:	4808      	ldr	r0, [pc, #32]	@ (8001290 <Reset_IPCC+0x40>)
 8001270:	f7ff ff00 	bl	8001074 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001274:	213f      	movs	r1, #63	@ 0x3f
 8001276:	4806      	ldr	r0, [pc, #24]	@ (8001290 <Reset_IPCC+0x40>)
 8001278:	f7ff ff1f 	bl	80010ba <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800127c:	213f      	movs	r1, #63	@ 0x3f
 800127e:	4804      	ldr	r0, [pc, #16]	@ (8001290 <Reset_IPCC+0x40>)
 8001280:	f7ff ff0a 	bl	8001098 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001284:	213f      	movs	r1, #63	@ 0x3f
 8001286:	4802      	ldr	r0, [pc, #8]	@ (8001290 <Reset_IPCC+0x40>)
 8001288:	f7ff ff29 	bl	80010de <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800128c:	bf00      	nop
}
 800128e:	bd80      	pop	{r7, pc}
 8001290:	58000c00 	.word	0x58000c00

08001294 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800129a:	2000      	movs	r0, #0
 800129c:	f00d fdb2 	bl	800ee04 <OTP_Read>
 80012a0:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	799b      	ldrb	r3, [r3, #6]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fe31 	bl	8000f14 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
}
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <System_Init>:

static void System_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  Init_Smps();
 80012c0:	f7ff ff98 	bl	80011f4 <Init_Smps>

  Init_Exti();
 80012c4:	f7ff ff9d 	bl	8001202 <Init_Exti>

  Init_Rtc();
 80012c8:	f000 f802 	bl	80012d0 <Init_Rtc>

  return;
 80012cc:	bf00      	nop
}
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80012d4:	4805      	ldr	r0, [pc, #20]	@ (80012ec <Init_Rtc+0x1c>)
 80012d6:	f7ff ff4c 	bl	8001172 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80012da:	2100      	movs	r1, #0
 80012dc:	4803      	ldr	r0, [pc, #12]	@ (80012ec <Init_Rtc+0x1c>)
 80012de:	f7ff ff58 	bl	8001192 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80012e2:	4802      	ldr	r0, [pc, #8]	@ (80012ec <Init_Rtc+0x1c>)
 80012e4:	f7ff ff38 	bl	8001158 <LL_RTC_EnableWriteProtection>

  return;
 80012e8:	bf00      	nop
}
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40002800 	.word	0x40002800

080012f0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80012f4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80012f8:	f7ff fe2a 	bl	8000f50 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80012fc:	f010 fc48 	bl	8011b90 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001300:	2004      	movs	r0, #4
 8001302:	f7ff fddd 	bl	8000ec0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001306:	bf00      	nop
}
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001312:	f00d fa6d 	bl	800e7f0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001316:	4a11      	ldr	r2, [pc, #68]	@ (800135c <appe_Tl_Init+0x50>)
 8001318:	2100      	movs	r1, #0
 800131a:	2004      	movs	r0, #4
 800131c:	f010 fd76 	bl	8011e0c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <appe_Tl_Init+0x54>)
 8001322:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001324:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <appe_Tl_Init+0x58>)
 8001326:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	480e      	ldr	r0, [pc, #56]	@ (8001368 <appe_Tl_Init+0x5c>)
 800132e:	f00d f921 	bl	800e574 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <appe_Tl_Init+0x60>)
 8001334:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <appe_Tl_Init+0x64>)
 8001338:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <appe_Tl_Init+0x68>)
 800133c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800133e:	f240 533c 	movw	r3, #1340	@ 0x53c
 8001342:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4618      	mov	r0, r3
 800134a:	f00d fb93 	bl	800ea74 <TL_MM_Init>

  TL_Enable();
 800134e:	f00d fa49 	bl	800e7e4 <TL_Enable>

  return;
 8001352:	bf00      	nop
}
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	0800e5ad 	.word	0x0800e5ad
 8001360:	20030734 	.word	0x20030734
 8001364:	08001379 	.word	0x08001379
 8001368:	08001391 	.word	0x08001391
 800136c:	2003094c 	.word	0x2003094c
 8001370:	20030840 	.word	0x20030840
 8001374:	200301f8 	.word	0x200301f8

08001378 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001382:	bf00      	nop
}
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	330b      	adds	r3, #11
 800139e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80013aa:	2b07      	cmp	r3, #7
 80013ac:	f200 80d0 	bhi.w	8001550 <APPE_SysUserEvtRx+0x1c0>
 80013b0:	a201      	add	r2, pc, #4	@ (adr r2, 80013b8 <APPE_SysUserEvtRx+0x28>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080013d9 	.word	0x080013d9
 80013bc:	0800146b 	.word	0x0800146b
 80013c0:	0800148d 	.word	0x0800148d
 80013c4:	08001551 	.word	0x08001551
 80013c8:	080014d1 	.word	0x080014d1
 80013cc:	080014f5 	.word	0x080014f5
 80013d0:	08001511 	.word	0x08001511
 80013d4:	08001535 	.word	0x08001535
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	4618      	mov	r0, r3
 80013de:	f00c fe7f 	bl	800e0e0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80013e2:	485e      	ldr	r0, [pc, #376]	@ (800155c <APPE_SysUserEvtRx+0x1cc>)
 80013e4:	f00d fc46 	bl	800ec74 <DbgTraceGetFileName>
 80013e8:	4601      	mov	r1, r0
 80013ea:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 80013ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001560 <APPE_SysUserEvtRx+0x1d0>)
 80013f0:	485c      	ldr	r0, [pc, #368]	@ (8001564 <APPE_SysUserEvtRx+0x1d4>)
 80013f2:	f010 fef9 	bl	80121e8 <iprintf>
 80013f6:	7b3b      	ldrb	r3, [r7, #12]
 80013f8:	4619      	mov	r1, r3
 80013fa:	7b7b      	ldrb	r3, [r7, #13]
 80013fc:	461a      	mov	r2, r3
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	4859      	ldr	r0, [pc, #356]	@ (8001568 <APPE_SysUserEvtRx+0x1d8>)
 8001402:	f010 fef1 	bl	80121e8 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001406:	4855      	ldr	r0, [pc, #340]	@ (800155c <APPE_SysUserEvtRx+0x1cc>)
 8001408:	f00d fc34 	bl	800ec74 <DbgTraceGetFileName>
 800140c:	4601      	mov	r1, r0
 800140e:	f240 136b 	movw	r3, #363	@ 0x16b
 8001412:	4a53      	ldr	r2, [pc, #332]	@ (8001560 <APPE_SysUserEvtRx+0x1d0>)
 8001414:	4853      	ldr	r0, [pc, #332]	@ (8001564 <APPE_SysUserEvtRx+0x1d4>)
 8001416:	f010 fee7 	bl	80121e8 <iprintf>
 800141a:	7c3b      	ldrb	r3, [r7, #16]
 800141c:	4619      	mov	r1, r3
 800141e:	4853      	ldr	r0, [pc, #332]	@ (800156c <APPE_SysUserEvtRx+0x1dc>)
 8001420:	f010 fee2 	bl	80121e8 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001424:	484d      	ldr	r0, [pc, #308]	@ (800155c <APPE_SysUserEvtRx+0x1cc>)
 8001426:	f00d fc25 	bl	800ec74 <DbgTraceGetFileName>
 800142a:	4601      	mov	r1, r0
 800142c:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8001430:	4a4b      	ldr	r2, [pc, #300]	@ (8001560 <APPE_SysUserEvtRx+0x1d0>)
 8001432:	484c      	ldr	r0, [pc, #304]	@ (8001564 <APPE_SysUserEvtRx+0x1d4>)
 8001434:	f010 fed8 	bl	80121e8 <iprintf>
 8001438:	7dbb      	ldrb	r3, [r7, #22]
 800143a:	4619      	mov	r1, r3
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	461a      	mov	r2, r3
 8001440:	7e3b      	ldrb	r3, [r7, #24]
 8001442:	484b      	ldr	r0, [pc, #300]	@ (8001570 <APPE_SysUserEvtRx+0x1e0>)
 8001444:	f010 fed0 	bl	80121e8 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001448:	4844      	ldr	r0, [pc, #272]	@ (800155c <APPE_SysUserEvtRx+0x1cc>)
 800144a:	f00d fc13 	bl	800ec74 <DbgTraceGetFileName>
 800144e:	4601      	mov	r1, r0
 8001450:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8001454:	4a42      	ldr	r2, [pc, #264]	@ (8001560 <APPE_SysUserEvtRx+0x1d0>)
 8001456:	4843      	ldr	r0, [pc, #268]	@ (8001564 <APPE_SysUserEvtRx+0x1d4>)
 8001458:	f010 fec6 	bl	80121e8 <iprintf>
 800145c:	4845      	ldr	r0, [pc, #276]	@ (8001574 <APPE_SysUserEvtRx+0x1e4>)
 800145e:	f010 fec3 	bl	80121e8 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f8e0 	bl	8001628 <APPE_SysEvtReadyProcessing>
    break;
 8001468:	e073      	b.n	8001552 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800146a:	483c      	ldr	r0, [pc, #240]	@ (800155c <APPE_SysUserEvtRx+0x1cc>)
 800146c:	f00d fc02 	bl	800ec74 <DbgTraceGetFileName>
 8001470:	4601      	mov	r1, r0
 8001472:	f240 1373 	movw	r3, #371	@ 0x173
 8001476:	4a3a      	ldr	r2, [pc, #232]	@ (8001560 <APPE_SysUserEvtRx+0x1d0>)
 8001478:	483a      	ldr	r0, [pc, #232]	@ (8001564 <APPE_SysUserEvtRx+0x1d4>)
 800147a:	f010 feb5 	bl	80121e8 <iprintf>
 800147e:	483e      	ldr	r0, [pc, #248]	@ (8001578 <APPE_SysUserEvtRx+0x1e8>)
 8001480:	f010 feb2 	bl	80121e8 <iprintf>
    APPE_SysEvtError(pPayload);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f885 	bl	8001594 <APPE_SysEvtError>
    break;
 800148a:	e062      	b.n	8001552 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 800148c:	4833      	ldr	r0, [pc, #204]	@ (800155c <APPE_SysUserEvtRx+0x1cc>)
 800148e:	f00d fbf1 	bl	800ec74 <DbgTraceGetFileName>
 8001492:	4601      	mov	r1, r0
 8001494:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8001498:	4a31      	ldr	r2, [pc, #196]	@ (8001560 <APPE_SysUserEvtRx+0x1d0>)
 800149a:	4832      	ldr	r0, [pc, #200]	@ (8001564 <APPE_SysUserEvtRx+0x1d4>)
 800149c:	f010 fea4 	bl	80121e8 <iprintf>
 80014a0:	4836      	ldr	r0, [pc, #216]	@ (800157c <APPE_SysUserEvtRx+0x1ec>)
 80014a2:	f010 ff11 	bl	80122c8 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80014a6:	482d      	ldr	r0, [pc, #180]	@ (800155c <APPE_SysUserEvtRx+0x1cc>)
 80014a8:	f00d fbe4 	bl	800ec74 <DbgTraceGetFileName>
 80014ac:	4601      	mov	r1, r0
 80014ae:	f240 1379 	movw	r3, #377	@ 0x179
 80014b2:	4a2b      	ldr	r2, [pc, #172]	@ (8001560 <APPE_SysUserEvtRx+0x1d0>)
 80014b4:	482b      	ldr	r0, [pc, #172]	@ (8001564 <APPE_SysUserEvtRx+0x1d4>)
 80014b6:	f010 fe97 	bl	80121e8 <iprintf>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3302      	adds	r3, #2
 80014be:	6819      	ldr	r1, [r3, #0]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	3302      	adds	r3, #2
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	461a      	mov	r2, r3
 80014c8:	482d      	ldr	r0, [pc, #180]	@ (8001580 <APPE_SysUserEvtRx+0x1f0>)
 80014ca:	f010 fe8d 	bl	80121e8 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 80014ce:	e040      	b.n	8001552 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80014d0:	4822      	ldr	r0, [pc, #136]	@ (800155c <APPE_SysUserEvtRx+0x1cc>)
 80014d2:	f00d fbcf 	bl	800ec74 <DbgTraceGetFileName>
 80014d6:	4601      	mov	r1, r0
 80014d8:	f240 137f 	movw	r3, #383	@ 0x17f
 80014dc:	4a20      	ldr	r2, [pc, #128]	@ (8001560 <APPE_SysUserEvtRx+0x1d0>)
 80014de:	4821      	ldr	r0, [pc, #132]	@ (8001564 <APPE_SysUserEvtRx+0x1d4>)
 80014e0:	f010 fe82 	bl	80121e8 <iprintf>
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	3302      	adds	r3, #2
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4825      	ldr	r0, [pc, #148]	@ (8001584 <APPE_SysUserEvtRx+0x1f4>)
 80014ee:	f010 fe7b 	bl	80121e8 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 80014f2:	e02e      	b.n	8001552 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80014f4:	4819      	ldr	r0, [pc, #100]	@ (800155c <APPE_SysUserEvtRx+0x1cc>)
 80014f6:	f00d fbbd 	bl	800ec74 <DbgTraceGetFileName>
 80014fa:	4601      	mov	r1, r0
 80014fc:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8001500:	4a17      	ldr	r2, [pc, #92]	@ (8001560 <APPE_SysUserEvtRx+0x1d0>)
 8001502:	4818      	ldr	r0, [pc, #96]	@ (8001564 <APPE_SysUserEvtRx+0x1d4>)
 8001504:	f010 fe70 	bl	80121e8 <iprintf>
 8001508:	481f      	ldr	r0, [pc, #124]	@ (8001588 <APPE_SysUserEvtRx+0x1f8>)
 800150a:	f010 fe6d 	bl	80121e8 <iprintf>
    break;
 800150e:	e020      	b.n	8001552 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001510:	4812      	ldr	r0, [pc, #72]	@ (800155c <APPE_SysUserEvtRx+0x1cc>)
 8001512:	f00d fbaf 	bl	800ec74 <DbgTraceGetFileName>
 8001516:	4601      	mov	r1, r0
 8001518:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 800151c:	4a10      	ldr	r2, [pc, #64]	@ (8001560 <APPE_SysUserEvtRx+0x1d0>)
 800151e:	4811      	ldr	r0, [pc, #68]	@ (8001564 <APPE_SysUserEvtRx+0x1d4>)
 8001520:	f010 fe62 	bl	80121e8 <iprintf>
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	3302      	adds	r3, #2
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4619      	mov	r1, r3
 800152c:	4817      	ldr	r0, [pc, #92]	@ (800158c <APPE_SysUserEvtRx+0x1fc>)
 800152e:	f010 fe5b 	bl	80121e8 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8001532:	e00e      	b.n	8001552 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001534:	4809      	ldr	r0, [pc, #36]	@ (800155c <APPE_SysUserEvtRx+0x1cc>)
 8001536:	f00d fb9d 	bl	800ec74 <DbgTraceGetFileName>
 800153a:	4601      	mov	r1, r0
 800153c:	f240 138d 	movw	r3, #397	@ 0x18d
 8001540:	4a07      	ldr	r2, [pc, #28]	@ (8001560 <APPE_SysUserEvtRx+0x1d0>)
 8001542:	4808      	ldr	r0, [pc, #32]	@ (8001564 <APPE_SysUserEvtRx+0x1d4>)
 8001544:	f010 fe50 	bl	80121e8 <iprintf>
 8001548:	4811      	ldr	r0, [pc, #68]	@ (8001590 <APPE_SysUserEvtRx+0x200>)
 800154a:	f010 fe4d 	bl	80121e8 <iprintf>
    break;
 800154e:	e000      	b.n	8001552 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8001550:	bf00      	nop
  }

  return;
 8001552:	bf00      	nop
}
 8001554:	3720      	adds	r7, #32
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	08013448 	.word	0x08013448
 8001560:	08014b80 	.word	0x08014b80
 8001564:	08013460 	.word	0x08013460
 8001568:	08013474 	.word	0x08013474
 800156c:	08013498 	.word	0x08013498
 8001570:	080134b4 	.word	0x080134b4
 8001574:	080134cc 	.word	0x080134cc
 8001578:	080134ec 	.word	0x080134ec
 800157c:	08013510 	.word	0x08013510
 8001580:	08013560 	.word	0x08013560
 8001584:	08013588 	.word	0x08013588
 8001588:	080135c4 	.word	0x080135c4
 800158c:	080135e8 	.word	0x080135e8
 8001590:	08013624 	.word	0x08013624

08001594 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	330b      	adds	r3, #11
 80015a2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3302      	adds	r3, #2
 80015a8:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80015aa:	4819      	ldr	r0, [pc, #100]	@ (8001610 <APPE_SysEvtError+0x7c>)
 80015ac:	f00d fb62 	bl	800ec74 <DbgTraceGetFileName>
 80015b0:	4601      	mov	r1, r0
 80015b2:	f240 13a5 	movw	r3, #421	@ 0x1a5
 80015b6:	4a17      	ldr	r2, [pc, #92]	@ (8001614 <APPE_SysEvtError+0x80>)
 80015b8:	4817      	ldr	r0, [pc, #92]	@ (8001618 <APPE_SysEvtError+0x84>)
 80015ba:	f010 fe15 	bl	80121e8 <iprintf>
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4619      	mov	r1, r3
 80015c4:	4815      	ldr	r0, [pc, #84]	@ (800161c <APPE_SysEvtError+0x88>)
 80015c6:	f010 fe0f 	bl	80121e8 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10d      	bne.n	80015ee <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80015d2:	480f      	ldr	r0, [pc, #60]	@ (8001610 <APPE_SysEvtError+0x7c>)
 80015d4:	f00d fb4e 	bl	800ec74 <DbgTraceGetFileName>
 80015d8:	4601      	mov	r1, r0
 80015da:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80015de:	4a0d      	ldr	r2, [pc, #52]	@ (8001614 <APPE_SysEvtError+0x80>)
 80015e0:	480d      	ldr	r0, [pc, #52]	@ (8001618 <APPE_SysEvtError+0x84>)
 80015e2:	f010 fe01 	bl	80121e8 <iprintf>
 80015e6:	480e      	ldr	r0, [pc, #56]	@ (8001620 <APPE_SysEvtError+0x8c>)
 80015e8:	f010 fe6e 	bl	80122c8 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80015ec:	e00d      	b.n	800160a <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80015ee:	4808      	ldr	r0, [pc, #32]	@ (8001610 <APPE_SysEvtError+0x7c>)
 80015f0:	f00d fb40 	bl	800ec74 <DbgTraceGetFileName>
 80015f4:	4601      	mov	r1, r0
 80015f6:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 80015fa:	4a06      	ldr	r2, [pc, #24]	@ (8001614 <APPE_SysEvtError+0x80>)
 80015fc:	4806      	ldr	r0, [pc, #24]	@ (8001618 <APPE_SysEvtError+0x84>)
 80015fe:	f010 fdf3 	bl	80121e8 <iprintf>
 8001602:	4808      	ldr	r0, [pc, #32]	@ (8001624 <APPE_SysEvtError+0x90>)
 8001604:	f010 fe60 	bl	80122c8 <puts>
  return;
 8001608:	bf00      	nop
}
 800160a:	3710      	adds	r7, #16
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	08013448 	.word	0x08013448
 8001614:	08014b94 	.word	0x08014b94
 8001618:	08013460 	.word	0x08013460
 800161c:	08013648 	.word	0x08013648
 8001620:	08013678 	.word	0x08013678
 8001624:	080136b4 	.word	0x080136b4

08001628 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001630:	f107 0308 	add.w	r3, r7, #8
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	330b      	adds	r3, #11
 800164c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3302      	adds	r3, #2
 8001652:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d146      	bne.n	80016ea <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 800165c:	4836      	ldr	r0, [pc, #216]	@ (8001738 <APPE_SysEvtReadyProcessing+0x110>)
 800165e:	f00d fb09 	bl	800ec74 <DbgTraceGetFileName>
 8001662:	4601      	mov	r1, r0
 8001664:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8001668:	4a34      	ldr	r2, [pc, #208]	@ (800173c <APPE_SysEvtReadyProcessing+0x114>)
 800166a:	4835      	ldr	r0, [pc, #212]	@ (8001740 <APPE_SysEvtReadyProcessing+0x118>)
 800166c:	f010 fdbc 	bl	80121e8 <iprintf>
 8001670:	4834      	ldr	r0, [pc, #208]	@ (8001744 <APPE_SysEvtReadyProcessing+0x11c>)
 8001672:	f010 fe29 	bl	80122c8 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001676:	f7ff fbf5 	bl	8000e64 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800167a:	230f      	movs	r3, #15
 800167c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800167e:	237f      	movs	r3, #127	@ 0x7f
 8001680:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001682:	f7ff fce9 	bl	8001058 <LL_DBGMCU_GetRevisionID>
 8001686:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001688:	482b      	ldr	r0, [pc, #172]	@ (8001738 <APPE_SysEvtReadyProcessing+0x110>)
 800168a:	f00d faf3 	bl	800ec74 <DbgTraceGetFileName>
 800168e:	4601      	mov	r1, r0
 8001690:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8001694:	4a29      	ldr	r2, [pc, #164]	@ (800173c <APPE_SysEvtReadyProcessing+0x114>)
 8001696:	482a      	ldr	r0, [pc, #168]	@ (8001740 <APPE_SysEvtReadyProcessing+0x118>)
 8001698:	f010 fda6 	bl	80121e8 <iprintf>
 800169c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800169e:	482a      	ldr	r0, [pc, #168]	@ (8001748 <APPE_SysEvtReadyProcessing+0x120>)
 80016a0:	f010 fda2 	bl	80121e8 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80016aa:	f7ff fcc7 	bl	800103c <LL_DBGMCU_GetDeviceID>
 80016ae:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80016b0:	4821      	ldr	r0, [pc, #132]	@ (8001738 <APPE_SysEvtReadyProcessing+0x110>)
 80016b2:	f00d fadf 	bl	800ec74 <DbgTraceGetFileName>
 80016b6:	4601      	mov	r1, r0
 80016b8:	f240 13e1 	movw	r3, #481	@ 0x1e1
 80016bc:	4a1f      	ldr	r2, [pc, #124]	@ (800173c <APPE_SysEvtReadyProcessing+0x114>)
 80016be:	4820      	ldr	r0, [pc, #128]	@ (8001740 <APPE_SysEvtReadyProcessing+0x118>)
 80016c0:	f010 fd92 	bl	80121e8 <iprintf>
 80016c4:	6a39      	ldr	r1, [r7, #32]
 80016c6:	4821      	ldr	r0, [pc, #132]	@ (800174c <APPE_SysEvtReadyProcessing+0x124>)
 80016c8:	f010 fd8e 	bl	80121e8 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4618      	mov	r0, r3
 80016d8:	f00c fcec 	bl	800e0b4 <SHCI_C2_Config>

    APP_BLE_Init();
 80016dc:	f00e f866 	bl	800f7ac <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80016e0:	2100      	movs	r1, #0
 80016e2:	2001      	movs	r0, #1
 80016e4:	f010 fa66 	bl	8011bb4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80016e8:	e022      	b.n	8001730 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d110      	bne.n	8001714 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80016f2:	4811      	ldr	r0, [pc, #68]	@ (8001738 <APPE_SysEvtReadyProcessing+0x110>)
 80016f4:	f00d fabe 	bl	800ec74 <DbgTraceGetFileName>
 80016f8:	4601      	mov	r1, r0
 80016fa:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 80016fe:	4a0f      	ldr	r2, [pc, #60]	@ (800173c <APPE_SysEvtReadyProcessing+0x114>)
 8001700:	480f      	ldr	r0, [pc, #60]	@ (8001740 <APPE_SysEvtReadyProcessing+0x118>)
 8001702:	f010 fd71 	bl	80121e8 <iprintf>
 8001706:	4812      	ldr	r0, [pc, #72]	@ (8001750 <APPE_SysEvtReadyProcessing+0x128>)
 8001708:	f010 fd6e 	bl	80121e8 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
  return;
 8001712:	e00d      	b.n	8001730 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001714:	4808      	ldr	r0, [pc, #32]	@ (8001738 <APPE_SysEvtReadyProcessing+0x110>)
 8001716:	f00d faad 	bl	800ec74 <DbgTraceGetFileName>
 800171a:	4601      	mov	r1, r0
 800171c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8001720:	4a06      	ldr	r2, [pc, #24]	@ (800173c <APPE_SysEvtReadyProcessing+0x114>)
 8001722:	4807      	ldr	r0, [pc, #28]	@ (8001740 <APPE_SysEvtReadyProcessing+0x118>)
 8001724:	f010 fd60 	bl	80121e8 <iprintf>
 8001728:	480a      	ldr	r0, [pc, #40]	@ (8001754 <APPE_SysEvtReadyProcessing+0x12c>)
 800172a:	f010 fd5d 	bl	80121e8 <iprintf>
  return;
 800172e:	bf00      	nop
}
 8001730:	3728      	adds	r7, #40	@ 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	08013448 	.word	0x08013448
 800173c:	08014ba8 	.word	0x08014ba8
 8001740:	08013460 	.word	0x08013460
 8001744:	080136ec 	.word	0x080136ec
 8001748:	08013708 	.word	0x08013708
 800174c:	0801372c 	.word	0x0801372c
 8001750:	0801374c 	.word	0x0801374c
 8001754:	08013780 	.word	0x08013780

08001758 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001760:	f001 fd46 	bl	80031f0 <HAL_GetTick>
 8001764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d00a      	beq.n	8001788 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001772:	f001 fd55 	bl	8003220 <HAL_GetTickFreq>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4413      	add	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001780:	e002      	b.n	8001788 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001782:	f7ff fcd9 	bl	8001138 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001786:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001788:	f001 fd32 	bl	80031f0 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f4      	bhi.n	8001782 <HAL_Delay+0x2a>
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80017a6:	f04f 30ff 	mov.w	r0, #4294967295
 80017aa:	f010 fa33 	bl	8011c14 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80017b6:	bf00      	nop
}
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80017c8:	2100      	movs	r1, #0
 80017ca:	2004      	movs	r0, #4
 80017cc:	f010 fb40 	bl	8011e50 <UTIL_SEQ_SetTask>
  return;
 80017d0:	bf00      	nop
}
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017e0:	2002      	movs	r0, #2
 80017e2:	f010 fba1 	bl	8011f28 <UTIL_SEQ_SetEvt>
  return;
 80017e6:	bf00      	nop
}
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017f6:	2002      	movs	r0, #2
 80017f8:	f010 fbb6 	bl	8011f68 <UTIL_SEQ_WaitEvt>
  return;
 80017fc:	bf00      	nop
}
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <LL_AHB1_GRP1_EnableClock>:
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001810:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001812:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4313      	orrs	r3, r2
 800181a:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800181c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001820:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4013      	ands	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001828:	68fb      	ldr	r3, [r7, #12]
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800183a:	2004      	movs	r0, #4
 800183c:	f7ff ffe2 	bl	8001804 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001840:	2001      	movs	r0, #1
 8001842:	f7ff ffdf 	bl	8001804 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	210f      	movs	r1, #15
 800184a:	200b      	movs	r0, #11
 800184c:	f001 fe2f 	bl	80034ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001850:	200b      	movs	r0, #11
 8001852:	f001 fe46 	bl	80034e2 <HAL_NVIC_EnableIRQ>

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}

0800185a <LL_AHB2_GRP1_EnableClock>:
{
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001866:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001868:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4313      	orrs	r3, r2
 8001870:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001872:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001876:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4013      	ands	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a0:	2004      	movs	r0, #4
 80018a2:	f7ff ffda 	bl	800185a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	2002      	movs	r0, #2
 80018a8:	f7ff ffd7 	bl	800185a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ac:	2001      	movs	r0, #1
 80018ae:	f7ff ffd4 	bl	800185a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80018b2:	2200      	movs	r2, #0
 80018b4:	f240 111f 	movw	r1, #287	@ 0x11f
 80018b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018bc:	f002 f9ec 	bl	8003c98 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80018c0:	f240 131f 	movw	r3, #287	@ 0x11f
 80018c4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c6:	2301      	movs	r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	4619      	mov	r1, r3
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018da:	f002 f86d 	bl	80039b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP1_DRDY_Pin PA10 */
  GPIO_InitStruct.Pin = TEMP1_DRDY_Pin|GPIO_PIN_10;
 80018de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f4:	f002 f860 	bl	80039b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018f8:	2304      	movs	r3, #4
 80018fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	4619      	mov	r1, r3
 8001908:	4803      	ldr	r0, [pc, #12]	@ (8001918 <MX_GPIO_Init+0x8c>)
 800190a:	f002 f855 	bl	80039b8 <HAL_GPIO_Init>

}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	48000400 	.word	0x48000400

0800191c <LL_EXTI_EnableIT_0_31>:
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <LL_EXTI_EnableIT_0_31+0x24>)
 8001926:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800192a:	4905      	ldr	r1, [pc, #20]	@ (8001940 <LL_EXTI_EnableIT_0_31+0x24>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4313      	orrs	r3, r2
 8001930:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	58000800 	.word	0x58000800

08001944 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4904      	ldr	r1, [pc, #16]	@ (8001964 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]

}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	58000800 	.word	0x58000800

08001968 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <ReadRtcSsrValue+0x3c>)
 8001970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001972:	b29b      	uxth	r3, r3
 8001974:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001976:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <ReadRtcSsrValue+0x3c>)
 8001978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197a:	b29b      	uxth	r3, r3
 800197c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800197e:	e005      	b.n	800198c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001984:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <ReadRtcSsrValue+0x3c>)
 8001986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001988:	b29b      	uxth	r3, r3
 800198a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d1f5      	bne.n	8001980 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001994:	683b      	ldr	r3, [r7, #0]
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40002800 	.word	0x40002800

080019a8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	460a      	mov	r2, r1
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	4613      	mov	r3, r2
 80019b6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80019b8:	79ba      	ldrb	r2, [r7, #6]
 80019ba:	491d      	ldr	r1, [pc, #116]	@ (8001a30 <LinkTimerAfter+0x88>)
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	440b      	add	r3, r1
 80019c6:	3315      	adds	r3, #21
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d009      	beq.n	80019e6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80019d2:	7bfa      	ldrb	r2, [r7, #15]
 80019d4:	4916      	ldr	r1, [pc, #88]	@ (8001a30 <LinkTimerAfter+0x88>)
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	440b      	add	r3, r1
 80019e0:	3314      	adds	r3, #20
 80019e2:	79fa      	ldrb	r2, [r7, #7]
 80019e4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80019e6:	79fa      	ldrb	r2, [r7, #7]
 80019e8:	4911      	ldr	r1, [pc, #68]	@ (8001a30 <LinkTimerAfter+0x88>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	3315      	adds	r3, #21
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80019fa:	79fa      	ldrb	r2, [r7, #7]
 80019fc:	490c      	ldr	r1, [pc, #48]	@ (8001a30 <LinkTimerAfter+0x88>)
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	440b      	add	r3, r1
 8001a08:	3314      	adds	r3, #20
 8001a0a:	79ba      	ldrb	r2, [r7, #6]
 8001a0c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001a0e:	79ba      	ldrb	r2, [r7, #6]
 8001a10:	4907      	ldr	r1, [pc, #28]	@ (8001a30 <LinkTimerAfter+0x88>)
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3315      	adds	r3, #21
 8001a1e:	79fa      	ldrb	r2, [r7, #7]
 8001a20:	701a      	strb	r2, [r3, #0]

  return;
 8001a22:	bf00      	nop
}
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200001ec 	.word	0x200001ec

08001a34 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	460a      	mov	r2, r1
 8001a3e:	71fb      	strb	r3, [r7, #7]
 8001a40:	4613      	mov	r3, r2
 8001a42:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001a44:	4b29      	ldr	r3, [pc, #164]	@ (8001aec <LinkTimerBefore+0xb8>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	79ba      	ldrb	r2, [r7, #6]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d032      	beq.n	8001ab6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001a50:	79ba      	ldrb	r2, [r7, #6]
 8001a52:	4927      	ldr	r1, [pc, #156]	@ (8001af0 <LinkTimerBefore+0xbc>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3314      	adds	r3, #20
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001a64:	7bfa      	ldrb	r2, [r7, #15]
 8001a66:	4922      	ldr	r1, [pc, #136]	@ (8001af0 <LinkTimerBefore+0xbc>)
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	3315      	adds	r3, #21
 8001a74:	79fa      	ldrb	r2, [r7, #7]
 8001a76:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001a78:	79fa      	ldrb	r2, [r7, #7]
 8001a7a:	491d      	ldr	r1, [pc, #116]	@ (8001af0 <LinkTimerBefore+0xbc>)
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	440b      	add	r3, r1
 8001a86:	3315      	adds	r3, #21
 8001a88:	79ba      	ldrb	r2, [r7, #6]
 8001a8a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001a8c:	79fa      	ldrb	r2, [r7, #7]
 8001a8e:	4918      	ldr	r1, [pc, #96]	@ (8001af0 <LinkTimerBefore+0xbc>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	3314      	adds	r3, #20
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001aa0:	79ba      	ldrb	r2, [r7, #6]
 8001aa2:	4913      	ldr	r1, [pc, #76]	@ (8001af0 <LinkTimerBefore+0xbc>)
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	3314      	adds	r3, #20
 8001ab0:	79fa      	ldrb	r2, [r7, #7]
 8001ab2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001ab4:	e014      	b.n	8001ae0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ab6:	79fa      	ldrb	r2, [r7, #7]
 8001ab8:	490d      	ldr	r1, [pc, #52]	@ (8001af0 <LinkTimerBefore+0xbc>)
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	440b      	add	r3, r1
 8001ac4:	3315      	adds	r3, #21
 8001ac6:	79ba      	ldrb	r2, [r7, #6]
 8001ac8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001aca:	79ba      	ldrb	r2, [r7, #6]
 8001acc:	4908      	ldr	r1, [pc, #32]	@ (8001af0 <LinkTimerBefore+0xbc>)
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	440b      	add	r3, r1
 8001ad8:	3314      	adds	r3, #20
 8001ada:	79fa      	ldrb	r2, [r7, #7]
 8001adc:	701a      	strb	r2, [r3, #0]
  return;
 8001ade:	bf00      	nop
}
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	2000027c 	.word	0x2000027c
 8001af0:	200001ec 	.word	0x200001ec

08001af4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001afe:	4b4e      	ldr	r3, [pc, #312]	@ (8001c38 <linkTimer+0x144>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b06      	cmp	r3, #6
 8001b06:	d118      	bne.n	8001b3a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b08:	4b4b      	ldr	r3, [pc, #300]	@ (8001c38 <linkTimer+0x144>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c3c <linkTimer+0x148>)
 8001b10:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001b12:	4a49      	ldr	r2, [pc, #292]	@ (8001c38 <linkTimer+0x144>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001b18:	79fa      	ldrb	r2, [r7, #7]
 8001b1a:	4949      	ldr	r1, [pc, #292]	@ (8001c40 <linkTimer+0x14c>)
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	440b      	add	r3, r1
 8001b26:	3315      	adds	r3, #21
 8001b28:	2206      	movs	r2, #6
 8001b2a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b2c:	4b45      	ldr	r3, [pc, #276]	@ (8001c44 <linkTimer+0x150>)
 8001b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b32:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	81fb      	strh	r3, [r7, #14]
 8001b38:	e078      	b.n	8001c2c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001b3a:	f000 f909 	bl	8001d50 <ReturnTimeElapsed>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001b42:	79fa      	ldrb	r2, [r7, #7]
 8001b44:	493e      	ldr	r1, [pc, #248]	@ (8001c40 <linkTimer+0x14c>)
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	440b      	add	r3, r1
 8001b50:	3308      	adds	r3, #8
 8001b52:	6819      	ldr	r1, [r3, #0]
 8001b54:	89fb      	ldrh	r3, [r7, #14]
 8001b56:	79fa      	ldrb	r2, [r7, #7]
 8001b58:	4419      	add	r1, r3
 8001b5a:	4839      	ldr	r0, [pc, #228]	@ (8001c40 <linkTimer+0x14c>)
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4403      	add	r3, r0
 8001b66:	3308      	adds	r3, #8
 8001b68:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001b6a:	79fa      	ldrb	r2, [r7, #7]
 8001b6c:	4934      	ldr	r1, [pc, #208]	@ (8001c40 <linkTimer+0x14c>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	440b      	add	r3, r1
 8001b78:	3308      	adds	r3, #8
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c38 <linkTimer+0x144>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4619      	mov	r1, r3
 8001b86:	4a2e      	ldr	r2, [pc, #184]	@ (8001c40 <linkTimer+0x14c>)
 8001b88:	460b      	mov	r3, r1
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	440b      	add	r3, r1
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	3308      	adds	r3, #8
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d337      	bcc.n	8001c0c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001b9c:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <linkTimer+0x144>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001ba2:	7b7a      	ldrb	r2, [r7, #13]
 8001ba4:	4926      	ldr	r1, [pc, #152]	@ (8001c40 <linkTimer+0x14c>)
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	440b      	add	r3, r1
 8001bb0:	3315      	adds	r3, #21
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001bb6:	e013      	b.n	8001be0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001bb8:	7b7a      	ldrb	r2, [r7, #13]
 8001bba:	4921      	ldr	r1, [pc, #132]	@ (8001c40 <linkTimer+0x14c>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3315      	adds	r3, #21
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001bcc:	7b7a      	ldrb	r2, [r7, #13]
 8001bce:	491c      	ldr	r1, [pc, #112]	@ (8001c40 <linkTimer+0x14c>)
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	440b      	add	r3, r1
 8001bda:	3315      	adds	r3, #21
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001be0:	7b3b      	ldrb	r3, [r7, #12]
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d00b      	beq.n	8001bfe <linkTimer+0x10a>
 8001be6:	7b3a      	ldrb	r2, [r7, #12]
 8001be8:	4915      	ldr	r1, [pc, #84]	@ (8001c40 <linkTimer+0x14c>)
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	440b      	add	r3, r1
 8001bf4:	3308      	adds	r3, #8
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d2dc      	bcs.n	8001bb8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001bfe:	7b7a      	ldrb	r2, [r7, #13]
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fecf 	bl	80019a8 <LinkTimerAfter>
 8001c0a:	e00f      	b.n	8001c2c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c38 <linkTimer+0x144>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff0c 	bl	8001a34 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <linkTimer+0x144>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <linkTimer+0x148>)
 8001c24:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001c26:	4a04      	ldr	r2, [pc, #16]	@ (8001c38 <linkTimer+0x144>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001c2c:	89fb      	ldrh	r3, [r7, #14]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000027c 	.word	0x2000027c
 8001c3c:	2000027d 	.word	0x2000027d
 8001c40:	200001ec 	.word	0x200001ec
 8001c44:	20000280 	.word	0x20000280

08001c48 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001c58:	4b39      	ldr	r3, [pc, #228]	@ (8001d40 <UnlinkTimer+0xf8>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	79fa      	ldrb	r2, [r7, #7]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d111      	bne.n	8001c88 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001c64:	4b36      	ldr	r3, [pc, #216]	@ (8001d40 <UnlinkTimer+0xf8>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4b36      	ldr	r3, [pc, #216]	@ (8001d44 <UnlinkTimer+0xfc>)
 8001c6c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001c6e:	79fa      	ldrb	r2, [r7, #7]
 8001c70:	4935      	ldr	r1, [pc, #212]	@ (8001d48 <UnlinkTimer+0x100>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	440b      	add	r3, r1
 8001c7c:	3315      	adds	r3, #21
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b2f      	ldr	r3, [pc, #188]	@ (8001d40 <UnlinkTimer+0xf8>)
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	e03e      	b.n	8001d06 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001c88:	79fa      	ldrb	r2, [r7, #7]
 8001c8a:	492f      	ldr	r1, [pc, #188]	@ (8001d48 <UnlinkTimer+0x100>)
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	440b      	add	r3, r1
 8001c96:	3314      	adds	r3, #20
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001c9c:	79fa      	ldrb	r2, [r7, #7]
 8001c9e:	492a      	ldr	r1, [pc, #168]	@ (8001d48 <UnlinkTimer+0x100>)
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	440b      	add	r3, r1
 8001caa:	3315      	adds	r3, #21
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001cb0:	79f9      	ldrb	r1, [r7, #7]
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	4824      	ldr	r0, [pc, #144]	@ (8001d48 <UnlinkTimer+0x100>)
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	440b      	add	r3, r1
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4403      	add	r3, r0
 8001cc0:	3315      	adds	r3, #21
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b2d8      	uxtb	r0, r3
 8001cc6:	4920      	ldr	r1, [pc, #128]	@ (8001d48 <UnlinkTimer+0x100>)
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3315      	adds	r3, #21
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d013      	beq.n	8001d06 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001cde:	79f9      	ldrb	r1, [r7, #7]
 8001ce0:	7bba      	ldrb	r2, [r7, #14]
 8001ce2:	4819      	ldr	r0, [pc, #100]	@ (8001d48 <UnlinkTimer+0x100>)
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	440b      	add	r3, r1
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4403      	add	r3, r0
 8001cee:	3314      	adds	r3, #20
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b2d8      	uxtb	r0, r3
 8001cf4:	4914      	ldr	r1, [pc, #80]	@ (8001d48 <UnlinkTimer+0x100>)
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	3314      	adds	r3, #20
 8001d02:	4602      	mov	r2, r0
 8001d04:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001d06:	79fa      	ldrb	r2, [r7, #7]
 8001d08:	490f      	ldr	r1, [pc, #60]	@ (8001d48 <UnlinkTimer+0x100>)
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	4413      	add	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	440b      	add	r3, r1
 8001d14:	330c      	adds	r3, #12
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <UnlinkTimer+0xf8>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b06      	cmp	r3, #6
 8001d22:	d107      	bne.n	8001d34 <UnlinkTimer+0xec>
 8001d24:	79bb      	ldrb	r3, [r7, #6]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d104      	bne.n	8001d34 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d2a:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <UnlinkTimer+0x104>)
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	601a      	str	r2, [r3, #0]
  }

  return;
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
}
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	2000027c 	.word	0x2000027c
 8001d44:	2000027d 	.word	0x2000027d
 8001d48:	200001ec 	.word	0x200001ec
 8001d4c:	20000280 	.word	0x20000280

08001d50 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001d56:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <ReturnTimeElapsed+0x70>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5e:	d026      	beq.n	8001dae <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001d60:	f7ff fe02 	bl	8001968 <ReadRtcSsrValue>
 8001d64:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001d66:	4b16      	ldr	r3, [pc, #88]	@ (8001dc0 <ReturnTimeElapsed+0x70>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d805      	bhi.n	8001d7c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001d70:	4b13      	ldr	r3, [pc, #76]	@ (8001dc0 <ReturnTimeElapsed+0x70>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	e00a      	b.n	8001d92 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <ReturnTimeElapsed+0x74>)
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001d88:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <ReturnTimeElapsed+0x70>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001d92:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <ReturnTimeElapsed+0x78>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001da0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <ReturnTimeElapsed+0x7c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	40d3      	lsrs	r3, r2
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	e001      	b.n	8001db2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	b29b      	uxth	r3, r3
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000280 	.word	0x20000280
 8001dc4:	20000288 	.word	0x20000288
 8001dc8:	20000286 	.word	0x20000286
 8001dcc:	20000285 	.word	0x20000285

08001dd0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d108      	bne.n	8001df2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001de0:	f7ff fdc2 	bl	8001968 <ReadRtcSsrValue>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a21      	ldr	r2, [pc, #132]	@ (8001e6c <RestartWakeupCounter+0x9c>)
 8001de8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001dea:	2003      	movs	r0, #3
 8001dec:	f001 fba1 	bl	8003532 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001df0:	e039      	b.n	8001e66 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d803      	bhi.n	8001e00 <RestartWakeupCounter+0x30>
 8001df8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <RestartWakeupCounter+0xa0>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d002      	beq.n	8001e06 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001e06:	bf00      	nop
 8001e08:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <RestartWakeupCounter+0xa4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f8      	beq.n	8001e08 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e16:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <RestartWakeupCounter+0xa4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <RestartWakeupCounter+0xa4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001e26:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e28:	4b13      	ldr	r3, [pc, #76]	@ (8001e78 <RestartWakeupCounter+0xa8>)
 8001e2a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e2e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e30:	2003      	movs	r0, #3
 8001e32:	f001 fb8c 	bl	800354e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001e36:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <RestartWakeupCounter+0xac>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	0c1b      	lsrs	r3, r3, #16
 8001e3c:	041b      	lsls	r3, r3, #16
 8001e3e:	88fa      	ldrh	r2, [r7, #6]
 8001e40:	490e      	ldr	r1, [pc, #56]	@ (8001e7c <RestartWakeupCounter+0xac>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e46:	f7ff fd8f 	bl	8001968 <ReadRtcSsrValue>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4a07      	ldr	r2, [pc, #28]	@ (8001e6c <RestartWakeupCounter+0x9c>)
 8001e4e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001e50:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <RestartWakeupCounter+0xa4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	4b07      	ldr	r3, [pc, #28]	@ (8001e74 <RestartWakeupCounter+0xa4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e5e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001e60:	f3af 8000 	nop.w
  return ;
 8001e64:	bf00      	nop
}
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000280 	.word	0x20000280
 8001e70:	20000285 	.word	0x20000285
 8001e74:	20000320 	.word	0x20000320
 8001e78:	58000800 	.word	0x58000800
 8001e7c:	40002800 	.word	0x40002800

08001e80 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001e86:	4b45      	ldr	r3, [pc, #276]	@ (8001f9c <RescheduleTimerList+0x11c>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e92:	d107      	bne.n	8001ea4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001e94:	bf00      	nop
 8001e96:	4b42      	ldr	r3, [pc, #264]	@ (8001fa0 <RescheduleTimerList+0x120>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f8      	bne.n	8001e96 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ea4:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa0 <RescheduleTimerList+0x120>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa0 <RescheduleTimerList+0x120>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eb2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa4 <RescheduleTimerList+0x124>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001eba:	7bfa      	ldrb	r2, [r7, #15]
 8001ebc:	493a      	ldr	r1, [pc, #232]	@ (8001fa8 <RescheduleTimerList+0x128>)
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3308      	adds	r3, #8
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001ece:	f7ff ff3f 	bl	8001d50 <ReturnTimeElapsed>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d205      	bcs.n	8001eea <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001ee2:	4b32      	ldr	r3, [pc, #200]	@ (8001fac <RescheduleTimerList+0x12c>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
 8001ee8:	e04d      	b.n	8001f86 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	4a30      	ldr	r2, [pc, #192]	@ (8001fb0 <RescheduleTimerList+0x130>)
 8001eee:	8812      	ldrh	r2, [r2, #0]
 8001ef0:	b292      	uxth	r2, r2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d906      	bls.n	8001f0a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001efc:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb0 <RescheduleTimerList+0x130>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001f02:	4b2a      	ldr	r3, [pc, #168]	@ (8001fac <RescheduleTimerList+0x12c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	e03d      	b.n	8001f86 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f14:	4b25      	ldr	r3, [pc, #148]	@ (8001fac <RescheduleTimerList+0x12c>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f1a:	e034      	b.n	8001f86 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	4922      	ldr	r1, [pc, #136]	@ (8001fa8 <RescheduleTimerList+0x128>)
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	440b      	add	r3, r1
 8001f2a:	3308      	adds	r3, #8
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d20a      	bcs.n	8001f4a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	491c      	ldr	r1, [pc, #112]	@ (8001fa8 <RescheduleTimerList+0x128>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	3308      	adds	r3, #8
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	e013      	b.n	8001f72 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	4916      	ldr	r1, [pc, #88]	@ (8001fa8 <RescheduleTimerList+0x128>)
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	440b      	add	r3, r1
 8001f58:	3308      	adds	r3, #8
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	1ac9      	subs	r1, r1, r3
 8001f62:	4811      	ldr	r0, [pc, #68]	@ (8001fa8 <RescheduleTimerList+0x128>)
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4403      	add	r3, r0
 8001f6e:	3308      	adds	r3, #8
 8001f70:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001f72:	7bfa      	ldrb	r2, [r7, #15]
 8001f74:	490c      	ldr	r1, [pc, #48]	@ (8001fa8 <RescheduleTimerList+0x128>)
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	3315      	adds	r3, #21
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	2b06      	cmp	r3, #6
 8001f8a:	d1c7      	bne.n	8001f1c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001f8c:	89bb      	ldrh	r3, [r7, #12]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff1e 	bl	8001dd0 <RestartWakeupCounter>

  return ;
 8001f94:	bf00      	nop
}
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40002800 	.word	0x40002800
 8001fa0:	20000320 	.word	0x20000320
 8001fa4:	2000027c 	.word	0x2000027c
 8001fa8:	200001ec 	.word	0x200001ec
 8001fac:	20000284 	.word	0x20000284
 8001fb0:	2000028a 	.word	0x2000028a

08001fb4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	@ 0x28
 8001fb8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fba:	f3ef 8310 	mrs	r3, PRIMASK
 8001fbe:	617b      	str	r3, [r7, #20]
  return(result);
 8001fc0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc4:	b672      	cpsid	i
}
 8001fc6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fc8:	4b59      	ldr	r3, [pc, #356]	@ (8002130 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	22ca      	movs	r2, #202	@ 0xca
 8001fce:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fd0:	4b57      	ldr	r3, [pc, #348]	@ (8002130 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2253      	movs	r2, #83	@ 0x53
 8001fd6:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001fd8:	4b55      	ldr	r3, [pc, #340]	@ (8002130 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	4b54      	ldr	r3, [pc, #336]	@ (8002130 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fe6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001fe8:	4b52      	ldr	r3, [pc, #328]	@ (8002134 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001ff0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ff4:	4950      	ldr	r1, [pc, #320]	@ (8002138 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	440b      	add	r3, r1
 8002000:	330c      	adds	r3, #12
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d16e      	bne.n	80020e8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800200a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800200e:	494a      	ldr	r1, [pc, #296]	@ (8002138 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800201e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002022:	4945      	ldr	r1, [pc, #276]	@ (8002138 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	3310      	adds	r3, #16
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002034:	4b41      	ldr	r3, [pc, #260]	@ (800213c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d04c      	beq.n	80020d8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800203e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002042:	493d      	ldr	r1, [pc, #244]	@ (8002138 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	440b      	add	r3, r1
 800204e:	330d      	adds	r3, #13
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d124      	bne.n	80020a2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002058:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800205c:	2101      	movs	r1, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fdf2 	bl	8001c48 <UnlinkTimer>
 8002064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002066:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f383 8810 	msr	PRIMASK, r3
}
 800206e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002070:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002074:	4930      	ldr	r1, [pc, #192]	@ (8002138 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	3304      	adds	r3, #4
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f9b8 	bl	8002400 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002090:	4b27      	ldr	r3, [pc, #156]	@ (8002130 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	22ca      	movs	r2, #202	@ 0xca
 8002096:	625a      	str	r2, [r3, #36]	@ 0x24
 8002098:	4b25      	ldr	r3, [pc, #148]	@ (8002130 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2253      	movs	r2, #83	@ 0x53
 800209e:	625a      	str	r2, [r3, #36]	@ 0x24
 80020a0:	e012      	b.n	80020c8 <HW_TS_RTC_Wakeup_Handler+0x114>
 80020a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f383 8810 	msr	PRIMASK, r3
}
 80020ac:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80020ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f920 	bl	80022f8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002130 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	22ca      	movs	r2, #202	@ 0xca
 80020be:	625a      	str	r2, [r3, #36]	@ 0x24
 80020c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2253      	movs	r2, #83	@ 0x53
 80020c6:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80020c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	4619      	mov	r1, r3
 80020d0:	69b8      	ldr	r0, [r7, #24]
 80020d2:	f000 fa1b 	bl	800250c <HW_TS_RTC_Int_AppNot>
 80020d6:	e022      	b.n	800211e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80020d8:	f7ff fed2 	bl	8001e80 <RescheduleTimerList>
 80020dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f383 8810 	msr	PRIMASK, r3
}
 80020e6:	e01a      	b.n	800211e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80020e8:	bf00      	nop
 80020ea:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f8      	beq.n	80020ea <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80020f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002130 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002108:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800210a:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800210c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f383 8810 	msr	PRIMASK, r3
}
 800211c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800211e:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	22ff      	movs	r2, #255	@ 0xff
 8002124:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002126:	bf00      	nop
}
 8002128:	3728      	adds	r7, #40	@ 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000320 	.word	0x20000320
 8002134:	2000027c 	.word	0x2000027c
 8002138:	200001ec 	.word	0x200001ec
 800213c:	20000284 	.word	0x20000284
 8002140:	58000800 	.word	0x58000800

08002144 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002150:	4b5e      	ldr	r3, [pc, #376]	@ (80022cc <HW_TS_Init+0x188>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	22ca      	movs	r2, #202	@ 0xca
 8002156:	625a      	str	r2, [r3, #36]	@ 0x24
 8002158:	4b5c      	ldr	r3, [pc, #368]	@ (80022cc <HW_TS_Init+0x188>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2253      	movs	r2, #83	@ 0x53
 800215e:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002160:	4b5b      	ldr	r3, [pc, #364]	@ (80022d0 <HW_TS_Init+0x18c>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a5a      	ldr	r2, [pc, #360]	@ (80022d0 <HW_TS_Init+0x18c>)
 8002166:	f043 0320 	orr.w	r3, r3, #32
 800216a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800216c:	4b58      	ldr	r3, [pc, #352]	@ (80022d0 <HW_TS_Init+0x18c>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	b2db      	uxtb	r3, r3
 8002178:	f1c3 0304 	rsb	r3, r3, #4
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4b55      	ldr	r3, [pc, #340]	@ (80022d4 <HW_TS_Init+0x190>)
 8002180:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002182:	4b53      	ldr	r3, [pc, #332]	@ (80022d0 <HW_TS_Init+0x18c>)
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800218a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800218e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	fa92 f2a2 	rbit	r2, r2
 8002196:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	2a00      	cmp	r2, #0
 80021a0:	d101      	bne.n	80021a6 <HW_TS_Init+0x62>
  {
    return 32U;
 80021a2:	2220      	movs	r2, #32
 80021a4:	e003      	b.n	80021ae <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	fab2 f282 	clz	r2, r2
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	40d3      	lsrs	r3, r2
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	3301      	adds	r3, #1
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b48      	ldr	r3, [pc, #288]	@ (80022d8 <HW_TS_Init+0x194>)
 80021b8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80021ba:	4b45      	ldr	r3, [pc, #276]	@ (80022d0 <HW_TS_Init+0x18c>)
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	4b44      	ldr	r3, [pc, #272]	@ (80022dc <HW_TS_Init+0x198>)
 80021cc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80021ce:	4b43      	ldr	r3, [pc, #268]	@ (80022dc <HW_TS_Init+0x198>)
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	4a40      	ldr	r2, [pc, #256]	@ (80022d8 <HW_TS_Init+0x194>)
 80021d6:	7812      	ldrb	r2, [r2, #0]
 80021d8:	fb02 f303 	mul.w	r3, r2, r3
 80021dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80021e0:	4a3c      	ldr	r2, [pc, #240]	@ (80022d4 <HW_TS_Init+0x190>)
 80021e2:	7812      	ldrb	r2, [r2, #0]
 80021e4:	40d3      	lsrs	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d904      	bls.n	80021fc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80021f2:	4b3b      	ldr	r3, [pc, #236]	@ (80022e0 <HW_TS_Init+0x19c>)
 80021f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021f8:	801a      	strh	r2, [r3, #0]
 80021fa:	e003      	b.n	8002204 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	4b37      	ldr	r3, [pc, #220]	@ (80022e0 <HW_TS_Init+0x19c>)
 8002202:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002204:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002208:	f7ff fb9c 	bl	8001944 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800220c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002210:	f7ff fb84 	bl	800191c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d13d      	bne.n	8002296 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800221a:	4b32      	ldr	r3, [pc, #200]	@ (80022e4 <HW_TS_Init+0x1a0>)
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002220:	4b31      	ldr	r3, [pc, #196]	@ (80022e8 <HW_TS_Init+0x1a4>)
 8002222:	f04f 32ff 	mov.w	r2, #4294967295
 8002226:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002228:	2300      	movs	r3, #0
 800222a:	77fb      	strb	r3, [r7, #31]
 800222c:	e00c      	b.n	8002248 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800222e:	7ffa      	ldrb	r2, [r7, #31]
 8002230:	492e      	ldr	r1, [pc, #184]	@ (80022ec <HW_TS_Init+0x1a8>)
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	440b      	add	r3, r1
 800223c:	330c      	adds	r3, #12
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002242:	7ffb      	ldrb	r3, [r7, #31]
 8002244:	3301      	adds	r3, #1
 8002246:	77fb      	strb	r3, [r7, #31]
 8002248:	7ffb      	ldrb	r3, [r7, #31]
 800224a:	2b05      	cmp	r3, #5
 800224c:	d9ef      	bls.n	800222e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800224e:	4b28      	ldr	r3, [pc, #160]	@ (80022f0 <HW_TS_Init+0x1ac>)
 8002250:	2206      	movs	r2, #6
 8002252:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002254:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <HW_TS_Init+0x188>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	4b1c      	ldr	r3, [pc, #112]	@ (80022cc <HW_TS_Init+0x188>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002262:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002264:	4b19      	ldr	r3, [pc, #100]	@ (80022cc <HW_TS_Init+0x188>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	4b17      	ldr	r3, [pc, #92]	@ (80022cc <HW_TS_Init+0x188>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002274:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002276:	4b1f      	ldr	r3, [pc, #124]	@ (80022f4 <HW_TS_Init+0x1b0>)
 8002278:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800227c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800227e:	2003      	movs	r0, #3
 8002280:	f001 f965 	bl	800354e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002284:	4b11      	ldr	r3, [pc, #68]	@ (80022cc <HW_TS_Init+0x188>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	4b10      	ldr	r3, [pc, #64]	@ (80022cc <HW_TS_Init+0x188>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	e009      	b.n	80022aa <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002296:	4b0d      	ldr	r3, [pc, #52]	@ (80022cc <HW_TS_Init+0x188>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f001 f944 	bl	8003532 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80022aa:	4b08      	ldr	r3, [pc, #32]	@ (80022cc <HW_TS_Init+0x188>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	22ff      	movs	r2, #255	@ 0xff
 80022b0:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80022b2:	2200      	movs	r2, #0
 80022b4:	2103      	movs	r1, #3
 80022b6:	2003      	movs	r0, #3
 80022b8:	f001 f8f9 	bl	80034ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022bc:	2003      	movs	r0, #3
 80022be:	f001 f910 	bl	80034e2 <HAL_NVIC_EnableIRQ>

  return;
 80022c2:	bf00      	nop
}
 80022c4:	3720      	adds	r7, #32
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000320 	.word	0x20000320
 80022d0:	40002800 	.word	0x40002800
 80022d4:	20000285 	.word	0x20000285
 80022d8:	20000286 	.word	0x20000286
 80022dc:	20000288 	.word	0x20000288
 80022e0:	2000028a 	.word	0x2000028a
 80022e4:	20000284 	.word	0x20000284
 80022e8:	20000280 	.word	0x20000280
 80022ec:	200001ec 	.word	0x200001ec
 80022f0:	2000027c 	.word	0x2000027c
 80022f4:	58000800 	.word	0x58000800

080022f8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002302:	f3ef 8310 	mrs	r3, PRIMASK
 8002306:	60fb      	str	r3, [r7, #12]
  return(result);
 8002308:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800230a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800230c:	b672      	cpsid	i
}
 800230e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002310:	2003      	movs	r0, #3
 8002312:	f001 f8f4 	bl	80034fe <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002316:	4b34      	ldr	r3, [pc, #208]	@ (80023e8 <HW_TS_Stop+0xf0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	22ca      	movs	r2, #202	@ 0xca
 800231c:	625a      	str	r2, [r3, #36]	@ 0x24
 800231e:	4b32      	ldr	r3, [pc, #200]	@ (80023e8 <HW_TS_Stop+0xf0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2253      	movs	r2, #83	@ 0x53
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002326:	79fa      	ldrb	r2, [r7, #7]
 8002328:	4930      	ldr	r1, [pc, #192]	@ (80023ec <HW_TS_Stop+0xf4>)
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	330c      	adds	r3, #12
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d142      	bne.n	80023c4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fc80 	bl	8001c48 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002348:	4b29      	ldr	r3, [pc, #164]	@ (80023f0 <HW_TS_Stop+0xf8>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800234e:	7cfb      	ldrb	r3, [r7, #19]
 8002350:	2b06      	cmp	r3, #6
 8002352:	d12f      	bne.n	80023b4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002354:	4b27      	ldr	r3, [pc, #156]	@ (80023f4 <HW_TS_Stop+0xfc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002360:	d107      	bne.n	8002372 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002362:	bf00      	nop
 8002364:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <HW_TS_Stop+0xf0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f8      	bne.n	8002364 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002372:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <HW_TS_Stop+0xf0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	4b1b      	ldr	r3, [pc, #108]	@ (80023e8 <HW_TS_Stop+0xf0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002380:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002382:	bf00      	nop
 8002384:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <HW_TS_Stop+0xf0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f8      	beq.n	8002384 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002392:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <HW_TS_Stop+0xf0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <HW_TS_Stop+0xf0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80023a2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80023a4:	4b14      	ldr	r3, [pc, #80]	@ (80023f8 <HW_TS_Stop+0x100>)
 80023a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80023aa:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80023ac:	2003      	movs	r0, #3
 80023ae:	f001 f8ce 	bl	800354e <HAL_NVIC_ClearPendingIRQ>
 80023b2:	e007      	b.n	80023c4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80023b4:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <HW_TS_Stop+0x104>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	7cfa      	ldrb	r2, [r7, #19]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80023c0:	f7ff fd5e 	bl	8001e80 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023c4:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <HW_TS_Stop+0xf0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	22ff      	movs	r2, #255	@ 0xff
 80023ca:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023cc:	2003      	movs	r0, #3
 80023ce:	f001 f888 	bl	80034e2 <HAL_NVIC_EnableIRQ>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f383 8810 	msr	PRIMASK, r3
}
 80023dc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80023de:	bf00      	nop
}
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000320 	.word	0x20000320
 80023ec:	200001ec 	.word	0x200001ec
 80023f0:	2000027c 	.word	0x2000027c
 80023f4:	40002800 	.word	0x40002800
 80023f8:	58000800 	.word	0x58000800
 80023fc:	2000027d 	.word	0x2000027d

08002400 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800240c:	79fa      	ldrb	r2, [r7, #7]
 800240e:	493b      	ldr	r1, [pc, #236]	@ (80024fc <HW_TS_Start+0xfc>)
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	330c      	adds	r3, #12
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d103      	bne.n	800242c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff66 	bl	80022f8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800242c:	f3ef 8310 	mrs	r3, PRIMASK
 8002430:	60fb      	str	r3, [r7, #12]
  return(result);
 8002432:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002434:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002436:	b672      	cpsid	i
}
 8002438:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800243a:	2003      	movs	r0, #3
 800243c:	f001 f85f 	bl	80034fe <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002440:	4b2f      	ldr	r3, [pc, #188]	@ (8002500 <HW_TS_Start+0x100>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	22ca      	movs	r2, #202	@ 0xca
 8002446:	625a      	str	r2, [r3, #36]	@ 0x24
 8002448:	4b2d      	ldr	r3, [pc, #180]	@ (8002500 <HW_TS_Start+0x100>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2253      	movs	r2, #83	@ 0x53
 800244e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002450:	79fa      	ldrb	r2, [r7, #7]
 8002452:	492a      	ldr	r1, [pc, #168]	@ (80024fc <HW_TS_Start+0xfc>)
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	440b      	add	r3, r1
 800245e:	330c      	adds	r3, #12
 8002460:	2202      	movs	r2, #2
 8002462:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002464:	79fa      	ldrb	r2, [r7, #7]
 8002466:	4925      	ldr	r1, [pc, #148]	@ (80024fc <HW_TS_Start+0xfc>)
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	3308      	adds	r3, #8
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002478:	79fa      	ldrb	r2, [r7, #7]
 800247a:	4920      	ldr	r1, [pc, #128]	@ (80024fc <HW_TS_Start+0xfc>)
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	3304      	adds	r3, #4
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fb30 	bl	8001af4 <linkTimer>
 8002494:	4603      	mov	r3, r0
 8002496:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002498:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <HW_TS_Start+0x104>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800249e:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <HW_TS_Start+0x108>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	7c7a      	ldrb	r2, [r7, #17]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d002      	beq.n	80024b0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80024aa:	f7ff fce9 	bl	8001e80 <RescheduleTimerList>
 80024ae:	e013      	b.n	80024d8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80024b0:	79fa      	ldrb	r2, [r7, #7]
 80024b2:	4912      	ldr	r1, [pc, #72]	@ (80024fc <HW_TS_Start+0xfc>)
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	440b      	add	r3, r1
 80024be:	3308      	adds	r3, #8
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	8a7b      	ldrh	r3, [r7, #18]
 80024c4:	79fa      	ldrb	r2, [r7, #7]
 80024c6:	1ac9      	subs	r1, r1, r3
 80024c8:	480c      	ldr	r0, [pc, #48]	@ (80024fc <HW_TS_Start+0xfc>)
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4403      	add	r3, r0
 80024d4:	3308      	adds	r3, #8
 80024d6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024d8:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <HW_TS_Start+0x100>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	22ff      	movs	r2, #255	@ 0xff
 80024de:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80024e0:	2003      	movs	r0, #3
 80024e2:	f000 fffe 	bl	80034e2 <HAL_NVIC_EnableIRQ>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f383 8810 	msr	PRIMASK, r3
}
 80024f0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80024f2:	bf00      	nop
}
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200001ec 	.word	0x200001ec
 8002500:	20000320 	.word	0x20000320
 8002504:	2000027c 	.word	0x2000027c
 8002508:	2000027d 	.word	0x2000027d

0800250c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	460b      	mov	r3, r1
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4798      	blx	r3

  return;
 800251e:	bf00      	nop
}
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	4613      	mov	r3, r2
 8002538:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800253e:	2300      	movs	r3, #0
 8002540:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10e      	bne.n	8002566 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002548:	4a17      	ldr	r2, [pc, #92]	@ (80025a8 <HW_UART_Transmit_DMA+0x80>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800254e:	4b17      	ldr	r3, [pc, #92]	@ (80025ac <HW_UART_Transmit_DMA+0x84>)
 8002550:	4a17      	ldr	r2, [pc, #92]	@ (80025b0 <HW_UART_Transmit_DMA+0x88>)
 8002552:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002554:	89bb      	ldrh	r3, [r7, #12]
 8002556:	461a      	mov	r2, r3
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	4814      	ldr	r0, [pc, #80]	@ (80025ac <HW_UART_Transmit_DMA+0x84>)
 800255c:	f005 ffb6 	bl	80084cc <HAL_UART_Transmit_DMA>
 8002560:	4603      	mov	r3, r0
 8002562:	75fb      	strb	r3, [r7, #23]
            break;
 8002564:	e000      	b.n	8002568 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002566:	bf00      	nop
    }

    switch (hal_status)
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d816      	bhi.n	800259c <HW_UART_Transmit_DMA+0x74>
 800256e:	a201      	add	r2, pc, #4	@ (adr r2, 8002574 <HW_UART_Transmit_DMA+0x4c>)
 8002570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002574:	08002585 	.word	0x08002585
 8002578:	0800258b 	.word	0x0800258b
 800257c:	08002591 	.word	0x08002591
 8002580:	08002597 	.word	0x08002597
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002584:	2300      	movs	r3, #0
 8002586:	75bb      	strb	r3, [r7, #22]
            break;
 8002588:	e009      	b.n	800259e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800258a:	2301      	movs	r3, #1
 800258c:	75bb      	strb	r3, [r7, #22]
            break;
 800258e:	e006      	b.n	800259e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002590:	2302      	movs	r3, #2
 8002592:	75bb      	strb	r3, [r7, #22]
            break;
 8002594:	e003      	b.n	800259e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002596:	2303      	movs	r3, #3
 8002598:	75bb      	strb	r3, [r7, #22]
            break;
 800259a:	e000      	b.n	800259e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 800259c:	bf00      	nop
    }

    return hw_status;
 800259e:	7dbb      	ldrb	r3, [r7, #22]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	2000028c 	.word	0x2000028c
 80025ac:	200003ac 	.word	0x200003ac
 80025b0:	40013800 	.word	0x40013800

080025b4 <LL_AHB2_GRP1_EnableClock>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80025bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80025cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4013      	ands	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025d8:	68fb      	ldr	r3, [r7, #12]
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80025ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025f2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80025fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002602:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4013      	ands	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800260a:	68fb      	ldr	r3, [r7, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800261c:	4b1b      	ldr	r3, [pc, #108]	@ (800268c <MX_I2C1_Init+0x74>)
 800261e:	4a1c      	ldr	r2, [pc, #112]	@ (8002690 <MX_I2C1_Init+0x78>)
 8002620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8002622:	4b1a      	ldr	r3, [pc, #104]	@ (800268c <MX_I2C1_Init+0x74>)
 8002624:	4a1b      	ldr	r2, [pc, #108]	@ (8002694 <MX_I2C1_Init+0x7c>)
 8002626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002628:	4b18      	ldr	r3, [pc, #96]	@ (800268c <MX_I2C1_Init+0x74>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800262e:	4b17      	ldr	r3, [pc, #92]	@ (800268c <MX_I2C1_Init+0x74>)
 8002630:	2201      	movs	r2, #1
 8002632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002634:	4b15      	ldr	r3, [pc, #84]	@ (800268c <MX_I2C1_Init+0x74>)
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800263a:	4b14      	ldr	r3, [pc, #80]	@ (800268c <MX_I2C1_Init+0x74>)
 800263c:	2200      	movs	r2, #0
 800263e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002640:	4b12      	ldr	r3, [pc, #72]	@ (800268c <MX_I2C1_Init+0x74>)
 8002642:	2200      	movs	r2, #0
 8002644:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002646:	4b11      	ldr	r3, [pc, #68]	@ (800268c <MX_I2C1_Init+0x74>)
 8002648:	2200      	movs	r2, #0
 800264a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800264c:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <MX_I2C1_Init+0x74>)
 800264e:	2200      	movs	r2, #0
 8002650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002652:	480e      	ldr	r0, [pc, #56]	@ (800268c <MX_I2C1_Init+0x74>)
 8002654:	f001 fb5c 	bl	8003d10 <HAL_I2C_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800265e:	f000 fa77 	bl	8002b50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002662:	2100      	movs	r1, #0
 8002664:	4809      	ldr	r0, [pc, #36]	@ (800268c <MX_I2C1_Init+0x74>)
 8002666:	f001 fbee 	bl	8003e46 <HAL_I2CEx_ConfigAnalogFilter>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002670:	f000 fa6e 	bl	8002b50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002674:	2100      	movs	r1, #0
 8002676:	4805      	ldr	r0, [pc, #20]	@ (800268c <MX_I2C1_Init+0x74>)
 8002678:	f001 fc30 	bl	8003edc <HAL_I2CEx_ConfigDigitalFilter>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002682:	f000 fa65 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000290 	.word	0x20000290
 8002690:	40005400 	.word	0x40005400
 8002694:	00b07cb4 	.word	0x00b07cb4

08002698 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b09c      	sub	sp, #112	@ 0x70
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	2250      	movs	r2, #80	@ 0x50
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f00f ff1b 	bl	80124f4 <memset>
  if(i2cHandle->Instance==I2C1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a17      	ldr	r2, [pc, #92]	@ (8002720 <HAL_I2C_MspInit+0x88>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d126      	bne.n	8002716 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026c8:	2304      	movs	r3, #4
 80026ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80026cc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026d2:	f107 030c 	add.w	r3, r7, #12
 80026d6:	4618      	mov	r0, r3
 80026d8:	f004 fcf4 	bl	80070c4 <HAL_RCCEx_PeriphCLKConfig>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80026e2:	f000 fa35 	bl	8002b50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e6:	2002      	movs	r0, #2
 80026e8:	f7ff ff64 	bl	80025b4 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80026f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026f2:	2312      	movs	r3, #18
 80026f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026fe:	2304      	movs	r3, #4
 8002700:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002702:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002706:	4619      	mov	r1, r3
 8002708:	4806      	ldr	r0, [pc, #24]	@ (8002724 <HAL_I2C_MspInit+0x8c>)
 800270a:	f001 f955 	bl	80039b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800270e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002712:	f7ff ff68 	bl	80025e6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002716:	bf00      	nop
 8002718:	3770      	adds	r7, #112	@ 0x70
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40005400 	.word	0x40005400
 8002724:	48000400 	.word	0x48000400

08002728 <LL_AHB3_GRP1_EnableClock>:
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002736:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4313      	orrs	r3, r2
 800273e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002740:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002744:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800274c:	68fb      	ldr	r3, [r7, #12]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
	...

0800275c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <MX_IPCC_Init+0x20>)
 8002762:	4a07      	ldr	r2, [pc, #28]	@ (8002780 <MX_IPCC_Init+0x24>)
 8002764:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002766:	4805      	ldr	r0, [pc, #20]	@ (800277c <MX_IPCC_Init+0x20>)
 8002768:	f001 fc04 	bl	8003f74 <HAL_IPCC_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002772:	f000 f9ed 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200002e4 	.word	0x200002e4
 8002780:	58000c00 	.word	0x58000c00

08002784 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0d      	ldr	r2, [pc, #52]	@ (80027c8 <HAL_IPCC_MspInit+0x44>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d113      	bne.n	80027be <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800279a:	f7ff ffc5 	bl	8002728 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	202c      	movs	r0, #44	@ 0x2c
 80027a4:	f000 fe83 	bl	80034ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80027a8:	202c      	movs	r0, #44	@ 0x2c
 80027aa:	f000 fe9a 	bl	80034e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	202d      	movs	r0, #45	@ 0x2d
 80027b4:	f000 fe7b 	bl	80034ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80027b8:	202d      	movs	r0, #45	@ 0x2d
 80027ba:	f000 fe92 	bl	80034e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	58000c00 	.word	0x58000c00

080027cc <LL_RCC_LSE_SetDriveCapability>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80027d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027dc:	f023 0218 	bic.w	r2, r3, #24
 80027e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(const HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_RLR_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	3220      	adds	r2, #32
 8002808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800280c:	4a05      	ldr	r2, [pc, #20]	@ (8002824 <LL_HSEM_1StepLock+0x2c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d001      	beq.n	8002816 <LL_HSEM_1StepLock+0x1e>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <LL_HSEM_1StepLock+0x20>
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	80000400 	.word	0x80000400

08002828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b09c      	sub	sp, #112	@ 0x70
 800282c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800282e:	f000 fc71 	bl	8003114 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002832:	f7fe fcc1 	bl	80011b8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */
  //printf("another hello\n");
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002836:	f000 f8df 	bl	80029f8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800283a:	f000 f95d 	bl	8002af8 <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800283e:	f7ff ff8d 	bl	800275c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002842:	f7ff f823 	bl	800188c <MX_GPIO_Init>
  MX_DMA_Init();
 8002846:	f7fe fff6 	bl	8001836 <MX_DMA_Init>
  MX_I2C1_Init();
 800284a:	f7ff fee5 	bl	8002618 <MX_I2C1_Init>
  MX_RTC_Init();
 800284e:	f000 f9b7 	bl	8002bc0 <MX_RTC_Init>
  MX_SPI1_Init();
 8002852:	f000 fa4f 	bl	8002cf4 <MX_SPI1_Init>
  MX_USB_Device_Init();
 8002856:	f00e fc3b 	bl	80110d0 <MX_USB_Device_Init>
  MX_RF_Init();
 800285a:	f000 f97f 	bl	8002b5c <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  //PA9 temp1 data ready
    //PA4 temp1 cs
    STM32_MAX31856 temp1 = STM32_MAX31856(&hspi1, GPIOA, GPIO_PIN_4);
 800285e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8002862:	2310      	movs	r3, #16
 8002864:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8002868:	4960      	ldr	r1, [pc, #384]	@ (80029ec <main+0x1c4>)
 800286a:	f7fe f8af 	bl	80009cc <_ZN14STM32_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
    STM32_MAX31856 temp2 = STM32_MAX31856(&hspi1, GPIOA, GPIO_PIN_8);
 800286e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002872:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002876:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800287a:	495c      	ldr	r1, [pc, #368]	@ (80029ec <main+0x1c4>)
 800287c:	f7fe f8a6 	bl	80009cc <_ZN14STM32_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>

    if(!temp1.begin()){
 8002880:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe f8db 	bl	8000a40 <_ZN14STM32_MAX318565beginEv>
 800288a:	4603      	mov	r3, r0
 800288c:	f083 0301 	eor.w	r3, r3, #1
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <main+0x76>
  	  // breakpoint
  	  while(1) HAL_Delay(100);
 8002896:	2064      	movs	r0, #100	@ 0x64
 8002898:	f7fe ff5e 	bl	8001758 <HAL_Delay>
 800289c:	e7fb      	b.n	8002896 <main+0x6e>
    }

    if(!temp2.begin()){
 800289e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe f8cc 	bl	8000a40 <_ZN14STM32_MAX318565beginEv>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f083 0301 	eor.w	r3, r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <main+0x94>
  	  // breakpoint
  	  while(1) HAL_Delay(100);
 80028b4:	2064      	movs	r0, #100	@ 0x64
 80028b6:	f7fe ff4f 	bl	8001758 <HAL_Delay>
 80028ba:	e7fb      	b.n	80028b4 <main+0x8c>
    }

    temp1.setThermocoupleType(MAX31856_TCTYPE_K);
 80028bc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80028c0:	2103      	movs	r1, #3
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe f916 	bl	8000af4 <_ZN14STM32_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>
    temp2.setThermocoupleType(MAX31856_TCTYPE_K);
 80028c8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80028cc:	2103      	movs	r1, #3
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe f910 	bl	8000af4 <_ZN14STM32_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>

    uint8_t type = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    switch (temp1.getThermocoupleType())
 80028da:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe f929 	bl	8000b36 <_ZN14STM32_MAX3185619getThermocoupleTypeEv>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b0c      	cmp	r3, #12
 80028e8:	d844      	bhi.n	8002974 <main+0x14c>
 80028ea:	a201      	add	r2, pc, #4	@ (adr r2, 80028f0 <main+0xc8>)
 80028ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f0:	08002925 	.word	0x08002925
 80028f4:	0800292d 	.word	0x0800292d
 80028f8:	08002935 	.word	0x08002935
 80028fc:	0800293d 	.word	0x0800293d
 8002900:	08002945 	.word	0x08002945
 8002904:	0800294d 	.word	0x0800294d
 8002908:	08002955 	.word	0x08002955
 800290c:	0800295d 	.word	0x0800295d
 8002910:	08002965 	.word	0x08002965
 8002914:	08002975 	.word	0x08002975
 8002918:	08002975 	.word	0x08002975
 800291c:	08002975 	.word	0x08002975
 8002920:	0800296d 	.word	0x0800296d
    {
    case MAX31856_TCTYPE_B:
        type = 1;
 8002924:	2301      	movs	r3, #1
 8002926:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800292a:	e027      	b.n	800297c <main+0x154>
    case MAX31856_TCTYPE_E:
        type = 2;
 800292c:	2302      	movs	r3, #2
 800292e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 8002932:	e023      	b.n	800297c <main+0x154>
    case MAX31856_TCTYPE_J:
        type = 3;
 8002934:	2303      	movs	r3, #3
 8002936:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800293a:	e01f      	b.n	800297c <main+0x154>
    case MAX31856_TCTYPE_K:
        type = 4;
 800293c:	2304      	movs	r3, #4
 800293e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 8002942:	e01b      	b.n	800297c <main+0x154>
    case MAX31856_TCTYPE_N:
        type = 5;
 8002944:	2305      	movs	r3, #5
 8002946:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800294a:	e017      	b.n	800297c <main+0x154>
    case MAX31856_TCTYPE_R:
        type = 6;
 800294c:	2306      	movs	r3, #6
 800294e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 8002952:	e013      	b.n	800297c <main+0x154>
    case MAX31856_TCTYPE_S:
        type = 7;
 8002954:	2307      	movs	r3, #7
 8002956:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800295a:	e00f      	b.n	800297c <main+0x154>
    case MAX31856_TCTYPE_T:
        type = 8;
 800295c:	2308      	movs	r3, #8
 800295e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 8002962:	e00b      	b.n	800297c <main+0x154>
    case MAX31856_VMODE_G8:
        type = 9;
 8002964:	2309      	movs	r3, #9
 8002966:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800296a:	e007      	b.n	800297c <main+0x154>
    case MAX31856_VMODE_G32:
        type = 10;
 800296c:	230a      	movs	r3, #10
 800296e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 8002972:	e003      	b.n	800297c <main+0x154>
    default:
        type = 11;
 8002974:	230b      	movs	r3, #11
 8002976:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800297a:	bf00      	nop
    }

    printf("hello world\n");
 800297c:	481c      	ldr	r0, [pc, #112]	@ (80029f0 <main+0x1c8>)
 800297e:	f00f fca3 	bl	80122c8 <puts>

    temp1.setConversionMode(MAX31856_CONTINUOUS);
 8002982:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002986:	2102      	movs	r1, #2
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe f885 	bl	8000a98 <_ZN14STM32_MAX3185617setConversionModeE26max31856_conversion_mode_t>
    temp2.setConversionMode(MAX31856_CONTINUOUS);
 800298e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002992:	2102      	movs	r1, #2
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe f87f 	bl	8000a98 <_ZN14STM32_MAX3185617setConversionModeE26max31856_conversion_mode_t>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800299a:	f7fe fc1b 	bl	80011d4 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */

    while (1)
    {

  	  HAL_Delay(100);
 800299e:	2064      	movs	r0, #100	@ 0x64
 80029a0:	f7fe feda 	bl	8001758 <HAL_Delay>
  	char buf[64];
  	int32_t t1 = temp1.readThermocoupleTemperature();
 80029a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe f912 	bl	8000bd2 <_ZN14STM32_MAX3185627readThermocoupleTemperatureEv>
 80029ae:	6638      	str	r0, [r7, #96]	@ 0x60
  	int32_t t2 = temp2.readThermocoupleTemperature();
 80029b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe f90c 	bl	8000bd2 <_ZN14STM32_MAX3185627readThermocoupleTemperatureEv>
 80029ba:	65f8      	str	r0, [r7, #92]	@ 0x5c
  	snprintf(buf, sizeof(buf), "T1: %ld C, T2: %ld C\r\n", t1, t2);
 80029bc:	1d38      	adds	r0, r7, #4
 80029be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029c4:	4a0b      	ldr	r2, [pc, #44]	@ (80029f4 <main+0x1cc>)
 80029c6:	2140      	movs	r1, #64	@ 0x40
 80029c8:	f00f fc86 	bl	80122d8 <sniprintf>
  	CDC_Transmit_FS((uint8_t*)buf, strlen(buf));
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fd fbd6 	bl	8000180 <strlen>
 80029d4:	4603      	mov	r3, r0
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f00e fc35 	bl	801124c <CDC_Transmit_FS>



      /* USER CODE END WHILE */
    MX_APPE_Process();
 80029e2:	f7fe fede 	bl	80017a2 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
  }
 80029e6:	bf00      	nop
 80029e8:	e7d9      	b.n	800299e <main+0x176>
 80029ea:	bf00      	nop
 80029ec:	20000344 	.word	0x20000344
 80029f0:	080137b4 	.word	0x080137b4
 80029f4:	080137c0 	.word	0x080137c0

080029f8 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
extern "C" {
void SystemClock_Config(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b09a      	sub	sp, #104	@ 0x68
 80029fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029fe:	f107 0320 	add.w	r3, r7, #32
 8002a02:	2248      	movs	r2, #72	@ 0x48
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f00f fd74 	bl	80124f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	60da      	str	r2, [r3, #12]
 8002a18:	611a      	str	r2, [r3, #16]
 8002a1a:	615a      	str	r2, [r3, #20]
 8002a1c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a2c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8002a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f023 0303 	bic.w	r3, r3, #3
 8002a38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a42:	f003 f81f 	bl	8005a84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8002a46:	2010      	movs	r0, #16
 8002a48:	f7ff fec0 	bl	80027cc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a4c:	4b29      	ldr	r3, [pc, #164]	@ (8002af4 <SystemClock_Config+0xfc>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a54:	4a27      	ldr	r2, [pc, #156]	@ (8002af4 <SystemClock_Config+0xfc>)
 8002a56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b25      	ldr	r3, [pc, #148]	@ (8002af4 <SystemClock_Config+0xfc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002a68:	2327      	movs	r3, #39	@ 0x27
 8002a6a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a72:	2301      	movs	r3, #1
 8002a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a80:	2340      	movs	r3, #64	@ 0x40
 8002a82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002a84:	2300      	movs	r3, #0
 8002a86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002a88:	2360      	movs	r3, #96	@ 0x60
 8002a8a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a90:	f107 0320 	add.w	r3, r7, #32
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 fb81 	bl	800619c <HAL_RCC_OscConfig>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002aaa:	f000 f851 	bl	8002b50 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002aae:	236f      	movs	r3, #111	@ 0x6f
 8002ab0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2101      	movs	r1, #1
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 fed8 	bl	8006884 <HAL_RCC_ClockConfig>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bf14      	ite	ne
 8002ada:	2301      	movne	r3, #1
 8002adc:	2300      	moveq	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8002ae4:	f000 f834 	bl	8002b50 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002ae8:	f004 fc62 	bl	80073b0 <HAL_RCCEx_EnableMSIPLLMode>
	}
 8002aec:	bf00      	nop
 8002aee:	3768      	adds	r7, #104	@ 0x68
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	58000400 	.word	0x58000400

08002af8 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b094      	sub	sp, #80	@ 0x50
 8002afc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002afe:	463b      	mov	r3, r7
 8002b00:	2250      	movs	r2, #80	@ 0x50
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f00f fcf5 	bl	80124f4 <memset>

  LL_HSEM_1StepLock(HSEM, 5);
 8002b0a:	2105      	movs	r1, #5
 8002b0c:	480f      	ldr	r0, [pc, #60]	@ (8002b4c <_Z24PeriphCommonClock_Configv+0x54>)
 8002b0e:	f7ff fe73 	bl	80027f8 <LL_HSEM_1StepLock>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002b12:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002b16:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002b18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b1c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002b22:	2310      	movs	r3, #16
 8002b24:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b26:	463b      	mov	r3, r7
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f004 facb 	bl	80070c4 <HAL_RCCEx_PeriphCLKConfig>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf14      	ite	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	2300      	moveq	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <_Z24PeriphCommonClock_Configv+0x4a>
  {
    Error_Handler();
 8002b3e:	f000 f807 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002b42:	bf00      	nop
 8002b44:	3750      	adds	r7, #80	@ 0x50
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	58001400 	.word	0x58001400

08002b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b54:	b672      	cpsid	i
}
 8002b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <Error_Handler+0x8>

08002b5c <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_RCC_EnableRTC>:
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002b82:	bf00      	nop
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_APB1_GRP1_EnableClock>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4013      	ands	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002bc4:	4b16      	ldr	r3, [pc, #88]	@ (8002c20 <MX_RTC_Init+0x60>)
 8002bc6:	4a17      	ldr	r2, [pc, #92]	@ (8002c24 <MX_RTC_Init+0x64>)
 8002bc8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002bca:	4b15      	ldr	r3, [pc, #84]	@ (8002c20 <MX_RTC_Init+0x60>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002bd0:	4b13      	ldr	r3, [pc, #76]	@ (8002c20 <MX_RTC_Init+0x60>)
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002bd6:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <MX_RTC_Init+0x60>)
 8002bd8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002bdc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002bde:	4b10      	ldr	r3, [pc, #64]	@ (8002c20 <MX_RTC_Init+0x60>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002be4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <MX_RTC_Init+0x60>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002bea:	4b0d      	ldr	r3, [pc, #52]	@ (8002c20 <MX_RTC_Init+0x60>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <MX_RTC_Init+0x60>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002bf6:	480a      	ldr	r0, [pc, #40]	@ (8002c20 <MX_RTC_Init+0x60>)
 8002bf8:	f004 fcf1 	bl	80075de <HAL_RTC_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002c02:	f7ff ffa5 	bl	8002b50 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4805      	ldr	r0, [pc, #20]	@ (8002c20 <MX_RTC_Init+0x60>)
 8002c0c:	f004 fdf6 	bl	80077fc <HAL_RTCEx_SetWakeUpTimer_IT>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002c16:	f7ff ff9b 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000320 	.word	0x20000320
 8002c24:	40002800 	.word	0x40002800

08002c28 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b096      	sub	sp, #88	@ 0x58
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c30:	f107 0308 	add.w	r3, r7, #8
 8002c34:	2250      	movs	r2, #80	@ 0x50
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f00f fc5b 	bl	80124f4 <memset>
  if(rtcHandle->Instance==RTC)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a12      	ldr	r2, [pc, #72]	@ (8002c8c <HAL_RTC_MspInit+0x64>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d11d      	bne.n	8002c84 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c4c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c52:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c54:	f107 0308 	add.w	r3, r7, #8
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f004 fa33 	bl	80070c4 <HAL_RCCEx_PeriphCLKConfig>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002c64:	f7ff ff74 	bl	8002b50 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c68:	f7ff ff7f 	bl	8002b6a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c6c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002c70:	f7ff ff8c 	bl	8002b8c <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002c74:	2200      	movs	r2, #0
 8002c76:	2100      	movs	r1, #0
 8002c78:	2003      	movs	r0, #3
 8002c7a:	f000 fc18 	bl	80034ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002c7e:	2003      	movs	r0, #3
 8002c80:	f000 fc2f 	bl	80034e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002c84:	bf00      	nop
 8002c86:	3758      	adds	r7, #88	@ 0x58
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40002800 	.word	0x40002800

08002c90 <LL_AHB2_GRP1_EnableClock>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8002d6c <MX_SPI1_Init+0x78>)
 8002cfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002d00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d06:	4b18      	ldr	r3, [pc, #96]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d0c:	4b16      	ldr	r3, [pc, #88]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002d0e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d12:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d14:	4b14      	ldr	r3, [pc, #80]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d1a:	4b13      	ldr	r3, [pc, #76]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d20:	4b11      	ldr	r3, [pc, #68]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002d22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d26:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002d28:	4b0f      	ldr	r3, [pc, #60]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d40:	4b09      	ldr	r3, [pc, #36]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002d42:	2207      	movs	r2, #7
 8002d44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d46:	4b08      	ldr	r3, [pc, #32]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d52:	4805      	ldr	r0, [pc, #20]	@ (8002d68 <MX_SPI1_Init+0x74>)
 8002d54:	f004 fe1e 	bl	8007994 <HAL_SPI_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d5e:	f7ff fef7 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d62:	bf00      	nop
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000344 	.word	0x20000344
 8002d6c:	40013000 	.word	0x40013000

08002d70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0f      	ldr	r2, [pc, #60]	@ (8002dcc <HAL_SPI_MspInit+0x5c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d117      	bne.n	8002dc2 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d92:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002d96:	f7ff ff94 	bl	8002cc2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f7ff ff78 	bl	8002c90 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002da0:	23e0      	movs	r3, #224	@ 0xe0
 8002da2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002db0:	2305      	movs	r3, #5
 8002db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	4619      	mov	r1, r3
 8002dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dbe:	f000 fdfb 	bl	80039b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	3720      	adds	r7, #32
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40013000 	.word	0x40013000

08002dd0 <LL_AHB3_GRP1_EnableClock>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ddc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002dde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4013      	ands	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002df4:	68fb      	ldr	r3, [r7, #12]
}
 8002df6:	bf00      	nop
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002e06:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e0a:	f7ff ffe1 	bl	8002dd0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2100      	movs	r1, #0
 8002e12:	202e      	movs	r0, #46	@ 0x2e
 8002e14:	f000 fb4b 	bl	80034ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002e18:	202e      	movs	r0, #46	@ 0x2e
 8002e1a:	f000 fb62 	bl	80034e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e26:	bf00      	nop
 8002e28:	e7fd      	b.n	8002e26 <NMI_Handler+0x4>

08002e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e2e:	bf00      	nop
 8002e30:	e7fd      	b.n	8002e2e <HardFault_Handler+0x4>

08002e32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e36:	bf00      	nop
 8002e38:	e7fd      	b.n	8002e36 <MemManage_Handler+0x4>

08002e3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e3e:	bf00      	nop
 8002e40:	e7fd      	b.n	8002e3e <BusFault_Handler+0x4>

08002e42 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e46:	bf00      	nop
 8002e48:	e7fd      	b.n	8002e46 <UsageFault_Handler+0x4>

08002e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e78:	f000 f9a6 	bl	80031c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002e84:	f7ff f896 	bl	8001fb4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002e88:	bf00      	nop
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e90:	4802      	ldr	r0, [pc, #8]	@ (8002e9c <DMA1_Channel1_IRQHandler+0x10>)
 8002e92:	f000 fca3 	bl	80037dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000478 	.word	0x20000478

08002ea0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002ea4:	4802      	ldr	r0, [pc, #8]	@ (8002eb0 <USB_LP_IRQHandler+0x10>)
 8002ea6:	f001 f9db 	bl	8004260 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20001aec 	.word	0x20001aec

08002eb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002eb8:	4802      	ldr	r0, [pc, #8]	@ (8002ec4 <USART1_IRQHandler+0x10>)
 8002eba:	f005 fb87 	bl	80085cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	200003ac 	.word	0x200003ac

08002ec8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002ecc:	f00d ff46 	bl	8010d5c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002ed8:	f00d ff76 	bl	8010dc8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002edc:	bf00      	nop
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002ee4:	f000 fef0 	bl	8003cc8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}

08002eec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	e00a      	b.n	8002f14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002efe:	f3af 8000 	nop.w
 8002f02:	4601      	mov	r1, r0
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	60ba      	str	r2, [r7, #8]
 8002f0a:	b2ca      	uxtb	r2, r1
 8002f0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	3301      	adds	r3, #1
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	dbf0      	blt.n	8002efe <_read+0x12>
  }

  return len;
 8002f1c:	687b      	ldr	r3, [r7, #4]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f4e:	605a      	str	r2, [r3, #4]
  return 0;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <_isatty>:

int _isatty(int file)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f66:	2301      	movs	r3, #1
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f98:	4a14      	ldr	r2, [pc, #80]	@ (8002fec <_sbrk+0x5c>)
 8002f9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ff0 <_sbrk+0x60>)
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fa4:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <_sbrk+0x64>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d102      	bne.n	8002fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fac:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <_sbrk+0x64>)
 8002fae:	4a12      	ldr	r2, [pc, #72]	@ (8002ff8 <_sbrk+0x68>)
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <_sbrk+0x64>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d207      	bcs.n	8002fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc0:	f00f fafc 	bl	80125bc <__errno>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
 8002fce:	e009      	b.n	8002fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd0:	4b08      	ldr	r3, [pc, #32]	@ (8002ff4 <_sbrk+0x64>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fd6:	4b07      	ldr	r3, [pc, #28]	@ (8002ff4 <_sbrk+0x64>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	4a05      	ldr	r2, [pc, #20]	@ (8002ff4 <_sbrk+0x64>)
 8002fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20030000 	.word	0x20030000
 8002ff0:	00000800 	.word	0x00000800
 8002ff4:	200003a8 	.word	0x200003a8
 8002ff8:	200021d8 	.word	0x200021d8

08002ffc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003000:	4b24      	ldr	r3, [pc, #144]	@ (8003094 <SystemInit+0x98>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003006:	4a23      	ldr	r2, [pc, #140]	@ (8003094 <SystemInit+0x98>)
 8003008:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800300c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003024:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003028:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800302a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003034:	4b18      	ldr	r3, [pc, #96]	@ (8003098 <SystemInit+0x9c>)
 8003036:	4013      	ands	r3, r2
 8003038:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800303a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800303e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003042:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003046:	f023 0305 	bic.w	r3, r3, #5
 800304a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003052:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003056:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800305a:	f023 0301 	bic.w	r3, r3, #1
 800305e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003066:	4a0d      	ldr	r2, [pc, #52]	@ (800309c <SystemInit+0xa0>)
 8003068:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800306a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306e:	4a0b      	ldr	r2, [pc, #44]	@ (800309c <SystemInit+0xa0>)
 8003070:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003072:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800307c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003080:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003082:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003086:	2200      	movs	r2, #0
 8003088:	619a      	str	r2, [r3, #24]
}
 800308a:	bf00      	nop
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00
 8003098:	faf6fefb 	.word	0xfaf6fefb
 800309c:	22041000 	.word	0x22041000

080030a0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80030a0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030a2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030a4:	3304      	adds	r3, #4

080030a6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030a6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030a8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80030aa:	d3f9      	bcc.n	80030a0 <CopyDataInit>
  bx lr
 80030ac:	4770      	bx	lr

080030ae <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80030ae:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80030b0:	3004      	adds	r0, #4

080030b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80030b2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80030b4:	d3fb      	bcc.n	80030ae <FillZerobss>
  bx lr
 80030b6:	4770      	bx	lr

080030b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030b8:	480c      	ldr	r0, [pc, #48]	@ (80030ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80030bc:	f7ff ff9e 	bl	8002ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80030c0:	480b      	ldr	r0, [pc, #44]	@ (80030f0 <LoopForever+0x6>)
 80030c2:	490c      	ldr	r1, [pc, #48]	@ (80030f4 <LoopForever+0xa>)
 80030c4:	4a0c      	ldr	r2, [pc, #48]	@ (80030f8 <LoopForever+0xe>)
 80030c6:	2300      	movs	r3, #0
 80030c8:	f7ff ffed 	bl	80030a6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80030cc:	480b      	ldr	r0, [pc, #44]	@ (80030fc <LoopForever+0x12>)
 80030ce:	490c      	ldr	r1, [pc, #48]	@ (8003100 <LoopForever+0x16>)
 80030d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003104 <LoopForever+0x1a>)
 80030d2:	2300      	movs	r3, #0
 80030d4:	f7ff ffe7 	bl	80030a6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80030d8:	480b      	ldr	r0, [pc, #44]	@ (8003108 <LoopForever+0x1e>)
 80030da:	490c      	ldr	r1, [pc, #48]	@ (800310c <LoopForever+0x22>)
 80030dc:	2300      	movs	r3, #0
 80030de:	f7ff ffe8 	bl	80030b2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80030e2:	f00f fa71 	bl	80125c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80030e6:	f7ff fb9f 	bl	8002828 <main>

080030ea <LoopForever>:

LoopForever:
  b LoopForever
 80030ea:	e7fe      	b.n	80030ea <LoopForever>
  ldr   r0, =_estack
 80030ec:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80030f0:	20000008 	.word	0x20000008
 80030f4:	20000184 	.word	0x20000184
 80030f8:	08014d1c 	.word	0x08014d1c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80030fc:	200301e4 	.word	0x200301e4
 8003100:	20030a67 	.word	0x20030a67
 8003104:	08014ede 	.word	0x08014ede
  INIT_BSS _sbss, _ebss
 8003108:	200001d0 	.word	0x200001d0
 800310c:	200021d4 	.word	0x200021d4

08003110 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003110:	e7fe      	b.n	8003110 <ADC1_IRQHandler>
	...

08003114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800311e:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <HAL_Init+0x3c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a0b      	ldr	r2, [pc, #44]	@ (8003150 <HAL_Init+0x3c>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003128:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800312a:	2003      	movs	r0, #3
 800312c:	f000 f9b4 	bl	8003498 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003130:	200f      	movs	r0, #15
 8003132:	f000 f80f 	bl	8003154 <HAL_InitTick>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	71fb      	strb	r3, [r7, #7]
 8003140:	e001      	b.n	8003146 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003142:	f7ff fe5e 	bl	8002e02 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003146:	79fb      	ldrb	r3, [r7, #7]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	58004000 	.word	0x58004000

08003154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003160:	4b17      	ldr	r3, [pc, #92]	@ (80031c0 <HAL_InitTick+0x6c>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d024      	beq.n	80031b2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003168:	f003 fd38 	bl	8006bdc <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b14      	ldr	r3, [pc, #80]	@ (80031c0 <HAL_InitTick+0x6c>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	4619      	mov	r1, r3
 8003174:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003178:	fbb3 f3f1 	udiv	r3, r3, r1
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	4618      	mov	r0, r3
 8003182:	f000 f9ca 	bl	800351a <HAL_SYSTICK_Config>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10f      	bne.n	80031ac <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b0f      	cmp	r3, #15
 8003190:	d809      	bhi.n	80031a6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003192:	2200      	movs	r2, #0
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	f04f 30ff 	mov.w	r0, #4294967295
 800319a:	f000 f988 	bl	80034ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800319e:	4a09      	ldr	r2, [pc, #36]	@ (80031c4 <HAL_InitTick+0x70>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	e007      	b.n	80031b6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	e004      	b.n	80031b6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
 80031b0:	e001      	b.n	80031b6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000010 	.word	0x20000010
 80031c4:	2000000c 	.word	0x2000000c

080031c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031cc:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <HAL_IncTick+0x20>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <HAL_IncTick+0x24>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4413      	add	r3, r2
 80031d8:	4a04      	ldr	r2, [pc, #16]	@ (80031ec <HAL_IncTick+0x24>)
 80031da:	6013      	str	r3, [r2, #0]
}
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000010 	.word	0x20000010
 80031ec:	200004d8 	.word	0x200004d8

080031f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return uwTick;
 80031f4:	4b03      	ldr	r3, [pc, #12]	@ (8003204 <HAL_GetTick+0x14>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	200004d8 	.word	0x200004d8

08003208 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800320c:	4b03      	ldr	r3, [pc, #12]	@ (800321c <HAL_GetTickPrio+0x14>)
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	2000000c 	.word	0x2000000c

08003220 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003224:	4b03      	ldr	r3, [pc, #12]	@ (8003234 <HAL_GetTickFreq+0x14>)
 8003226:	781b      	ldrb	r3, [r3, #0]
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000010 	.word	0x20000010

08003238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003248:	4b0c      	ldr	r3, [pc, #48]	@ (800327c <__NVIC_SetPriorityGrouping+0x44>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003254:	4013      	ands	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003260:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800326a:	4a04      	ldr	r2, [pc, #16]	@ (800327c <__NVIC_SetPriorityGrouping+0x44>)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	60d3      	str	r3, [r2, #12]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003284:	4b04      	ldr	r3, [pc, #16]	@ (8003298 <__NVIC_GetPriorityGrouping+0x18>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	0a1b      	lsrs	r3, r3, #8
 800328a:	f003 0307 	and.w	r3, r3, #7
}
 800328e:	4618      	mov	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	db0b      	blt.n	80032c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	f003 021f 	and.w	r2, r3, #31
 80032b4:	4907      	ldr	r1, [pc, #28]	@ (80032d4 <__NVIC_EnableIRQ+0x38>)
 80032b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2001      	movs	r0, #1
 80032be:	fa00 f202 	lsl.w	r2, r0, r2
 80032c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	e000e100 	.word	0xe000e100

080032d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	db12      	blt.n	8003310 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	f003 021f 	and.w	r2, r3, #31
 80032f0:	490a      	ldr	r1, [pc, #40]	@ (800331c <__NVIC_DisableIRQ+0x44>)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	2001      	movs	r0, #1
 80032fa:	fa00 f202 	lsl.w	r2, r0, r2
 80032fe:	3320      	adds	r3, #32
 8003300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003304:	f3bf 8f4f 	dsb	sy
}
 8003308:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800330a:	f3bf 8f6f 	isb	sy
}
 800330e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	e000e100 	.word	0xe000e100

08003320 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	2b00      	cmp	r3, #0
 8003330:	db0c      	blt.n	800334c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	f003 021f 	and.w	r2, r3, #31
 8003338:	4907      	ldr	r1, [pc, #28]	@ (8003358 <__NVIC_SetPendingIRQ+0x38>)
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	2001      	movs	r0, #1
 8003342:	fa00 f202 	lsl.w	r2, r0, r2
 8003346:	3340      	adds	r3, #64	@ 0x40
 8003348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000e100 	.word	0xe000e100

0800335c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	2b00      	cmp	r3, #0
 800336c:	db0c      	blt.n	8003388 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	f003 021f 	and.w	r2, r3, #31
 8003374:	4907      	ldr	r1, [pc, #28]	@ (8003394 <__NVIC_ClearPendingIRQ+0x38>)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2001      	movs	r0, #1
 800337e:	fa00 f202 	lsl.w	r2, r0, r2
 8003382:	3360      	adds	r3, #96	@ 0x60
 8003384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000e100 	.word	0xe000e100

08003398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	db0a      	blt.n	80033c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	490c      	ldr	r1, [pc, #48]	@ (80033e4 <__NVIC_SetPriority+0x4c>)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	0112      	lsls	r2, r2, #4
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	440b      	add	r3, r1
 80033bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c0:	e00a      	b.n	80033d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4908      	ldr	r1, [pc, #32]	@ (80033e8 <__NVIC_SetPriority+0x50>)
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	3b04      	subs	r3, #4
 80033d0:	0112      	lsls	r2, r2, #4
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	440b      	add	r3, r1
 80033d6:	761a      	strb	r2, [r3, #24]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000e100 	.word	0xe000e100
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	@ 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f1c3 0307 	rsb	r3, r3, #7
 8003406:	2b04      	cmp	r3, #4
 8003408:	bf28      	it	cs
 800340a:	2304      	movcs	r3, #4
 800340c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3304      	adds	r3, #4
 8003412:	2b06      	cmp	r3, #6
 8003414:	d902      	bls.n	800341c <NVIC_EncodePriority+0x30>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3b03      	subs	r3, #3
 800341a:	e000      	b.n	800341e <NVIC_EncodePriority+0x32>
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003420:	f04f 32ff 	mov.w	r2, #4294967295
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	401a      	ands	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003434:	f04f 31ff 	mov.w	r1, #4294967295
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa01 f303 	lsl.w	r3, r1, r3
 800343e:	43d9      	mvns	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003444:	4313      	orrs	r3, r2
         );
}
 8003446:	4618      	mov	r0, r3
 8003448:	3724      	adds	r7, #36	@ 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3b01      	subs	r3, #1
 8003460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003464:	d301      	bcc.n	800346a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003466:	2301      	movs	r3, #1
 8003468:	e00f      	b.n	800348a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346a:	4a0a      	ldr	r2, [pc, #40]	@ (8003494 <SysTick_Config+0x40>)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3b01      	subs	r3, #1
 8003470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003472:	210f      	movs	r1, #15
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	f7ff ff8e 	bl	8003398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800347c:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <SysTick_Config+0x40>)
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003482:	4b04      	ldr	r3, [pc, #16]	@ (8003494 <SysTick_Config+0x40>)
 8003484:	2207      	movs	r2, #7
 8003486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	e000e010 	.word	0xe000e010

08003498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff fec9 	bl	8003238 <__NVIC_SetPriorityGrouping>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b086      	sub	sp, #24
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034bc:	f7ff fee0 	bl	8003280 <__NVIC_GetPriorityGrouping>
 80034c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	6978      	ldr	r0, [r7, #20]
 80034c8:	f7ff ff90 	bl	80033ec <NVIC_EncodePriority>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff5f 	bl	8003398 <__NVIC_SetPriority>
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fed3 	bl	800329c <__NVIC_EnableIRQ>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	4603      	mov	r3, r0
 8003506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fee3 	bl	80032d8 <__NVIC_DisableIRQ>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff ff96 	bl	8003454 <SysTick_Config>
 8003528:	4603      	mov	r3, r0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	4603      	mov	r3, r0
 800353a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff feed 	bl	8003320 <__NVIC_SetPendingIRQ>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fefd 	bl	800335c <__NVIC_ClearPendingIRQ>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_DMA_Start_IT+0x20>
 8003586:	2302      	movs	r3, #2
 8003588:	e066      	b.n	8003658 <HAL_DMA_Start_IT+0xee>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d155      	bne.n	800364a <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2202      	movs	r2, #2
 80035a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f9b9 	bl	800393a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 020e 	orr.w	r2, r2, #14
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e00f      	b.n	8003602 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0204 	bic.w	r2, r2, #4
 80035f0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 020a 	orr.w	r2, r2, #10
 8003600:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800361e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003632:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003636:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	e005      	b.n	8003656 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003652:	2302      	movs	r3, #2
 8003654:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003656:	7dfb      	ldrb	r3, [r7, #23]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e04f      	b.n	8003712 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d008      	beq.n	8003690 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2204      	movs	r2, #4
 8003682:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e040      	b.n	8003712 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 020e 	bic.w	r2, r2, #14
 800369e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c4:	f003 021c 	and.w	r2, r3, #28
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	2101      	movs	r1, #1
 80036ce:	fa01 f202 	lsl.w	r2, r1, r2
 80036d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00c      	beq.n	8003700 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d005      	beq.n	8003742 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2204      	movs	r2, #4
 800373a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
 8003740:	e047      	b.n	80037d2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 020e 	bic.w	r2, r2, #14
 8003750:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800376c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003770:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003776:	f003 021c 	and.w	r2, r3, #28
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	2101      	movs	r1, #1
 8003780:	fa01 f202 	lsl.w	r2, r1, r2
 8003784:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800378e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00c      	beq.n	80037b2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	4798      	blx	r3
    }
  }
  return status;
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f8:	f003 031c 	and.w	r3, r3, #28
 80037fc:	2204      	movs	r2, #4
 80037fe:	409a      	lsls	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d026      	beq.n	8003856 <HAL_DMA_IRQHandler+0x7a>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b00      	cmp	r3, #0
 8003810:	d021      	beq.n	8003856 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0320 	and.w	r3, r3, #32
 800381c:	2b00      	cmp	r3, #0
 800381e:	d107      	bne.n	8003830 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0204 	bic.w	r2, r2, #4
 800382e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003834:	f003 021c 	and.w	r2, r3, #28
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	2104      	movs	r1, #4
 800383e:	fa01 f202 	lsl.w	r2, r1, r2
 8003842:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	2b00      	cmp	r3, #0
 800384a:	d071      	beq.n	8003930 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003854:	e06c      	b.n	8003930 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	f003 031c 	and.w	r3, r3, #28
 800385e:	2202      	movs	r2, #2
 8003860:	409a      	lsls	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d02e      	beq.n	80038c8 <HAL_DMA_IRQHandler+0xec>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d029      	beq.n	80038c8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10b      	bne.n	800389a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 020a 	bic.w	r2, r2, #10
 8003890:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389e:	f003 021c 	and.w	r2, r3, #28
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	2102      	movs	r1, #2
 80038a8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d038      	beq.n	8003930 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038c6:	e033      	b.n	8003930 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038cc:	f003 031c 	and.w	r3, r3, #28
 80038d0:	2208      	movs	r2, #8
 80038d2:	409a      	lsls	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d02a      	beq.n	8003932 <HAL_DMA_IRQHandler+0x156>
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d025      	beq.n	8003932 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 020e 	bic.w	r2, r2, #14
 80038f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fa:	f003 021c 	and.w	r2, r3, #28
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	2101      	movs	r1, #1
 8003904:	fa01 f202 	lsl.w	r2, r1, r2
 8003908:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003930:	bf00      	nop
 8003932:	bf00      	nop
}
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003950:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003962:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003968:	f003 021c 	and.w	r2, r3, #28
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f202 	lsl.w	r2, r1, r2
 8003976:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b10      	cmp	r3, #16
 8003986:	d108      	bne.n	800399a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003998:	e007      	b.n	80039aa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	60da      	str	r2, [r3, #12]
}
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b087      	sub	sp, #28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c6:	e14c      	b.n	8003c62 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	2101      	movs	r1, #1
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	fa01 f303 	lsl.w	r3, r1, r3
 80039d4:	4013      	ands	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 813e 	beq.w	8003c5c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d005      	beq.n	80039f8 <HAL_GPIO_Init+0x40>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d130      	bne.n	8003a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	2203      	movs	r2, #3
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a2e:	2201      	movs	r2, #1
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	f003 0201 	and.w	r2, r3, #1
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d017      	beq.n	8003a96 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	2203      	movs	r2, #3
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d123      	bne.n	8003aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	08da      	lsrs	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3208      	adds	r2, #8
 8003aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	220f      	movs	r2, #15
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	08da      	lsrs	r2, r3, #3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3208      	adds	r2, #8
 8003ae4:	6939      	ldr	r1, [r7, #16]
 8003ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	2203      	movs	r2, #3
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0203 	and.w	r2, r3, #3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8098 	beq.w	8003c5c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003b2c:	4a54      	ldr	r2, [pc, #336]	@ (8003c80 <HAL_GPIO_Init+0x2c8>)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	089b      	lsrs	r3, r3, #2
 8003b32:	3302      	adds	r3, #2
 8003b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	220f      	movs	r2, #15
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b56:	d019      	beq.n	8003b8c <HAL_GPIO_Init+0x1d4>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a4a      	ldr	r2, [pc, #296]	@ (8003c84 <HAL_GPIO_Init+0x2cc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d013      	beq.n	8003b88 <HAL_GPIO_Init+0x1d0>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a49      	ldr	r2, [pc, #292]	@ (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00d      	beq.n	8003b84 <HAL_GPIO_Init+0x1cc>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a48      	ldr	r2, [pc, #288]	@ (8003c8c <HAL_GPIO_Init+0x2d4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <HAL_GPIO_Init+0x1c8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a47      	ldr	r2, [pc, #284]	@ (8003c90 <HAL_GPIO_Init+0x2d8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d101      	bne.n	8003b7c <HAL_GPIO_Init+0x1c4>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	e008      	b.n	8003b8e <HAL_GPIO_Init+0x1d6>
 8003b7c:	2307      	movs	r3, #7
 8003b7e:	e006      	b.n	8003b8e <HAL_GPIO_Init+0x1d6>
 8003b80:	2303      	movs	r3, #3
 8003b82:	e004      	b.n	8003b8e <HAL_GPIO_Init+0x1d6>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e002      	b.n	8003b8e <HAL_GPIO_Init+0x1d6>
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e000      	b.n	8003b8e <HAL_GPIO_Init+0x1d6>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	f002 0203 	and.w	r2, r2, #3
 8003b94:	0092      	lsls	r2, r2, #2
 8003b96:	4093      	lsls	r3, r2
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b9e:	4938      	ldr	r1, [pc, #224]	@ (8003c80 <HAL_GPIO_Init+0x2c8>)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	089b      	lsrs	r3, r3, #2
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bac:	4b39      	ldr	r3, [pc, #228]	@ (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bd0:	4a30      	ldr	r2, [pc, #192]	@ (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003bd6:	4b2f      	ldr	r3, [pc, #188]	@ (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	43db      	mvns	r3, r3
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bfa:	4a26      	ldr	r2, [pc, #152]	@ (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c00:	4b24      	ldr	r3, [pc, #144]	@ (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c26:	4a1b      	ldr	r2, [pc, #108]	@ (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003c2e:	4b19      	ldr	r3, [pc, #100]	@ (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c54:	4a0f      	ldr	r2, [pc, #60]	@ (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f47f aeab 	bne.w	80039c8 <HAL_GPIO_Init+0x10>
  }
}
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
 8003c76:	371c      	adds	r7, #28
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	40010000 	.word	0x40010000
 8003c84:	48000400 	.word	0x48000400
 8003c88:	48000800 	.word	0x48000800
 8003c8c:	48000c00 	.word	0x48000c00
 8003c90:	48001000 	.word	0x48001000
 8003c94:	58000800 	.word	0x58000800

08003c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	807b      	strh	r3, [r7, #2]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ca8:	787b      	ldrb	r3, [r7, #1]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cb4:	e002      	b.n	8003cbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003cce:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <HAL_HSEM_IRQHandler+0x30>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003cd4:	4b08      	ldr	r3, [pc, #32]	@ (8003cf8 <HAL_HSEM_IRQHandler+0x30>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	4906      	ldr	r1, [pc, #24]	@ (8003cf8 <HAL_HSEM_IRQHandler+0x30>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003ce2:	4a05      	ldr	r2, [pc, #20]	@ (8003cf8 <HAL_HSEM_IRQHandler+0x30>)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f807 	bl	8003cfc <HAL_HSEM_FreeCallback>
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	58001500 	.word	0x58001500

08003cfc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e08d      	b.n	8003e3e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fe fcae 	bl	8002698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2224      	movs	r2, #36	@ 0x24
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0201 	bic.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d107      	bne.n	8003d8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	e006      	b.n	8003d98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003d96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d108      	bne.n	8003db2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	e007      	b.n	8003dc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003de4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69d9      	ldr	r1, [r3, #28]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d138      	bne.n	8003ece <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e032      	b.n	8003ed0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2224      	movs	r2, #36	@ 0x24
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e98:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6819      	ldr	r1, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0201 	orr.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e000      	b.n	8003ed0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
  }
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d139      	bne.n	8003f66 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e033      	b.n	8003f68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2224      	movs	r2, #36	@ 0x24
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003f2e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	021b      	lsls	r3, r3, #8
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d01e      	beq.n	8003fc4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003f86:	4b13      	ldr	r3, [pc, #76]	@ (8003fd4 <HAL_IPCC_Init+0x60>)
 8003f88:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d102      	bne.n	8003f9c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fe fbf4 	bl	8002784 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003f9c:	68b8      	ldr	r0, [r7, #8]
 8003f9e:	f000 f85b 	bl	8004058 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f82c 	bl	800400c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8003fc2:	e001      	b.n	8003fc8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	58000c00 	.word	0x58000c00

08003fd8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	e00f      	b.n	800403a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	4a0b      	ldr	r2, [pc, #44]	@ (8004050 <IPCC_SetDefaultCallbacks+0x44>)
 8004024:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3306      	adds	r3, #6
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	4a08      	ldr	r2, [pc, #32]	@ (8004054 <IPCC_SetDefaultCallbacks+0x48>)
 8004032:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b05      	cmp	r3, #5
 800403e:	d9ec      	bls.n	800401a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004040:	bf00      	nop
 8004042:	bf00      	nop
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	08003fd9 	.word	0x08003fd9
 8004054:	08003ff3 	.word	0x08003ff3

08004058 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800406c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	223f      	movs	r2, #63	@ 0x3f
 8004072:	609a      	str	r2, [r3, #8]
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e0c0      	b.n	8004214 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d106      	bne.n	80040ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f00d fa4a 	bl	8011540 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2203      	movs	r2, #3
 80040b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f004 ff7b 	bl	8008fb4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040be:	2300      	movs	r3, #0
 80040c0:	73fb      	strb	r3, [r7, #15]
 80040c2:	e03e      	b.n	8004142 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040c4:	7bfa      	ldrb	r2, [r7, #15]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	440b      	add	r3, r1
 80040d2:	3311      	adds	r3, #17
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80040d8:	7bfa      	ldrb	r2, [r7, #15]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	440b      	add	r3, r1
 80040e6:	3310      	adds	r3, #16
 80040e8:	7bfa      	ldrb	r2, [r7, #15]
 80040ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040ec:	7bfa      	ldrb	r2, [r7, #15]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	440b      	add	r3, r1
 80040fa:	3313      	adds	r3, #19
 80040fc:	2200      	movs	r2, #0
 80040fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004100:	7bfa      	ldrb	r2, [r7, #15]
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	440b      	add	r3, r1
 800410e:	3320      	adds	r3, #32
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004114:	7bfa      	ldrb	r2, [r7, #15]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	440b      	add	r3, r1
 8004122:	3324      	adds	r3, #36	@ 0x24
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	440b      	add	r3, r1
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	3301      	adds	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	791b      	ldrb	r3, [r3, #4]
 8004146:	7bfa      	ldrb	r2, [r7, #15]
 8004148:	429a      	cmp	r2, r3
 800414a:	d3bb      	bcc.n	80040c4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	e044      	b.n	80041dc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	440b      	add	r3, r1
 8004176:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800417a:	7bfa      	ldrb	r2, [r7, #15]
 800417c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800417e:	7bfa      	ldrb	r2, [r7, #15]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	4413      	add	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	440b      	add	r3, r1
 800418c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	440b      	add	r3, r1
 80041a2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	440b      	add	r3, r1
 80041b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80041c0:	7bfa      	ldrb	r2, [r7, #15]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	440b      	add	r3, r1
 80041ce:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	3301      	adds	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	791b      	ldrb	r3, [r3, #4]
 80041e0:	7bfa      	ldrb	r2, [r7, #15]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d3b5      	bcc.n	8004152 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3304      	adds	r3, #4
 80041ee:	e893 0006 	ldmia.w	r3, {r1, r2}
 80041f2:	f004 fefa 	bl	8008fea <USB_DevInit>

  hpcd->USB_Address = 0U;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	7a9b      	ldrb	r3, [r3, #10]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d102      	bne.n	8004212 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f001 fc0e 	bl	8005a2e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_PCD_Start+0x16>
 800422e:	2302      	movs	r3, #2
 8004230:	e012      	b.n	8004258 <HAL_PCD_Start+0x3c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f004 fea1 	bl	8008f86 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f006 fc7f 	bl	800ab4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f006 fc84 	bl	800ab7a <USB_ReadInterrupts>
 8004272:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fb06 	bl	8004890 <PCD_EP_ISR_Handler>

    return;
 8004284:	e110      	b.n	80044a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800428c:	2b00      	cmp	r3, #0
 800428e:	d013      	beq.n	80042b8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a2:	b292      	uxth	r2, r2
 80042a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f00d f9fc 	bl	80116a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80042ae:	2100      	movs	r1, #0
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f8fc 	bl	80044ae <HAL_PCD_SetAddress>

    return;
 80042b6:	e0f7      	b.n	80044a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80042d4:	b292      	uxth	r2, r2
 80042d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80042da:	e0e5      	b.n	80044a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00c      	beq.n	8004300 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042f8:	b292      	uxth	r2, r2
 80042fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80042fe:	e0d3      	b.n	80044a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d034      	beq.n	8004374 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004312:	b29a      	uxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0204 	bic.w	r2, r2, #4
 800431c:	b292      	uxth	r2, r2
 800431e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0208 	bic.w	r2, r2, #8
 8004334:	b292      	uxth	r2, r2
 8004336:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004340:	2b01      	cmp	r3, #1
 8004342:	d107      	bne.n	8004354 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800434c:	2100      	movs	r1, #0
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f00d fb9e 	bl	8011a90 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f00d f9df 	bl	8011718 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004362:	b29a      	uxth	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800436c:	b292      	uxth	r2, r2
 800436e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004372:	e099      	b.n	80044a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800437a:	2b00      	cmp	r3, #0
 800437c:	d027      	beq.n	80043ce <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004386:	b29a      	uxth	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f042 0208 	orr.w	r2, r2, #8
 8004390:	b292      	uxth	r2, r2
 8004392:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800439e:	b29a      	uxth	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043a8:	b292      	uxth	r2, r2
 80043aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0204 	orr.w	r2, r2, #4
 80043c0:	b292      	uxth	r2, r2
 80043c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f00d f98c 	bl	80116e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80043cc:	e06c      	b.n	80044a8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d040      	beq.n	800445a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043ea:	b292      	uxth	r2, r2
 80043ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d12b      	bne.n	8004452 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004402:	b29a      	uxth	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0204 	orr.w	r2, r2, #4
 800440c:	b292      	uxth	r2, r2
 800440e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800441a:	b29a      	uxth	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0208 	orr.w	r2, r2, #8
 8004424:	b292      	uxth	r2, r2
 8004426:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800443a:	b29b      	uxth	r3, r3
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004448:	2101      	movs	r1, #1
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f00d fb20 	bl	8011a90 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004450:	e02a      	b.n	80044a8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f00d f946 	bl	80116e4 <HAL_PCD_SuspendCallback>
    return;
 8004458:	e026      	b.n	80044a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00f      	beq.n	8004484 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800446c:	b29a      	uxth	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004476:	b292      	uxth	r2, r2
 8004478:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f00d f904 	bl	801168a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004482:	e011      	b.n	80044a8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004496:	b29a      	uxth	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044a0:	b292      	uxth	r2, r2
 80044a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80044a6:	bf00      	nop
  }
}
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	460b      	mov	r3, r1
 80044b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_PCD_SetAddress+0x1a>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e012      	b.n	80044ee <HAL_PCD_SetAddress+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	78fa      	ldrb	r2, [r7, #3]
 80044dc:	4611      	mov	r1, r2
 80044de:	4618      	mov	r0, r3
 80044e0:	f006 fb20 	bl	800ab24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	4608      	mov	r0, r1
 8004500:	4611      	mov	r1, r2
 8004502:	461a      	mov	r2, r3
 8004504:	4603      	mov	r3, r0
 8004506:	70fb      	strb	r3, [r7, #3]
 8004508:	460b      	mov	r3, r1
 800450a:	803b      	strh	r3, [r7, #0]
 800450c:	4613      	mov	r3, r2
 800450e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004518:	2b00      	cmp	r3, #0
 800451a:	da0e      	bge.n	800453a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	f003 0207 	and.w	r2, r3, #7
 8004522:	4613      	mov	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	3310      	adds	r3, #16
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	4413      	add	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	705a      	strb	r2, [r3, #1]
 8004538:	e00e      	b.n	8004558 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800453a:	78fb      	ldrb	r3, [r7, #3]
 800453c:	f003 0207 	and.w	r2, r3, #7
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	4413      	add	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	b2da      	uxtb	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004564:	883b      	ldrh	r3, [r7, #0]
 8004566:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	78ba      	ldrb	r2, [r7, #2]
 8004572:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004574:	78bb      	ldrb	r3, [r7, #2]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d102      	bne.n	8004580 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_PCD_EP_Open+0x98>
 800458a:	2302      	movs	r3, #2
 800458c:	e00e      	b.n	80045ac <HAL_PCD_EP_Open+0xb6>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	4618      	mov	r0, r3
 800459e:	f004 fd43 	bl	8009028 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80045aa:	7afb      	ldrb	r3, [r7, #11]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	da0e      	bge.n	80045e6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	f003 0207 	and.w	r2, r3, #7
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	3310      	adds	r3, #16
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	4413      	add	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	705a      	strb	r2, [r3, #1]
 80045e4:	e00e      	b.n	8004604 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	f003 0207 	and.w	r2, r3, #7
 80045ec:	4613      	mov	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	4413      	add	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	b2da      	uxtb	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_PCD_EP_Close+0x6a>
 800461a:	2302      	movs	r3, #2
 800461c:	e00e      	b.n	800463c <HAL_PCD_EP_Close+0x88>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68f9      	ldr	r1, [r7, #12]
 800462c:	4618      	mov	r0, r3
 800462e:	f005 f9e3 	bl	80099f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	460b      	mov	r3, r1
 8004652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004654:	7afb      	ldrb	r3, [r7, #11]
 8004656:	f003 0207 	and.w	r2, r3, #7
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4413      	add	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2200      	movs	r2, #0
 800467c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2200      	movs	r2, #0
 8004682:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004684:	7afb      	ldrb	r3, [r7, #11]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	b2da      	uxtb	r2, r3
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6979      	ldr	r1, [r7, #20]
 8004696:	4618      	mov	r0, r3
 8004698:	f005 fb9b 	bl	8009dd2 <USB_EPStartXfer>

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	460b      	mov	r3, r1
 80046b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80046b2:	78fb      	ldrb	r3, [r7, #3]
 80046b4:	f003 0207 	and.w	r2, r3, #7
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	440b      	add	r3, r1
 80046c4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80046c8:	681b      	ldr	r3, [r3, #0]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b086      	sub	sp, #24
 80046da:	af00      	add	r7, sp, #0
 80046dc:	60f8      	str	r0, [r7, #12]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	603b      	str	r3, [r7, #0]
 80046e2:	460b      	mov	r3, r1
 80046e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046e6:	7afb      	ldrb	r3, [r7, #11]
 80046e8:	f003 0207 	and.w	r2, r3, #7
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	3310      	adds	r3, #16
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2200      	movs	r2, #0
 800471a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2201      	movs	r2, #1
 8004720:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004722:	7afb      	ldrb	r3, [r7, #11]
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	b2da      	uxtb	r2, r3
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6979      	ldr	r1, [r7, #20]
 8004734:	4618      	mov	r0, r3
 8004736:	f005 fb4c 	bl	8009dd2 <USB_EPStartXfer>

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	7912      	ldrb	r2, [r2, #4]
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e03e      	b.n	80047e0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004766:	2b00      	cmp	r3, #0
 8004768:	da0e      	bge.n	8004788 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	f003 0207 	and.w	r2, r3, #7
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	3310      	adds	r3, #16
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	4413      	add	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	705a      	strb	r2, [r3, #1]
 8004786:	e00c      	b.n	80047a2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4413      	add	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047a8:	78fb      	ldrb	r3, [r7, #3]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_PCD_EP_SetStall+0x7e>
 80047be:	2302      	movs	r3, #2
 80047c0:	e00e      	b.n	80047e0 <HAL_PCD_EP_SetStall+0x9c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f006 f8ad 	bl	800a930 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	7912      	ldrb	r2, [r2, #4]
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e040      	b.n	8004888 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004806:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800480a:	2b00      	cmp	r3, #0
 800480c:	da0e      	bge.n	800482c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	f003 0207 	and.w	r2, r3, #7
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	3310      	adds	r3, #16
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	4413      	add	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2201      	movs	r2, #1
 8004828:	705a      	strb	r2, [r3, #1]
 800482a:	e00e      	b.n	800484a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800482c:	78fb      	ldrb	r3, [r7, #3]
 800482e:	f003 0207 	and.w	r2, r3, #7
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	4413      	add	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	b2da      	uxtb	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_PCD_EP_ClrStall+0x82>
 8004866:	2302      	movs	r3, #2
 8004868:	e00e      	b.n	8004888 <HAL_PCD_EP_ClrStall+0xa0>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	4618      	mov	r0, r3
 800487a:	f006 f8aa 	bl	800a9d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b092      	sub	sp, #72	@ 0x48
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004898:	e333      	b.n	8004f02 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048a2:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80048a4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 80048b0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f040 8108 	bne.w	8004aca <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80048ba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d14c      	bne.n	800495e <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80048d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048d4:	813b      	strh	r3, [r7, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	893b      	ldrh	r3, [r7, #8]
 80048dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3310      	adds	r3, #16
 80048ec:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4413      	add	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	4413      	add	r3, r2
 8004908:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004914:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004916:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004918:	695a      	ldr	r2, [r3, #20]
 800491a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	441a      	add	r2, r3
 8004920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004922:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004924:	2100      	movs	r1, #0
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f00c fe95 	bl	8011656 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	7b1b      	ldrb	r3, [r3, #12]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 82e5 	beq.w	8004f02 <PCD_EP_ISR_Handler+0x672>
 8004938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f040 82e0 	bne.w	8004f02 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	7b1b      	ldrb	r3, [r3, #12]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800494c:	b2da      	uxtb	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	731a      	strb	r2, [r3, #12]
 800495c:	e2d1      	b.n	8004f02 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004964:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800496e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004970:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004974:	2b00      	cmp	r3, #0
 8004976:	d032      	beq.n	80049de <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004980:	b29b      	uxth	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	4413      	add	r3, r2
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6812      	ldr	r2, [r2, #0]
 8004990:	4413      	add	r3, r2
 8004992:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800499c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800499e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80049aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80049ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049b0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f006 f934 	bl	800ac20 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29a      	uxth	r2, r3
 80049c0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80049c4:	4013      	ands	r3, r2
 80049c6:	817b      	strh	r3, [r7, #10]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	897a      	ldrh	r2, [r7, #10]
 80049ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049d2:	b292      	uxth	r2, r2
 80049d4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f00c fe10 	bl	80115fc <HAL_PCD_SetupStageCallback>
 80049dc:	e291      	b.n	8004f02 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80049de:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f280 828d 	bge.w	8004f02 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80049f4:	4013      	ands	r3, r2
 80049f6:	81fb      	strh	r3, [r7, #14]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	89fa      	ldrh	r2, [r7, #14]
 80049fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004a02:	b292      	uxth	r2, r2
 8004a04:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a2c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d019      	beq.n	8004a6a <PCD_EP_ISR_Handler+0x1da>
 8004a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d015      	beq.n	8004a6a <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a44:	6959      	ldr	r1, [r3, #20]
 8004a46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a48:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a4c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f006 f8e6 	bl	800ac20 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	441a      	add	r2, r3
 8004a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a60:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004a62:	2100      	movs	r1, #0
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f00c fddb 	bl	8011620 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004a72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004a74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f040 8242 	bne.w	8004f02 <PCD_EP_ISR_Handler+0x672>
 8004a7e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004a80:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a88:	f000 823b 	beq.w	8004f02 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a9c:	81bb      	strh	r3, [r7, #12]
 8004a9e:	89bb      	ldrh	r3, [r7, #12]
 8004aa0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004aa4:	81bb      	strh	r3, [r7, #12]
 8004aa6:	89bb      	ldrh	r3, [r7, #12]
 8004aa8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004aac:	81bb      	strh	r3, [r7, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	89bb      	ldrh	r3, [r7, #12]
 8004ab4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ab8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004abc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	8013      	strh	r3, [r2, #0]
 8004ac8:	e21b      	b.n	8004f02 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004adc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f280 80f1 	bge.w	8004cc8 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004afc:	4013      	ands	r3, r2
 8004afe:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004b10:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b14:	b292      	uxth	r2, r2
 8004b16:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004b18:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b30:	7b1b      	ldrb	r3, [r3, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d123      	bne.n	8004b7e <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	461a      	mov	r2, r3
 8004b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b5a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8004b5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 808b 	beq.w	8004c7e <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b6e:	6959      	ldr	r1, [r3, #20]
 8004b70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b72:	88da      	ldrh	r2, [r3, #6]
 8004b74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004b78:	f006 f852 	bl	800ac20 <USB_ReadPMA>
 8004b7c:	e07f      	b.n	8004c7e <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b80:	78db      	ldrb	r3, [r3, #3]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d109      	bne.n	8004b9a <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004b86:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 f9c6 	bl	8004f1e <HAL_PCD_EP_DB_Receive>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004b98:	e071      	b.n	8004c7e <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bb4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	441a      	add	r2, r3
 8004bc4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004bc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bd2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d022      	beq.n	8004c3a <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	4413      	add	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c18:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004c1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d02c      	beq.n	8004c7e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c2a:	6959      	ldr	r1, [r3, #20]
 8004c2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c2e:	891a      	ldrh	r2, [r3, #8]
 8004c30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004c34:	f005 fff4 	bl	800ac20 <USB_ReadPMA>
 8004c38:	e021      	b.n	8004c7e <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	4413      	add	r3, r2
 8004c54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c5e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004c62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c70:	6959      	ldr	r1, [r3, #20]
 8004c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c74:	895a      	ldrh	r2, [r3, #10]
 8004c76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004c7a:	f005 ffd1 	bl	800ac20 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004c86:	441a      	add	r2, r3
 8004c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c8a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004c8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004c94:	441a      	add	r2, r3
 8004c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c98:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004c9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <PCD_EP_ISR_Handler+0x41e>
 8004ca2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8004ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d206      	bcs.n	8004cbc <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f00c fcb3 	bl	8011620 <HAL_PCD_DataOutStageCallback>
 8004cba:	e005      	b.n	8004cc8 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f005 f885 	bl	8009dd2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004cc8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 8117 	beq.w	8004f02 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8004cd4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	3310      	adds	r3, #16
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d02:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	441a      	add	r2, r3
 8004d12:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d22:	78db      	ldrb	r3, [r3, #3]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	f040 80a1 	bne.w	8004e6c <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8004d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d32:	7b1b      	ldrb	r3, [r3, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8092 	beq.w	8004e5e <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d046      	beq.n	8004dd2 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d126      	bne.n	8004d9a <PCD_EP_ISR_Handler+0x50a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	4413      	add	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	00da      	lsls	r2, r3, #3
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	801a      	strh	r2, [r3, #0]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	801a      	strh	r2, [r3, #0]
 8004d98:	e061      	b.n	8004e5e <PCD_EP_ISR_Handler+0x5ce>
 8004d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d9c:	785b      	ldrb	r3, [r3, #1]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d15d      	bne.n	8004e5e <PCD_EP_ISR_Handler+0x5ce>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	4413      	add	r3, r2
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	00da      	lsls	r2, r3, #3
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	801a      	strh	r2, [r3, #0]
 8004dd0:	e045      	b.n	8004e5e <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d126      	bne.n	8004e2e <PCD_EP_ISR_Handler+0x59e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	4413      	add	r3, r2
 8004df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	00da      	lsls	r2, r3, #3
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	4413      	add	r3, r2
 8004e02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e06:	623b      	str	r3, [r7, #32]
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	801a      	strh	r2, [r3, #0]
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	801a      	strh	r2, [r3, #0]
 8004e2c:	e017      	b.n	8004e5e <PCD_EP_ISR_Handler+0x5ce>
 8004e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e30:	785b      	ldrb	r3, [r3, #1]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d113      	bne.n	8004e5e <PCD_EP_ISR_Handler+0x5ce>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e44:	4413      	add	r3, r2
 8004e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	00da      	lsls	r2, r3, #3
 8004e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e50:	4413      	add	r3, r2
 8004e52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	4619      	mov	r1, r3
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f00c fbf6 	bl	8011656 <HAL_PCD_DataInStageCallback>
 8004e6a:	e04a      	b.n	8004f02 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004e6c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d13f      	bne.n	8004ef6 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	4413      	add	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e9a:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8004e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e9e:	699a      	ldr	r2, [r3, #24]
 8004ea0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d906      	bls.n	8004eb4 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8004ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004eac:	1ad2      	subs	r2, r2, r3
 8004eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eb0:	619a      	str	r2, [r3, #24]
 8004eb2:	e002      	b.n	8004eba <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d106      	bne.n	8004ed0 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f00c fbc4 	bl	8011656 <HAL_PCD_DataInStageCallback>
 8004ece:	e018      	b.n	8004f02 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ed2:	695a      	ldr	r2, [r3, #20]
 8004ed4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004ed6:	441a      	add	r2, r3
 8004ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eda:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004edc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ede:	69da      	ldr	r2, [r3, #28]
 8004ee0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004ee2:	441a      	add	r2, r3
 8004ee4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ee6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f004 ff6f 	bl	8009dd2 <USB_EPStartXfer>
 8004ef4:	e005      	b.n	8004f02 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004ef6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f917 	bl	8005130 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	b21b      	sxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f6ff acc3 	blt.w	800489a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3748      	adds	r7, #72	@ 0x48
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b088      	sub	sp, #32
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f2c:	88fb      	ldrh	r3, [r7, #6]
 8004f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d07c      	beq.n	8005030 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	4413      	add	r3, r2
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	6812      	ldr	r2, [r2, #0]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f5a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	8b7b      	ldrh	r3, [r7, #26]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d306      	bcc.n	8004f74 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	8b7b      	ldrh	r3, [r7, #26]
 8004f6c:	1ad2      	subs	r2, r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	619a      	str	r2, [r3, #24]
 8004f72:	e002      	b.n	8004f7a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2200      	movs	r2, #0
 8004f78:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d123      	bne.n	8004fca <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f9c:	833b      	strh	r3, [r7, #24]
 8004f9e:	8b3b      	ldrh	r3, [r7, #24]
 8004fa0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004fa4:	833b      	strh	r3, [r7, #24]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	441a      	add	r2, r3
 8004fb4:	8b3b      	ldrh	r3, [r7, #24]
 8004fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004fca:	88fb      	ldrh	r3, [r7, #6]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01f      	beq.n	8005014 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fee:	82fb      	strh	r3, [r7, #22]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	441a      	add	r2, r3
 8004ffe:	8afb      	ldrh	r3, [r7, #22]
 8005000:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005004:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005008:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800500c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005010:	b29b      	uxth	r3, r3
 8005012:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005014:	8b7b      	ldrh	r3, [r7, #26]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 8085 	beq.w	8005126 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	6959      	ldr	r1, [r3, #20]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	891a      	ldrh	r2, [r3, #8]
 8005028:	8b7b      	ldrh	r3, [r7, #26]
 800502a:	f005 fdf9 	bl	800ac20 <USB_ReadPMA>
 800502e:	e07a      	b.n	8005126 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005038:	b29b      	uxth	r3, r3
 800503a:	461a      	mov	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4413      	add	r3, r2
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	4413      	add	r3, r2
 800504a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005054:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	8b7b      	ldrh	r3, [r7, #26]
 800505c:	429a      	cmp	r2, r3
 800505e:	d306      	bcc.n	800506e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	699a      	ldr	r2, [r3, #24]
 8005064:	8b7b      	ldrh	r3, [r7, #26]
 8005066:	1ad2      	subs	r2, r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	619a      	str	r2, [r3, #24]
 800506c:	e002      	b.n	8005074 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2200      	movs	r2, #0
 8005072:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d123      	bne.n	80050c4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	461a      	mov	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005096:	83fb      	strh	r3, [r7, #30]
 8005098:	8bfb      	ldrh	r3, [r7, #30]
 800509a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800509e:	83fb      	strh	r3, [r7, #30]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	441a      	add	r2, r3
 80050ae:	8bfb      	ldrh	r3, [r7, #30]
 80050b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d11f      	bne.n	800510e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050e8:	83bb      	strh	r3, [r7, #28]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	441a      	add	r2, r3
 80050f8:	8bbb      	ldrh	r3, [r7, #28]
 80050fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005106:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800510a:	b29b      	uxth	r3, r3
 800510c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800510e:	8b7b      	ldrh	r3, [r7, #26]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d008      	beq.n	8005126 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	6959      	ldr	r1, [r3, #20]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	895a      	ldrh	r2, [r3, #10]
 8005120:	8b7b      	ldrh	r3, [r7, #26]
 8005122:	f005 fd7d 	bl	800ac20 <USB_ReadPMA>
    }
  }

  return count;
 8005126:	8b7b      	ldrh	r3, [r7, #26]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b0a6      	sub	sp, #152	@ 0x98
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	4613      	mov	r3, r2
 800513c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800513e:	88fb      	ldrh	r3, [r7, #6]
 8005140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 81f7 	beq.w	8005538 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005152:	b29b      	uxth	r3, r3
 8005154:	461a      	mov	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	4413      	add	r3, r2
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	6812      	ldr	r2, [r2, #0]
 8005162:	4413      	add	r3, r2
 8005164:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800516e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800517a:	429a      	cmp	r2, r3
 800517c:	d907      	bls.n	800518e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	699a      	ldr	r2, [r3, #24]
 8005182:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005186:	1ad2      	subs	r2, r2, r3
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	619a      	str	r2, [r3, #24]
 800518c:	e002      	b.n	8005194 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2200      	movs	r2, #0
 8005192:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f040 80e1 	bne.w	8005360 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d126      	bne.n	80051f4 <HAL_PCD_EP_DB_Transmit+0xc4>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ba:	4413      	add	r3, r2
 80051bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	00da      	lsls	r2, r3, #3
 80051c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c6:	4413      	add	r3, r2
 80051c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d8:	b29a      	uxth	r2, r3
 80051da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	e01a      	b.n	800522a <HAL_PCD_EP_DB_Transmit+0xfa>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d116      	bne.n	800522a <HAL_PCD_EP_DB_Transmit+0xfa>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800520a:	b29b      	uxth	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005210:	4413      	add	r3, r2
 8005212:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	00da      	lsls	r2, r3, #3
 800521a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521c:	4413      	add	r3, r2
 800521e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005222:	637b      	str	r3, [r7, #52]	@ 0x34
 8005224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005226:	2200      	movs	r2, #0
 8005228:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	785b      	ldrb	r3, [r3, #1]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d126      	bne.n	8005286 <HAL_PCD_EP_DB_Transmit+0x156>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	623b      	str	r3, [r7, #32]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005246:	b29b      	uxth	r3, r3
 8005248:	461a      	mov	r2, r3
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	4413      	add	r3, r2
 800524e:	623b      	str	r3, [r7, #32]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	00da      	lsls	r2, r3, #3
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	4413      	add	r3, r2
 800525a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800526a:	b29a      	uxth	r2, r3
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	801a      	strh	r2, [r3, #0]
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800527a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800527e:	b29a      	uxth	r2, r3
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	801a      	strh	r2, [r3, #0]
 8005284:	e017      	b.n	80052b6 <HAL_PCD_EP_DB_Transmit+0x186>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d113      	bne.n	80052b6 <HAL_PCD_EP_DB_Transmit+0x186>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005296:	b29b      	uxth	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529c:	4413      	add	r3, r2
 800529e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	00da      	lsls	r2, r3, #3
 80052a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a8:	4413      	add	r3, r2
 80052aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	2200      	movs	r2, #0
 80052b4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	78db      	ldrb	r3, [r3, #3]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d123      	bne.n	8005306 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052d8:	837b      	strh	r3, [r7, #26]
 80052da:	8b7b      	ldrh	r3, [r7, #26]
 80052dc:	f083 0320 	eor.w	r3, r3, #32
 80052e0:	837b      	strh	r3, [r7, #26]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	441a      	add	r2, r3
 80052f0:	8b7b      	ldrh	r3, [r7, #26]
 80052f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005302:	b29b      	uxth	r3, r3
 8005304:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	4619      	mov	r1, r3
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f00c f9a2 	bl	8011656 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005312:	88fb      	ldrh	r3, [r7, #6]
 8005314:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01f      	beq.n	800535c <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005336:	833b      	strh	r3, [r7, #24]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	441a      	add	r2, r3
 8005346:	8b3b      	ldrh	r3, [r7, #24]
 8005348:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800534c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005350:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005358:	b29b      	uxth	r3, r3
 800535a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	e31f      	b.n	80059a0 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d021      	beq.n	80053ae <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005384:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	441a      	add	r2, r3
 8005396:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800539a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800539e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	f040 82ca 	bne.w	800594e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80053c2:	441a      	add	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	69da      	ldr	r2, [r3, #28]
 80053cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80053d0:	441a      	add	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	6a1a      	ldr	r2, [r3, #32]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d309      	bcc.n	80053f6 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	6a1a      	ldr	r2, [r3, #32]
 80053ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053ee:	1ad2      	subs	r2, r2, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	621a      	str	r2, [r3, #32]
 80053f4:	e015      	b.n	8005422 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d107      	bne.n	800540e <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80053fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005402:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800540c:	e009      	b.n	8005422 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2200      	movs	r2, #0
 8005420:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d15f      	bne.n	80054ea <HAL_PCD_EP_DB_Transmit+0x3ba>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005438:	b29b      	uxth	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800543e:	4413      	add	r3, r2
 8005440:	643b      	str	r3, [r7, #64]	@ 0x40
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	00da      	lsls	r2, r3, #3
 8005448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800544a:	4413      	add	r3, r2
 800544c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800545c:	b29a      	uxth	r2, r3
 800545e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <HAL_PCD_EP_DB_Transmit+0x34e>
 8005468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005476:	b29a      	uxth	r2, r3
 8005478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800547a:	801a      	strh	r2, [r3, #0]
 800547c:	e051      	b.n	8005522 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800547e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005480:	2b3e      	cmp	r3, #62	@ 0x3e
 8005482:	d816      	bhi.n	80054b2 <HAL_PCD_EP_DB_Transmit+0x382>
 8005484:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005486:	085b      	lsrs	r3, r3, #1
 8005488:	653b      	str	r3, [r7, #80]	@ 0x50
 800548a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_PCD_EP_DB_Transmit+0x36a>
 8005494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005496:	3301      	adds	r3, #1
 8005498:	653b      	str	r3, [r7, #80]	@ 0x50
 800549a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29a      	uxth	r2, r3
 80054a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	029b      	lsls	r3, r3, #10
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	4313      	orrs	r3, r2
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	e037      	b.n	8005522 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80054b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054b4:	095b      	lsrs	r3, r3, #5
 80054b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80054b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054ba:	f003 031f 	and.w	r3, r3, #31
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <HAL_PCD_EP_DB_Transmit+0x398>
 80054c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054c4:	3b01      	subs	r3, #1
 80054c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80054c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	029b      	lsls	r3, r3, #10
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	4313      	orrs	r3, r2
 80054d8:	b29b      	uxth	r3, r3
 80054da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e6:	801a      	strh	r2, [r3, #0]
 80054e8:	e01b      	b.n	8005522 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	785b      	ldrb	r3, [r3, #1]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d117      	bne.n	8005522 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005500:	b29b      	uxth	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005506:	4413      	add	r3, r2
 8005508:	64bb      	str	r3, [r7, #72]	@ 0x48
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	00da      	lsls	r2, r3, #3
 8005510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005512:	4413      	add	r3, r2
 8005514:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005518:	647b      	str	r3, [r7, #68]	@ 0x44
 800551a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800551c:	b29a      	uxth	r2, r3
 800551e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005520:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6959      	ldr	r1, [r3, #20]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	891a      	ldrh	r2, [r3, #8]
 800552e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005530:	b29b      	uxth	r3, r3
 8005532:	f005 fb32 	bl	800ab9a <USB_WritePMA>
 8005536:	e20a      	b.n	800594e <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005540:	b29b      	uxth	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	4413      	add	r3, r2
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	4413      	add	r3, r2
 8005552:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800555c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	699a      	ldr	r2, [r3, #24]
 8005564:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005568:	429a      	cmp	r2, r3
 800556a:	d307      	bcc.n	800557c <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	699a      	ldr	r2, [r3, #24]
 8005570:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005574:	1ad2      	subs	r2, r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	619a      	str	r2, [r3, #24]
 800557a:	e002      	b.n	8005582 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2200      	movs	r2, #0
 8005580:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f040 80f6 	bne.w	8005778 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d126      	bne.n	80055e2 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	677b      	str	r3, [r7, #116]	@ 0x74
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055a8:	4413      	add	r3, r2
 80055aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	00da      	lsls	r2, r3, #3
 80055b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055b4:	4413      	add	r3, r2
 80055b6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80055ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80055bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055da:	b29a      	uxth	r2, r3
 80055dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055de:	801a      	strh	r2, [r3, #0]
 80055e0:	e01a      	b.n	8005618 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	785b      	ldrb	r3, [r3, #1]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d116      	bne.n	8005618 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055fe:	4413      	add	r3, r2
 8005600:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	00da      	lsls	r2, r3, #3
 8005608:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800560a:	4413      	add	r3, r2
 800560c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005610:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005612:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005614:	2200      	movs	r2, #0
 8005616:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	785b      	ldrb	r3, [r3, #1]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d12f      	bne.n	8005688 <HAL_PCD_EP_DB_Transmit+0x558>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005638:	b29b      	uxth	r3, r3
 800563a:	461a      	mov	r2, r3
 800563c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005640:	4413      	add	r3, r2
 8005642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	00da      	lsls	r2, r3, #3
 800564c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005650:	4413      	add	r3, r2
 8005652:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005656:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800565a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29b      	uxth	r3, r3
 8005662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005666:	b29a      	uxth	r2, r3
 8005668:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800567a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567e:	b29a      	uxth	r2, r3
 8005680:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005684:	801a      	strh	r2, [r3, #0]
 8005686:	e01c      	b.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x592>
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d118      	bne.n	80056c2 <HAL_PCD_EP_DB_Transmit+0x592>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005698:	b29b      	uxth	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056a0:	4413      	add	r3, r2
 80056a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	00da      	lsls	r2, r3, #3
 80056ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056b0:	4413      	add	r3, r2
 80056b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80056be:	2200      	movs	r2, #0
 80056c0:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	78db      	ldrb	r3, [r3, #3]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d127      	bne.n	800571a <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056e4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80056e8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80056ec:	f083 0320 	eor.w	r3, r3, #32
 80056f0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	441a      	add	r2, r3
 8005702:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800570a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800570e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005716:	b29b      	uxth	r3, r3
 8005718:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	4619      	mov	r1, r3
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f00b ff98 	bl	8011656 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d121      	bne.n	8005774 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	441a      	add	r2, r3
 800575c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8005760:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005764:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005768:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800576c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005770:	b29b      	uxth	r3, r3
 8005772:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	e113      	b.n	80059a0 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d121      	bne.n	80057c6 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800579c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	441a      	add	r2, r3
 80057ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80057b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	f040 80be 	bne.w	800594e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80057da:	441a      	add	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80057e8:	441a      	add	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6a1a      	ldr	r2, [r3, #32]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d309      	bcc.n	800580e <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6a1a      	ldr	r2, [r3, #32]
 8005804:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005806:	1ad2      	subs	r2, r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	621a      	str	r2, [r3, #32]
 800580c:	e015      	b.n	800583a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d107      	bne.n	8005826 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8005816:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800581a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005824:	e009      	b.n	800583a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2200      	movs	r2, #0
 8005830:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	785b      	ldrb	r3, [r3, #1]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d15f      	bne.n	8005908 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005856:	b29b      	uxth	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800585c:	4413      	add	r3, r2
 800585e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	00da      	lsls	r2, r3, #3
 8005866:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005868:	4413      	add	r3, r2
 800586a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800586e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800587a:	b29a      	uxth	r2, r3
 800587c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800587e:	801a      	strh	r2, [r3, #0]
 8005880:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <HAL_PCD_EP_DB_Transmit+0x76c>
 8005886:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	b29b      	uxth	r3, r3
 800588c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005894:	b29a      	uxth	r2, r3
 8005896:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005898:	801a      	strh	r2, [r3, #0]
 800589a:	e04e      	b.n	800593a <HAL_PCD_EP_DB_Transmit+0x80a>
 800589c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800589e:	2b3e      	cmp	r3, #62	@ 0x3e
 80058a0:	d816      	bhi.n	80058d0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 80058a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80058a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_PCD_EP_DB_Transmit+0x788>
 80058b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058b4:	3301      	adds	r3, #1
 80058b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80058b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29a      	uxth	r2, r3
 80058be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	029b      	lsls	r3, r3, #10
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	4313      	orrs	r3, r2
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	e034      	b.n	800593a <HAL_PCD_EP_DB_Transmit+0x80a>
 80058d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80058d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d102      	bne.n	80058e6 <HAL_PCD_EP_DB_Transmit+0x7b6>
 80058e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058e2:	3b01      	subs	r3, #1
 80058e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80058e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	029b      	lsls	r3, r3, #10
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	4313      	orrs	r3, r2
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005900:	b29a      	uxth	r2, r3
 8005902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005904:	801a      	strh	r2, [r3, #0]
 8005906:	e018      	b.n	800593a <HAL_PCD_EP_DB_Transmit+0x80a>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	785b      	ldrb	r3, [r3, #1]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d114      	bne.n	800593a <HAL_PCD_EP_DB_Transmit+0x80a>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005918:	b29b      	uxth	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800591e:	4413      	add	r3, r2
 8005920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	00da      	lsls	r2, r3, #3
 8005928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800592a:	4413      	add	r3, r2
 800592c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005930:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005932:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005934:	b29a      	uxth	r2, r3
 8005936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005938:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6959      	ldr	r1, [r3, #20]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	895a      	ldrh	r2, [r3, #10]
 8005946:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005948:	b29b      	uxth	r3, r3
 800594a:	f005 f926 	bl	800ab9a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005968:	82fb      	strh	r3, [r7, #22]
 800596a:	8afb      	ldrh	r3, [r7, #22]
 800596c:	f083 0310 	eor.w	r3, r3, #16
 8005970:	82fb      	strh	r3, [r7, #22]
 8005972:	8afb      	ldrh	r3, [r7, #22]
 8005974:	f083 0320 	eor.w	r3, r3, #32
 8005978:	82fb      	strh	r3, [r7, #22]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	441a      	add	r2, r3
 8005988:	8afb      	ldrh	r3, [r7, #22]
 800598a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800598e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005992:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800599a:	b29b      	uxth	r3, r3
 800599c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3798      	adds	r7, #152	@ 0x98
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	607b      	str	r3, [r7, #4]
 80059b2:	460b      	mov	r3, r1
 80059b4:	817b      	strh	r3, [r7, #10]
 80059b6:	4613      	mov	r3, r2
 80059b8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80059ba:	897b      	ldrh	r3, [r7, #10]
 80059bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00b      	beq.n	80059de <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059c6:	897b      	ldrh	r3, [r7, #10]
 80059c8:	f003 0207 	and.w	r2, r3, #7
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	3310      	adds	r3, #16
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4413      	add	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	e009      	b.n	80059f2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059de:	897a      	ldrh	r2, [r7, #10]
 80059e0:	4613      	mov	r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80059f2:	893b      	ldrh	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d107      	bne.n	8005a08 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2200      	movs	r2, #0
 80059fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	80da      	strh	r2, [r3, #6]
 8005a06:	e00b      	b.n	8005a20 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	0c1b      	lsrs	r3, r3, #16
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f043 0301 	orr.w	r3, r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	f043 0302 	orr.w	r3, r3, #2
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a88:	4b05      	ldr	r3, [pc, #20]	@ (8005aa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a04      	ldr	r2, [pc, #16]	@ (8005aa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a92:	6013      	str	r3, [r2, #0]
}
 8005a94:	bf00      	nop
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	58000400 	.word	0x58000400

08005aa4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005aa8:	4b04      	ldr	r3, [pc, #16]	@ (8005abc <HAL_PWREx_GetVoltageRange+0x18>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	58000400 	.word	0x58000400

08005ac0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005ac4:	4b05      	ldr	r3, [pc, #20]	@ (8005adc <HAL_PWREx_EnableVddUSB+0x1c>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	4a04      	ldr	r2, [pc, #16]	@ (8005adc <HAL_PWREx_EnableVddUSB+0x1c>)
 8005aca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ace:	6053      	str	r3, [r2, #4]
}
 8005ad0:	bf00      	nop
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	58000400 	.word	0x58000400

08005ae0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005aee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005af2:	d101      	bne.n	8005af8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <LL_RCC_HSE_Enable>:
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b16:	6013      	str	r3, [r2, #0]
}
 8005b18:	bf00      	nop
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <LL_RCC_HSE_Disable>:
{
 8005b22:	b480      	push	{r7}
 8005b24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b34:	6013      	str	r3, [r2, #0]
}
 8005b36:	bf00      	nop
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <LL_RCC_HSE_IsReady>:
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b52:	d101      	bne.n	8005b58 <LL_RCC_HSE_IsReady+0x18>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <LL_RCC_HSE_IsReady+0x1a>
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <LL_RCC_HSI_Enable>:
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005b68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b76:	6013      	str	r3, [r2, #0]
}
 8005b78:	bf00      	nop
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <LL_RCC_HSI_Disable>:
{
 8005b82:	b480      	push	{r7}
 8005b84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005b86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b94:	6013      	str	r3, [r2, #0]
}
 8005b96:	bf00      	nop
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <LL_RCC_HSI_IsReady>:
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb2:	d101      	bne.n	8005bb8 <LL_RCC_HSI_IsReady+0x18>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <LL_RCC_HSI_IsReady+0x1a>
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	061b      	lsls	r3, r3, #24
 8005bda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bde:	4313      	orrs	r3, r2
 8005be0:	604b      	str	r3, [r1, #4]
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <LL_RCC_HSI48_Enable>:
{
 8005bee:	b480      	push	{r7}
 8005bf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005bfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bfe:	f043 0301 	orr.w	r3, r3, #1
 8005c02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005c06:	bf00      	nop
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <LL_RCC_HSI48_Disable>:
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c20:	f023 0301 	bic.w	r3, r3, #1
 8005c24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005c28:	bf00      	nop
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <LL_RCC_HSI48_IsReady>:
{
 8005c32:	b480      	push	{r7}
 8005c34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d101      	bne.n	8005c4a <LL_RCC_HSI48_IsReady+0x18>
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <LL_RCC_HSI48_IsReady+0x1a>
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <LL_RCC_LSE_Enable>:
{
 8005c56:	b480      	push	{r7}
 8005c58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005c6e:	bf00      	nop
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <LL_RCC_LSE_Disable>:
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005c7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c88:	f023 0301 	bic.w	r3, r3, #1
 8005c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005c90:	bf00      	nop
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <LL_RCC_LSE_EnableBypass>:
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005caa:	f043 0304 	orr.w	r3, r3, #4
 8005cae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005cb2:	bf00      	nop
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <LL_RCC_LSE_DisableBypass>:
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005cc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ccc:	f023 0304 	bic.w	r3, r3, #4
 8005cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005cd4:	bf00      	nop
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <LL_RCC_LSE_IsReady>:
{
 8005cde:	b480      	push	{r7}
 8005ce0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d101      	bne.n	8005cf6 <LL_RCC_LSE_IsReady+0x18>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <LL_RCC_LSE_IsReady+0x1a>
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <LL_RCC_LSI1_Enable>:
{
 8005d02:	b480      	push	{r7}
 8005d04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d12:	f043 0301 	orr.w	r3, r3, #1
 8005d16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005d1a:	bf00      	nop
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <LL_RCC_LSI1_Disable>:
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d34:	f023 0301 	bic.w	r3, r3, #1
 8005d38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005d3c:	bf00      	nop
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <LL_RCC_LSI1_IsReady>:
{
 8005d46:	b480      	push	{r7}
 8005d48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d101      	bne.n	8005d5e <LL_RCC_LSI1_IsReady+0x18>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <LL_RCC_LSI1_IsReady+0x1a>
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <LL_RCC_LSI2_Enable>:
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d7a:	f043 0304 	orr.w	r3, r3, #4
 8005d7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005d82:	bf00      	nop
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <LL_RCC_LSI2_Disable>:
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005d9c:	f023 0304 	bic.w	r3, r3, #4
 8005da0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005da4:	bf00      	nop
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <LL_RCC_LSI2_IsReady>:
{
 8005dae:	b480      	push	{r7}
 8005db0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005db2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b08      	cmp	r3, #8
 8005dc0:	d101      	bne.n	8005dc6 <LL_RCC_LSI2_IsReady+0x18>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <LL_RCC_LSI2_IsReady+0x1a>
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <LL_RCC_LSI2_SetTrimming>:
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005dda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005de2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <LL_RCC_MSI_Enable>:
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	6013      	str	r3, [r2, #0]
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <LL_RCC_MSI_Disable>:
{
 8005e1e:	b480      	push	{r7}
 8005e20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005e22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e2c:	f023 0301 	bic.w	r3, r3, #1
 8005e30:	6013      	str	r3, [r2, #0]
}
 8005e32:	bf00      	nop
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <LL_RCC_MSI_IsReady>:
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d101      	bne.n	8005e52 <LL_RCC_MSI_IsReady+0x16>
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <LL_RCC_MSI_IsReady+0x18>
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <LL_RCC_MSI_SetRange>:
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	600b      	str	r3, [r1, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <LL_RCC_MSI_GetRange>:
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e96:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2bb0      	cmp	r3, #176	@ 0xb0
 8005e9c:	d901      	bls.n	8005ea2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005e9e:	23b0      	movs	r3, #176	@ 0xb0
 8005ea0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005ea2:	687b      	ldr	r3, [r7, #4]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005eb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	021b      	lsls	r3, r3, #8
 8005ec6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	604b      	str	r3, [r1, #4]
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <LL_RCC_SetSysClkSource>:
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f023 0203 	bic.w	r2, r3, #3
 8005eec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	608b      	str	r3, [r1, #8]
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <LL_RCC_GetSysClkSource>:
{
 8005f02:	b480      	push	{r7}
 8005f04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 030c 	and.w	r3, r3, #12
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <LL_RCC_SetAHBPrescaler>:
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	608b      	str	r3, [r1, #8]
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005f52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <LL_RCC_SetAHB4Prescaler>:
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005f7e:	f023 020f 	bic.w	r2, r3, #15
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	091b      	lsrs	r3, r3, #4
 8005f86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <LL_RCC_SetAPB1Prescaler>:
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005fae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	608b      	str	r3, [r1, #8]
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <LL_RCC_SetAPB2Prescaler>:
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005fd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	608b      	str	r3, [r1, #8]
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <LL_RCC_GetAHBPrescaler>:
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <LL_RCC_GetAHB4Prescaler>:
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006008:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800600c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006016:	4618      	mov	r0, r3
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <LL_RCC_PLL_Enable>:
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800602e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006032:	6013      	str	r3, [r2, #0]
}
 8006034:	bf00      	nop
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <LL_RCC_PLL_Disable>:
{
 800603e:	b480      	push	{r7}
 8006040:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800604c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006050:	6013      	str	r3, [r2, #0]
}
 8006052:	bf00      	nop
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <LL_RCC_PLL_IsReady>:
{
 800605c:	b480      	push	{r7}
 800605e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800606a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800606e:	d101      	bne.n	8006074 <LL_RCC_PLL_IsReady+0x18>
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <LL_RCC_PLL_IsReady+0x1a>
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <LL_RCC_PLL_GetN>:
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	0a1b      	lsrs	r3, r3, #8
 800608c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006090:	4618      	mov	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <LL_RCC_PLL_GetR>:
{
 800609a:	b480      	push	{r7}
 800609c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800609e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <LL_RCC_PLL_GetDivider>:
{
 80060b2:	b480      	push	{r7}
 80060b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80060b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <LL_RCC_PLL_GetMainSource>:
{
 80060ca:	b480      	push	{r7}
 80060cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80060ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0303 	and.w	r3, r3, #3
}
 80060d8:	4618      	mov	r0, r3
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <LL_RCC_IsActiveFlag_HPRE>:
{
 80060e2:	b480      	push	{r7}
 80060e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80060e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f4:	d101      	bne.n	80060fa <LL_RCC_IsActiveFlag_HPRE+0x18>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8006106:	b480      	push	{r7}
 8006108:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800610a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800610e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006116:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800611a:	d101      	bne.n	8006120 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800611c:	2301      	movs	r3, #1
 800611e:	e000      	b.n	8006122 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006134:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800613c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006140:	d101      	bne.n	8006146 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8006152:	b480      	push	{r7}
 8006154:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006164:	d101      	bne.n	800616a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8006176:	b480      	push	{r7}
 8006178:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800617a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006184:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006188:	d101      	bne.n	800618e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
	...

0800619c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b08d      	sub	sp, #52	@ 0x34
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e363      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 808d 	beq.w	80062d6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061bc:	f7ff fea1 	bl	8005f02 <LL_RCC_GetSysClkSource>
 80061c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061c2:	f7ff ff82 	bl	80060ca <LL_RCC_PLL_GetMainSource>
 80061c6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80061c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_RCC_OscConfig+0x3e>
 80061ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d0:	2b0c      	cmp	r3, #12
 80061d2:	d147      	bne.n	8006264 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80061d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d144      	bne.n	8006264 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e347      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80061ea:	f7ff fe4c 	bl	8005e86 <LL_RCC_MSI_GetRange>
 80061ee:	4603      	mov	r3, r0
 80061f0:	429c      	cmp	r4, r3
 80061f2:	d914      	bls.n	800621e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fd03 	bl	8006c04 <RCC_SetFlashLatencyFromMSIRange>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e336      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff fe26 	bl	8005e5e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff fe4a 	bl	8005eb0 <LL_RCC_MSI_SetCalibTrimming>
 800621c:	e013      	b.n	8006246 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff fe1b 	bl	8005e5e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fe3f 	bl	8005eb0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fce4 	bl	8006c04 <RCC_SetFlashLatencyFromMSIRange>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e317      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006246:	f000 fcc9 	bl	8006bdc <HAL_RCC_GetHCLKFreq>
 800624a:	4603      	mov	r3, r0
 800624c:	4aa4      	ldr	r2, [pc, #656]	@ (80064e0 <HAL_RCC_OscConfig+0x344>)
 800624e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006250:	4ba4      	ldr	r3, [pc, #656]	@ (80064e4 <HAL_RCC_OscConfig+0x348>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4618      	mov	r0, r3
 8006256:	f7fc ff7d 	bl	8003154 <HAL_InitTick>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d039      	beq.n	80062d4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e308      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01e      	beq.n	80062aa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800626c:	f7ff fdc8 	bl	8005e00 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006270:	f7fc ffbe 	bl	80031f0 <HAL_GetTick>
 8006274:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006278:	f7fc ffba 	bl	80031f0 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e2f5      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800628a:	f7ff fdd7 	bl	8005e3c <LL_RCC_MSI_IsReady>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0f1      	beq.n	8006278 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff fde0 	bl	8005e5e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff fe04 	bl	8005eb0 <LL_RCC_MSI_SetCalibTrimming>
 80062a8:	e015      	b.n	80062d6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80062aa:	f7ff fdb8 	bl	8005e1e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80062ae:	f7fc ff9f 	bl	80031f0 <HAL_GetTick>
 80062b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80062b4:	e008      	b.n	80062c8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062b6:	f7fc ff9b 	bl	80031f0 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e2d6      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80062c8:	f7ff fdb8 	bl	8005e3c <LL_RCC_MSI_IsReady>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f1      	bne.n	80062b6 <HAL_RCC_OscConfig+0x11a>
 80062d2:	e000      	b.n	80062d6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80062d4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d047      	beq.n	8006372 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062e2:	f7ff fe0e 	bl	8005f02 <LL_RCC_GetSysClkSource>
 80062e6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062e8:	f7ff feef 	bl	80060ca <LL_RCC_PLL_GetMainSource>
 80062ec:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d005      	beq.n	8006300 <HAL_RCC_OscConfig+0x164>
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	2b0c      	cmp	r3, #12
 80062f8:	d108      	bne.n	800630c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d105      	bne.n	800630c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d134      	bne.n	8006372 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e2b4      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006314:	d102      	bne.n	800631c <HAL_RCC_OscConfig+0x180>
 8006316:	f7ff fbf5 	bl	8005b04 <LL_RCC_HSE_Enable>
 800631a:	e001      	b.n	8006320 <HAL_RCC_OscConfig+0x184>
 800631c:	f7ff fc01 	bl	8005b22 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d012      	beq.n	800634e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7fc ff62 	bl	80031f0 <HAL_GetTick>
 800632c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006330:	f7fc ff5e 	bl	80031f0 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b64      	cmp	r3, #100	@ 0x64
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e299      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006342:	f7ff fbfd 	bl	8005b40 <LL_RCC_HSE_IsReady>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f1      	beq.n	8006330 <HAL_RCC_OscConfig+0x194>
 800634c:	e011      	b.n	8006372 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634e:	f7fc ff4f 	bl	80031f0 <HAL_GetTick>
 8006352:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006354:	e008      	b.n	8006368 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006356:	f7fc ff4b 	bl	80031f0 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	2b64      	cmp	r3, #100	@ 0x64
 8006362:	d901      	bls.n	8006368 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e286      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006368:	f7ff fbea 	bl	8005b40 <LL_RCC_HSE_IsReady>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1f1      	bne.n	8006356 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d04c      	beq.n	8006418 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800637e:	f7ff fdc0 	bl	8005f02 <LL_RCC_GetSysClkSource>
 8006382:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006384:	f7ff fea1 	bl	80060ca <LL_RCC_PLL_GetMainSource>
 8006388:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b04      	cmp	r3, #4
 800638e:	d005      	beq.n	800639c <HAL_RCC_OscConfig+0x200>
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	2b0c      	cmp	r3, #12
 8006394:	d10e      	bne.n	80063b4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b02      	cmp	r3, #2
 800639a:	d10b      	bne.n	80063b4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d101      	bne.n	80063a8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e266      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff fc09 	bl	8005bc4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80063b2:	e031      	b.n	8006418 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d019      	beq.n	80063f0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063bc:	f7ff fbd2 	bl	8005b64 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c0:	f7fc ff16 	bl	80031f0 <HAL_GetTick>
 80063c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063c8:	f7fc ff12 	bl	80031f0 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e24d      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80063da:	f7ff fbe1 	bl	8005ba0 <LL_RCC_HSI_IsReady>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0f1      	beq.n	80063c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff fbeb 	bl	8005bc4 <LL_RCC_HSI_SetCalibTrimming>
 80063ee:	e013      	b.n	8006418 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063f0:	f7ff fbc7 	bl	8005b82 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f4:	f7fc fefc 	bl	80031f0 <HAL_GetTick>
 80063f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80063fa:	e008      	b.n	800640e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063fc:	f7fc fef8 	bl	80031f0 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e233      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800640e:	f7ff fbc7 	bl	8005ba0 <LL_RCC_HSI_IsReady>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f1      	bne.n	80063fc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b00      	cmp	r3, #0
 8006422:	d106      	bne.n	8006432 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 80a3 	beq.w	8006578 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d076      	beq.n	8006528 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b00      	cmp	r3, #0
 8006444:	d046      	beq.n	80064d4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006446:	f7ff fc7e 	bl	8005d46 <LL_RCC_LSI1_IsReady>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d113      	bne.n	8006478 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006450:	f7ff fc57 	bl	8005d02 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006454:	f7fc fecc 	bl	80031f0 <HAL_GetTick>
 8006458:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800645c:	f7fc fec8 	bl	80031f0 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b02      	cmp	r3, #2
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e203      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800646e:	f7ff fc6a 	bl	8005d46 <LL_RCC_LSI1_IsReady>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0f1      	beq.n	800645c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006478:	f7ff fc77 	bl	8005d6a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647c:	f7fc feb8 	bl	80031f0 <HAL_GetTick>
 8006480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006484:	f7fc feb4 	bl	80031f0 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b03      	cmp	r3, #3
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e1ef      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006496:	f7ff fc8a 	bl	8005dae <LL_RCC_LSI2_IsReady>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0f1      	beq.n	8006484 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7ff fc94 	bl	8005dd2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80064aa:	f7ff fc3b 	bl	8005d24 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ae:	f7fc fe9f 	bl	80031f0 <HAL_GetTick>
 80064b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80064b6:	f7fc fe9b 	bl	80031f0 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e1d6      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80064c8:	f7ff fc3d 	bl	8005d46 <LL_RCC_LSI1_IsReady>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f1      	bne.n	80064b6 <HAL_RCC_OscConfig+0x31a>
 80064d2:	e051      	b.n	8006578 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80064d4:	f7ff fc15 	bl	8005d02 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d8:	f7fc fe8a 	bl	80031f0 <HAL_GetTick>
 80064dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80064de:	e00c      	b.n	80064fa <HAL_RCC_OscConfig+0x35e>
 80064e0:	20000008 	.word	0x20000008
 80064e4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80064e8:	f7fc fe82 	bl	80031f0 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e1bd      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80064fa:	f7ff fc24 	bl	8005d46 <LL_RCC_LSI1_IsReady>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0f1      	beq.n	80064e8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006504:	f7ff fc42 	bl	8005d8c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800650a:	f7fc fe71 	bl	80031f0 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b03      	cmp	r3, #3
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e1ac      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800651c:	f7ff fc47 	bl	8005dae <LL_RCC_LSI2_IsReady>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f1      	bne.n	800650a <HAL_RCC_OscConfig+0x36e>
 8006526:	e027      	b.n	8006578 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006528:	f7ff fc30 	bl	8005d8c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652c:	f7fc fe60 	bl	80031f0 <HAL_GetTick>
 8006530:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006534:	f7fc fe5c 	bl	80031f0 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b03      	cmp	r3, #3
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e197      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006546:	f7ff fc32 	bl	8005dae <LL_RCC_LSI2_IsReady>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1f1      	bne.n	8006534 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006550:	f7ff fbe8 	bl	8005d24 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006554:	f7fc fe4c 	bl	80031f0 <HAL_GetTick>
 8006558:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800655c:	f7fc fe48 	bl	80031f0 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e183      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800656e:	f7ff fbea 	bl	8005d46 <LL_RCC_LSI1_IsReady>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1f1      	bne.n	800655c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d05b      	beq.n	800663c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006584:	4ba7      	ldr	r3, [pc, #668]	@ (8006824 <HAL_RCC_OscConfig+0x688>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800658c:	2b00      	cmp	r3, #0
 800658e:	d114      	bne.n	80065ba <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006590:	f7ff fa78 	bl	8005a84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006594:	f7fc fe2c 	bl	80031f0 <HAL_GetTick>
 8006598:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800659c:	f7fc fe28 	bl	80031f0 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e163      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065ae:	4b9d      	ldr	r3, [pc, #628]	@ (8006824 <HAL_RCC_OscConfig+0x688>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0f0      	beq.n	800659c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d102      	bne.n	80065c8 <HAL_RCC_OscConfig+0x42c>
 80065c2:	f7ff fb48 	bl	8005c56 <LL_RCC_LSE_Enable>
 80065c6:	e00c      	b.n	80065e2 <HAL_RCC_OscConfig+0x446>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b05      	cmp	r3, #5
 80065ce:	d104      	bne.n	80065da <HAL_RCC_OscConfig+0x43e>
 80065d0:	f7ff fb63 	bl	8005c9a <LL_RCC_LSE_EnableBypass>
 80065d4:	f7ff fb3f 	bl	8005c56 <LL_RCC_LSE_Enable>
 80065d8:	e003      	b.n	80065e2 <HAL_RCC_OscConfig+0x446>
 80065da:	f7ff fb4d 	bl	8005c78 <LL_RCC_LSE_Disable>
 80065de:	f7ff fb6d 	bl	8005cbc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d014      	beq.n	8006614 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ea:	f7fc fe01 	bl	80031f0 <HAL_GetTick>
 80065ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80065f0:	e00a      	b.n	8006608 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065f2:	f7fc fdfd 	bl	80031f0 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006600:	4293      	cmp	r3, r2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e136      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006608:	f7ff fb69 	bl	8005cde <LL_RCC_LSE_IsReady>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0ef      	beq.n	80065f2 <HAL_RCC_OscConfig+0x456>
 8006612:	e013      	b.n	800663c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006614:	f7fc fdec 	bl	80031f0 <HAL_GetTick>
 8006618:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800661a:	e00a      	b.n	8006632 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800661c:	f7fc fde8 	bl	80031f0 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800662a:	4293      	cmp	r3, r2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e121      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006632:	f7ff fb54 	bl	8005cde <LL_RCC_LSE_IsReady>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1ef      	bne.n	800661c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006644:	2b00      	cmp	r3, #0
 8006646:	d02c      	beq.n	80066a2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664c:	2b00      	cmp	r3, #0
 800664e:	d014      	beq.n	800667a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006650:	f7ff facd 	bl	8005bee <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006654:	f7fc fdcc 	bl	80031f0 <HAL_GetTick>
 8006658:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800665c:	f7fc fdc8 	bl	80031f0 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e103      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800666e:	f7ff fae0 	bl	8005c32 <LL_RCC_HSI48_IsReady>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0f1      	beq.n	800665c <HAL_RCC_OscConfig+0x4c0>
 8006678:	e013      	b.n	80066a2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800667a:	f7ff fac9 	bl	8005c10 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667e:	f7fc fdb7 	bl	80031f0 <HAL_GetTick>
 8006682:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006686:	f7fc fdb3 	bl	80031f0 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e0ee      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006698:	f7ff facb 	bl	8005c32 <LL_RCC_HSI48_IsReady>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f1      	bne.n	8006686 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 80e4 	beq.w	8006874 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066ac:	f7ff fc29 	bl	8005f02 <LL_RCC_GetSysClkSource>
 80066b0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80066b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066be:	2b02      	cmp	r3, #2
 80066c0:	f040 80b4 	bne.w	800682c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f003 0203 	and.w	r2, r3, #3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d123      	bne.n	800671a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066dc:	429a      	cmp	r2, r3
 80066de:	d11c      	bne.n	800671a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	0a1b      	lsrs	r3, r3, #8
 80066e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d114      	bne.n	800671a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d10d      	bne.n	800671a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006708:	429a      	cmp	r2, r3
 800670a:	d106      	bne.n	800671a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006716:	429a      	cmp	r2, r3
 8006718:	d05d      	beq.n	80067d6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b0c      	cmp	r3, #12
 800671e:	d058      	beq.n	80067d2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e0a1      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006732:	f7ff fc84 	bl	800603e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006736:	f7fc fd5b 	bl	80031f0 <HAL_GetTick>
 800673a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800673c:	e008      	b.n	8006750 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800673e:	f7fc fd57 	bl	80031f0 <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b02      	cmp	r3, #2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e092      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1ef      	bne.n	800673e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800675e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	4b30      	ldr	r3, [pc, #192]	@ (8006828 <HAL_RCC_OscConfig+0x68c>)
 8006766:	4013      	ands	r3, r2
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006770:	4311      	orrs	r1, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006776:	0212      	lsls	r2, r2, #8
 8006778:	4311      	orrs	r1, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800677e:	4311      	orrs	r1, r2
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006784:	4311      	orrs	r1, r2
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800678a:	430a      	orrs	r2, r1
 800678c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006790:	4313      	orrs	r3, r2
 8006792:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006794:	f7ff fc44 	bl	8006020 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80067a8:	f7fc fd22 	bl	80031f0 <HAL_GetTick>
 80067ac:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b0:	f7fc fd1e 	bl	80031f0 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e059      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0ef      	beq.n	80067b0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067d0:	e050      	b.n	8006874 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e04f      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d147      	bne.n	8006874 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80067e4:	f7ff fc1c 	bl	8006020 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80067f8:	f7fc fcfa 	bl	80031f0 <HAL_GetTick>
 80067fc:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006800:	f7fc fcf6 	bl	80031f0 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e031      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0ef      	beq.n	8006800 <HAL_RCC_OscConfig+0x664>
 8006820:	e028      	b.n	8006874 <HAL_RCC_OscConfig+0x6d8>
 8006822:	bf00      	nop
 8006824:	58000400 	.word	0x58000400
 8006828:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	2b0c      	cmp	r3, #12
 8006830:	d01e      	beq.n	8006870 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006832:	f7ff fc04 	bl	800603e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006836:	f7fc fcdb 	bl	80031f0 <HAL_GetTick>
 800683a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800683c:	e008      	b.n	8006850 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800683e:	f7fc fcd7 	bl	80031f0 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d901      	bls.n	8006850 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e012      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1ef      	bne.n	800683e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800685e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006868:	4b05      	ldr	r3, [pc, #20]	@ (8006880 <HAL_RCC_OscConfig+0x6e4>)
 800686a:	4013      	ands	r3, r2
 800686c:	60cb      	str	r3, [r1, #12]
 800686e:	e001      	b.n	8006874 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3734      	adds	r7, #52	@ 0x34
 800687a:	46bd      	mov	sp, r7
 800687c:	bd90      	pop	{r4, r7, pc}
 800687e:	bf00      	nop
 8006880:	eefefffc 	.word	0xeefefffc

08006884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e12d      	b.n	8006af4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006898:	4b98      	ldr	r3, [pc, #608]	@ (8006afc <HAL_RCC_ClockConfig+0x278>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d91b      	bls.n	80068de <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a6:	4b95      	ldr	r3, [pc, #596]	@ (8006afc <HAL_RCC_ClockConfig+0x278>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f023 0207 	bic.w	r2, r3, #7
 80068ae:	4993      	ldr	r1, [pc, #588]	@ (8006afc <HAL_RCC_ClockConfig+0x278>)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068b6:	f7fc fc9b 	bl	80031f0 <HAL_GetTick>
 80068ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068bc:	e008      	b.n	80068d0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80068be:	f7fc fc97 	bl	80031f0 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e111      	b.n	8006af4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068d0:	4b8a      	ldr	r3, [pc, #552]	@ (8006afc <HAL_RCC_ClockConfig+0x278>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d1ef      	bne.n	80068be <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d016      	beq.n	8006918 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fb13 	bl	8005f1a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80068f4:	f7fc fc7c 	bl	80031f0 <HAL_GetTick>
 80068f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80068fa:	e008      	b.n	800690e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80068fc:	f7fc fc78 	bl	80031f0 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e0f2      	b.n	8006af4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800690e:	f7ff fbe8 	bl	80060e2 <LL_RCC_IsActiveFlag_HPRE>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0f1      	beq.n	80068fc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d016      	beq.n	8006952 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fb0a 	bl	8005f42 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800692e:	f7fc fc5f 	bl	80031f0 <HAL_GetTick>
 8006932:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006934:	e008      	b.n	8006948 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006936:	f7fc fc5b 	bl	80031f0 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d901      	bls.n	8006948 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e0d5      	b.n	8006af4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006948:	f7ff fbdd 	bl	8006106 <LL_RCC_IsActiveFlag_C2HPRE>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0f1      	beq.n	8006936 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d016      	beq.n	800698c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff fb03 	bl	8005f6e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006968:	f7fc fc42 	bl	80031f0 <HAL_GetTick>
 800696c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800696e:	e008      	b.n	8006982 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006970:	f7fc fc3e 	bl	80031f0 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d901      	bls.n	8006982 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e0b8      	b.n	8006af4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006982:	f7ff fbd3 	bl	800612c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0f1      	beq.n	8006970 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d016      	beq.n	80069c6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff fafd 	bl	8005f9c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80069a2:	f7fc fc25 	bl	80031f0 <HAL_GetTick>
 80069a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80069a8:	e008      	b.n	80069bc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80069aa:	f7fc fc21 	bl	80031f0 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e09b      	b.n	8006af4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80069bc:	f7ff fbc9 	bl	8006152 <LL_RCC_IsActiveFlag_PPRE1>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d0f1      	beq.n	80069aa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d017      	beq.n	8006a02 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff faf3 	bl	8005fc4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80069de:	f7fc fc07 	bl	80031f0 <HAL_GetTick>
 80069e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80069e6:	f7fc fc03 	bl	80031f0 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e07d      	b.n	8006af4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80069f8:	f7ff fbbd 	bl	8006176 <LL_RCC_IsActiveFlag_PPRE2>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f1      	beq.n	80069e6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d043      	beq.n	8006a96 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d106      	bne.n	8006a24 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006a16:	f7ff f893 	bl	8005b40 <LL_RCC_HSE_IsReady>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d11e      	bne.n	8006a5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e067      	b.n	8006af4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d106      	bne.n	8006a3a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006a2c:	f7ff fb16 	bl	800605c <LL_RCC_PLL_IsReady>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d113      	bne.n	8006a5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e05c      	b.n	8006af4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d106      	bne.n	8006a50 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006a42:	f7ff f9fb 	bl	8005e3c <LL_RCC_MSI_IsReady>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d108      	bne.n	8006a5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e051      	b.n	8006af4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006a50:	f7ff f8a6 	bl	8005ba0 <LL_RCC_HSI_IsReady>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e04a      	b.n	8006af4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff fa39 	bl	8005eda <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a68:	f7fc fbc2 	bl	80031f0 <HAL_GetTick>
 8006a6c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a6e:	e00a      	b.n	8006a86 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a70:	f7fc fbbe 	bl	80031f0 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e036      	b.n	8006af4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a86:	f7ff fa3c 	bl	8005f02 <LL_RCC_GetSysClkSource>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d1ec      	bne.n	8006a70 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a96:	4b19      	ldr	r3, [pc, #100]	@ (8006afc <HAL_RCC_ClockConfig+0x278>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d21b      	bcs.n	8006adc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aa4:	4b15      	ldr	r3, [pc, #84]	@ (8006afc <HAL_RCC_ClockConfig+0x278>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f023 0207 	bic.w	r2, r3, #7
 8006aac:	4913      	ldr	r1, [pc, #76]	@ (8006afc <HAL_RCC_ClockConfig+0x278>)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ab4:	f7fc fb9c 	bl	80031f0 <HAL_GetTick>
 8006ab8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006abc:	f7fc fb98 	bl	80031f0 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e012      	b.n	8006af4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ace:	4b0b      	ldr	r3, [pc, #44]	@ (8006afc <HAL_RCC_ClockConfig+0x278>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d1ef      	bne.n	8006abc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006adc:	f000 f87e 	bl	8006bdc <HAL_RCC_GetHCLKFreq>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	4a07      	ldr	r2, [pc, #28]	@ (8006b00 <HAL_RCC_ClockConfig+0x27c>)
 8006ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006ae6:	f7fc fb8f 	bl	8003208 <HAL_GetTickPrio>
 8006aea:	4603      	mov	r3, r0
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fc fb31 	bl	8003154 <HAL_InitTick>
 8006af2:	4603      	mov	r3, r0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	58004000 	.word	0x58004000
 8006b00:	20000008 	.word	0x20000008

08006b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b04:	b590      	push	{r4, r7, lr}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b0a:	f7ff f9fa 	bl	8005f02 <LL_RCC_GetSysClkSource>
 8006b0e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006b16:	f7ff f9b6 	bl	8005e86 <LL_RCC_MSI_GetRange>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	091b      	lsrs	r3, r3, #4
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	4a2b      	ldr	r2, [pc, #172]	@ (8006bd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	e04b      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d102      	bne.n	8006b38 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b32:	4b28      	ldr	r3, [pc, #160]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	e045      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b08      	cmp	r3, #8
 8006b3c:	d10a      	bne.n	8006b54 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006b3e:	f7fe ffcf 	bl	8005ae0 <LL_RCC_HSE_IsEnabledDiv2>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d102      	bne.n	8006b4e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006b48:	4b22      	ldr	r3, [pc, #136]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	e03a      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006b4e:	4b22      	ldr	r3, [pc, #136]	@ (8006bd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006b50:	60fb      	str	r3, [r7, #12]
 8006b52:	e037      	b.n	8006bc4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006b54:	f7ff fab9 	bl	80060ca <LL_RCC_PLL_GetMainSource>
 8006b58:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d003      	beq.n	8006b68 <HAL_RCC_GetSysClockFreq+0x64>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d003      	beq.n	8006b6e <HAL_RCC_GetSysClockFreq+0x6a>
 8006b66:	e00d      	b.n	8006b84 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006b68:	4b1a      	ldr	r3, [pc, #104]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006b6a:	60bb      	str	r3, [r7, #8]
        break;
 8006b6c:	e015      	b.n	8006b9a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006b6e:	f7fe ffb7 	bl	8005ae0 <LL_RCC_HSE_IsEnabledDiv2>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d102      	bne.n	8006b7e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006b78:	4b16      	ldr	r3, [pc, #88]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006b7a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006b7c:	e00d      	b.n	8006b9a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006b7e:	4b16      	ldr	r3, [pc, #88]	@ (8006bd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006b80:	60bb      	str	r3, [r7, #8]
        break;
 8006b82:	e00a      	b.n	8006b9a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006b84:	f7ff f97f 	bl	8005e86 <LL_RCC_MSI_GetRange>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	091b      	lsrs	r3, r3, #4
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	4a0f      	ldr	r2, [pc, #60]	@ (8006bd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b96:	60bb      	str	r3, [r7, #8]
        break;
 8006b98:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006b9a:	f7ff fa71 	bl	8006080 <LL_RCC_PLL_GetN>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	fb03 f402 	mul.w	r4, r3, r2
 8006ba6:	f7ff fa84 	bl	80060b2 <LL_RCC_PLL_GetDivider>
 8006baa:	4603      	mov	r3, r0
 8006bac:	091b      	lsrs	r3, r3, #4
 8006bae:	3301      	adds	r3, #1
 8006bb0:	fbb4 f4f3 	udiv	r4, r4, r3
 8006bb4:	f7ff fa71 	bl	800609a <LL_RCC_PLL_GetR>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	0f5b      	lsrs	r3, r3, #29
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	fbb4 f3f3 	udiv	r3, r4, r3
 8006bc2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd90      	pop	{r4, r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	08014c04 	.word	0x08014c04
 8006bd4:	00f42400 	.word	0x00f42400
 8006bd8:	01e84800 	.word	0x01e84800

08006bdc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bdc:	b598      	push	{r3, r4, r7, lr}
 8006bde:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006be0:	f7ff ff90 	bl	8006b04 <HAL_RCC_GetSysClockFreq>
 8006be4:	4604      	mov	r4, r0
 8006be6:	f7ff fa01 	bl	8005fec <LL_RCC_GetAHBPrescaler>
 8006bea:	4603      	mov	r3, r0
 8006bec:	091b      	lsrs	r3, r3, #4
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	4a03      	ldr	r2, [pc, #12]	@ (8006c00 <HAL_RCC_GetHCLKFreq+0x24>)
 8006bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bf8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	bd98      	pop	{r3, r4, r7, pc}
 8006c00:	08014bc4 	.word	0x08014bc4

08006c04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006c04:	b590      	push	{r4, r7, lr}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2bb0      	cmp	r3, #176	@ 0xb0
 8006c10:	d903      	bls.n	8006c1a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006c12:	4b15      	ldr	r3, [pc, #84]	@ (8006c68 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	e007      	b.n	8006c2a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	091b      	lsrs	r3, r3, #4
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	4a11      	ldr	r2, [pc, #68]	@ (8006c68 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c28:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006c2a:	f7ff f9eb 	bl	8006004 <LL_RCC_GetAHB4Prescaler>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	091b      	lsrs	r3, r3, #4
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	4a0d      	ldr	r2, [pc, #52]	@ (8006c6c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c42:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	4a0a      	ldr	r2, [pc, #40]	@ (8006c70 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	0c9c      	lsrs	r4, r3, #18
 8006c4e:	f7fe ff29 	bl	8005aa4 <HAL_PWREx_GetVoltageRange>
 8006c52:	4603      	mov	r3, r0
 8006c54:	4619      	mov	r1, r3
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 f80c 	bl	8006c74 <RCC_SetFlashLatency>
 8006c5c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd90      	pop	{r4, r7, pc}
 8006c66:	bf00      	nop
 8006c68:	08014c04 	.word	0x08014c04
 8006c6c:	08014bc4 	.word	0x08014bc4
 8006c70:	431bde83 	.word	0x431bde83

08006c74 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006c74:	b590      	push	{r4, r7, lr}
 8006c76:	b093      	sub	sp, #76	@ 0x4c
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006c7e:	4b37      	ldr	r3, [pc, #220]	@ (8006d5c <RCC_SetFlashLatency+0xe8>)
 8006c80:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8006c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006c8a:	4a35      	ldr	r2, [pc, #212]	@ (8006d60 <RCC_SetFlashLatency+0xec>)
 8006c8c:	f107 031c 	add.w	r3, r7, #28
 8006c90:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006c96:	4b33      	ldr	r3, [pc, #204]	@ (8006d64 <RCC_SetFlashLatency+0xf0>)
 8006c98:	f107 040c 	add.w	r4, r7, #12
 8006c9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cac:	d11a      	bne.n	8006ce4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006cae:	2300      	movs	r3, #0
 8006cb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cb2:	e013      	b.n	8006cdc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	3348      	adds	r3, #72	@ 0x48
 8006cba:	443b      	add	r3, r7
 8006cbc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d807      	bhi.n	8006cd6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	3348      	adds	r3, #72	@ 0x48
 8006ccc:	443b      	add	r3, r7
 8006cce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006cd2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006cd4:	e020      	b.n	8006d18 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006cd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cd8:	3301      	adds	r3, #1
 8006cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d9e8      	bls.n	8006cb4 <RCC_SetFlashLatency+0x40>
 8006ce2:	e019      	b.n	8006d18 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ce8:	e013      	b.n	8006d12 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	3348      	adds	r3, #72	@ 0x48
 8006cf0:	443b      	add	r3, r7
 8006cf2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d807      	bhi.n	8006d0c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	3348      	adds	r3, #72	@ 0x48
 8006d02:	443b      	add	r3, r7
 8006d04:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006d08:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006d0a:	e005      	b.n	8006d18 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0e:	3301      	adds	r3, #1
 8006d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d9e8      	bls.n	8006cea <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006d18:	4b13      	ldr	r3, [pc, #76]	@ (8006d68 <RCC_SetFlashLatency+0xf4>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f023 0207 	bic.w	r2, r3, #7
 8006d20:	4911      	ldr	r1, [pc, #68]	@ (8006d68 <RCC_SetFlashLatency+0xf4>)
 8006d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d24:	4313      	orrs	r3, r2
 8006d26:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006d28:	f7fc fa62 	bl	80031f0 <HAL_GetTick>
 8006d2c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006d2e:	e008      	b.n	8006d42 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006d30:	f7fc fa5e 	bl	80031f0 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e007      	b.n	8006d52 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006d42:	4b09      	ldr	r3, [pc, #36]	@ (8006d68 <RCC_SetFlashLatency+0xf4>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d1ef      	bne.n	8006d30 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	374c      	adds	r7, #76	@ 0x4c
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd90      	pop	{r4, r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	080137d8 	.word	0x080137d8
 8006d60:	080137e8 	.word	0x080137e8
 8006d64:	080137f4 	.word	0x080137f4
 8006d68:	58004000 	.word	0x58004000

08006d6c <LL_RCC_LSE_IsEnabled>:
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <LL_RCC_LSE_IsEnabled+0x18>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <LL_RCC_LSE_IsEnabled+0x1a>
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <LL_RCC_LSE_IsReady>:
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d101      	bne.n	8006da8 <LL_RCC_LSE_IsReady+0x18>
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <LL_RCC_LSE_IsReady+0x1a>
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <LL_RCC_MSI_EnablePLLMode>:
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8006db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dc2:	f043 0304 	orr.w	r3, r3, #4
 8006dc6:	6013      	str	r3, [r2, #0]
}
 8006dc8:	bf00      	nop
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <LL_RCC_SetRFWKPClockSource>:
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006dda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006de2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006de6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <LL_RCC_SetSMPSClockSource>:
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0c:	f023 0203 	bic.w	r2, r3, #3
 8006e10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <LL_RCC_SetSMPSPrescaler>:
{
 8006e26:	b480      	push	{r7}
 8006e28:	b083      	sub	sp, #12
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <LL_RCC_SetUSARTClockSource>:
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006e56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e5e:	f023 0203 	bic.w	r2, r3, #3
 8006e62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <LL_RCC_SetLPUARTClockSource>:
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <LL_RCC_SetI2CClockSource>:
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	091b      	lsrs	r3, r3, #4
 8006eba:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006ebe:	43db      	mvns	r3, r3
 8006ec0:	401a      	ands	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006eca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <LL_RCC_SetLPTIMClockSource>:
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006ee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	0c1b      	lsrs	r3, r3, #16
 8006ef4:	041b      	lsls	r3, r3, #16
 8006ef6:	43db      	mvns	r3, r3
 8006ef8:	401a      	ands	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	041b      	lsls	r3, r3, #16
 8006efe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <LL_RCC_SetSAIClockSource>:
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006f1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f24:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <LL_RCC_SetRNGClockSource>:
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f50:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006f54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <LL_RCC_SetCLK48ClockSource>:
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006f74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f7c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006f80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <LL_RCC_SetUSBClockSource>:
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff ffe3 	bl	8006f6c <LL_RCC_SetCLK48ClockSource>
}
 8006fa6:	bf00      	nop
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <LL_RCC_SetADCClockSource>:
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fbe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006fc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006fce:	bf00      	nop
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <LL_RCC_SetRTCClockSource>:
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006fee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <LL_RCC_GetRTCClockSource>:
{
 8007006:	b480      	push	{r7}
 8007008:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800700a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800700e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007016:	4618      	mov	r0, r3
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <LL_RCC_ForceBackupDomainReset>:
{
 8007020:	b480      	push	{r7}
 8007022:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800702c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007038:	bf00      	nop
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007042:	b480      	push	{r7}
 8007044:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800704a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800704e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007056:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800705a:	bf00      	nop
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <LL_RCC_PLLSAI1_Enable>:
{
 8007064:	b480      	push	{r7}
 8007066:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007072:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007076:	6013      	str	r3, [r2, #0]
}
 8007078:	bf00      	nop
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <LL_RCC_PLLSAI1_Disable>:
{
 8007082:	b480      	push	{r7}
 8007084:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007090:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007094:	6013      	str	r3, [r2, #0]
}
 8007096:	bf00      	nop
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <LL_RCC_PLLSAI1_IsReady>:
{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80070a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070b2:	d101      	bne.n	80070b8 <LL_RCC_PLLSAI1_IsReady+0x18>
 80070b4:	2301      	movs	r3, #1
 80070b6:	e000      	b.n	80070ba <LL_RCC_PLLSAI1_IsReady+0x1a>
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80070cc:	2300      	movs	r3, #0
 80070ce:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80070d0:	2300      	movs	r3, #0
 80070d2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d034      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80070e8:	d021      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80070ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80070ee:	d81b      	bhi.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070f4:	d01d      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80070f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070fa:	d815      	bhi.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00b      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007100:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007104:	d110      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007114:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007116:	e00d      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3304      	adds	r3, #4
 800711c:	4618      	mov	r0, r3
 800711e:	f000 f94d 	bl	80073bc <RCCEx_PLLSAI1_ConfigNP>
 8007122:	4603      	mov	r3, r0
 8007124:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007126:	e005      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	77fb      	strb	r3, [r7, #31]
        break;
 800712c:	e002      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800712e:	bf00      	nop
 8007130:	e000      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007134:	7ffb      	ldrb	r3, [r7, #31]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d105      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800713e:	4618      	mov	r0, r3
 8007140:	f7ff fee8 	bl	8006f14 <LL_RCC_SetSAIClockSource>
 8007144:	e001      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007146:	7ffb      	ldrb	r3, [r7, #31]
 8007148:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007152:	2b00      	cmp	r3, #0
 8007154:	d046      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007156:	f7ff ff56 	bl	8007006 <LL_RCC_GetRTCClockSource>
 800715a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	429a      	cmp	r2, r3
 8007164:	d03c      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007166:	f7fe fc8d 	bl	8005a84 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d105      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007174:	4618      	mov	r0, r3
 8007176:	f7ff ff30 	bl	8006fda <LL_RCC_SetRTCClockSource>
 800717a:	e02e      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800717c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007184:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007186:	f7ff ff4b 	bl	8007020 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800718a:	f7ff ff5a 	bl	8007042 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007198:	4313      	orrs	r3, r2
 800719a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800719c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80071a6:	f7ff fde1 	bl	8006d6c <LL_RCC_LSE_IsEnabled>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d114      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071b0:	f7fc f81e 	bl	80031f0 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80071b6:	e00b      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071b8:	f7fc f81a 	bl	80031f0 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d902      	bls.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	77fb      	strb	r3, [r7, #31]
              break;
 80071ce:	e004      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80071d0:	f7ff fdde 	bl	8006d90 <LL_RCC_LSE_IsReady>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d1ee      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80071da:	7ffb      	ldrb	r3, [r7, #31]
 80071dc:	77bb      	strb	r3, [r7, #30]
 80071de:	e001      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e0:	7ffb      	ldrb	r3, [r7, #31]
 80071e2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d004      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff fe2a 	bl	8006e4e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d004      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	69db      	ldr	r3, [r3, #28]
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff fe35 	bl	8006e7a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0310 	and.w	r3, r3, #16
 8007218:	2b00      	cmp	r3, #0
 800721a:	d004      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007220:	4618      	mov	r0, r3
 8007222:	f7ff fe5d 	bl	8006ee0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0320 	and.w	r3, r3, #32
 800722e:	2b00      	cmp	r3, #0
 8007230:	d004      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff fe52 	bl	8006ee0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0304 	and.w	r3, r3, #4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff fe2a 	bl	8006ea6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0308 	and.w	r3, r3, #8
 800725a:	2b00      	cmp	r3, #0
 800725c:	d004      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff fe1f 	bl	8006ea6 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007270:	2b00      	cmp	r3, #0
 8007272:	d022      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff fe8d 	bl	8006f98 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007286:	d107      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007292:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007296:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800729c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80072a0:	d10b      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3304      	adds	r3, #4
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 f8e3 	bl	8007472 <RCCEx_PLLSAI1_ConfigNQ>
 80072ac:	4603      	mov	r3, r0
 80072ae:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80072b0:	7ffb      	ldrb	r3, [r7, #31]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80072b6:	7ffb      	ldrb	r3, [r7, #31]
 80072b8:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d02b      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ce:	d008      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072d8:	d003      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d105      	bne.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff fe2a 	bl	8006f40 <LL_RCC_SetRNGClockSource>
 80072ec:	e00a      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	2000      	movs	r0, #0
 80072fa:	f7ff fe21 	bl	8006f40 <LL_RCC_SetRNGClockSource>
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7ff fe34 	bl	8006f6c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007308:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800730c:	d107      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800730e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007318:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800731c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007326:	2b00      	cmp	r3, #0
 8007328:	d022      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff fe3d 	bl	8006fae <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800733c:	d107      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800733e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800734c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007352:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007356:	d10b      	bne.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3304      	adds	r3, #4
 800735c:	4618      	mov	r0, r3
 800735e:	f000 f8e3 	bl	8007528 <RCCEx_PLLSAI1_ConfigNR>
 8007362:	4603      	mov	r3, r0
 8007364:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007366:	7ffb      	ldrb	r3, [r7, #31]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800736c:	7ffb      	ldrb	r3, [r7, #31]
 800736e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d004      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff fd26 	bl	8006dd2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff fd45 	bl	8006e26 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7ff fd2c 	bl	8006dfe <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80073a6:	7fbb      	ldrb	r3, [r7, #30]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3720      	adds	r7, #32
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80073b4:	f7ff fcfe 	bl	8006db4 <LL_RCC_MSI_EnablePLLMode>
}
 80073b8:	bf00      	nop
 80073ba:	bd80      	pop	{r7, pc}

080073bc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80073c8:	f7ff fe5b 	bl	8007082 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80073cc:	f7fb ff10 	bl	80031f0 <HAL_GetTick>
 80073d0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80073d2:	e009      	b.n	80073e8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073d4:	f7fb ff0c 	bl	80031f0 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d902      	bls.n	80073e8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	73fb      	strb	r3, [r7, #15]
      break;
 80073e6:	e004      	b.n	80073f2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80073e8:	f7ff fe5a 	bl	80070a0 <LL_RCC_PLLSAI1_IsReady>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f0      	bne.n	80073d4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d137      	bne.n	8007468 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80073f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800740c:	4313      	orrs	r3, r2
 800740e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007422:	4313      	orrs	r3, r2
 8007424:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007426:	f7ff fe1d 	bl	8007064 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800742a:	f7fb fee1 	bl	80031f0 <HAL_GetTick>
 800742e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007430:	e009      	b.n	8007446 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007432:	f7fb fedd 	bl	80031f0 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d902      	bls.n	8007446 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	73fb      	strb	r3, [r7, #15]
        break;
 8007444:	e004      	b.n	8007450 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007446:	f7ff fe2b 	bl	80070a0 <LL_RCC_PLLSAI1_IsReady>
 800744a:	4603      	mov	r3, r0
 800744c:	2b01      	cmp	r3, #1
 800744e:	d1f0      	bne.n	8007432 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d108      	bne.n	8007468 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800745a:	691a      	ldr	r2, [r3, #16]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007464:	4313      	orrs	r3, r2
 8007466:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007468:	7bfb      	ldrb	r3, [r7, #15]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800747e:	f7ff fe00 	bl	8007082 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007482:	f7fb feb5 	bl	80031f0 <HAL_GetTick>
 8007486:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007488:	e009      	b.n	800749e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800748a:	f7fb feb1 	bl	80031f0 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	2b02      	cmp	r3, #2
 8007496:	d902      	bls.n	800749e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	73fb      	strb	r3, [r7, #15]
      break;
 800749c:	e004      	b.n	80074a8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800749e:	f7ff fdff 	bl	80070a0 <LL_RCC_PLLSAI1_IsReady>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1f0      	bne.n	800748a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d137      	bne.n	800751e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80074ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074c2:	4313      	orrs	r3, r2
 80074c4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80074c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074d8:	4313      	orrs	r3, r2
 80074da:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80074dc:	f7ff fdc2 	bl	8007064 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074e0:	f7fb fe86 	bl	80031f0 <HAL_GetTick>
 80074e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80074e6:	e009      	b.n	80074fc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074e8:	f7fb fe82 	bl	80031f0 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d902      	bls.n	80074fc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	73fb      	strb	r3, [r7, #15]
        break;
 80074fa:	e004      	b.n	8007506 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80074fc:	f7ff fdd0 	bl	80070a0 <LL_RCC_PLLSAI1_IsReady>
 8007500:	4603      	mov	r3, r0
 8007502:	2b01      	cmp	r3, #1
 8007504:	d1f0      	bne.n	80074e8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d108      	bne.n	800751e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800750c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007510:	691a      	ldr	r2, [r3, #16]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800751a:	4313      	orrs	r3, r2
 800751c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800751e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007530:	2300      	movs	r3, #0
 8007532:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007534:	f7ff fda5 	bl	8007082 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007538:	f7fb fe5a 	bl	80031f0 <HAL_GetTick>
 800753c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800753e:	e009      	b.n	8007554 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007540:	f7fb fe56 	bl	80031f0 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d902      	bls.n	8007554 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	73fb      	strb	r3, [r7, #15]
      break;
 8007552:	e004      	b.n	800755e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007554:	f7ff fda4 	bl	80070a0 <LL_RCC_PLLSAI1_IsReady>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1f0      	bne.n	8007540 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800755e:	7bfb      	ldrb	r3, [r7, #15]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d137      	bne.n	80075d4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	021b      	lsls	r3, r3, #8
 8007574:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007578:	4313      	orrs	r3, r2
 800757a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800757c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800758e:	4313      	orrs	r3, r2
 8007590:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007592:	f7ff fd67 	bl	8007064 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007596:	f7fb fe2b 	bl	80031f0 <HAL_GetTick>
 800759a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800759c:	e009      	b.n	80075b2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800759e:	f7fb fe27 	bl	80031f0 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d902      	bls.n	80075b2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	73fb      	strb	r3, [r7, #15]
        break;
 80075b0:	e004      	b.n	80075bc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80075b2:	f7ff fd75 	bl	80070a0 <LL_RCC_PLLSAI1_IsReady>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d1f0      	bne.n	800759e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d108      	bne.n	80075d4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80075c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075c6:	691a      	ldr	r2, [r3, #16]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075d0:	4313      	orrs	r3, r2
 80075d2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e07a      	b.n	80076ea <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d106      	bne.n	800760e <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7fb fb0d 	bl	8002c28 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2202      	movs	r2, #2
 8007612:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f003 0310 	and.w	r3, r3, #16
 8007620:	2b10      	cmp	r3, #16
 8007622:	d058      	beq.n	80076d6 <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	22ca      	movs	r2, #202	@ 0xca
 800762a:	625a      	str	r2, [r3, #36]	@ 0x24
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2253      	movs	r2, #83	@ 0x53
 8007632:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f883 	bl	8007740 <RTC_EnterInitMode>
 800763a:	4603      	mov	r3, r0
 800763c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d12c      	bne.n	800769e <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	6812      	ldr	r2, [r2, #0]
 800764e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007656:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6899      	ldr	r1, [r3, #8]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	431a      	orrs	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	68d2      	ldr	r2, [r2, #12]
 800767e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6919      	ldr	r1, [r3, #16]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	041a      	lsls	r2, r3, #16
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f88b 	bl	80077b0 <RTC_ExitInitMode>
 800769a:	4603      	mov	r3, r0
 800769c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d113      	bne.n	80076cc <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0203 	bic.w	r2, r2, #3
 80076b2:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	69da      	ldr	r2, [r3, #28]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	22ff      	movs	r2, #255	@ 0xff
 80076d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80076d4:	e001      	b.n	80076da <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d103      	bne.n	80076e8 <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a0d      	ldr	r2, [pc, #52]	@ (800773c <HAL_RTC_WaitForSynchro+0x48>)
 8007706:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007708:	f7fb fd72 	bl	80031f0 <HAL_GetTick>
 800770c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800770e:	e009      	b.n	8007724 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007710:	f7fb fd6e 	bl	80031f0 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800771e:	d901      	bls.n	8007724 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e007      	b.n	8007734 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	f003 0320 	and.w	r3, r3, #32
 800772e:	2b00      	cmp	r3, #0
 8007730:	d0ee      	beq.n	8007710 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	0001ff5f 	.word	0x0001ff5f

08007740 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800775a:	2b00      	cmp	r3, #0
 800775c:	d123      	bne.n	80077a6 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800776c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800776e:	f7fb fd3f 	bl	80031f0 <HAL_GetTick>
 8007772:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007774:	e00d      	b.n	8007792 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007776:	f7fb fd3b 	bl	80031f0 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007784:	d905      	bls.n	8007792 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2204      	movs	r2, #4
 800778a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800779c:	2b00      	cmp	r3, #0
 800779e:	d102      	bne.n	80077a6 <RTC_EnterInitMode+0x66>
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d1e7      	bne.n	8007776 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80077a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077ca:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10b      	bne.n	80077f2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7ff ff8a 	bl	80076f4 <HAL_RTC_WaitForSynchro>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d005      	beq.n	80077f2 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2204      	movs	r2, #4
 80077ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8007808:	4b5f      	ldr	r3, [pc, #380]	@ (8007988 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a5f      	ldr	r2, [pc, #380]	@ (800798c <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800780e:	fba2 2303 	umull	r2, r3, r2, r3
 8007812:	0adb      	lsrs	r3, r3, #11
 8007814:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007818:	fb02 f303 	mul.w	r3, r2, r3
 800781c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d101      	bne.n	800782c <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 8007828:	2302      	movs	r3, #2
 800782a:	e0a7      	b.n	800797c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	22ca      	movs	r2, #202	@ 0xca
 8007842:	625a      	str	r2, [r3, #36]	@ 0x24
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2253      	movs	r2, #83	@ 0x53
 800784a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007856:	2b00      	cmp	r3, #0
 8007858:	d01a      	beq.n	8007890 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	3b01      	subs	r3, #1
 800785e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10d      	bne.n	8007882 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	22ff      	movs	r2, #255	@ 0xff
 800786c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2203      	movs	r2, #3
 8007872:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e07c      	b.n	800797c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f003 0304 	and.w	r3, r3, #4
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e4      	bne.n	800785a <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689a      	ldr	r2, [r3, #8]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800789e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80078b0:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80078b2:	4b35      	ldr	r3, [pc, #212]	@ (8007988 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a35      	ldr	r2, [pc, #212]	@ (800798c <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 80078b8:	fba2 2303 	umull	r2, r3, r2, r3
 80078bc:	0adb      	lsrs	r3, r3, #11
 80078be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80078c2:	fb02 f303 	mul.w	r3, r2, r3
 80078c6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	3b01      	subs	r3, #1
 80078cc:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10d      	bne.n	80078f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	22ff      	movs	r2, #255	@ 0xff
 80078da:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2203      	movs	r2, #3
 80078e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e045      	b.n	800797c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0e4      	beq.n	80078c8 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689a      	ldr	r2, [r3, #8]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f022 0207 	bic.w	r2, r2, #7
 800790c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6899      	ldr	r1, [r3, #8]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	430a      	orrs	r2, r1
 800791c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007926:	4b1a      	ldr	r3, [pc, #104]	@ (8007990 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8007928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800792c:	4a18      	ldr	r2, [pc, #96]	@ (8007990 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800792e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007932:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007936:	4b16      	ldr	r3, [pc, #88]	@ (8007990 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a15      	ldr	r2, [pc, #84]	@ (8007990 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800793c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007940:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689a      	ldr	r2, [r3, #8]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007950:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007960:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	22ff      	movs	r2, #255	@ 0xff
 8007968:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	371c      	adds	r7, #28
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	20000008 	.word	0x20000008
 800798c:	10624dd3 	.word	0x10624dd3
 8007990:	58000800 	.word	0x58000800

08007994 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e095      	b.n	8007ad2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d108      	bne.n	80079c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079b6:	d009      	beq.n	80079cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	61da      	str	r2, [r3, #28]
 80079be:	e005      	b.n	80079cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d106      	bne.n	80079ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7fb f9c2 	bl	8002d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a0c:	d902      	bls.n	8007a14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]
 8007a12:	e002      	b.n	8007a1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007a22:	d007      	beq.n	8007a34 <HAL_SPI_Init+0xa0>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a2c:	d002      	beq.n	8007a34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007a44:	431a      	orrs	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a6c:	431a      	orrs	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a76:	ea42 0103 	orr.w	r1, r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	0c1b      	lsrs	r3, r3, #16
 8007a90:	f003 0204 	and.w	r2, r3, #4
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a98:	f003 0310 	and.w	r3, r3, #16
 8007a9c:	431a      	orrs	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aa2:	f003 0308 	and.w	r3, r3, #8
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007ab0:	ea42 0103 	orr.w	r1, r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b088      	sub	sp, #32
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	603b      	str	r3, [r7, #0]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007aea:	f7fb fb81 	bl	80031f0 <HAL_GetTick>
 8007aee:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007af0:	88fb      	ldrh	r3, [r7, #6]
 8007af2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d001      	beq.n	8007b04 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007b00:	2302      	movs	r3, #2
 8007b02:	e15c      	b.n	8007dbe <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <HAL_SPI_Transmit+0x36>
 8007b0a:	88fb      	ldrh	r3, [r7, #6]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e154      	b.n	8007dbe <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d101      	bne.n	8007b22 <HAL_SPI_Transmit+0x48>
 8007b1e:	2302      	movs	r3, #2
 8007b20:	e14d      	b.n	8007dbe <HAL_SPI_Transmit+0x2e4>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2203      	movs	r2, #3
 8007b2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	88fa      	ldrh	r2, [r7, #6]
 8007b42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	88fa      	ldrh	r2, [r7, #6]
 8007b48:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b74:	d10f      	bne.n	8007b96 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ba0:	2b40      	cmp	r3, #64	@ 0x40
 8007ba2:	d007      	beq.n	8007bb4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007bbc:	d952      	bls.n	8007c64 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <HAL_SPI_Transmit+0xf2>
 8007bc6:	8b7b      	ldrh	r3, [r7, #26]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d145      	bne.n	8007c58 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd0:	881a      	ldrh	r2, [r3, #0]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bdc:	1c9a      	adds	r2, r3, #2
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	3b01      	subs	r3, #1
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007bf0:	e032      	b.n	8007c58 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d112      	bne.n	8007c26 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c04:	881a      	ldrh	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c10:	1c9a      	adds	r2, r3, #2
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c24:	e018      	b.n	8007c58 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c26:	f7fb fae3 	bl	80031f0 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d803      	bhi.n	8007c3e <HAL_SPI_Transmit+0x164>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c3c:	d102      	bne.n	8007c44 <HAL_SPI_Transmit+0x16a>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d109      	bne.n	8007c58 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e0b2      	b.n	8007dbe <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1c7      	bne.n	8007bf2 <HAL_SPI_Transmit+0x118>
 8007c62:	e083      	b.n	8007d6c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <HAL_SPI_Transmit+0x198>
 8007c6c:	8b7b      	ldrh	r3, [r7, #26]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d177      	bne.n	8007d62 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d912      	bls.n	8007ca2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c80:	881a      	ldrh	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c8c:	1c9a      	adds	r2, r3, #2
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	3b02      	subs	r3, #2
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ca0:	e05f      	b.n	8007d62 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	330c      	adds	r3, #12
 8007cac:	7812      	ldrb	r2, [r2, #0]
 8007cae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb4:	1c5a      	adds	r2, r3, #1
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007cc8:	e04b      	b.n	8007d62 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d12b      	bne.n	8007d30 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d912      	bls.n	8007d08 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce6:	881a      	ldrh	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf2:	1c9a      	adds	r2, r3, #2
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3b02      	subs	r3, #2
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d06:	e02c      	b.n	8007d62 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	330c      	adds	r3, #12
 8007d12:	7812      	ldrb	r2, [r2, #0]
 8007d14:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	3b01      	subs	r3, #1
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007d2e:	e018      	b.n	8007d62 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d30:	f7fb fa5e 	bl	80031f0 <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d803      	bhi.n	8007d48 <HAL_SPI_Transmit+0x26e>
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d46:	d102      	bne.n	8007d4e <HAL_SPI_Transmit+0x274>
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d109      	bne.n	8007d62 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e02d      	b.n	8007dbe <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1ae      	bne.n	8007cca <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d6c:	69fa      	ldr	r2, [r7, #28]
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 fb65 	bl	8008440 <SPI_EndRxTxTransaction>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10a      	bne.n	8007da0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	617b      	str	r3, [r7, #20]
 8007d9e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d001      	beq.n	8007dbc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e000      	b.n	8007dbe <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
  }
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3720      	adds	r7, #32
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b08a      	sub	sp, #40	@ 0x28
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	607a      	str	r2, [r7, #4]
 8007dd2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dd8:	f7fb fa0a 	bl	80031f0 <HAL_GetTick>
 8007ddc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007de4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007dec:	887b      	ldrh	r3, [r7, #2]
 8007dee:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007df0:	887b      	ldrh	r3, [r7, #2]
 8007df2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007df4:	7ffb      	ldrb	r3, [r7, #31]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d00c      	beq.n	8007e14 <HAL_SPI_TransmitReceive+0x4e>
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e00:	d106      	bne.n	8007e10 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d102      	bne.n	8007e10 <HAL_SPI_TransmitReceive+0x4a>
 8007e0a:	7ffb      	ldrb	r3, [r7, #31]
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d001      	beq.n	8007e14 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007e10:	2302      	movs	r3, #2
 8007e12:	e1f3      	b.n	80081fc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d005      	beq.n	8007e26 <HAL_SPI_TransmitReceive+0x60>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <HAL_SPI_TransmitReceive+0x60>
 8007e20:	887b      	ldrh	r3, [r7, #2]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e1e8      	b.n	80081fc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d101      	bne.n	8007e38 <HAL_SPI_TransmitReceive+0x72>
 8007e34:	2302      	movs	r3, #2
 8007e36:	e1e1      	b.n	80081fc <HAL_SPI_TransmitReceive+0x436>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b04      	cmp	r3, #4
 8007e4a:	d003      	beq.n	8007e54 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2205      	movs	r2, #5
 8007e50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	887a      	ldrh	r2, [r7, #2]
 8007e64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	887a      	ldrh	r2, [r7, #2]
 8007e6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	887a      	ldrh	r2, [r7, #2]
 8007e7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	887a      	ldrh	r2, [r7, #2]
 8007e80:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e96:	d802      	bhi.n	8007e9e <HAL_SPI_TransmitReceive+0xd8>
 8007e98:	8abb      	ldrh	r3, [r7, #20]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d908      	bls.n	8007eb0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007eac:	605a      	str	r2, [r3, #4]
 8007eae:	e007      	b.n	8007ec0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ebe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eca:	2b40      	cmp	r3, #64	@ 0x40
 8007ecc:	d007      	beq.n	8007ede <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007edc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007ee6:	f240 8083 	bls.w	8007ff0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d002      	beq.n	8007ef8 <HAL_SPI_TransmitReceive+0x132>
 8007ef2:	8afb      	ldrh	r3, [r7, #22]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d16f      	bne.n	8007fd8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007efc:	881a      	ldrh	r2, [r3, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f08:	1c9a      	adds	r2, r3, #2
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f1c:	e05c      	b.n	8007fd8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d11b      	bne.n	8007f64 <HAL_SPI_TransmitReceive+0x19e>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d016      	beq.n	8007f64 <HAL_SPI_TransmitReceive+0x19e>
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d113      	bne.n	8007f64 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f40:	881a      	ldrh	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4c:	1c9a      	adds	r2, r3, #2
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d11c      	bne.n	8007fac <HAL_SPI_TransmitReceive+0x1e6>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d016      	beq.n	8007fac <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f88:	b292      	uxth	r2, r2
 8007f8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f90:	1c9a      	adds	r2, r3, #2
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007fac:	f7fb f920 	bl	80031f0 <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d80d      	bhi.n	8007fd8 <HAL_SPI_TransmitReceive+0x212>
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc2:	d009      	beq.n	8007fd8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007fd4:	2303      	movs	r3, #3
 8007fd6:	e111      	b.n	80081fc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d19d      	bne.n	8007f1e <HAL_SPI_TransmitReceive+0x158>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d197      	bne.n	8007f1e <HAL_SPI_TransmitReceive+0x158>
 8007fee:	e0e5      	b.n	80081bc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <HAL_SPI_TransmitReceive+0x23a>
 8007ff8:	8afb      	ldrh	r3, [r7, #22]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	f040 80d1 	bne.w	80081a2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008004:	b29b      	uxth	r3, r3
 8008006:	2b01      	cmp	r3, #1
 8008008:	d912      	bls.n	8008030 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800800e:	881a      	ldrh	r2, [r3, #0]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801a:	1c9a      	adds	r2, r3, #2
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008024:	b29b      	uxth	r3, r3
 8008026:	3b02      	subs	r3, #2
 8008028:	b29a      	uxth	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800802e:	e0b8      	b.n	80081a2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	330c      	adds	r3, #12
 800803a:	7812      	ldrb	r2, [r2, #0]
 800803c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800804c:	b29b      	uxth	r3, r3
 800804e:	3b01      	subs	r3, #1
 8008050:	b29a      	uxth	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008056:	e0a4      	b.n	80081a2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f003 0302 	and.w	r3, r3, #2
 8008062:	2b02      	cmp	r3, #2
 8008064:	d134      	bne.n	80080d0 <HAL_SPI_TransmitReceive+0x30a>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800806a:	b29b      	uxth	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d02f      	beq.n	80080d0 <HAL_SPI_TransmitReceive+0x30a>
 8008070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008072:	2b01      	cmp	r3, #1
 8008074:	d12c      	bne.n	80080d0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800807a:	b29b      	uxth	r3, r3
 800807c:	2b01      	cmp	r3, #1
 800807e:	d912      	bls.n	80080a6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008084:	881a      	ldrh	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008090:	1c9a      	adds	r2, r3, #2
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b02      	subs	r3, #2
 800809e:	b29a      	uxth	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80080a4:	e012      	b.n	80080cc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	330c      	adds	r3, #12
 80080b0:	7812      	ldrb	r2, [r2, #0]
 80080b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b8:	1c5a      	adds	r2, r3, #1
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	3b01      	subs	r3, #1
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d148      	bne.n	8008170 <HAL_SPI_TransmitReceive+0x3aa>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d042      	beq.n	8008170 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d923      	bls.n	800813e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68da      	ldr	r2, [r3, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008100:	b292      	uxth	r2, r2
 8008102:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008108:	1c9a      	adds	r2, r3, #2
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008114:	b29b      	uxth	r3, r3
 8008116:	3b02      	subs	r3, #2
 8008118:	b29a      	uxth	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008126:	b29b      	uxth	r3, r3
 8008128:	2b01      	cmp	r3, #1
 800812a:	d81f      	bhi.n	800816c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800813a:	605a      	str	r2, [r3, #4]
 800813c:	e016      	b.n	800816c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f103 020c 	add.w	r2, r3, #12
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800814a:	7812      	ldrb	r2, [r2, #0]
 800814c:	b2d2      	uxtb	r2, r2
 800814e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008154:	1c5a      	adds	r2, r3, #1
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008160:	b29b      	uxth	r3, r3
 8008162:	3b01      	subs	r3, #1
 8008164:	b29a      	uxth	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800816c:	2301      	movs	r3, #1
 800816e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008170:	f7fb f83e 	bl	80031f0 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800817c:	429a      	cmp	r2, r3
 800817e:	d803      	bhi.n	8008188 <HAL_SPI_TransmitReceive+0x3c2>
 8008180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008186:	d102      	bne.n	800818e <HAL_SPI_TransmitReceive+0x3c8>
 8008188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818a:	2b00      	cmp	r3, #0
 800818c:	d109      	bne.n	80081a2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e02c      	b.n	80081fc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f47f af55 	bne.w	8008058 <HAL_SPI_TransmitReceive+0x292>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f47f af4e 	bne.w	8008058 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081bc:	6a3a      	ldr	r2, [r7, #32]
 80081be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 f93d 	bl	8008440 <SPI_EndRxTxTransaction>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d008      	beq.n	80081de <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2220      	movs	r2, #32
 80081d0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e00e      	b.n	80081fc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e000      	b.n	80081fc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80081fa:	2300      	movs	r3, #0
  }
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3728      	adds	r7, #40	@ 0x28
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	603b      	str	r3, [r7, #0]
 8008210:	4613      	mov	r3, r2
 8008212:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008214:	f7fa ffec 	bl	80031f0 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821c:	1a9b      	subs	r3, r3, r2
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	4413      	add	r3, r2
 8008222:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008224:	f7fa ffe4 	bl	80031f0 <HAL_GetTick>
 8008228:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800822a:	4b39      	ldr	r3, [pc, #228]	@ (8008310 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	015b      	lsls	r3, r3, #5
 8008230:	0d1b      	lsrs	r3, r3, #20
 8008232:	69fa      	ldr	r2, [r7, #28]
 8008234:	fb02 f303 	mul.w	r3, r2, r3
 8008238:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800823a:	e054      	b.n	80082e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008242:	d050      	beq.n	80082e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008244:	f7fa ffd4 	bl	80031f0 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	69fa      	ldr	r2, [r7, #28]
 8008250:	429a      	cmp	r2, r3
 8008252:	d902      	bls.n	800825a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d13d      	bne.n	80082d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008268:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008272:	d111      	bne.n	8008298 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800827c:	d004      	beq.n	8008288 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008286:	d107      	bne.n	8008298 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008296:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800829c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082a0:	d10f      	bne.n	80082c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e017      	b.n	8008306 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	4013      	ands	r3, r2
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	bf0c      	ite	eq
 80082f6:	2301      	moveq	r3, #1
 80082f8:	2300      	movne	r3, #0
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	461a      	mov	r2, r3
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	429a      	cmp	r2, r3
 8008302:	d19b      	bne.n	800823c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3720      	adds	r7, #32
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20000008 	.word	0x20000008

08008314 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b08a      	sub	sp, #40	@ 0x28
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008326:	f7fa ff63 	bl	80031f0 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832e:	1a9b      	subs	r3, r3, r2
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	4413      	add	r3, r2
 8008334:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008336:	f7fa ff5b 	bl	80031f0 <HAL_GetTick>
 800833a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	330c      	adds	r3, #12
 8008342:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008344:	4b3d      	ldr	r3, [pc, #244]	@ (800843c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	4613      	mov	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	00da      	lsls	r2, r3, #3
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	0d1b      	lsrs	r3, r3, #20
 8008354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008356:	fb02 f303 	mul.w	r3, r2, r3
 800835a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800835c:	e060      	b.n	8008420 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008364:	d107      	bne.n	8008376 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d104      	bne.n	8008376 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008374:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837c:	d050      	beq.n	8008420 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800837e:	f7fa ff37 	bl	80031f0 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800838a:	429a      	cmp	r2, r3
 800838c:	d902      	bls.n	8008394 <SPI_WaitFifoStateUntilTimeout+0x80>
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	2b00      	cmp	r3, #0
 8008392:	d13d      	bne.n	8008410 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80083a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083ac:	d111      	bne.n	80083d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083b6:	d004      	beq.n	80083c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083c0:	d107      	bne.n	80083d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083da:	d10f      	bne.n	80083fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80083fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800840c:	2303      	movs	r3, #3
 800840e:	e010      	b.n	8008432 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d101      	bne.n	800841a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	3b01      	subs	r3, #1
 800841e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	4013      	ands	r3, r2
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	429a      	cmp	r2, r3
 800842e:	d196      	bne.n	800835e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3728      	adds	r7, #40	@ 0x28
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20000008 	.word	0x20000008

08008440 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af02      	add	r7, sp, #8
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2200      	movs	r2, #0
 8008454:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f7ff ff5b 	bl	8008314 <SPI_WaitFifoStateUntilTimeout>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d007      	beq.n	8008474 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008468:	f043 0220 	orr.w	r2, r3, #32
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e027      	b.n	80084c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2200      	movs	r2, #0
 800847c:	2180      	movs	r1, #128	@ 0x80
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f7ff fec0 	bl	8008204 <SPI_WaitFlagStateUntilTimeout>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d007      	beq.n	800849a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800848e:	f043 0220 	orr.w	r2, r3, #32
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e014      	b.n	80084c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f7ff ff34 	bl	8008314 <SPI_WaitFifoStateUntilTimeout>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d007      	beq.n	80084c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084b6:	f043 0220 	orr.w	r2, r3, #32
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e000      	b.n	80084c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08a      	sub	sp, #40	@ 0x28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	4613      	mov	r3, r2
 80084d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084e0:	2b20      	cmp	r3, #32
 80084e2:	d167      	bne.n	80085b4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <HAL_UART_Transmit_DMA+0x24>
 80084ea:	88fb      	ldrh	r3, [r7, #6]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e060      	b.n	80085b6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	88fa      	ldrh	r2, [r7, #6]
 80084fe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	88fa      	ldrh	r2, [r7, #6]
 8008506:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2221      	movs	r2, #33	@ 0x21
 8008516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d028      	beq.n	8008574 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008526:	4a26      	ldr	r2, [pc, #152]	@ (80085c0 <HAL_UART_Transmit_DMA+0xf4>)
 8008528:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800852e:	4a25      	ldr	r2, [pc, #148]	@ (80085c4 <HAL_UART_Transmit_DMA+0xf8>)
 8008530:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008536:	4a24      	ldr	r2, [pc, #144]	@ (80085c8 <HAL_UART_Transmit_DMA+0xfc>)
 8008538:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800853e:	2200      	movs	r2, #0
 8008540:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800854a:	4619      	mov	r1, r3
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3328      	adds	r3, #40	@ 0x28
 8008552:	461a      	mov	r2, r3
 8008554:	88fb      	ldrh	r3, [r7, #6]
 8008556:	f7fb f808 	bl	800356a <HAL_DMA_Start_IT>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d009      	beq.n	8008574 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2210      	movs	r2, #16
 8008564:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2220      	movs	r2, #32
 800856c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e020      	b.n	80085b6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2240      	movs	r2, #64	@ 0x40
 800857a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3308      	adds	r3, #8
 8008582:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	e853 3f00 	ldrex	r3, [r3]
 800858a:	613b      	str	r3, [r7, #16]
   return(result);
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008592:	627b      	str	r3, [r7, #36]	@ 0x24
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3308      	adds	r3, #8
 800859a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800859c:	623a      	str	r2, [r7, #32]
 800859e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a0:	69f9      	ldr	r1, [r7, #28]
 80085a2:	6a3a      	ldr	r2, [r7, #32]
 80085a4:	e841 2300 	strex	r3, r2, [r1]
 80085a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1e5      	bne.n	800857c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	e000      	b.n	80085b6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80085b4:	2302      	movs	r3, #2
  }
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3728      	adds	r7, #40	@ 0x28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	08008dc3 	.word	0x08008dc3
 80085c4:	08008e61 	.word	0x08008e61
 80085c8:	08008e81 	.word	0x08008e81

080085cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b0ba      	sub	sp, #232	@ 0xe8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80085f6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80085fa:	4013      	ands	r3, r2
 80085fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008600:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008604:	2b00      	cmp	r3, #0
 8008606:	d11b      	bne.n	8008640 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800860c:	f003 0320 	and.w	r3, r3, #32
 8008610:	2b00      	cmp	r3, #0
 8008612:	d015      	beq.n	8008640 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008618:	f003 0320 	and.w	r3, r3, #32
 800861c:	2b00      	cmp	r3, #0
 800861e:	d105      	bne.n	800862c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d009      	beq.n	8008640 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 8312 	beq.w	8008c5a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	4798      	blx	r3
      }
      return;
 800863e:	e30c      	b.n	8008c5a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 8129 	beq.w	800889c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800864a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800864e:	4b90      	ldr	r3, [pc, #576]	@ (8008890 <HAL_UART_IRQHandler+0x2c4>)
 8008650:	4013      	ands	r3, r2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d106      	bne.n	8008664 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008656:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800865a:	4b8e      	ldr	r3, [pc, #568]	@ (8008894 <HAL_UART_IRQHandler+0x2c8>)
 800865c:	4013      	ands	r3, r2
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 811c 	beq.w	800889c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	2b00      	cmp	r3, #0
 800866e:	d011      	beq.n	8008694 <HAL_UART_IRQHandler+0xc8>
 8008670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2201      	movs	r2, #1
 8008682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800868a:	f043 0201 	orr.w	r2, r3, #1
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d011      	beq.n	80086c4 <HAL_UART_IRQHandler+0xf8>
 80086a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00b      	beq.n	80086c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2202      	movs	r2, #2
 80086b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ba:	f043 0204 	orr.w	r2, r3, #4
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086c8:	f003 0304 	and.w	r3, r3, #4
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d011      	beq.n	80086f4 <HAL_UART_IRQHandler+0x128>
 80086d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00b      	beq.n	80086f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2204      	movs	r2, #4
 80086e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ea:	f043 0202 	orr.w	r2, r3, #2
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f8:	f003 0308 	and.w	r3, r3, #8
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d017      	beq.n	8008730 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008704:	f003 0320 	and.w	r3, r3, #32
 8008708:	2b00      	cmp	r3, #0
 800870a:	d105      	bne.n	8008718 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800870c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008710:	4b5f      	ldr	r3, [pc, #380]	@ (8008890 <HAL_UART_IRQHandler+0x2c4>)
 8008712:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00b      	beq.n	8008730 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2208      	movs	r2, #8
 800871e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008726:	f043 0208 	orr.w	r2, r3, #8
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008734:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008738:	2b00      	cmp	r3, #0
 800873a:	d012      	beq.n	8008762 <HAL_UART_IRQHandler+0x196>
 800873c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008740:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00c      	beq.n	8008762 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008758:	f043 0220 	orr.w	r2, r3, #32
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 8278 	beq.w	8008c5e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800876e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b00      	cmp	r3, #0
 8008778:	d013      	beq.n	80087a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800877a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800877e:	f003 0320 	and.w	r3, r3, #32
 8008782:	2b00      	cmp	r3, #0
 8008784:	d105      	bne.n	8008792 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800878a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d007      	beq.n	80087a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b6:	2b40      	cmp	r3, #64	@ 0x40
 80087b8:	d005      	beq.n	80087c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80087ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80087be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d058      	beq.n	8008878 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fa95 	bl	8008cf6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087d6:	2b40      	cmp	r3, #64	@ 0x40
 80087d8:	d148      	bne.n	800886c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80087f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3308      	adds	r3, #8
 8008802:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008806:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800880a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008812:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800881e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1d9      	bne.n	80087da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800882c:	2b00      	cmp	r3, #0
 800882e:	d017      	beq.n	8008860 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008836:	4a18      	ldr	r2, [pc, #96]	@ (8008898 <HAL_UART_IRQHandler+0x2cc>)
 8008838:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008840:	4618      	mov	r0, r3
 8008842:	f7fa ff6c 	bl	800371e <HAL_DMA_Abort_IT>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d01f      	beq.n	800888c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800885a:	4610      	mov	r0, r2
 800885c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800885e:	e015      	b.n	800888c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800886a:	e00f      	b.n	800888c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008876:	e009      	b.n	800888c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800888a:	e1e8      	b.n	8008c5e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800888c:	bf00      	nop
    return;
 800888e:	e1e6      	b.n	8008c5e <HAL_UART_IRQHandler+0x692>
 8008890:	10000001 	.word	0x10000001
 8008894:	04000120 	.word	0x04000120
 8008898:	08008f05 	.word	0x08008f05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	f040 8176 	bne.w	8008b92 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80088a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088aa:	f003 0310 	and.w	r3, r3, #16
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f000 816f 	beq.w	8008b92 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80088b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088b8:	f003 0310 	and.w	r3, r3, #16
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 8168 	beq.w	8008b92 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2210      	movs	r2, #16
 80088c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d4:	2b40      	cmp	r3, #64	@ 0x40
 80088d6:	f040 80dc 	bne.w	8008a92 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	f000 80b1 	beq.w	8008a54 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80088f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088fc:	429a      	cmp	r2, r3
 80088fe:	f080 80a9 	bcs.w	8008a54 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008908:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0320 	and.w	r3, r3, #32
 800891a:	2b00      	cmp	r3, #0
 800891c:	f040 8087 	bne.w	8008a2e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008934:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800893c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	461a      	mov	r2, r3
 8008946:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800894a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800894e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008952:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008956:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800895a:	e841 2300 	strex	r3, r2, [r1]
 800895e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008962:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1da      	bne.n	8008920 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	3308      	adds	r3, #8
 8008970:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008974:	e853 3f00 	ldrex	r3, [r3]
 8008978:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800897a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800897c:	f023 0301 	bic.w	r3, r3, #1
 8008980:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3308      	adds	r3, #8
 800898a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800898e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008992:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008994:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008996:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80089a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e1      	bne.n	800896a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3308      	adds	r3, #8
 80089ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089b0:	e853 3f00 	ldrex	r3, [r3]
 80089b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3308      	adds	r3, #8
 80089c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089d2:	e841 2300 	strex	r3, r2, [r1]
 80089d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1e3      	bne.n	80089a6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2220      	movs	r2, #32
 80089e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089f4:	e853 3f00 	ldrex	r3, [r3]
 80089f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089fc:	f023 0310 	bic.w	r3, r3, #16
 8008a00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008a10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e4      	bne.n	80089ec <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fa fe19 	bl	8003660 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2202      	movs	r2, #2
 8008a32:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8008a46:	b292      	uxth	r2, r2
 8008a48:	1a8a      	subs	r2, r1, r2
 8008a4a:	b292      	uxth	r2, r2
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008a52:	e106      	b.n	8008c62 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	f040 80ff 	bne.w	8008c62 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0320 	and.w	r3, r3, #32
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	f040 80f5 	bne.w	8008c62 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	4798      	blx	r3
      return;
 8008a90:	e0e7      	b.n	8008c62 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 80d9 	beq.w	8008c66 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8008ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 80d4 	beq.w	8008c66 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac6:	e853 3f00 	ldrex	r3, [r3]
 8008aca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ace:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ad2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ae2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ae6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ae8:	e841 2300 	strex	r3, r2, [r1]
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e4      	bne.n	8008abe <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3308      	adds	r3, #8
 8008afa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	623b      	str	r3, [r7, #32]
   return(result);
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b0a:	f023 0301 	bic.w	r3, r3, #1
 8008b0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3308      	adds	r3, #8
 8008b18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b24:	e841 2300 	strex	r3, r2, [r1]
 8008b28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1e1      	bne.n	8008af4 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2220      	movs	r2, #32
 8008b34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f023 0310 	bic.w	r3, r3, #16
 8008b58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	461a      	mov	r2, r3
 8008b62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008b66:	61fb      	str	r3, [r7, #28]
 8008b68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6a:	69b9      	ldr	r1, [r7, #24]
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	617b      	str	r3, [r7, #20]
   return(result);
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e4      	bne.n	8008b44 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b86:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b90:	e069      	b.n	8008c66 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d010      	beq.n	8008bc0 <HAL_UART_IRQHandler+0x5f4>
 8008b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008bb2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bbe:	e055      	b.n	8008c6c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d014      	beq.n	8008bf6 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d105      	bne.n	8008be4 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d008      	beq.n	8008bf6 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d03e      	beq.n	8008c6a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	4798      	blx	r3
    }
    return;
 8008bf4:	e039      	b.n	8008c6a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d009      	beq.n	8008c16 <HAL_UART_IRQHandler+0x64a>
 8008c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f98c 	bl	8008f2c <UART_EndTransmit_IT>
    return;
 8008c14:	e02a      	b.n	8008c6c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00b      	beq.n	8008c3a <HAL_UART_IRQHandler+0x66e>
 8008c22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c26:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d005      	beq.n	8008c3a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c38:	e018      	b.n	8008c6c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d012      	beq.n	8008c6c <HAL_UART_IRQHandler+0x6a0>
 8008c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	da0e      	bge.n	8008c6c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c58:	e008      	b.n	8008c6c <HAL_UART_IRQHandler+0x6a0>
      return;
 8008c5a:	bf00      	nop
 8008c5c:	e006      	b.n	8008c6c <HAL_UART_IRQHandler+0x6a0>
    return;
 8008c5e:	bf00      	nop
 8008c60:	e004      	b.n	8008c6c <HAL_UART_IRQHandler+0x6a0>
      return;
 8008c62:	bf00      	nop
 8008c64:	e002      	b.n	8008c6c <HAL_UART_IRQHandler+0x6a0>
      return;
 8008c66:	bf00      	nop
 8008c68:	e000      	b.n	8008c6c <HAL_UART_IRQHandler+0x6a0>
    return;
 8008c6a:	bf00      	nop
  }
}
 8008c6c:	37e8      	adds	r7, #232	@ 0xe8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop

08008c74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b08f      	sub	sp, #60	@ 0x3c
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c82:	6a3b      	ldr	r3, [r7, #32]
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c9c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ca0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e6      	bne.n	8008c7c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	e853 3f00 	ldrex	r3, [r3]
 8008cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008cc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3308      	adds	r3, #8
 8008ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cce:	61ba      	str	r2, [r7, #24]
 8008cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	6979      	ldr	r1, [r7, #20]
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	e841 2300 	strex	r3, r2, [r1]
 8008cda:	613b      	str	r3, [r7, #16]
   return(result);
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1e5      	bne.n	8008cae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008cea:	bf00      	nop
 8008cec:	373c      	adds	r7, #60	@ 0x3c
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b095      	sub	sp, #84	@ 0x54
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d06:	e853 3f00 	ldrex	r3, [r3]
 8008d0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d24:	e841 2300 	strex	r3, r2, [r1]
 8008d28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1e6      	bne.n	8008cfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3308      	adds	r3, #8
 8008d36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	e853 3f00 	ldrex	r3, [r3]
 8008d3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d46:	f023 0301 	bic.w	r3, r3, #1
 8008d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3308      	adds	r3, #8
 8008d52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d5c:	e841 2300 	strex	r3, r2, [r1]
 8008d60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1e3      	bne.n	8008d30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d118      	bne.n	8008da2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f023 0310 	bic.w	r3, r3, #16
 8008d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d8e:	61bb      	str	r3, [r7, #24]
 8008d90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6979      	ldr	r1, [r7, #20]
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e6      	bne.n	8008d70 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2200      	movs	r2, #0
 8008dae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008db6:	bf00      	nop
 8008db8:	3754      	adds	r7, #84	@ 0x54
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b090      	sub	sp, #64	@ 0x40
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0320 	and.w	r3, r3, #32
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d137      	bne.n	8008e4e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008de0:	2200      	movs	r2, #0
 8008de2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	3308      	adds	r3, #8
 8008dec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df0:	e853 3f00 	ldrex	r3, [r3]
 8008df4:	623b      	str	r3, [r7, #32]
   return(result);
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3308      	adds	r3, #8
 8008e04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e06:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e0e:	e841 2300 	strex	r3, r2, [r1]
 8008e12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1e5      	bne.n	8008de6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e38:	61fb      	str	r3, [r7, #28]
 8008e3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	69b9      	ldr	r1, [r7, #24]
 8008e3e:	69fa      	ldr	r2, [r7, #28]
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	617b      	str	r3, [r7, #20]
   return(result);
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e6      	bne.n	8008e1a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e4c:	e004      	b.n	8008e58 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8008e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008e56:	4798      	blx	r3
}
 8008e58:	bf00      	nop
 8008e5a:	3740      	adds	r7, #64	@ 0x40
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e6c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e78:	bf00      	nop
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e8c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e94:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e9c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ea8:	2b80      	cmp	r3, #128	@ 0x80
 8008eaa:	d109      	bne.n	8008ec0 <UART_DMAError+0x40>
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	2b21      	cmp	r3, #33	@ 0x21
 8008eb0:	d106      	bne.n	8008ec0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008eba:	6978      	ldr	r0, [r7, #20]
 8008ebc:	f7ff feda 	bl	8008c74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eca:	2b40      	cmp	r3, #64	@ 0x40
 8008ecc:	d109      	bne.n	8008ee2 <UART_DMAError+0x62>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2b22      	cmp	r3, #34	@ 0x22
 8008ed2:	d106      	bne.n	8008ee2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008edc:	6978      	ldr	r0, [r7, #20]
 8008ede:	f7ff ff0a 	bl	8008cf6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ee8:	f043 0210 	orr.w	r2, r3, #16
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ef8:	6978      	ldr	r0, [r7, #20]
 8008efa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008efc:	bf00      	nop
 8008efe:	3718      	adds	r7, #24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f24:	bf00      	nop
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	e853 3f00 	ldrex	r3, [r3]
 8008f40:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f48:	61fb      	str	r3, [r7, #28]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	61bb      	str	r3, [r7, #24]
 8008f54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f56:	6979      	ldr	r1, [r7, #20]
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1e6      	bne.n	8008f34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f7e:	bf00      	nop
 8008f80:	3720      	adds	r7, #32
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008f86:	b480      	push	{r7}
 8008f88:	b085      	sub	sp, #20
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008f96:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008f9a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3714      	adds	r7, #20
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008fbc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008fc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	43db      	mvns	r3, r3
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	1d3b      	adds	r3, r7, #4
 8008ff4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
	...

08009028 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009028:	b480      	push	{r7}
 800902a:	b0a7      	sub	sp, #156	@ 0x9c
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4413      	add	r3, r2
 8009042:	881b      	ldrh	r3, [r3, #0]
 8009044:	b29b      	uxth	r3, r3
 8009046:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800904a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800904e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	78db      	ldrb	r3, [r3, #3]
 8009056:	2b03      	cmp	r3, #3
 8009058:	d81f      	bhi.n	800909a <USB_ActivateEndpoint+0x72>
 800905a:	a201      	add	r2, pc, #4	@ (adr r2, 8009060 <USB_ActivateEndpoint+0x38>)
 800905c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009060:	08009071 	.word	0x08009071
 8009064:	0800908d 	.word	0x0800908d
 8009068:	080090a3 	.word	0x080090a3
 800906c:	0800907f 	.word	0x0800907f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009070:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009074:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009078:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800907c:	e012      	b.n	80090a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800907e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009082:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009086:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800908a:	e00b      	b.n	80090a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800908c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8009090:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009094:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8009098:	e004      	b.n	80090a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80090a0:	e000      	b.n	80090a4 <USB_ActivateEndpoint+0x7c>
      break;
 80090a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	441a      	add	r2, r3
 80090ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80090b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	b21b      	sxth	r3, r3
 80090d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090de:	b21a      	sxth	r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	b21b      	sxth	r3, r3
 80090e6:	4313      	orrs	r3, r2
 80090e8:	b21b      	sxth	r3, r3
 80090ea:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	441a      	add	r2, r3
 80090f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80090fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009100:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009104:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800910c:	b29b      	uxth	r3, r3
 800910e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	7b1b      	ldrb	r3, [r3, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	f040 8180 	bne.w	800941a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	785b      	ldrb	r3, [r3, #1]
 800911e:	2b00      	cmp	r3, #0
 8009120:	f000 8084 	beq.w	800922c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	61bb      	str	r3, [r7, #24]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800912e:	b29b      	uxth	r3, r3
 8009130:	461a      	mov	r2, r3
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	4413      	add	r3, r2
 8009136:	61bb      	str	r3, [r7, #24]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	00da      	lsls	r2, r3, #3
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	4413      	add	r3, r2
 8009142:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009146:	617b      	str	r3, [r7, #20]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	88db      	ldrh	r3, [r3, #6]
 800914c:	085b      	lsrs	r3, r3, #1
 800914e:	b29b      	uxth	r3, r3
 8009150:	005b      	lsls	r3, r3, #1
 8009152:	b29a      	uxth	r2, r3
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	827b      	strh	r3, [r7, #18]
 8009166:	8a7b      	ldrh	r3, [r7, #18]
 8009168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800916c:	2b00      	cmp	r3, #0
 800916e:	d01b      	beq.n	80091a8 <USB_ActivateEndpoint+0x180>
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	b29b      	uxth	r3, r3
 800917e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009186:	823b      	strh	r3, [r7, #16]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	441a      	add	r2, r3
 8009192:	8a3b      	ldrh	r3, [r7, #16]
 8009194:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009198:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800919c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	78db      	ldrb	r3, [r3, #3]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d020      	beq.n	80091f2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091c6:	81bb      	strh	r3, [r7, #12]
 80091c8:	89bb      	ldrh	r3, [r7, #12]
 80091ca:	f083 0320 	eor.w	r3, r3, #32
 80091ce:	81bb      	strh	r3, [r7, #12]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	441a      	add	r2, r3
 80091da:	89bb      	ldrh	r3, [r7, #12]
 80091dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	8013      	strh	r3, [r2, #0]
 80091f0:	e3f9      	b.n	80099e6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	b29b      	uxth	r3, r3
 8009200:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009204:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009208:	81fb      	strh	r3, [r7, #14]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	441a      	add	r2, r3
 8009214:	89fb      	ldrh	r3, [r7, #14]
 8009216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800921a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800921e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009226:	b29b      	uxth	r3, r3
 8009228:	8013      	strh	r3, [r2, #0]
 800922a:	e3dc      	b.n	80099e6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009236:	b29b      	uxth	r3, r3
 8009238:	461a      	mov	r2, r3
 800923a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800923c:	4413      	add	r3, r2
 800923e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	00da      	lsls	r2, r3, #3
 8009246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009248:	4413      	add	r3, r2
 800924a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800924e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	88db      	ldrh	r3, [r3, #6]
 8009254:	085b      	lsrs	r3, r3, #1
 8009256:	b29b      	uxth	r3, r3
 8009258:	005b      	lsls	r3, r3, #1
 800925a:	b29a      	uxth	r2, r3
 800925c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800925e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800926a:	b29b      	uxth	r3, r3
 800926c:	461a      	mov	r2, r3
 800926e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009270:	4413      	add	r3, r2
 8009272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	00da      	lsls	r2, r3, #3
 800927a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927c:	4413      	add	r3, r2
 800927e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009282:	627b      	str	r3, [r7, #36]	@ 0x24
 8009284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	b29b      	uxth	r3, r3
 800928a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800928e:	b29a      	uxth	r2, r3
 8009290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009292:	801a      	strh	r2, [r3, #0]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10a      	bne.n	80092b2 <USB_ActivateEndpoint+0x28a>
 800929c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ae:	801a      	strh	r2, [r3, #0]
 80092b0:	e041      	b.n	8009336 <USB_ActivateEndpoint+0x30e>
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80092b8:	d81c      	bhi.n	80092f4 <USB_ActivateEndpoint+0x2cc>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	085b      	lsrs	r3, r3, #1
 80092c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	f003 0301 	and.w	r3, r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d004      	beq.n	80092da <USB_ActivateEndpoint+0x2b2>
 80092d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092d4:	3301      	adds	r3, #1
 80092d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	b29a      	uxth	r2, r3
 80092e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	029b      	lsls	r3, r3, #10
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	4313      	orrs	r3, r2
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	e020      	b.n	8009336 <USB_ActivateEndpoint+0x30e>
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	095b      	lsrs	r3, r3, #5
 80092fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	f003 031f 	and.w	r3, r3, #31
 8009306:	2b00      	cmp	r3, #0
 8009308:	d104      	bne.n	8009314 <USB_ActivateEndpoint+0x2ec>
 800930a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800930e:	3b01      	subs	r3, #1
 8009310:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	b29a      	uxth	r2, r3
 800931a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800931e:	b29b      	uxth	r3, r3
 8009320:	029b      	lsls	r3, r3, #10
 8009322:	b29b      	uxth	r3, r3
 8009324:	4313      	orrs	r3, r2
 8009326:	b29b      	uxth	r3, r3
 8009328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800932c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009330:	b29a      	uxth	r2, r3
 8009332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009334:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	881b      	ldrh	r3, [r3, #0]
 8009342:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009344:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800934a:	2b00      	cmp	r3, #0
 800934c:	d01b      	beq.n	8009386 <USB_ActivateEndpoint+0x35e>
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	b29b      	uxth	r3, r3
 800935c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009364:	843b      	strh	r3, [r7, #32]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	441a      	add	r2, r3
 8009370:	8c3b      	ldrh	r3, [r7, #32]
 8009372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800937a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800937e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009382:	b29b      	uxth	r3, r3
 8009384:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d124      	bne.n	80093d8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	b29b      	uxth	r3, r3
 800939c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093a4:	83bb      	strh	r3, [r7, #28]
 80093a6:	8bbb      	ldrh	r3, [r7, #28]
 80093a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80093ac:	83bb      	strh	r3, [r7, #28]
 80093ae:	8bbb      	ldrh	r3, [r7, #28]
 80093b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80093b4:	83bb      	strh	r3, [r7, #28]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	441a      	add	r2, r3
 80093c0:	8bbb      	ldrh	r3, [r7, #28]
 80093c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	8013      	strh	r3, [r2, #0]
 80093d6:	e306      	b.n	80099e6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ee:	83fb      	strh	r3, [r7, #30]
 80093f0:	8bfb      	ldrh	r3, [r7, #30]
 80093f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80093f6:	83fb      	strh	r3, [r7, #30]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	441a      	add	r2, r3
 8009402:	8bfb      	ldrh	r3, [r7, #30]
 8009404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800940c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009414:	b29b      	uxth	r3, r3
 8009416:	8013      	strh	r3, [r2, #0]
 8009418:	e2e5      	b.n	80099e6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	78db      	ldrb	r3, [r3, #3]
 800941e:	2b02      	cmp	r3, #2
 8009420:	d11e      	bne.n	8009460 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	b29b      	uxth	r3, r3
 8009430:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009438:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	441a      	add	r2, r3
 8009446:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800944a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800944e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009452:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800945a:	b29b      	uxth	r3, r3
 800945c:	8013      	strh	r3, [r2, #0]
 800945e:	e01d      	b.n	800949c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	881b      	ldrh	r3, [r3, #0]
 800946c:	b29b      	uxth	r3, r3
 800946e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009476:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	441a      	add	r2, r3
 8009484:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009488:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800948c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009490:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009498:	b29b      	uxth	r3, r3
 800949a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	461a      	mov	r2, r3
 80094aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80094ac:	4413      	add	r3, r2
 80094ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	00da      	lsls	r2, r3, #3
 80094b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80094b8:	4413      	add	r3, r2
 80094ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80094be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	891b      	ldrh	r3, [r3, #8]
 80094c4:	085b      	lsrs	r3, r3, #1
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094ce:	801a      	strh	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094da:	b29b      	uxth	r3, r3
 80094dc:	461a      	mov	r2, r3
 80094de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094e0:	4413      	add	r3, r2
 80094e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	00da      	lsls	r2, r3, #3
 80094ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094ec:	4413      	add	r3, r2
 80094ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80094f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	895b      	ldrh	r3, [r3, #10]
 80094f8:	085b      	lsrs	r3, r3, #1
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	005b      	lsls	r3, r3, #1
 80094fe:	b29a      	uxth	r2, r3
 8009500:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009502:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	2b00      	cmp	r3, #0
 800950a:	f040 81af 	bne.w	800986c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	881b      	ldrh	r3, [r3, #0]
 800951a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800951e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8009522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d01d      	beq.n	8009566 <USB_ActivateEndpoint+0x53e>
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	881b      	ldrh	r3, [r3, #0]
 8009536:	b29b      	uxth	r3, r3
 8009538:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800953c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009540:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	441a      	add	r2, r3
 800954e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8009552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800955a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800955e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009562:	b29b      	uxth	r3, r3
 8009564:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	881b      	ldrh	r3, [r3, #0]
 8009572:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8009576:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800957a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800957e:	2b00      	cmp	r3, #0
 8009580:	d01d      	beq.n	80095be <USB_ActivateEndpoint+0x596>
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	b29b      	uxth	r3, r3
 8009590:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009598:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	441a      	add	r2, r3
 80095a6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80095aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	785b      	ldrb	r3, [r3, #1]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d16b      	bne.n	800969e <USB_ActivateEndpoint+0x676>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	461a      	mov	r2, r3
 80095d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095d6:	4413      	add	r3, r2
 80095d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	00da      	lsls	r2, r3, #3
 80095e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095e2:	4413      	add	r3, r2
 80095e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80095e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095ec:	881b      	ldrh	r3, [r3, #0]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095f8:	801a      	strh	r2, [r3, #0]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10a      	bne.n	8009618 <USB_ActivateEndpoint+0x5f0>
 8009602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	b29b      	uxth	r3, r3
 8009608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800960c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009610:	b29a      	uxth	r2, r3
 8009612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009614:	801a      	strh	r2, [r3, #0]
 8009616:	e05d      	b.n	80096d4 <USB_ActivateEndpoint+0x6ac>
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	2b3e      	cmp	r3, #62	@ 0x3e
 800961e:	d81c      	bhi.n	800965a <USB_ActivateEndpoint+0x632>
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	691b      	ldr	r3, [r3, #16]
 8009624:	085b      	lsrs	r3, r3, #1
 8009626:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b00      	cmp	r3, #0
 8009634:	d004      	beq.n	8009640 <USB_ActivateEndpoint+0x618>
 8009636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800963a:	3301      	adds	r3, #1
 800963c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009640:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009642:	881b      	ldrh	r3, [r3, #0]
 8009644:	b29a      	uxth	r2, r3
 8009646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800964a:	b29b      	uxth	r3, r3
 800964c:	029b      	lsls	r3, r3, #10
 800964e:	b29b      	uxth	r3, r3
 8009650:	4313      	orrs	r3, r2
 8009652:	b29a      	uxth	r2, r3
 8009654:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009656:	801a      	strh	r2, [r3, #0]
 8009658:	e03c      	b.n	80096d4 <USB_ActivateEndpoint+0x6ac>
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	095b      	lsrs	r3, r3, #5
 8009660:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	f003 031f 	and.w	r3, r3, #31
 800966c:	2b00      	cmp	r3, #0
 800966e:	d104      	bne.n	800967a <USB_ActivateEndpoint+0x652>
 8009670:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009674:	3b01      	subs	r3, #1
 8009676:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800967a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	b29a      	uxth	r2, r3
 8009680:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009684:	b29b      	uxth	r3, r3
 8009686:	029b      	lsls	r3, r3, #10
 8009688:	b29b      	uxth	r3, r3
 800968a:	4313      	orrs	r3, r2
 800968c:	b29b      	uxth	r3, r3
 800968e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009696:	b29a      	uxth	r2, r3
 8009698:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800969a:	801a      	strh	r2, [r3, #0]
 800969c:	e01a      	b.n	80096d4 <USB_ActivateEndpoint+0x6ac>
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	785b      	ldrb	r3, [r3, #1]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d116      	bne.n	80096d4 <USB_ActivateEndpoint+0x6ac>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	461a      	mov	r2, r3
 80096b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096b6:	4413      	add	r3, r2
 80096b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	00da      	lsls	r2, r3, #3
 80096c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096c2:	4413      	add	r3, r2
 80096c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80096c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096d2:	801a      	strh	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	785b      	ldrb	r3, [r3, #1]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d16b      	bne.n	80097b8 <USB_ActivateEndpoint+0x790>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	461a      	mov	r2, r3
 80096ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096f0:	4413      	add	r3, r2
 80096f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	00da      	lsls	r2, r3, #3
 80096fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096fc:	4413      	add	r3, r2
 80096fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009702:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009706:	881b      	ldrh	r3, [r3, #0]
 8009708:	b29b      	uxth	r3, r3
 800970a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800970e:	b29a      	uxth	r2, r3
 8009710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009712:	801a      	strh	r2, [r3, #0]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d10a      	bne.n	8009732 <USB_ActivateEndpoint+0x70a>
 800971c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	b29b      	uxth	r3, r3
 8009722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800972a:	b29a      	uxth	r2, r3
 800972c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972e:	801a      	strh	r2, [r3, #0]
 8009730:	e05b      	b.n	80097ea <USB_ActivateEndpoint+0x7c2>
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	2b3e      	cmp	r3, #62	@ 0x3e
 8009738:	d81c      	bhi.n	8009774 <USB_ActivateEndpoint+0x74c>
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	085b      	lsrs	r3, r3, #1
 8009740:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	d004      	beq.n	800975a <USB_ActivateEndpoint+0x732>
 8009750:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009754:	3301      	adds	r3, #1
 8009756:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800975a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	b29a      	uxth	r2, r3
 8009760:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009764:	b29b      	uxth	r3, r3
 8009766:	029b      	lsls	r3, r3, #10
 8009768:	b29b      	uxth	r3, r3
 800976a:	4313      	orrs	r3, r2
 800976c:	b29a      	uxth	r2, r3
 800976e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009770:	801a      	strh	r2, [r3, #0]
 8009772:	e03a      	b.n	80097ea <USB_ActivateEndpoint+0x7c2>
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	095b      	lsrs	r3, r3, #5
 800977a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	f003 031f 	and.w	r3, r3, #31
 8009786:	2b00      	cmp	r3, #0
 8009788:	d104      	bne.n	8009794 <USB_ActivateEndpoint+0x76c>
 800978a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800978e:	3b01      	subs	r3, #1
 8009790:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009796:	881b      	ldrh	r3, [r3, #0]
 8009798:	b29a      	uxth	r2, r3
 800979a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800979e:	b29b      	uxth	r3, r3
 80097a0:	029b      	lsls	r3, r3, #10
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	4313      	orrs	r3, r2
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b4:	801a      	strh	r2, [r3, #0]
 80097b6:	e018      	b.n	80097ea <USB_ActivateEndpoint+0x7c2>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	785b      	ldrb	r3, [r3, #1]
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d114      	bne.n	80097ea <USB_ActivateEndpoint+0x7c2>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	461a      	mov	r2, r3
 80097ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097cc:	4413      	add	r3, r2
 80097ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	00da      	lsls	r2, r3, #3
 80097d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097d8:	4413      	add	r3, r2
 80097da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80097de:	643b      	str	r3, [r7, #64]	@ 0x40
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097e8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	881b      	ldrh	r3, [r3, #0]
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80097fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009800:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009802:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009804:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009808:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800980a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800980c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009810:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	441a      	add	r2, r3
 800981c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800981e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009822:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800982a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800982e:	b29b      	uxth	r3, r3
 8009830:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	b29b      	uxth	r3, r3
 8009840:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009848:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	441a      	add	r2, r3
 8009854:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800985a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800985e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009866:	b29b      	uxth	r3, r3
 8009868:	8013      	strh	r3, [r2, #0]
 800986a:	e0bc      	b.n	80099e6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800987c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009880:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d01d      	beq.n	80098c4 <USB_ActivateEndpoint+0x89c>
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	b29b      	uxth	r3, r3
 8009896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800989a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800989e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	441a      	add	r2, r3
 80098ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80098b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80098bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80098d4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80098d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d01d      	beq.n	800991c <USB_ActivateEndpoint+0x8f4>
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098f6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	441a      	add	r2, r3
 8009904:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800990c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009914:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009918:	b29b      	uxth	r3, r3
 800991a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	78db      	ldrb	r3, [r3, #3]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d024      	beq.n	800996e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4413      	add	r3, r2
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	b29b      	uxth	r3, r3
 8009932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009936:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800993a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800993e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009942:	f083 0320 	eor.w	r3, r3, #32
 8009946:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	441a      	add	r2, r3
 8009954:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009958:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800995c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009968:	b29b      	uxth	r3, r3
 800996a:	8013      	strh	r3, [r2, #0]
 800996c:	e01d      	b.n	80099aa <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	b29b      	uxth	r3, r3
 800997c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009984:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	441a      	add	r2, r3
 8009992:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800999a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800999e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099c0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	009b      	lsls	r3, r3, #2
 80099cc:	441a      	add	r2, r3
 80099ce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80099d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80099d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80099da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80099e6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	379c      	adds	r7, #156	@ 0x9c
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop

080099f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b08d      	sub	sp, #52	@ 0x34
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	7b1b      	ldrb	r3, [r3, #12]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f040 808e 	bne.w	8009b28 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	785b      	ldrb	r3, [r3, #1]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d044      	beq.n	8009a9e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	81bb      	strh	r3, [r7, #12]
 8009a22:	89bb      	ldrh	r3, [r7, #12]
 8009a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d01b      	beq.n	8009a64 <USB_DeactivateEndpoint+0x6c>
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	4413      	add	r3, r2
 8009a36:	881b      	ldrh	r3, [r3, #0]
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a42:	817b      	strh	r3, [r7, #10]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	441a      	add	r2, r3
 8009a4e:	897b      	ldrh	r3, [r7, #10]
 8009a50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	881b      	ldrh	r3, [r3, #0]
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a7a:	813b      	strh	r3, [r7, #8]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	441a      	add	r2, r3
 8009a86:	893b      	ldrh	r3, [r7, #8]
 8009a88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	8013      	strh	r3, [r2, #0]
 8009a9c:	e192      	b.n	8009dc4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	827b      	strh	r3, [r7, #18]
 8009aac:	8a7b      	ldrh	r3, [r7, #18]
 8009aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d01b      	beq.n	8009aee <USB_DeactivateEndpoint+0xf6>
 8009ab6:	687a      	ldr	r2, [r7, #4]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ac8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009acc:	823b      	strh	r3, [r7, #16]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	441a      	add	r2, r3
 8009ad8:	8a3b      	ldrh	r3, [r7, #16]
 8009ada:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ade:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ae2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009ae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b04:	81fb      	strh	r3, [r7, #14]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	441a      	add	r2, r3
 8009b10:	89fb      	ldrh	r3, [r7, #14]
 8009b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	8013      	strh	r3, [r2, #0]
 8009b26:	e14d      	b.n	8009dc4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	785b      	ldrb	r3, [r3, #1]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f040 80a5 	bne.w	8009c7c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	843b      	strh	r3, [r7, #32]
 8009b40:	8c3b      	ldrh	r3, [r7, #32]
 8009b42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d01b      	beq.n	8009b82 <USB_DeactivateEndpoint+0x18a>
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	881b      	ldrh	r3, [r3, #0]
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b60:	83fb      	strh	r3, [r7, #30]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	441a      	add	r2, r3
 8009b6c:	8bfb      	ldrh	r3, [r7, #30]
 8009b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	881b      	ldrh	r3, [r3, #0]
 8009b8e:	83bb      	strh	r3, [r7, #28]
 8009b90:	8bbb      	ldrh	r3, [r7, #28]
 8009b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d01b      	beq.n	8009bd2 <USB_DeactivateEndpoint+0x1da>
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	881b      	ldrh	r3, [r3, #0]
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bb0:	837b      	strh	r3, [r7, #26]
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	441a      	add	r2, r3
 8009bbc:	8b7b      	ldrh	r3, [r7, #26]
 8009bbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	881b      	ldrh	r3, [r3, #0]
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009be8:	833b      	strh	r3, [r7, #24]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	441a      	add	r2, r3
 8009bf4:	8b3b      	ldrh	r3, [r7, #24]
 8009bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c20:	82fb      	strh	r3, [r7, #22]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	441a      	add	r2, r3
 8009c2c:	8afb      	ldrh	r3, [r7, #22]
 8009c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	881b      	ldrh	r3, [r3, #0]
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c58:	82bb      	strh	r3, [r7, #20]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	441a      	add	r2, r3
 8009c64:	8abb      	ldrh	r3, [r7, #20]
 8009c66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	8013      	strh	r3, [r2, #0]
 8009c7a:	e0a3      	b.n	8009dc4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009c8a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009c8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d01b      	beq.n	8009ccc <USB_DeactivateEndpoint+0x2d4>
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	881b      	ldrh	r3, [r3, #0]
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009caa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	441a      	add	r2, r3
 8009cb6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009cb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	881b      	ldrh	r3, [r3, #0]
 8009cd8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009cda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d01b      	beq.n	8009d1c <USB_DeactivateEndpoint+0x324>
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	4413      	add	r3, r2
 8009cee:	881b      	ldrh	r3, [r3, #0]
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cfa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	441a      	add	r2, r3
 8009d06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009d08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d32:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	441a      	add	r2, r3
 8009d3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009d40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	4413      	add	r3, r2
 8009d5e:	881b      	ldrh	r3, [r3, #0]
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	441a      	add	r2, r3
 8009d76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009d78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	881b      	ldrh	r3, [r3, #0]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009da2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	441a      	add	r2, r3
 8009dae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009db0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009db4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009db8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3734      	adds	r7, #52	@ 0x34
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr

08009dd2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b0ac      	sub	sp, #176	@ 0xb0
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	785b      	ldrb	r3, [r3, #1]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	f040 84ca 	bne.w	800a77a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	699a      	ldr	r2, [r3, #24]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d904      	bls.n	8009dfc <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009dfa:	e003      	b.n	8009e04 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	7b1b      	ldrb	r3, [r3, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d122      	bne.n	8009e52 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	6959      	ldr	r1, [r3, #20]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	88da      	ldrh	r2, [r3, #6]
 8009e14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 febd 	bl	800ab9a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	613b      	str	r3, [r7, #16]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	4413      	add	r3, r2
 8009e32:	613b      	str	r3, [r7, #16]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	00da      	lsls	r2, r3, #3
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	801a      	strh	r2, [r3, #0]
 8009e4e:	f000 bc6f 	b.w	800a730 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	78db      	ldrb	r3, [r3, #3]
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	f040 831e 	bne.w	800a498 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	6a1a      	ldr	r2, [r3, #32]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	f240 82cf 	bls.w	800a408 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	4413      	add	r3, r2
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e80:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	441a      	add	r2, r3
 8009e8e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e9a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	6a1a      	ldr	r2, [r3, #32]
 8009eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009eae:	1ad2      	subs	r2, r2, r3
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f000 814f 	beq.w	800a16a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	785b      	ldrb	r3, [r3, #1]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d16b      	bne.n	8009fb0 <USB_EPStartXfer+0x1de>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee8:	4413      	add	r3, r2
 8009eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	00da      	lsls	r2, r3, #3
 8009ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef4:	4413      	add	r3, r2
 8009ef6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8009efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009efe:	881b      	ldrh	r3, [r3, #0]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0a:	801a      	strh	r2, [r3, #0]
 8009f0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <USB_EPStartXfer+0x158>
 8009f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f16:	881b      	ldrh	r3, [r3, #0]
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f26:	801a      	strh	r2, [r3, #0]
 8009f28:	e05b      	b.n	8009fe2 <USB_EPStartXfer+0x210>
 8009f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f30:	d81c      	bhi.n	8009f6c <USB_EPStartXfer+0x19a>
 8009f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f36:	085b      	lsrs	r3, r3, #1
 8009f38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d004      	beq.n	8009f52 <USB_EPStartXfer+0x180>
 8009f48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	029b      	lsls	r3, r3, #10
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	4313      	orrs	r3, r2
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f68:	801a      	strh	r2, [r3, #0]
 8009f6a:	e03a      	b.n	8009fe2 <USB_EPStartXfer+0x210>
 8009f6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f70:	095b      	lsrs	r3, r3, #5
 8009f72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f7a:	f003 031f 	and.w	r3, r3, #31
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d104      	bne.n	8009f8c <USB_EPStartXfer+0x1ba>
 8009f82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f86:	3b01      	subs	r3, #1
 8009f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8e:	881b      	ldrh	r3, [r3, #0]
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	029b      	lsls	r3, r3, #10
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fac:	801a      	strh	r2, [r3, #0]
 8009fae:	e018      	b.n	8009fe2 <USB_EPStartXfer+0x210>
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	785b      	ldrb	r3, [r3, #1]
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d114      	bne.n	8009fe2 <USB_EPStartXfer+0x210>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc4:	4413      	add	r3, r2
 8009fc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	00da      	lsls	r2, r3, #3
 8009fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd0:	4413      	add	r3, r2
 8009fd2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	895b      	ldrh	r3, [r3, #10]
 8009fe6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	6959      	ldr	r1, [r3, #20]
 8009fee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fdce 	bl	800ab9a <USB_WritePMA>
            ep->xfer_buff += len;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	695a      	ldr	r2, [r3, #20]
 800a002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a006:	441a      	add	r2, r3
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	6a1a      	ldr	r2, [r3, #32]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	429a      	cmp	r2, r3
 800a016:	d907      	bls.n	800a028 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	6a1a      	ldr	r2, [r3, #32]
 800a01c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a020:	1ad2      	subs	r2, r2, r3
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	621a      	str	r2, [r3, #32]
 800a026:	e006      	b.n	800a036 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	6a1b      	ldr	r3, [r3, #32]
 800a02c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	2200      	movs	r2, #0
 800a034:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	785b      	ldrb	r3, [r3, #1]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d16b      	bne.n	800a116 <USB_EPStartXfer+0x344>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	61bb      	str	r3, [r7, #24]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a048:	b29b      	uxth	r3, r3
 800a04a:	461a      	mov	r2, r3
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	4413      	add	r3, r2
 800a050:	61bb      	str	r3, [r7, #24]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	00da      	lsls	r2, r3, #3
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	4413      	add	r3, r2
 800a05c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a060:	617b      	str	r3, [r7, #20]
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	881b      	ldrh	r3, [r3, #0]
 800a066:	b29b      	uxth	r3, r3
 800a068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	801a      	strh	r2, [r3, #0]
 800a072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10a      	bne.n	800a090 <USB_EPStartXfer+0x2be>
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	881b      	ldrh	r3, [r3, #0]
 800a07e:	b29b      	uxth	r3, r3
 800a080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a088:	b29a      	uxth	r2, r3
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	801a      	strh	r2, [r3, #0]
 800a08e:	e05d      	b.n	800a14c <USB_EPStartXfer+0x37a>
 800a090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a094:	2b3e      	cmp	r3, #62	@ 0x3e
 800a096:	d81c      	bhi.n	800a0d2 <USB_EPStartXfer+0x300>
 800a098:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a09c:	085b      	lsrs	r3, r3, #1
 800a09e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a0a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0a6:	f003 0301 	and.w	r3, r3, #1
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d004      	beq.n	800a0b8 <USB_EPStartXfer+0x2e6>
 800a0ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	881b      	ldrh	r3, [r3, #0]
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	029b      	lsls	r3, r3, #10
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	801a      	strh	r2, [r3, #0]
 800a0d0:	e03c      	b.n	800a14c <USB_EPStartXfer+0x37a>
 800a0d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0d6:	095b      	lsrs	r3, r3, #5
 800a0d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a0dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0e0:	f003 031f 	and.w	r3, r3, #31
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d104      	bne.n	800a0f2 <USB_EPStartXfer+0x320>
 800a0e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	029b      	lsls	r3, r3, #10
 800a100:	b29b      	uxth	r3, r3
 800a102:	4313      	orrs	r3, r2
 800a104:	b29b      	uxth	r3, r3
 800a106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a10a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a10e:	b29a      	uxth	r2, r3
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	801a      	strh	r2, [r3, #0]
 800a114:	e01a      	b.n	800a14c <USB_EPStartXfer+0x37a>
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	785b      	ldrb	r3, [r3, #1]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d116      	bne.n	800a14c <USB_EPStartXfer+0x37a>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	623b      	str	r3, [r7, #32]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a128:	b29b      	uxth	r3, r3
 800a12a:	461a      	mov	r2, r3
 800a12c:	6a3b      	ldr	r3, [r7, #32]
 800a12e:	4413      	add	r3, r2
 800a130:	623b      	str	r3, [r7, #32]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	00da      	lsls	r2, r3, #3
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	4413      	add	r3, r2
 800a13c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a140:	61fb      	str	r3, [r7, #28]
 800a142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a146:	b29a      	uxth	r2, r3
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	891b      	ldrh	r3, [r3, #8]
 800a150:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	6959      	ldr	r1, [r3, #20]
 800a158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fd19 	bl	800ab9a <USB_WritePMA>
 800a168:	e2e2      	b.n	800a730 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	785b      	ldrb	r3, [r3, #1]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d16b      	bne.n	800a24a <USB_EPStartXfer+0x478>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	461a      	mov	r2, r3
 800a180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a182:	4413      	add	r3, r2
 800a184:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	00da      	lsls	r2, r3, #3
 800a18c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a18e:	4413      	add	r3, r2
 800a190:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a194:	647b      	str	r3, [r7, #68]	@ 0x44
 800a196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a198:	881b      	ldrh	r3, [r3, #0]
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1a4:	801a      	strh	r2, [r3, #0]
 800a1a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10a      	bne.n	800a1c4 <USB_EPStartXfer+0x3f2>
 800a1ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1c0:	801a      	strh	r2, [r3, #0]
 800a1c2:	e05d      	b.n	800a280 <USB_EPStartXfer+0x4ae>
 800a1c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1c8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a1ca:	d81c      	bhi.n	800a206 <USB_EPStartXfer+0x434>
 800a1cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1d0:	085b      	lsrs	r3, r3, #1
 800a1d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1da:	f003 0301 	and.w	r3, r3, #1
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d004      	beq.n	800a1ec <USB_EPStartXfer+0x41a>
 800a1e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1ee:	881b      	ldrh	r3, [r3, #0]
 800a1f0:	b29a      	uxth	r2, r3
 800a1f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	029b      	lsls	r3, r3, #10
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a202:	801a      	strh	r2, [r3, #0]
 800a204:	e03c      	b.n	800a280 <USB_EPStartXfer+0x4ae>
 800a206:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a20a:	095b      	lsrs	r3, r3, #5
 800a20c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a214:	f003 031f 	and.w	r3, r3, #31
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d104      	bne.n	800a226 <USB_EPStartXfer+0x454>
 800a21c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a220:	3b01      	subs	r3, #1
 800a222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a230:	b29b      	uxth	r3, r3
 800a232:	029b      	lsls	r3, r3, #10
 800a234:	b29b      	uxth	r3, r3
 800a236:	4313      	orrs	r3, r2
 800a238:	b29b      	uxth	r3, r3
 800a23a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a23e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a242:	b29a      	uxth	r2, r3
 800a244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a246:	801a      	strh	r2, [r3, #0]
 800a248:	e01a      	b.n	800a280 <USB_EPStartXfer+0x4ae>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	785b      	ldrb	r3, [r3, #1]
 800a24e:	2b01      	cmp	r3, #1
 800a250:	d116      	bne.n	800a280 <USB_EPStartXfer+0x4ae>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	653b      	str	r3, [r7, #80]	@ 0x50
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	461a      	mov	r2, r3
 800a260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a262:	4413      	add	r3, r2
 800a264:	653b      	str	r3, [r7, #80]	@ 0x50
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	00da      	lsls	r2, r3, #3
 800a26c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a26e:	4413      	add	r3, r2
 800a270:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a274:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a27e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	891b      	ldrh	r3, [r3, #8]
 800a284:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	6959      	ldr	r1, [r3, #20]
 800a28c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a290:	b29b      	uxth	r3, r3
 800a292:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fc7f 	bl	800ab9a <USB_WritePMA>
            ep->xfer_buff += len;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	695a      	ldr	r2, [r3, #20]
 800a2a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2a4:	441a      	add	r2, r3
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	6a1a      	ldr	r2, [r3, #32]
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d907      	bls.n	800a2c6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	6a1a      	ldr	r2, [r3, #32]
 800a2ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2be:	1ad2      	subs	r2, r2, r3
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	621a      	str	r2, [r3, #32]
 800a2c4:	e006      	b.n	800a2d4 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	6a1b      	ldr	r3, [r3, #32]
 800a2ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	785b      	ldrb	r3, [r3, #1]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d16b      	bne.n	800a3b8 <USB_EPStartXfer+0x5e6>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f0:	4413      	add	r3, r2
 800a2f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	00da      	lsls	r2, r3, #3
 800a2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a302:	637b      	str	r3, [r7, #52]	@ 0x34
 800a304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a306:	881b      	ldrh	r3, [r3, #0]
 800a308:	b29b      	uxth	r3, r3
 800a30a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a30e:	b29a      	uxth	r2, r3
 800a310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a312:	801a      	strh	r2, [r3, #0]
 800a314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10a      	bne.n	800a332 <USB_EPStartXfer+0x560>
 800a31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a31e:	881b      	ldrh	r3, [r3, #0]
 800a320:	b29b      	uxth	r3, r3
 800a322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a32e:	801a      	strh	r2, [r3, #0]
 800a330:	e05b      	b.n	800a3ea <USB_EPStartXfer+0x618>
 800a332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a336:	2b3e      	cmp	r3, #62	@ 0x3e
 800a338:	d81c      	bhi.n	800a374 <USB_EPStartXfer+0x5a2>
 800a33a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a33e:	085b      	lsrs	r3, r3, #1
 800a340:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d004      	beq.n	800a35a <USB_EPStartXfer+0x588>
 800a350:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a354:	3301      	adds	r3, #1
 800a356:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35c:	881b      	ldrh	r3, [r3, #0]
 800a35e:	b29a      	uxth	r2, r3
 800a360:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a364:	b29b      	uxth	r3, r3
 800a366:	029b      	lsls	r3, r3, #10
 800a368:	b29b      	uxth	r3, r3
 800a36a:	4313      	orrs	r3, r2
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a370:	801a      	strh	r2, [r3, #0]
 800a372:	e03a      	b.n	800a3ea <USB_EPStartXfer+0x618>
 800a374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a378:	095b      	lsrs	r3, r3, #5
 800a37a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a37e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a382:	f003 031f 	and.w	r3, r3, #31
 800a386:	2b00      	cmp	r3, #0
 800a388:	d104      	bne.n	800a394 <USB_EPStartXfer+0x5c2>
 800a38a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a38e:	3b01      	subs	r3, #1
 800a390:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a396:	881b      	ldrh	r3, [r3, #0]
 800a398:	b29a      	uxth	r2, r3
 800a39a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	029b      	lsls	r3, r3, #10
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b4:	801a      	strh	r2, [r3, #0]
 800a3b6:	e018      	b.n	800a3ea <USB_EPStartXfer+0x618>
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	785b      	ldrb	r3, [r3, #1]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d114      	bne.n	800a3ea <USB_EPStartXfer+0x618>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3cc:	4413      	add	r3, r2
 800a3ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	00da      	lsls	r2, r3, #3
 800a3d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3d8:	4413      	add	r3, r2
 800a3da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	895b      	ldrh	r3, [r3, #10]
 800a3ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	6959      	ldr	r1, [r3, #20]
 800a3f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fbca 	bl	800ab9a <USB_WritePMA>
 800a406:	e193      	b.n	800a730 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	6a1b      	ldr	r3, [r3, #32]
 800a40c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a426:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	441a      	add	r2, r3
 800a434:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a43c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a448:	b29b      	uxth	r3, r3
 800a44a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a456:	b29b      	uxth	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a45c:	4413      	add	r3, r2
 800a45e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	00da      	lsls	r2, r3, #3
 800a466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a468:	4413      	add	r3, r2
 800a46a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a46e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a470:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a474:	b29a      	uxth	r2, r3
 800a476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a478:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	891b      	ldrh	r3, [r3, #8]
 800a47e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	6959      	ldr	r1, [r3, #20]
 800a486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fb82 	bl	800ab9a <USB_WritePMA>
 800a496:	e14b      	b.n	800a730 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	6a1a      	ldr	r2, [r3, #32]
 800a49c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4a0:	1ad2      	subs	r2, r2, r3
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	4413      	add	r3, r2
 800a4b0:	881b      	ldrh	r3, [r3, #0]
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f000 809a 	beq.w	800a5f2 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	673b      	str	r3, [r7, #112]	@ 0x70
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	785b      	ldrb	r3, [r3, #1]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d16b      	bne.n	800a5a2 <USB_EPStartXfer+0x7d0>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4da:	4413      	add	r3, r2
 800a4dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	00da      	lsls	r2, r3, #3
 800a4e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a4ec:	667b      	str	r3, [r7, #100]	@ 0x64
 800a4ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4f0:	881b      	ldrh	r3, [r3, #0]
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4fc:	801a      	strh	r2, [r3, #0]
 800a4fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10a      	bne.n	800a51c <USB_EPStartXfer+0x74a>
 800a506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a514:	b29a      	uxth	r2, r3
 800a516:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a518:	801a      	strh	r2, [r3, #0]
 800a51a:	e05b      	b.n	800a5d4 <USB_EPStartXfer+0x802>
 800a51c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a520:	2b3e      	cmp	r3, #62	@ 0x3e
 800a522:	d81c      	bhi.n	800a55e <USB_EPStartXfer+0x78c>
 800a524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a528:	085b      	lsrs	r3, r3, #1
 800a52a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a52e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	d004      	beq.n	800a544 <USB_EPStartXfer+0x772>
 800a53a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a53e:	3301      	adds	r3, #1
 800a540:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a546:	881b      	ldrh	r3, [r3, #0]
 800a548:	b29a      	uxth	r2, r3
 800a54a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a54e:	b29b      	uxth	r3, r3
 800a550:	029b      	lsls	r3, r3, #10
 800a552:	b29b      	uxth	r3, r3
 800a554:	4313      	orrs	r3, r2
 800a556:	b29a      	uxth	r2, r3
 800a558:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a55a:	801a      	strh	r2, [r3, #0]
 800a55c:	e03a      	b.n	800a5d4 <USB_EPStartXfer+0x802>
 800a55e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a562:	095b      	lsrs	r3, r3, #5
 800a564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a56c:	f003 031f 	and.w	r3, r3, #31
 800a570:	2b00      	cmp	r3, #0
 800a572:	d104      	bne.n	800a57e <USB_EPStartXfer+0x7ac>
 800a574:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a578:	3b01      	subs	r3, #1
 800a57a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a57e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	b29a      	uxth	r2, r3
 800a584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a588:	b29b      	uxth	r3, r3
 800a58a:	029b      	lsls	r3, r3, #10
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	4313      	orrs	r3, r2
 800a590:	b29b      	uxth	r3, r3
 800a592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a59e:	801a      	strh	r2, [r3, #0]
 800a5a0:	e018      	b.n	800a5d4 <USB_EPStartXfer+0x802>
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	785b      	ldrb	r3, [r3, #1]
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d114      	bne.n	800a5d4 <USB_EPStartXfer+0x802>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a5b6:	4413      	add	r3, r2
 800a5b8:	673b      	str	r3, [r7, #112]	@ 0x70
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	00da      	lsls	r2, r3, #3
 800a5c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a5c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a5ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	895b      	ldrh	r3, [r3, #10]
 800a5d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	6959      	ldr	r1, [r3, #20]
 800a5e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fad5 	bl	800ab9a <USB_WritePMA>
 800a5f0:	e09e      	b.n	800a730 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	785b      	ldrb	r3, [r3, #1]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d16b      	bne.n	800a6d2 <USB_EPStartXfer+0x900>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a604:	b29b      	uxth	r3, r3
 800a606:	461a      	mov	r2, r3
 800a608:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a60a:	4413      	add	r3, r2
 800a60c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	00da      	lsls	r2, r3, #3
 800a614:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a616:	4413      	add	r3, r2
 800a618:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a61c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a61e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a620:	881b      	ldrh	r3, [r3, #0]
 800a622:	b29b      	uxth	r3, r3
 800a624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a628:	b29a      	uxth	r2, r3
 800a62a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a62c:	801a      	strh	r2, [r3, #0]
 800a62e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a632:	2b00      	cmp	r3, #0
 800a634:	d10a      	bne.n	800a64c <USB_EPStartXfer+0x87a>
 800a636:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a638:	881b      	ldrh	r3, [r3, #0]
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a644:	b29a      	uxth	r2, r3
 800a646:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a648:	801a      	strh	r2, [r3, #0]
 800a64a:	e063      	b.n	800a714 <USB_EPStartXfer+0x942>
 800a64c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a650:	2b3e      	cmp	r3, #62	@ 0x3e
 800a652:	d81c      	bhi.n	800a68e <USB_EPStartXfer+0x8bc>
 800a654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a658:	085b      	lsrs	r3, r3, #1
 800a65a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a65e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	2b00      	cmp	r3, #0
 800a668:	d004      	beq.n	800a674 <USB_EPStartXfer+0x8a2>
 800a66a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a66e:	3301      	adds	r3, #1
 800a670:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a676:	881b      	ldrh	r3, [r3, #0]
 800a678:	b29a      	uxth	r2, r3
 800a67a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a67e:	b29b      	uxth	r3, r3
 800a680:	029b      	lsls	r3, r3, #10
 800a682:	b29b      	uxth	r3, r3
 800a684:	4313      	orrs	r3, r2
 800a686:	b29a      	uxth	r2, r3
 800a688:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a68a:	801a      	strh	r2, [r3, #0]
 800a68c:	e042      	b.n	800a714 <USB_EPStartXfer+0x942>
 800a68e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a692:	095b      	lsrs	r3, r3, #5
 800a694:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a69c:	f003 031f 	and.w	r3, r3, #31
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d104      	bne.n	800a6ae <USB_EPStartXfer+0x8dc>
 800a6a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a6ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6b0:	881b      	ldrh	r3, [r3, #0]
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	029b      	lsls	r3, r3, #10
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6ce:	801a      	strh	r2, [r3, #0]
 800a6d0:	e020      	b.n	800a714 <USB_EPStartXfer+0x942>
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	785b      	ldrb	r3, [r3, #1]
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d11c      	bne.n	800a714 <USB_EPStartXfer+0x942>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	00da      	lsls	r2, r3, #3
 800a6fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a6fe:	4413      	add	r3, r2
 800a700:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a704:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a70c:	b29a      	uxth	r2, r3
 800a70e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a712:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	891b      	ldrh	r3, [r3, #8]
 800a718:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	6959      	ldr	r1, [r3, #20]
 800a720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a724:	b29b      	uxth	r3, r3
 800a726:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fa35 	bl	800ab9a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4413      	add	r3, r2
 800a73a:	881b      	ldrh	r3, [r3, #0]
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a742:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a746:	817b      	strh	r3, [r7, #10]
 800a748:	897b      	ldrh	r3, [r7, #10]
 800a74a:	f083 0310 	eor.w	r3, r3, #16
 800a74e:	817b      	strh	r3, [r7, #10]
 800a750:	897b      	ldrh	r3, [r7, #10]
 800a752:	f083 0320 	eor.w	r3, r3, #32
 800a756:	817b      	strh	r3, [r7, #10]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	441a      	add	r2, r3
 800a762:	897b      	ldrh	r3, [r7, #10]
 800a764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a76c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a774:	b29b      	uxth	r3, r3
 800a776:	8013      	strh	r3, [r2, #0]
 800a778:	e0d5      	b.n	800a926 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	7b1b      	ldrb	r3, [r3, #12]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d156      	bne.n	800a830 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d122      	bne.n	800a7d0 <USB_EPStartXfer+0x9fe>
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	78db      	ldrb	r3, [r3, #3]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d11e      	bne.n	800a7d0 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	4413      	add	r3, r2
 800a79c:	881b      	ldrh	r3, [r3, #0]
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7a8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	441a      	add	r2, r3
 800a7b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a7ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7c2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a7c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	8013      	strh	r3, [r2, #0]
 800a7ce:	e01d      	b.n	800a80c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4413      	add	r3, r2
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a7e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7e6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	441a      	add	r2, r3
 800a7f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800a7f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a808:	b29b      	uxth	r3, r3
 800a80a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	699a      	ldr	r2, [r3, #24]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	429a      	cmp	r2, r3
 800a816:	d907      	bls.n	800a828 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	699a      	ldr	r2, [r3, #24]
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	1ad2      	subs	r2, r2, r3
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	619a      	str	r2, [r3, #24]
 800a826:	e054      	b.n	800a8d2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	2200      	movs	r2, #0
 800a82c:	619a      	str	r2, [r3, #24]
 800a82e:	e050      	b.n	800a8d2 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	78db      	ldrb	r3, [r3, #3]
 800a834:	2b02      	cmp	r3, #2
 800a836:	d142      	bne.n	800a8be <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	69db      	ldr	r3, [r3, #28]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d048      	beq.n	800a8d2 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4413      	add	r3, r2
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a850:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d005      	beq.n	800a868 <USB_EPStartXfer+0xa96>
 800a85c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10b      	bne.n	800a880 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a868:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a86c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a870:	2b00      	cmp	r3, #0
 800a872:	d12e      	bne.n	800a8d2 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a874:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d128      	bne.n	800a8d2 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	881b      	ldrh	r3, [r3, #0]
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a896:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	441a      	add	r2, r3
 800a8a4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800a8a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	8013      	strh	r3, [r2, #0]
 800a8bc:	e009      	b.n	800a8d2 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	78db      	ldrb	r3, [r3, #3]
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d103      	bne.n	800a8ce <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	619a      	str	r2, [r3, #24]
 800a8cc:	e001      	b.n	800a8d2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e02a      	b.n	800a928 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4413      	add	r3, r2
 800a8dc:	881b      	ldrh	r3, [r3, #0]
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a8e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8e8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a8ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a8f0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a8f4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a8f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a8fc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a900:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	441a      	add	r2, r3
 800a90e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a912:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a916:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a91a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a91e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a922:	b29b      	uxth	r3, r3
 800a924:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	37b0      	adds	r7, #176	@ 0xb0
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	785b      	ldrb	r3, [r3, #1]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d020      	beq.n	800a984 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4413      	add	r3, r2
 800a94c:	881b      	ldrh	r3, [r3, #0]
 800a94e:	b29b      	uxth	r3, r3
 800a950:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a958:	81bb      	strh	r3, [r7, #12]
 800a95a:	89bb      	ldrh	r3, [r7, #12]
 800a95c:	f083 0310 	eor.w	r3, r3, #16
 800a960:	81bb      	strh	r3, [r7, #12]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	441a      	add	r2, r3
 800a96c:	89bb      	ldrh	r3, [r7, #12]
 800a96e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a972:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a97a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a97e:	b29b      	uxth	r3, r3
 800a980:	8013      	strh	r3, [r2, #0]
 800a982:	e01f      	b.n	800a9c4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4413      	add	r3, r2
 800a98e:	881b      	ldrh	r3, [r3, #0]
 800a990:	b29b      	uxth	r3, r3
 800a992:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a99a:	81fb      	strh	r3, [r7, #14]
 800a99c:	89fb      	ldrh	r3, [r7, #14]
 800a99e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a9a2:	81fb      	strh	r3, [r7, #14]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	441a      	add	r2, r3
 800a9ae:	89fb      	ldrh	r3, [r7, #14]
 800a9b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b087      	sub	sp, #28
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
 800a9da:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	785b      	ldrb	r3, [r3, #1]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d04c      	beq.n	800aa7e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	881b      	ldrh	r3, [r3, #0]
 800a9f0:	823b      	strh	r3, [r7, #16]
 800a9f2:	8a3b      	ldrh	r3, [r7, #16]
 800a9f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d01b      	beq.n	800aa34 <USB_EPClearStall+0x62>
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa12:	81fb      	strh	r3, [r7, #14]
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	441a      	add	r2, r3
 800aa1e:	89fb      	ldrh	r3, [r7, #14]
 800aa20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	78db      	ldrb	r3, [r3, #3]
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d06c      	beq.n	800ab16 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	4413      	add	r3, r2
 800aa46:	881b      	ldrh	r3, [r3, #0]
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa52:	81bb      	strh	r3, [r7, #12]
 800aa54:	89bb      	ldrh	r3, [r7, #12]
 800aa56:	f083 0320 	eor.w	r3, r3, #32
 800aa5a:	81bb      	strh	r3, [r7, #12]
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	441a      	add	r2, r3
 800aa66:	89bb      	ldrh	r3, [r7, #12]
 800aa68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	8013      	strh	r3, [r2, #0]
 800aa7c:	e04b      	b.n	800ab16 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4413      	add	r3, r2
 800aa88:	881b      	ldrh	r3, [r3, #0]
 800aa8a:	82fb      	strh	r3, [r7, #22]
 800aa8c:	8afb      	ldrh	r3, [r7, #22]
 800aa8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d01b      	beq.n	800aace <USB_EPClearStall+0xfc>
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	881b      	ldrh	r3, [r3, #0]
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aaa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaac:	82bb      	strh	r3, [r7, #20]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	441a      	add	r2, r3
 800aab8:	8abb      	ldrh	r3, [r7, #20]
 800aaba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aabe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aac2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4413      	add	r3, r2
 800aad8:	881b      	ldrh	r3, [r3, #0]
 800aada:	b29b      	uxth	r3, r3
 800aadc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aae4:	827b      	strh	r3, [r7, #18]
 800aae6:	8a7b      	ldrh	r3, [r7, #18]
 800aae8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aaec:	827b      	strh	r3, [r7, #18]
 800aaee:	8a7b      	ldrh	r3, [r7, #18]
 800aaf0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aaf4:	827b      	strh	r3, [r7, #18]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	441a      	add	r2, r3
 800ab00:	8a7b      	ldrh	r3, [r7, #18]
 800ab02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	371c      	adds	r7, #28
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ab30:	78fb      	ldrb	r3, [r7, #3]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d103      	bne.n	800ab3e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2280      	movs	r2, #128	@ 0x80
 800ab3a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b085      	sub	sp, #20
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3714      	adds	r7, #20
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b08b      	sub	sp, #44	@ 0x2c
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	60f8      	str	r0, [r7, #12]
 800aba2:	60b9      	str	r1, [r7, #8]
 800aba4:	4611      	mov	r1, r2
 800aba6:	461a      	mov	r2, r3
 800aba8:	460b      	mov	r3, r1
 800abaa:	80fb      	strh	r3, [r7, #6]
 800abac:	4613      	mov	r3, r2
 800abae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800abb0:	88bb      	ldrh	r3, [r7, #4]
 800abb2:	3301      	adds	r3, #1
 800abb4:	085b      	lsrs	r3, r3, #1
 800abb6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800abc0:	88fa      	ldrh	r2, [r7, #6]
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	4413      	add	r3, r2
 800abc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abca:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	627b      	str	r3, [r7, #36]	@ 0x24
 800abd0:	e01c      	b.n	800ac0c <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	3301      	adds	r3, #1
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	b21b      	sxth	r3, r3
 800abe0:	021b      	lsls	r3, r3, #8
 800abe2:	b21a      	sxth	r2, r3
 800abe4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800abe8:	4313      	orrs	r3, r2
 800abea:	b21b      	sxth	r3, r3
 800abec:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800abee:	6a3b      	ldr	r3, [r7, #32]
 800abf0:	8a7a      	ldrh	r2, [r7, #18]
 800abf2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800abf4:	6a3b      	ldr	r3, [r7, #32]
 800abf6:	3302      	adds	r3, #2
 800abf8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	3301      	adds	r3, #1
 800abfe:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	3301      	adds	r3, #1
 800ac04:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ac06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d1df      	bne.n	800abd2 <USB_WritePMA+0x38>
  }
}
 800ac12:	bf00      	nop
 800ac14:	bf00      	nop
 800ac16:	372c      	adds	r7, #44	@ 0x2c
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b08b      	sub	sp, #44	@ 0x2c
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	460b      	mov	r3, r1
 800ac30:	80fb      	strh	r3, [r7, #6]
 800ac32:	4613      	mov	r3, r2
 800ac34:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ac36:	88bb      	ldrh	r3, [r7, #4]
 800ac38:	085b      	lsrs	r3, r3, #1
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac46:	88fa      	ldrh	r2, [r7, #6]
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac50:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac56:	e018      	b.n	800ac8a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ac60:	6a3b      	ldr	r3, [r7, #32]
 800ac62:	3302      	adds	r3, #2
 800ac64:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	3301      	adds	r3, #1
 800ac72:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	0a1b      	lsrs	r3, r3, #8
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	3301      	adds	r3, #1
 800ac82:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ac84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac86:	3b01      	subs	r3, #1
 800ac88:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1e3      	bne.n	800ac58 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ac90:	88bb      	ldrh	r3, [r7, #4]
 800ac92:	f003 0301 	and.w	r3, r3, #1
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d007      	beq.n	800acac <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	881b      	ldrh	r3, [r3, #0]
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	701a      	strb	r2, [r3, #0]
  }
}
 800acac:	bf00      	nop
 800acae:	372c      	adds	r7, #44	@ 0x2c
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	460b      	mov	r3, r1
 800acc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800acc4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800acc8:	f006 ff18 	bl	8011afc <USBD_static_malloc>
 800accc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d109      	bne.n	800ace8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	32b0      	adds	r2, #176	@ 0xb0
 800acde:	2100      	movs	r1, #0
 800ace0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ace4:	2302      	movs	r3, #2
 800ace6:	e0d4      	b.n	800ae92 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ace8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800acec:	2100      	movs	r1, #0
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f007 fc00 	bl	80124f4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	32b0      	adds	r2, #176	@ 0xb0
 800acfe:	68f9      	ldr	r1, [r7, #12]
 800ad00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	32b0      	adds	r2, #176	@ 0xb0
 800ad0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	7c1b      	ldrb	r3, [r3, #16]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d138      	bne.n	800ad92 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad20:	4b5e      	ldr	r3, [pc, #376]	@ (800ae9c <USBD_CDC_Init+0x1e4>)
 800ad22:	7819      	ldrb	r1, [r3, #0]
 800ad24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad28:	2202      	movs	r2, #2
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f006 fd8d 	bl	801184a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad30:	4b5a      	ldr	r3, [pc, #360]	@ (800ae9c <USBD_CDC_Init+0x1e4>)
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	f003 020f 	and.w	r2, r3, #15
 800ad38:	6879      	ldr	r1, [r7, #4]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	440b      	add	r3, r1
 800ad44:	3324      	adds	r3, #36	@ 0x24
 800ad46:	2201      	movs	r2, #1
 800ad48:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad4a:	4b55      	ldr	r3, [pc, #340]	@ (800aea0 <USBD_CDC_Init+0x1e8>)
 800ad4c:	7819      	ldrb	r1, [r3, #0]
 800ad4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad52:	2202      	movs	r2, #2
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f006 fd78 	bl	801184a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad5a:	4b51      	ldr	r3, [pc, #324]	@ (800aea0 <USBD_CDC_Init+0x1e8>)
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	f003 020f 	and.w	r2, r3, #15
 800ad62:	6879      	ldr	r1, [r7, #4]
 800ad64:	4613      	mov	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	440b      	add	r3, r1
 800ad6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad72:	2201      	movs	r2, #1
 800ad74:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ad76:	4b4b      	ldr	r3, [pc, #300]	@ (800aea4 <USBD_CDC_Init+0x1ec>)
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	f003 020f 	and.w	r2, r3, #15
 800ad7e:	6879      	ldr	r1, [r7, #4]
 800ad80:	4613      	mov	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4413      	add	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	440b      	add	r3, r1
 800ad8a:	3326      	adds	r3, #38	@ 0x26
 800ad8c:	2210      	movs	r2, #16
 800ad8e:	801a      	strh	r2, [r3, #0]
 800ad90:	e035      	b.n	800adfe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad92:	4b42      	ldr	r3, [pc, #264]	@ (800ae9c <USBD_CDC_Init+0x1e4>)
 800ad94:	7819      	ldrb	r1, [r3, #0]
 800ad96:	2340      	movs	r3, #64	@ 0x40
 800ad98:	2202      	movs	r2, #2
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f006 fd55 	bl	801184a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ada0:	4b3e      	ldr	r3, [pc, #248]	@ (800ae9c <USBD_CDC_Init+0x1e4>)
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	f003 020f 	and.w	r2, r3, #15
 800ada8:	6879      	ldr	r1, [r7, #4]
 800adaa:	4613      	mov	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4413      	add	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	440b      	add	r3, r1
 800adb4:	3324      	adds	r3, #36	@ 0x24
 800adb6:	2201      	movs	r2, #1
 800adb8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800adba:	4b39      	ldr	r3, [pc, #228]	@ (800aea0 <USBD_CDC_Init+0x1e8>)
 800adbc:	7819      	ldrb	r1, [r3, #0]
 800adbe:	2340      	movs	r3, #64	@ 0x40
 800adc0:	2202      	movs	r2, #2
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f006 fd41 	bl	801184a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800adc8:	4b35      	ldr	r3, [pc, #212]	@ (800aea0 <USBD_CDC_Init+0x1e8>)
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	f003 020f 	and.w	r2, r3, #15
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	4613      	mov	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4413      	add	r3, r2
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	440b      	add	r3, r1
 800addc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ade0:	2201      	movs	r2, #1
 800ade2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ade4:	4b2f      	ldr	r3, [pc, #188]	@ (800aea4 <USBD_CDC_Init+0x1ec>)
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	f003 020f 	and.w	r2, r3, #15
 800adec:	6879      	ldr	r1, [r7, #4]
 800adee:	4613      	mov	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4413      	add	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	440b      	add	r3, r1
 800adf8:	3326      	adds	r3, #38	@ 0x26
 800adfa:	2210      	movs	r2, #16
 800adfc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800adfe:	4b29      	ldr	r3, [pc, #164]	@ (800aea4 <USBD_CDC_Init+0x1ec>)
 800ae00:	7819      	ldrb	r1, [r3, #0]
 800ae02:	2308      	movs	r3, #8
 800ae04:	2203      	movs	r2, #3
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f006 fd1f 	bl	801184a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ae0c:	4b25      	ldr	r3, [pc, #148]	@ (800aea4 <USBD_CDC_Init+0x1ec>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	f003 020f 	and.w	r2, r3, #15
 800ae14:	6879      	ldr	r1, [r7, #4]
 800ae16:	4613      	mov	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4413      	add	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	440b      	add	r3, r1
 800ae20:	3324      	adds	r3, #36	@ 0x24
 800ae22:	2201      	movs	r2, #1
 800ae24:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	33b0      	adds	r3, #176	@ 0xb0
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	e018      	b.n	800ae92 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	7c1b      	ldrb	r3, [r3, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10a      	bne.n	800ae7e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae68:	4b0d      	ldr	r3, [pc, #52]	@ (800aea0 <USBD_CDC_Init+0x1e8>)
 800ae6a:	7819      	ldrb	r1, [r3, #0]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f006 fdd6 	bl	8011a28 <USBD_LL_PrepareReceive>
 800ae7c:	e008      	b.n	800ae90 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae7e:	4b08      	ldr	r3, [pc, #32]	@ (800aea0 <USBD_CDC_Init+0x1e8>)
 800ae80:	7819      	ldrb	r1, [r3, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae88:	2340      	movs	r3, #64	@ 0x40
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f006 fdcc 	bl	8011a28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	2000009b 	.word	0x2000009b
 800aea0:	2000009c 	.word	0x2000009c
 800aea4:	2000009d 	.word	0x2000009d

0800aea8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	460b      	mov	r3, r1
 800aeb2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aeb4:	4b3a      	ldr	r3, [pc, #232]	@ (800afa0 <USBD_CDC_DeInit+0xf8>)
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	4619      	mov	r1, r3
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f006 fceb 	bl	8011896 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aec0:	4b37      	ldr	r3, [pc, #220]	@ (800afa0 <USBD_CDC_DeInit+0xf8>)
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	f003 020f 	and.w	r2, r3, #15
 800aec8:	6879      	ldr	r1, [r7, #4]
 800aeca:	4613      	mov	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	440b      	add	r3, r1
 800aed4:	3324      	adds	r3, #36	@ 0x24
 800aed6:	2200      	movs	r2, #0
 800aed8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aeda:	4b32      	ldr	r3, [pc, #200]	@ (800afa4 <USBD_CDC_DeInit+0xfc>)
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	4619      	mov	r1, r3
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f006 fcd8 	bl	8011896 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aee6:	4b2f      	ldr	r3, [pc, #188]	@ (800afa4 <USBD_CDC_DeInit+0xfc>)
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	f003 020f 	and.w	r2, r3, #15
 800aeee:	6879      	ldr	r1, [r7, #4]
 800aef0:	4613      	mov	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	440b      	add	r3, r1
 800aefa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aefe:	2200      	movs	r2, #0
 800af00:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800af02:	4b29      	ldr	r3, [pc, #164]	@ (800afa8 <USBD_CDC_DeInit+0x100>)
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	4619      	mov	r1, r3
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f006 fcc4 	bl	8011896 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800af0e:	4b26      	ldr	r3, [pc, #152]	@ (800afa8 <USBD_CDC_DeInit+0x100>)
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	f003 020f 	and.w	r2, r3, #15
 800af16:	6879      	ldr	r1, [r7, #4]
 800af18:	4613      	mov	r3, r2
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	440b      	add	r3, r1
 800af22:	3324      	adds	r3, #36	@ 0x24
 800af24:	2200      	movs	r2, #0
 800af26:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800af28:	4b1f      	ldr	r3, [pc, #124]	@ (800afa8 <USBD_CDC_DeInit+0x100>)
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	f003 020f 	and.w	r2, r3, #15
 800af30:	6879      	ldr	r1, [r7, #4]
 800af32:	4613      	mov	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4413      	add	r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	440b      	add	r3, r1
 800af3c:	3326      	adds	r3, #38	@ 0x26
 800af3e:	2200      	movs	r2, #0
 800af40:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	32b0      	adds	r2, #176	@ 0xb0
 800af4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d01f      	beq.n	800af94 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	33b0      	adds	r3, #176	@ 0xb0
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4413      	add	r3, r2
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	32b0      	adds	r2, #176	@ 0xb0
 800af72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af76:	4618      	mov	r0, r3
 800af78:	f006 fdce 	bl	8011b18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	32b0      	adds	r2, #176	@ 0xb0
 800af86:	2100      	movs	r1, #0
 800af88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	2000009b 	.word	0x2000009b
 800afa4:	2000009c 	.word	0x2000009c
 800afa8:	2000009d 	.word	0x2000009d

0800afac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	32b0      	adds	r2, #176	@ 0xb0
 800afc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800afca:	2300      	movs	r3, #0
 800afcc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800afce:	2300      	movs	r3, #0
 800afd0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d101      	bne.n	800afdc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800afd8:	2303      	movs	r3, #3
 800afda:	e0bf      	b.n	800b15c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d050      	beq.n	800b08a <USBD_CDC_Setup+0xde>
 800afe8:	2b20      	cmp	r3, #32
 800afea:	f040 80af 	bne.w	800b14c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	88db      	ldrh	r3, [r3, #6]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d03a      	beq.n	800b06c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	b25b      	sxtb	r3, r3
 800affc:	2b00      	cmp	r3, #0
 800affe:	da1b      	bge.n	800b038 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	33b0      	adds	r3, #176	@ 0xb0
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4413      	add	r3, r2
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b016:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b018:	683a      	ldr	r2, [r7, #0]
 800b01a:	88d2      	ldrh	r2, [r2, #6]
 800b01c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	88db      	ldrh	r3, [r3, #6]
 800b022:	2b07      	cmp	r3, #7
 800b024:	bf28      	it	cs
 800b026:	2307      	movcs	r3, #7
 800b028:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	89fa      	ldrh	r2, [r7, #14]
 800b02e:	4619      	mov	r1, r3
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f001 fd2b 	bl	800ca8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b036:	e090      	b.n	800b15a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	785a      	ldrb	r2, [r3, #1]
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	88db      	ldrh	r3, [r3, #6]
 800b046:	2b3f      	cmp	r3, #63	@ 0x3f
 800b048:	d803      	bhi.n	800b052 <USBD_CDC_Setup+0xa6>
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	88db      	ldrh	r3, [r3, #6]
 800b04e:	b2da      	uxtb	r2, r3
 800b050:	e000      	b.n	800b054 <USBD_CDC_Setup+0xa8>
 800b052:	2240      	movs	r2, #64	@ 0x40
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b05a:	6939      	ldr	r1, [r7, #16]
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b062:	461a      	mov	r2, r3
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f001 fd3d 	bl	800cae4 <USBD_CtlPrepareRx>
      break;
 800b06a:	e076      	b.n	800b15a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	33b0      	adds	r3, #176	@ 0xb0
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4413      	add	r3, r2
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	683a      	ldr	r2, [r7, #0]
 800b080:	7850      	ldrb	r0, [r2, #1]
 800b082:	2200      	movs	r2, #0
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	4798      	blx	r3
      break;
 800b088:	e067      	b.n	800b15a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	785b      	ldrb	r3, [r3, #1]
 800b08e:	2b0b      	cmp	r3, #11
 800b090:	d851      	bhi.n	800b136 <USBD_CDC_Setup+0x18a>
 800b092:	a201      	add	r2, pc, #4	@ (adr r2, 800b098 <USBD_CDC_Setup+0xec>)
 800b094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b098:	0800b0c9 	.word	0x0800b0c9
 800b09c:	0800b145 	.word	0x0800b145
 800b0a0:	0800b137 	.word	0x0800b137
 800b0a4:	0800b137 	.word	0x0800b137
 800b0a8:	0800b137 	.word	0x0800b137
 800b0ac:	0800b137 	.word	0x0800b137
 800b0b0:	0800b137 	.word	0x0800b137
 800b0b4:	0800b137 	.word	0x0800b137
 800b0b8:	0800b137 	.word	0x0800b137
 800b0bc:	0800b137 	.word	0x0800b137
 800b0c0:	0800b0f3 	.word	0x0800b0f3
 800b0c4:	0800b11d 	.word	0x0800b11d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d107      	bne.n	800b0e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b0d4:	f107 030a 	add.w	r3, r7, #10
 800b0d8:	2202      	movs	r2, #2
 800b0da:	4619      	mov	r1, r3
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f001 fcd5 	bl	800ca8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0e2:	e032      	b.n	800b14a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f001 fc53 	bl	800c992 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	75fb      	strb	r3, [r7, #23]
          break;
 800b0f0:	e02b      	b.n	800b14a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d107      	bne.n	800b10e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b0fe:	f107 030d 	add.w	r3, r7, #13
 800b102:	2201      	movs	r2, #1
 800b104:	4619      	mov	r1, r3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f001 fcc0 	bl	800ca8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b10c:	e01d      	b.n	800b14a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b10e:	6839      	ldr	r1, [r7, #0]
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f001 fc3e 	bl	800c992 <USBD_CtlError>
            ret = USBD_FAIL;
 800b116:	2303      	movs	r3, #3
 800b118:	75fb      	strb	r3, [r7, #23]
          break;
 800b11a:	e016      	b.n	800b14a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b122:	b2db      	uxtb	r3, r3
 800b124:	2b03      	cmp	r3, #3
 800b126:	d00f      	beq.n	800b148 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f001 fc31 	bl	800c992 <USBD_CtlError>
            ret = USBD_FAIL;
 800b130:	2303      	movs	r3, #3
 800b132:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b134:	e008      	b.n	800b148 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 fc2a 	bl	800c992 <USBD_CtlError>
          ret = USBD_FAIL;
 800b13e:	2303      	movs	r3, #3
 800b140:	75fb      	strb	r3, [r7, #23]
          break;
 800b142:	e002      	b.n	800b14a <USBD_CDC_Setup+0x19e>
          break;
 800b144:	bf00      	nop
 800b146:	e008      	b.n	800b15a <USBD_CDC_Setup+0x1ae>
          break;
 800b148:	bf00      	nop
      }
      break;
 800b14a:	e006      	b.n	800b15a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f001 fc1f 	bl	800c992 <USBD_CtlError>
      ret = USBD_FAIL;
 800b154:	2303      	movs	r3, #3
 800b156:	75fb      	strb	r3, [r7, #23]
      break;
 800b158:	bf00      	nop
  }

  return (uint8_t)ret;
 800b15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	460b      	mov	r3, r1
 800b16e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b176:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	32b0      	adds	r2, #176	@ 0xb0
 800b182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e065      	b.n	800b25a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	32b0      	adds	r2, #176	@ 0xb0
 800b198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b19c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b19e:	78fb      	ldrb	r3, [r7, #3]
 800b1a0:	f003 020f 	and.w	r2, r3, #15
 800b1a4:	6879      	ldr	r1, [r7, #4]
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	440b      	add	r3, r1
 800b1b0:	3318      	adds	r3, #24
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d02f      	beq.n	800b218 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b1b8:	78fb      	ldrb	r3, [r7, #3]
 800b1ba:	f003 020f 	and.w	r2, r3, #15
 800b1be:	6879      	ldr	r1, [r7, #4]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	440b      	add	r3, r1
 800b1ca:	3318      	adds	r3, #24
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	78fb      	ldrb	r3, [r7, #3]
 800b1d0:	f003 010f 	and.w	r1, r3, #15
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	440b      	add	r3, r1
 800b1dc:	00db      	lsls	r3, r3, #3
 800b1de:	4403      	add	r3, r0
 800b1e0:	3320      	adds	r3, #32
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b1e8:	fb01 f303 	mul.w	r3, r1, r3
 800b1ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d112      	bne.n	800b218 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b1f2:	78fb      	ldrb	r3, [r7, #3]
 800b1f4:	f003 020f 	and.w	r2, r3, #15
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4413      	add	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	440b      	add	r3, r1
 800b204:	3318      	adds	r3, #24
 800b206:	2200      	movs	r2, #0
 800b208:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b20a:	78f9      	ldrb	r1, [r7, #3]
 800b20c:	2300      	movs	r3, #0
 800b20e:	2200      	movs	r2, #0
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f006 fbe8 	bl	80119e6 <USBD_LL_Transmit>
 800b216:	e01f      	b.n	800b258 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	33b0      	adds	r3, #176	@ 0xb0
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4413      	add	r3, r2
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d010      	beq.n	800b258 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	33b0      	adds	r3, #176	@ 0xb0
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4413      	add	r3, r2
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	691b      	ldr	r3, [r3, #16]
 800b248:	68ba      	ldr	r2, [r7, #8]
 800b24a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b254:	78fa      	ldrb	r2, [r7, #3]
 800b256:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b084      	sub	sp, #16
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	460b      	mov	r3, r1
 800b26c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	32b0      	adds	r2, #176	@ 0xb0
 800b278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	32b0      	adds	r2, #176	@ 0xb0
 800b288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d101      	bne.n	800b294 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b290:	2303      	movs	r3, #3
 800b292:	e01a      	b.n	800b2ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b294:	78fb      	ldrb	r3, [r7, #3]
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f006 fbe6 	bl	8011a6a <USBD_LL_GetRxDataSize>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	33b0      	adds	r3, #176	@ 0xb0
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	32b0      	adds	r2, #176	@ 0xb0
 800b2e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d101      	bne.n	800b2f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	e024      	b.n	800b33e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	33b0      	adds	r3, #176	@ 0xb0
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d019      	beq.n	800b33c <USBD_CDC_EP0_RxReady+0x6a>
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b30e:	2bff      	cmp	r3, #255	@ 0xff
 800b310:	d014      	beq.n	800b33c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	33b0      	adds	r3, #176	@ 0xb0
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b32a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b332:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	22ff      	movs	r2, #255	@ 0xff
 800b338:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
	...

0800b348 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b350:	2182      	movs	r1, #130	@ 0x82
 800b352:	4818      	ldr	r0, [pc, #96]	@ (800b3b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b354:	f000 fcbd 	bl	800bcd2 <USBD_GetEpDesc>
 800b358:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b35a:	2101      	movs	r1, #1
 800b35c:	4815      	ldr	r0, [pc, #84]	@ (800b3b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b35e:	f000 fcb8 	bl	800bcd2 <USBD_GetEpDesc>
 800b362:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b364:	2181      	movs	r1, #129	@ 0x81
 800b366:	4813      	ldr	r0, [pc, #76]	@ (800b3b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b368:	f000 fcb3 	bl	800bcd2 <USBD_GetEpDesc>
 800b36c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	2210      	movs	r2, #16
 800b378:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d006      	beq.n	800b38e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	2200      	movs	r2, #0
 800b384:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b388:	711a      	strb	r2, [r3, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d006      	beq.n	800b3a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2200      	movs	r2, #0
 800b398:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b39c:	711a      	strb	r2, [r3, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2243      	movs	r2, #67	@ 0x43
 800b3a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3a8:	4b02      	ldr	r3, [pc, #8]	@ (800b3b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3718      	adds	r7, #24
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20000058 	.word	0x20000058

0800b3b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3c0:	2182      	movs	r1, #130	@ 0x82
 800b3c2:	4818      	ldr	r0, [pc, #96]	@ (800b424 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3c4:	f000 fc85 	bl	800bcd2 <USBD_GetEpDesc>
 800b3c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3ca:	2101      	movs	r1, #1
 800b3cc:	4815      	ldr	r0, [pc, #84]	@ (800b424 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3ce:	f000 fc80 	bl	800bcd2 <USBD_GetEpDesc>
 800b3d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b3d4:	2181      	movs	r1, #129	@ 0x81
 800b3d6:	4813      	ldr	r0, [pc, #76]	@ (800b424 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3d8:	f000 fc7b 	bl	800bcd2 <USBD_GetEpDesc>
 800b3dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	2210      	movs	r2, #16
 800b3e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d006      	beq.n	800b3fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	711a      	strb	r2, [r3, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f042 0202 	orr.w	r2, r2, #2
 800b3fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d006      	beq.n	800b412 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2200      	movs	r2, #0
 800b408:	711a      	strb	r2, [r3, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f042 0202 	orr.w	r2, r2, #2
 800b410:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2243      	movs	r2, #67	@ 0x43
 800b416:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b418:	4b02      	ldr	r3, [pc, #8]	@ (800b424 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3718      	adds	r7, #24
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	20000058 	.word	0x20000058

0800b428 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b086      	sub	sp, #24
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b430:	2182      	movs	r1, #130	@ 0x82
 800b432:	4818      	ldr	r0, [pc, #96]	@ (800b494 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b434:	f000 fc4d 	bl	800bcd2 <USBD_GetEpDesc>
 800b438:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b43a:	2101      	movs	r1, #1
 800b43c:	4815      	ldr	r0, [pc, #84]	@ (800b494 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b43e:	f000 fc48 	bl	800bcd2 <USBD_GetEpDesc>
 800b442:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b444:	2181      	movs	r1, #129	@ 0x81
 800b446:	4813      	ldr	r0, [pc, #76]	@ (800b494 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b448:	f000 fc43 	bl	800bcd2 <USBD_GetEpDesc>
 800b44c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	2210      	movs	r2, #16
 800b458:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d006      	beq.n	800b46e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	2200      	movs	r2, #0
 800b464:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b468:	711a      	strb	r2, [r3, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d006      	beq.n	800b482 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2200      	movs	r2, #0
 800b478:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b47c:	711a      	strb	r2, [r3, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2243      	movs	r2, #67	@ 0x43
 800b486:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b488:	4b02      	ldr	r3, [pc, #8]	@ (800b494 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3718      	adds	r7, #24
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	20000058 	.word	0x20000058

0800b498 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	220a      	movs	r2, #10
 800b4a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b4a6:	4b03      	ldr	r3, [pc, #12]	@ (800b4b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr
 800b4b4:	20000014 	.word	0x20000014

0800b4b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b083      	sub	sp, #12
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d101      	bne.n	800b4cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	e009      	b.n	800b4e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	33b0      	adds	r3, #176	@ 0xb0
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4413      	add	r3, r2
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b087      	sub	sp, #28
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	32b0      	adds	r2, #176	@ 0xb0
 800b502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b506:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d101      	bne.n	800b512 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b50e:	2303      	movs	r3, #3
 800b510:	e008      	b.n	800b524 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	68ba      	ldr	r2, [r7, #8]
 800b516:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	371c      	adds	r7, #28
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b530:	b480      	push	{r7}
 800b532:	b085      	sub	sp, #20
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	32b0      	adds	r2, #176	@ 0xb0
 800b544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b548:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d101      	bne.n	800b554 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b550:	2303      	movs	r3, #3
 800b552:	e004      	b.n	800b55e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3714      	adds	r7, #20
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
	...

0800b56c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	32b0      	adds	r2, #176	@ 0xb0
 800b57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b582:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b584:	2301      	movs	r3, #1
 800b586:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d101      	bne.n	800b592 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b58e:	2303      	movs	r3, #3
 800b590:	e025      	b.n	800b5de <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d11f      	bne.n	800b5dc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b5a4:	4b10      	ldr	r3, [pc, #64]	@ (800b5e8 <USBD_CDC_TransmitPacket+0x7c>)
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	f003 020f 	and.w	r2, r3, #15
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	4413      	add	r3, r2
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	4403      	add	r3, r0
 800b5be:	3318      	adds	r3, #24
 800b5c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b5c2:	4b09      	ldr	r3, [pc, #36]	@ (800b5e8 <USBD_CDC_TransmitPacket+0x7c>)
 800b5c4:	7819      	ldrb	r1, [r3, #0]
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f006 fa07 	bl	80119e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	2000009b 	.word	0x2000009b

0800b5ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	32b0      	adds	r2, #176	@ 0xb0
 800b5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b602:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	32b0      	adds	r2, #176	@ 0xb0
 800b60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d101      	bne.n	800b61a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b616:	2303      	movs	r3, #3
 800b618:	e018      	b.n	800b64c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	7c1b      	ldrb	r3, [r3, #16]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10a      	bne.n	800b638 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b622:	4b0c      	ldr	r3, [pc, #48]	@ (800b654 <USBD_CDC_ReceivePacket+0x68>)
 800b624:	7819      	ldrb	r1, [r3, #0]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b62c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f006 f9f9 	bl	8011a28 <USBD_LL_PrepareReceive>
 800b636:	e008      	b.n	800b64a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b638:	4b06      	ldr	r3, [pc, #24]	@ (800b654 <USBD_CDC_ReceivePacket+0x68>)
 800b63a:	7819      	ldrb	r1, [r3, #0]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b642:	2340      	movs	r3, #64	@ 0x40
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f006 f9ef 	bl	8011a28 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	2000009c 	.word	0x2000009c

0800b658 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	4613      	mov	r3, r2
 800b664:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d101      	bne.n	800b670 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b66c:	2303      	movs	r3, #3
 800b66e:	e01f      	b.n	800b6b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2200      	movs	r2, #0
 800b674:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d003      	beq.n	800b696 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	68ba      	ldr	r2, [r7, #8]
 800b692:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2201      	movs	r2, #1
 800b69a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	79fa      	ldrb	r2, [r7, #7]
 800b6a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f006 f853 	bl	8011750 <USBD_LL_Init>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b6ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3718      	adds	r7, #24
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d101      	bne.n	800b6d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	e025      	b.n	800b71c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	32ae      	adds	r2, #174	@ 0xae
 800b6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00f      	beq.n	800b70c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	32ae      	adds	r2, #174	@ 0xae
 800b6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6fc:	f107 020e 	add.w	r2, r7, #14
 800b700:	4610      	mov	r0, r2
 800b702:	4798      	blx	r3
 800b704:	4602      	mov	r2, r0
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b712:	1c5a      	adds	r2, r3, #1
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f006 f871 	bl	8011814 <USBD_LL_Start>
 800b732:	4603      	mov	r3, r0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b744:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b746:	4618      	mov	r0, r3
 800b748:	370c      	adds	r7, #12
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b084      	sub	sp, #16
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	460b      	mov	r3, r1
 800b75c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b75e:	2300      	movs	r3, #0
 800b760:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d009      	beq.n	800b780 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	78fa      	ldrb	r2, [r7, #3]
 800b776:	4611      	mov	r1, r2
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	4798      	blx	r3
 800b77c:	4603      	mov	r3, r0
 800b77e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b780:	7bfb      	ldrb	r3, [r7, #15]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b084      	sub	sp, #16
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
 800b792:	460b      	mov	r3, r1
 800b794:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b796:	2300      	movs	r3, #0
 800b798:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	78fa      	ldrb	r2, [r7, #3]
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	4798      	blx	r3
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b084      	sub	sp, #16
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
 800b7c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b7ce:	6839      	ldr	r1, [r7, #0]
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f001 f8a4 	bl	800c91e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7f2:	f003 031f 	and.w	r3, r3, #31
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d01a      	beq.n	800b830 <USBD_LL_SetupStage+0x72>
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	d822      	bhi.n	800b844 <USBD_LL_SetupStage+0x86>
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d002      	beq.n	800b808 <USBD_LL_SetupStage+0x4a>
 800b802:	2b01      	cmp	r3, #1
 800b804:	d00a      	beq.n	800b81c <USBD_LL_SetupStage+0x5e>
 800b806:	e01d      	b.n	800b844 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b80e:	4619      	mov	r1, r3
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 fad1 	bl	800bdb8 <USBD_StdDevReq>
 800b816:	4603      	mov	r3, r0
 800b818:	73fb      	strb	r3, [r7, #15]
      break;
 800b81a:	e020      	b.n	800b85e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fb39 	bl	800be9c <USBD_StdItfReq>
 800b82a:	4603      	mov	r3, r0
 800b82c:	73fb      	strb	r3, [r7, #15]
      break;
 800b82e:	e016      	b.n	800b85e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b836:	4619      	mov	r1, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 fb9b 	bl	800bf74 <USBD_StdEPReq>
 800b83e:	4603      	mov	r3, r0
 800b840:	73fb      	strb	r3, [r7, #15]
      break;
 800b842:	e00c      	b.n	800b85e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b84a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	4619      	mov	r1, r3
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f006 f83e 	bl	80118d4 <USBD_LL_StallEP>
 800b858:	4603      	mov	r3, r0
 800b85a:	73fb      	strb	r3, [r7, #15]
      break;
 800b85c:	bf00      	nop
  }

  return ret;
 800b85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3710      	adds	r7, #16
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	460b      	mov	r3, r1
 800b872:	607a      	str	r2, [r7, #4]
 800b874:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b876:	2300      	movs	r3, #0
 800b878:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b87a:	7afb      	ldrb	r3, [r7, #11]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d16e      	bne.n	800b95e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b886:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b88e:	2b03      	cmp	r3, #3
 800b890:	f040 8098 	bne.w	800b9c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	689a      	ldr	r2, [r3, #8]
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d913      	bls.n	800b8c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	689a      	ldr	r2, [r3, #8]
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	1ad2      	subs	r2, r2, r3
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	68da      	ldr	r2, [r3, #12]
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	bf28      	it	cs
 800b8ba:	4613      	movcs	r3, r2
 800b8bc:	461a      	mov	r2, r3
 800b8be:	6879      	ldr	r1, [r7, #4]
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f001 f92c 	bl	800cb1e <USBD_CtlContinueRx>
 800b8c6:	e07d      	b.n	800b9c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b8ce:	f003 031f 	and.w	r3, r3, #31
 800b8d2:	2b02      	cmp	r3, #2
 800b8d4:	d014      	beq.n	800b900 <USBD_LL_DataOutStage+0x98>
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	d81d      	bhi.n	800b916 <USBD_LL_DataOutStage+0xae>
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d002      	beq.n	800b8e4 <USBD_LL_DataOutStage+0x7c>
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d003      	beq.n	800b8ea <USBD_LL_DataOutStage+0x82>
 800b8e2:	e018      	b.n	800b916 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	75bb      	strb	r3, [r7, #22]
            break;
 800b8e8:	e018      	b.n	800b91c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	68f8      	ldr	r0, [r7, #12]
 800b8f6:	f000 f9d2 	bl	800bc9e <USBD_CoreFindIF>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	75bb      	strb	r3, [r7, #22]
            break;
 800b8fe:	e00d      	b.n	800b91c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b906:	b2db      	uxtb	r3, r3
 800b908:	4619      	mov	r1, r3
 800b90a:	68f8      	ldr	r0, [r7, #12]
 800b90c:	f000 f9d4 	bl	800bcb8 <USBD_CoreFindEP>
 800b910:	4603      	mov	r3, r0
 800b912:	75bb      	strb	r3, [r7, #22]
            break;
 800b914:	e002      	b.n	800b91c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b916:	2300      	movs	r3, #0
 800b918:	75bb      	strb	r3, [r7, #22]
            break;
 800b91a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b91c:	7dbb      	ldrb	r3, [r7, #22]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d119      	bne.n	800b956 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d113      	bne.n	800b956 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b92e:	7dba      	ldrb	r2, [r7, #22]
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	32ae      	adds	r2, #174	@ 0xae
 800b934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b938:	691b      	ldr	r3, [r3, #16]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00b      	beq.n	800b956 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b93e:	7dba      	ldrb	r2, [r7, #22]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b946:	7dba      	ldrb	r2, [r7, #22]
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	32ae      	adds	r2, #174	@ 0xae
 800b94c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b950:	691b      	ldr	r3, [r3, #16]
 800b952:	68f8      	ldr	r0, [r7, #12]
 800b954:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f001 f8f2 	bl	800cb40 <USBD_CtlSendStatus>
 800b95c:	e032      	b.n	800b9c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b95e:	7afb      	ldrb	r3, [r7, #11]
 800b960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b964:	b2db      	uxtb	r3, r3
 800b966:	4619      	mov	r1, r3
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f000 f9a5 	bl	800bcb8 <USBD_CoreFindEP>
 800b96e:	4603      	mov	r3, r0
 800b970:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b972:	7dbb      	ldrb	r3, [r7, #22]
 800b974:	2bff      	cmp	r3, #255	@ 0xff
 800b976:	d025      	beq.n	800b9c4 <USBD_LL_DataOutStage+0x15c>
 800b978:	7dbb      	ldrb	r3, [r7, #22]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d122      	bne.n	800b9c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b984:	b2db      	uxtb	r3, r3
 800b986:	2b03      	cmp	r3, #3
 800b988:	d117      	bne.n	800b9ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b98a:	7dba      	ldrb	r2, [r7, #22]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	32ae      	adds	r2, #174	@ 0xae
 800b990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b994:	699b      	ldr	r3, [r3, #24]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00f      	beq.n	800b9ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b99a:	7dba      	ldrb	r2, [r7, #22]
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b9a2:	7dba      	ldrb	r2, [r7, #22]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	32ae      	adds	r2, #174	@ 0xae
 800b9a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	7afa      	ldrb	r2, [r7, #11]
 800b9b0:	4611      	mov	r1, r2
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	4798      	blx	r3
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b9ba:	7dfb      	ldrb	r3, [r7, #23]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d001      	beq.n	800b9c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
 800b9c2:	e000      	b.n	800b9c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3718      	adds	r7, #24
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b086      	sub	sp, #24
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	60f8      	str	r0, [r7, #12]
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	607a      	str	r2, [r7, #4]
 800b9da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b9dc:	7afb      	ldrb	r3, [r7, #11]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d16f      	bne.n	800bac2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	3314      	adds	r3, #20
 800b9e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b9ee:	2b02      	cmp	r3, #2
 800b9f0:	d15a      	bne.n	800baa8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	689a      	ldr	r2, [r3, #8]
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	68db      	ldr	r3, [r3, #12]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d914      	bls.n	800ba28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	689a      	ldr	r2, [r3, #8]
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	1ad2      	subs	r2, r2, r3
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	461a      	mov	r2, r3
 800ba12:	6879      	ldr	r1, [r7, #4]
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f001 f854 	bl	800cac2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	2100      	movs	r1, #0
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f006 f801 	bl	8011a28 <USBD_LL_PrepareReceive>
 800ba26:	e03f      	b.n	800baa8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	68da      	ldr	r2, [r3, #12]
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d11c      	bne.n	800ba6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d316      	bcc.n	800ba6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	685a      	ldr	r2, [r3, #4]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d20f      	bcs.n	800ba6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ba4e:	2200      	movs	r2, #0
 800ba50:	2100      	movs	r1, #0
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f001 f835 	bl	800cac2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba60:	2300      	movs	r3, #0
 800ba62:	2200      	movs	r2, #0
 800ba64:	2100      	movs	r1, #0
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f005 ffde 	bl	8011a28 <USBD_LL_PrepareReceive>
 800ba6c:	e01c      	b.n	800baa8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	2b03      	cmp	r3, #3
 800ba78:	d10f      	bne.n	800ba9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d009      	beq.n	800ba9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba9a:	2180      	movs	r1, #128	@ 0x80
 800ba9c:	68f8      	ldr	r0, [r7, #12]
 800ba9e:	f005 ff19 	bl	80118d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f001 f85f 	bl	800cb66 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d03a      	beq.n	800bb28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f7ff fe42 	bl	800b73c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bac0:	e032      	b.n	800bb28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bac2:	7afb      	ldrb	r3, [r7, #11]
 800bac4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	4619      	mov	r1, r3
 800bacc:	68f8      	ldr	r0, [r7, #12]
 800bace:	f000 f8f3 	bl	800bcb8 <USBD_CoreFindEP>
 800bad2:	4603      	mov	r3, r0
 800bad4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bad6:	7dfb      	ldrb	r3, [r7, #23]
 800bad8:	2bff      	cmp	r3, #255	@ 0xff
 800bada:	d025      	beq.n	800bb28 <USBD_LL_DataInStage+0x15a>
 800badc:	7dfb      	ldrb	r3, [r7, #23]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d122      	bne.n	800bb28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	2b03      	cmp	r3, #3
 800baec:	d11c      	bne.n	800bb28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800baee:	7dfa      	ldrb	r2, [r7, #23]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	32ae      	adds	r2, #174	@ 0xae
 800baf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf8:	695b      	ldr	r3, [r3, #20]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d014      	beq.n	800bb28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bafe:	7dfa      	ldrb	r2, [r7, #23]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bb06:	7dfa      	ldrb	r2, [r7, #23]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	32ae      	adds	r2, #174	@ 0xae
 800bb0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb10:	695b      	ldr	r3, [r3, #20]
 800bb12:	7afa      	ldrb	r2, [r7, #11]
 800bb14:	4611      	mov	r1, r2
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	4798      	blx	r3
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bb1e:	7dbb      	ldrb	r3, [r7, #22]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bb24:	7dbb      	ldrb	r3, [r7, #22]
 800bb26:	e000      	b.n	800bb2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3718      	adds	r7, #24
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b084      	sub	sp, #16
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2201      	movs	r2, #1
 800bb42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d014      	beq.n	800bb98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d00e      	beq.n	800bb98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	6852      	ldr	r2, [r2, #4]
 800bb86:	b2d2      	uxtb	r2, r2
 800bb88:	4611      	mov	r1, r2
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	4798      	blx	r3
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d001      	beq.n	800bb98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bb94:	2303      	movs	r3, #3
 800bb96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb98:	2340      	movs	r3, #64	@ 0x40
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f005 fe53 	bl	801184a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2240      	movs	r2, #64	@ 0x40
 800bbb0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbb4:	2340      	movs	r3, #64	@ 0x40
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	2180      	movs	r1, #128	@ 0x80
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f005 fe45 	bl	801184a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2240      	movs	r2, #64	@ 0x40
 800bbca:	621a      	str	r2, [r3, #32]

  return ret;
 800bbcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b083      	sub	sp, #12
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	460b      	mov	r3, r1
 800bbe0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	78fa      	ldrb	r2, [r7, #3]
 800bbe6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	370c      	adds	r7, #12
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b083      	sub	sp, #12
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	2b04      	cmp	r3, #4
 800bc08:	d006      	beq.n	800bc18 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2204      	movs	r2, #4
 800bc1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	370c      	adds	r7, #12
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b083      	sub	sp, #12
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	2b04      	cmp	r3, #4
 800bc40:	d106      	bne.n	800bc50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bc48:	b2da      	uxtb	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	370c      	adds	r7, #12
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b082      	sub	sp, #8
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	d110      	bne.n	800bc94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00b      	beq.n	800bc94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc82:	69db      	ldr	r3, [r3, #28]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d005      	beq.n	800bc94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc8e:	69db      	ldr	r3, [r3, #28]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b083      	sub	sp, #12
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	460b      	mov	r3, r1
 800bca8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr

0800bcd2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bcd2:	b580      	push	{r7, lr}
 800bcd4:	b086      	sub	sp, #24
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	460b      	mov	r3, r1
 800bcdc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bce6:	2300      	movs	r3, #0
 800bce8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	885b      	ldrh	r3, [r3, #2]
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	7812      	ldrb	r2, [r2, #0]
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d91f      	bls.n	800bd38 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bcfe:	e013      	b.n	800bd28 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd00:	f107 030a 	add.w	r3, r7, #10
 800bd04:	4619      	mov	r1, r3
 800bd06:	6978      	ldr	r0, [r7, #20]
 800bd08:	f000 f81b 	bl	800bd42 <USBD_GetNextDesc>
 800bd0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	785b      	ldrb	r3, [r3, #1]
 800bd12:	2b05      	cmp	r3, #5
 800bd14:	d108      	bne.n	800bd28 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	789b      	ldrb	r3, [r3, #2]
 800bd1e:	78fa      	ldrb	r2, [r7, #3]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d008      	beq.n	800bd36 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	885b      	ldrh	r3, [r3, #2]
 800bd2c:	b29a      	uxth	r2, r3
 800bd2e:	897b      	ldrh	r3, [r7, #10]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d8e5      	bhi.n	800bd00 <USBD_GetEpDesc+0x2e>
 800bd34:	e000      	b.n	800bd38 <USBD_GetEpDesc+0x66>
          break;
 800bd36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd38:	693b      	ldr	r3, [r7, #16]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3718      	adds	r7, #24
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd42:	b480      	push	{r7}
 800bd44:	b085      	sub	sp, #20
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	881b      	ldrh	r3, [r3, #0]
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	7812      	ldrb	r2, [r2, #0]
 800bd58:	4413      	add	r3, r2
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	461a      	mov	r2, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4413      	add	r3, r2
 800bd6a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3714      	adds	r7, #20
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	b087      	sub	sp, #28
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bd9c:	021b      	lsls	r3, r3, #8
 800bd9e:	b21a      	sxth	r2, r3
 800bda0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bda4:	4313      	orrs	r3, r2
 800bda6:	b21b      	sxth	r3, r3
 800bda8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bdaa:	89fb      	ldrh	r3, [r7, #14]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	371c      	adds	r7, #28
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdce:	2b40      	cmp	r3, #64	@ 0x40
 800bdd0:	d005      	beq.n	800bdde <USBD_StdDevReq+0x26>
 800bdd2:	2b40      	cmp	r3, #64	@ 0x40
 800bdd4:	d857      	bhi.n	800be86 <USBD_StdDevReq+0xce>
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00f      	beq.n	800bdfa <USBD_StdDevReq+0x42>
 800bdda:	2b20      	cmp	r3, #32
 800bddc:	d153      	bne.n	800be86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	32ae      	adds	r2, #174	@ 0xae
 800bde8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	4798      	blx	r3
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	73fb      	strb	r3, [r7, #15]
      break;
 800bdf8:	e04a      	b.n	800be90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	785b      	ldrb	r3, [r3, #1]
 800bdfe:	2b09      	cmp	r3, #9
 800be00:	d83b      	bhi.n	800be7a <USBD_StdDevReq+0xc2>
 800be02:	a201      	add	r2, pc, #4	@ (adr r2, 800be08 <USBD_StdDevReq+0x50>)
 800be04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be08:	0800be5d 	.word	0x0800be5d
 800be0c:	0800be71 	.word	0x0800be71
 800be10:	0800be7b 	.word	0x0800be7b
 800be14:	0800be67 	.word	0x0800be67
 800be18:	0800be7b 	.word	0x0800be7b
 800be1c:	0800be3b 	.word	0x0800be3b
 800be20:	0800be31 	.word	0x0800be31
 800be24:	0800be7b 	.word	0x0800be7b
 800be28:	0800be53 	.word	0x0800be53
 800be2c:	0800be45 	.word	0x0800be45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be30:	6839      	ldr	r1, [r7, #0]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fa3c 	bl	800c2b0 <USBD_GetDescriptor>
          break;
 800be38:	e024      	b.n	800be84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fbcb 	bl	800c5d8 <USBD_SetAddress>
          break;
 800be42:	e01f      	b.n	800be84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fc0a 	bl	800c660 <USBD_SetConfig>
 800be4c:	4603      	mov	r3, r0
 800be4e:	73fb      	strb	r3, [r7, #15]
          break;
 800be50:	e018      	b.n	800be84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 fcad 	bl	800c7b4 <USBD_GetConfig>
          break;
 800be5a:	e013      	b.n	800be84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 fcde 	bl	800c820 <USBD_GetStatus>
          break;
 800be64:	e00e      	b.n	800be84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be66:	6839      	ldr	r1, [r7, #0]
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fd0d 	bl	800c888 <USBD_SetFeature>
          break;
 800be6e:	e009      	b.n	800be84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fd31 	bl	800c8da <USBD_ClrFeature>
          break;
 800be78:	e004      	b.n	800be84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fd88 	bl	800c992 <USBD_CtlError>
          break;
 800be82:	bf00      	nop
      }
      break;
 800be84:	e004      	b.n	800be90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800be86:	6839      	ldr	r1, [r7, #0]
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fd82 	bl	800c992 <USBD_CtlError>
      break;
 800be8e:	bf00      	nop
  }

  return ret;
 800be90:	7bfb      	ldrb	r3, [r7, #15]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop

0800be9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bea6:	2300      	movs	r3, #0
 800bea8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800beb2:	2b40      	cmp	r3, #64	@ 0x40
 800beb4:	d005      	beq.n	800bec2 <USBD_StdItfReq+0x26>
 800beb6:	2b40      	cmp	r3, #64	@ 0x40
 800beb8:	d852      	bhi.n	800bf60 <USBD_StdItfReq+0xc4>
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <USBD_StdItfReq+0x26>
 800bebe:	2b20      	cmp	r3, #32
 800bec0:	d14e      	bne.n	800bf60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	3b01      	subs	r3, #1
 800becc:	2b02      	cmp	r3, #2
 800bece:	d840      	bhi.n	800bf52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	889b      	ldrh	r3, [r3, #4]
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d836      	bhi.n	800bf48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	889b      	ldrh	r3, [r3, #4]
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	4619      	mov	r1, r3
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f7ff fedb 	bl	800bc9e <USBD_CoreFindIF>
 800bee8:	4603      	mov	r3, r0
 800beea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800beec:	7bbb      	ldrb	r3, [r7, #14]
 800beee:	2bff      	cmp	r3, #255	@ 0xff
 800bef0:	d01d      	beq.n	800bf2e <USBD_StdItfReq+0x92>
 800bef2:	7bbb      	ldrb	r3, [r7, #14]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d11a      	bne.n	800bf2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bef8:	7bba      	ldrb	r2, [r7, #14]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	32ae      	adds	r2, #174	@ 0xae
 800befe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00f      	beq.n	800bf28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf08:	7bba      	ldrb	r2, [r7, #14]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf10:	7bba      	ldrb	r2, [r7, #14]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	32ae      	adds	r2, #174	@ 0xae
 800bf16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	6839      	ldr	r1, [r7, #0]
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	4798      	blx	r3
 800bf22:	4603      	mov	r3, r0
 800bf24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf26:	e004      	b.n	800bf32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf28:	2303      	movs	r3, #3
 800bf2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf2c:	e001      	b.n	800bf32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf2e:	2303      	movs	r3, #3
 800bf30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	88db      	ldrh	r3, [r3, #6]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d110      	bne.n	800bf5c <USBD_StdItfReq+0xc0>
 800bf3a:	7bfb      	ldrb	r3, [r7, #15]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10d      	bne.n	800bf5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 fdfd 	bl	800cb40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf46:	e009      	b.n	800bf5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 fd21 	bl	800c992 <USBD_CtlError>
          break;
 800bf50:	e004      	b.n	800bf5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf52:	6839      	ldr	r1, [r7, #0]
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 fd1c 	bl	800c992 <USBD_CtlError>
          break;
 800bf5a:	e000      	b.n	800bf5e <USBD_StdItfReq+0xc2>
          break;
 800bf5c:	bf00      	nop
      }
      break;
 800bf5e:	e004      	b.n	800bf6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf60:	6839      	ldr	r1, [r7, #0]
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fd15 	bl	800c992 <USBD_CtlError>
      break;
 800bf68:	bf00      	nop
  }

  return ret;
 800bf6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3710      	adds	r7, #16
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	889b      	ldrh	r3, [r3, #4]
 800bf86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf90:	2b40      	cmp	r3, #64	@ 0x40
 800bf92:	d007      	beq.n	800bfa4 <USBD_StdEPReq+0x30>
 800bf94:	2b40      	cmp	r3, #64	@ 0x40
 800bf96:	f200 817f 	bhi.w	800c298 <USBD_StdEPReq+0x324>
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d02a      	beq.n	800bff4 <USBD_StdEPReq+0x80>
 800bf9e:	2b20      	cmp	r3, #32
 800bfa0:	f040 817a 	bne.w	800c298 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfa4:	7bbb      	ldrb	r3, [r7, #14]
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7ff fe85 	bl	800bcb8 <USBD_CoreFindEP>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfb2:	7b7b      	ldrb	r3, [r7, #13]
 800bfb4:	2bff      	cmp	r3, #255	@ 0xff
 800bfb6:	f000 8174 	beq.w	800c2a2 <USBD_StdEPReq+0x32e>
 800bfba:	7b7b      	ldrb	r3, [r7, #13]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f040 8170 	bne.w	800c2a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bfc2:	7b7a      	ldrb	r2, [r7, #13]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bfca:	7b7a      	ldrb	r2, [r7, #13]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	32ae      	adds	r2, #174	@ 0xae
 800bfd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f000 8163 	beq.w	800c2a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bfdc:	7b7a      	ldrb	r2, [r7, #13]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	32ae      	adds	r2, #174	@ 0xae
 800bfe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	6839      	ldr	r1, [r7, #0]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	4798      	blx	r3
 800bfee:	4603      	mov	r3, r0
 800bff0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bff2:	e156      	b.n	800c2a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	785b      	ldrb	r3, [r3, #1]
 800bff8:	2b03      	cmp	r3, #3
 800bffa:	d008      	beq.n	800c00e <USBD_StdEPReq+0x9a>
 800bffc:	2b03      	cmp	r3, #3
 800bffe:	f300 8145 	bgt.w	800c28c <USBD_StdEPReq+0x318>
 800c002:	2b00      	cmp	r3, #0
 800c004:	f000 809b 	beq.w	800c13e <USBD_StdEPReq+0x1ca>
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d03c      	beq.n	800c086 <USBD_StdEPReq+0x112>
 800c00c:	e13e      	b.n	800c28c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c014:	b2db      	uxtb	r3, r3
 800c016:	2b02      	cmp	r3, #2
 800c018:	d002      	beq.n	800c020 <USBD_StdEPReq+0xac>
 800c01a:	2b03      	cmp	r3, #3
 800c01c:	d016      	beq.n	800c04c <USBD_StdEPReq+0xd8>
 800c01e:	e02c      	b.n	800c07a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c020:	7bbb      	ldrb	r3, [r7, #14]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d00d      	beq.n	800c042 <USBD_StdEPReq+0xce>
 800c026:	7bbb      	ldrb	r3, [r7, #14]
 800c028:	2b80      	cmp	r3, #128	@ 0x80
 800c02a:	d00a      	beq.n	800c042 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c02c:	7bbb      	ldrb	r3, [r7, #14]
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f005 fc4f 	bl	80118d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c036:	2180      	movs	r1, #128	@ 0x80
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f005 fc4b 	bl	80118d4 <USBD_LL_StallEP>
 800c03e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c040:	e020      	b.n	800c084 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c042:	6839      	ldr	r1, [r7, #0]
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 fca4 	bl	800c992 <USBD_CtlError>
              break;
 800c04a:	e01b      	b.n	800c084 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	885b      	ldrh	r3, [r3, #2]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d10e      	bne.n	800c072 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c054:	7bbb      	ldrb	r3, [r7, #14]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00b      	beq.n	800c072 <USBD_StdEPReq+0xfe>
 800c05a:	7bbb      	ldrb	r3, [r7, #14]
 800c05c:	2b80      	cmp	r3, #128	@ 0x80
 800c05e:	d008      	beq.n	800c072 <USBD_StdEPReq+0xfe>
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	88db      	ldrh	r3, [r3, #6]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d104      	bne.n	800c072 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	4619      	mov	r1, r3
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f005 fc31 	bl	80118d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fd64 	bl	800cb40 <USBD_CtlSendStatus>

              break;
 800c078:	e004      	b.n	800c084 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 fc88 	bl	800c992 <USBD_CtlError>
              break;
 800c082:	bf00      	nop
          }
          break;
 800c084:	e107      	b.n	800c296 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	2b02      	cmp	r3, #2
 800c090:	d002      	beq.n	800c098 <USBD_StdEPReq+0x124>
 800c092:	2b03      	cmp	r3, #3
 800c094:	d016      	beq.n	800c0c4 <USBD_StdEPReq+0x150>
 800c096:	e04b      	b.n	800c130 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c098:	7bbb      	ldrb	r3, [r7, #14]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00d      	beq.n	800c0ba <USBD_StdEPReq+0x146>
 800c09e:	7bbb      	ldrb	r3, [r7, #14]
 800c0a0:	2b80      	cmp	r3, #128	@ 0x80
 800c0a2:	d00a      	beq.n	800c0ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0a4:	7bbb      	ldrb	r3, [r7, #14]
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f005 fc13 	bl	80118d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0ae:	2180      	movs	r1, #128	@ 0x80
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f005 fc0f 	bl	80118d4 <USBD_LL_StallEP>
 800c0b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0b8:	e040      	b.n	800c13c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fc68 	bl	800c992 <USBD_CtlError>
              break;
 800c0c2:	e03b      	b.n	800c13c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	885b      	ldrh	r3, [r3, #2]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d136      	bne.n	800c13a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
 800c0ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d004      	beq.n	800c0e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0d6:	7bbb      	ldrb	r3, [r7, #14]
 800c0d8:	4619      	mov	r1, r3
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f005 fc19 	bl	8011912 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fd2d 	bl	800cb40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0e6:	7bbb      	ldrb	r3, [r7, #14]
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f7ff fde4 	bl	800bcb8 <USBD_CoreFindEP>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0f4:	7b7b      	ldrb	r3, [r7, #13]
 800c0f6:	2bff      	cmp	r3, #255	@ 0xff
 800c0f8:	d01f      	beq.n	800c13a <USBD_StdEPReq+0x1c6>
 800c0fa:	7b7b      	ldrb	r3, [r7, #13]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d11c      	bne.n	800c13a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c100:	7b7a      	ldrb	r2, [r7, #13]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c108:	7b7a      	ldrb	r2, [r7, #13]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	32ae      	adds	r2, #174	@ 0xae
 800c10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d010      	beq.n	800c13a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c118:	7b7a      	ldrb	r2, [r7, #13]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	32ae      	adds	r2, #174	@ 0xae
 800c11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	6839      	ldr	r1, [r7, #0]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	4798      	blx	r3
 800c12a:	4603      	mov	r3, r0
 800c12c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c12e:	e004      	b.n	800c13a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c130:	6839      	ldr	r1, [r7, #0]
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 fc2d 	bl	800c992 <USBD_CtlError>
              break;
 800c138:	e000      	b.n	800c13c <USBD_StdEPReq+0x1c8>
              break;
 800c13a:	bf00      	nop
          }
          break;
 800c13c:	e0ab      	b.n	800c296 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c144:	b2db      	uxtb	r3, r3
 800c146:	2b02      	cmp	r3, #2
 800c148:	d002      	beq.n	800c150 <USBD_StdEPReq+0x1dc>
 800c14a:	2b03      	cmp	r3, #3
 800c14c:	d032      	beq.n	800c1b4 <USBD_StdEPReq+0x240>
 800c14e:	e097      	b.n	800c280 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c150:	7bbb      	ldrb	r3, [r7, #14]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d007      	beq.n	800c166 <USBD_StdEPReq+0x1f2>
 800c156:	7bbb      	ldrb	r3, [r7, #14]
 800c158:	2b80      	cmp	r3, #128	@ 0x80
 800c15a:	d004      	beq.n	800c166 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 fc17 	bl	800c992 <USBD_CtlError>
                break;
 800c164:	e091      	b.n	800c28a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c166:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	da0b      	bge.n	800c186 <USBD_StdEPReq+0x212>
 800c16e:	7bbb      	ldrb	r3, [r7, #14]
 800c170:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c174:	4613      	mov	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	4413      	add	r3, r2
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	3310      	adds	r3, #16
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	4413      	add	r3, r2
 800c182:	3304      	adds	r3, #4
 800c184:	e00b      	b.n	800c19e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c186:	7bbb      	ldrb	r3, [r7, #14]
 800c188:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c18c:	4613      	mov	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	4413      	add	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	4413      	add	r3, r2
 800c19c:	3304      	adds	r3, #4
 800c19e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	2202      	movs	r2, #2
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fc6d 	bl	800ca8c <USBD_CtlSendData>
              break;
 800c1b2:	e06a      	b.n	800c28a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	da11      	bge.n	800c1e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1bc:	7bbb      	ldrb	r3, [r7, #14]
 800c1be:	f003 020f 	and.w	r2, r3, #15
 800c1c2:	6879      	ldr	r1, [r7, #4]
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	4413      	add	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	440b      	add	r3, r1
 800c1ce:	3324      	adds	r3, #36	@ 0x24
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d117      	bne.n	800c206 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 fbda 	bl	800c992 <USBD_CtlError>
                  break;
 800c1de:	e054      	b.n	800c28a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
 800c1e2:	f003 020f 	and.w	r2, r3, #15
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	4613      	mov	r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	4413      	add	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	440b      	add	r3, r1
 800c1f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c1f6:	881b      	ldrh	r3, [r3, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d104      	bne.n	800c206 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1fc:	6839      	ldr	r1, [r7, #0]
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 fbc7 	bl	800c992 <USBD_CtlError>
                  break;
 800c204:	e041      	b.n	800c28a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c206:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	da0b      	bge.n	800c226 <USBD_StdEPReq+0x2b2>
 800c20e:	7bbb      	ldrb	r3, [r7, #14]
 800c210:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c214:	4613      	mov	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4413      	add	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	3310      	adds	r3, #16
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	4413      	add	r3, r2
 800c222:	3304      	adds	r3, #4
 800c224:	e00b      	b.n	800c23e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c226:	7bbb      	ldrb	r3, [r7, #14]
 800c228:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c22c:	4613      	mov	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4413      	add	r3, r2
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	4413      	add	r3, r2
 800c23c:	3304      	adds	r3, #4
 800c23e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c240:	7bbb      	ldrb	r3, [r7, #14]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d002      	beq.n	800c24c <USBD_StdEPReq+0x2d8>
 800c246:	7bbb      	ldrb	r3, [r7, #14]
 800c248:	2b80      	cmp	r3, #128	@ 0x80
 800c24a:	d103      	bne.n	800c254 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	2200      	movs	r2, #0
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	e00e      	b.n	800c272 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c254:	7bbb      	ldrb	r3, [r7, #14]
 800c256:	4619      	mov	r1, r3
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f005 fb79 	bl	8011950 <USBD_LL_IsStallEP>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d003      	beq.n	800c26c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	2201      	movs	r2, #1
 800c268:	601a      	str	r2, [r3, #0]
 800c26a:	e002      	b.n	800c272 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	2200      	movs	r2, #0
 800c270:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	2202      	movs	r2, #2
 800c276:	4619      	mov	r1, r3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 fc07 	bl	800ca8c <USBD_CtlSendData>
              break;
 800c27e:	e004      	b.n	800c28a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c280:	6839      	ldr	r1, [r7, #0]
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fb85 	bl	800c992 <USBD_CtlError>
              break;
 800c288:	bf00      	nop
          }
          break;
 800c28a:	e004      	b.n	800c296 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fb7f 	bl	800c992 <USBD_CtlError>
          break;
 800c294:	bf00      	nop
      }
      break;
 800c296:	e005      	b.n	800c2a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fb79 	bl	800c992 <USBD_CtlError>
      break;
 800c2a0:	e000      	b.n	800c2a4 <USBD_StdEPReq+0x330>
      break;
 800c2a2:	bf00      	nop
  }

  return ret;
 800c2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
	...

0800c2b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b084      	sub	sp, #16
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	885b      	ldrh	r3, [r3, #2]
 800c2ca:	0a1b      	lsrs	r3, r3, #8
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	2b0e      	cmp	r3, #14
 800c2d2:	f200 8152 	bhi.w	800c57a <USBD_GetDescriptor+0x2ca>
 800c2d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c2dc <USBD_GetDescriptor+0x2c>)
 800c2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2dc:	0800c34d 	.word	0x0800c34d
 800c2e0:	0800c365 	.word	0x0800c365
 800c2e4:	0800c3a5 	.word	0x0800c3a5
 800c2e8:	0800c57b 	.word	0x0800c57b
 800c2ec:	0800c57b 	.word	0x0800c57b
 800c2f0:	0800c51b 	.word	0x0800c51b
 800c2f4:	0800c547 	.word	0x0800c547
 800c2f8:	0800c57b 	.word	0x0800c57b
 800c2fc:	0800c57b 	.word	0x0800c57b
 800c300:	0800c57b 	.word	0x0800c57b
 800c304:	0800c57b 	.word	0x0800c57b
 800c308:	0800c57b 	.word	0x0800c57b
 800c30c:	0800c57b 	.word	0x0800c57b
 800c310:	0800c57b 	.word	0x0800c57b
 800c314:	0800c319 	.word	0x0800c319
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c31e:	69db      	ldr	r3, [r3, #28]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00b      	beq.n	800c33c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c32a:	69db      	ldr	r3, [r3, #28]
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	7c12      	ldrb	r2, [r2, #16]
 800c330:	f107 0108 	add.w	r1, r7, #8
 800c334:	4610      	mov	r0, r2
 800c336:	4798      	blx	r3
 800c338:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c33a:	e126      	b.n	800c58a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c33c:	6839      	ldr	r1, [r7, #0]
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 fb27 	bl	800c992 <USBD_CtlError>
        err++;
 800c344:	7afb      	ldrb	r3, [r7, #11]
 800c346:	3301      	adds	r3, #1
 800c348:	72fb      	strb	r3, [r7, #11]
      break;
 800c34a:	e11e      	b.n	800c58a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	7c12      	ldrb	r2, [r2, #16]
 800c358:	f107 0108 	add.w	r1, r7, #8
 800c35c:	4610      	mov	r0, r2
 800c35e:	4798      	blx	r3
 800c360:	60f8      	str	r0, [r7, #12]
      break;
 800c362:	e112      	b.n	800c58a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	7c1b      	ldrb	r3, [r3, #16]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10d      	bne.n	800c388 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c374:	f107 0208 	add.w	r2, r7, #8
 800c378:	4610      	mov	r0, r2
 800c37a:	4798      	blx	r3
 800c37c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	3301      	adds	r3, #1
 800c382:	2202      	movs	r2, #2
 800c384:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c386:	e100      	b.n	800c58a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c390:	f107 0208 	add.w	r2, r7, #8
 800c394:	4610      	mov	r0, r2
 800c396:	4798      	blx	r3
 800c398:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	3301      	adds	r3, #1
 800c39e:	2202      	movs	r2, #2
 800c3a0:	701a      	strb	r2, [r3, #0]
      break;
 800c3a2:	e0f2      	b.n	800c58a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	885b      	ldrh	r3, [r3, #2]
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	2b05      	cmp	r3, #5
 800c3ac:	f200 80ac 	bhi.w	800c508 <USBD_GetDescriptor+0x258>
 800c3b0:	a201      	add	r2, pc, #4	@ (adr r2, 800c3b8 <USBD_GetDescriptor+0x108>)
 800c3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b6:	bf00      	nop
 800c3b8:	0800c3d1 	.word	0x0800c3d1
 800c3bc:	0800c405 	.word	0x0800c405
 800c3c0:	0800c439 	.word	0x0800c439
 800c3c4:	0800c46d 	.word	0x0800c46d
 800c3c8:	0800c4a1 	.word	0x0800c4a1
 800c3cc:	0800c4d5 	.word	0x0800c4d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d00b      	beq.n	800c3f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	7c12      	ldrb	r2, [r2, #16]
 800c3e8:	f107 0108 	add.w	r1, r7, #8
 800c3ec:	4610      	mov	r0, r2
 800c3ee:	4798      	blx	r3
 800c3f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3f2:	e091      	b.n	800c518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3f4:	6839      	ldr	r1, [r7, #0]
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f000 facb 	bl	800c992 <USBD_CtlError>
            err++;
 800c3fc:	7afb      	ldrb	r3, [r7, #11]
 800c3fe:	3301      	adds	r3, #1
 800c400:	72fb      	strb	r3, [r7, #11]
          break;
 800c402:	e089      	b.n	800c518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d00b      	beq.n	800c428 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	7c12      	ldrb	r2, [r2, #16]
 800c41c:	f107 0108 	add.w	r1, r7, #8
 800c420:	4610      	mov	r0, r2
 800c422:	4798      	blx	r3
 800c424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c426:	e077      	b.n	800c518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c428:	6839      	ldr	r1, [r7, #0]
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 fab1 	bl	800c992 <USBD_CtlError>
            err++;
 800c430:	7afb      	ldrb	r3, [r7, #11]
 800c432:	3301      	adds	r3, #1
 800c434:	72fb      	strb	r3, [r7, #11]
          break;
 800c436:	e06f      	b.n	800c518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00b      	beq.n	800c45c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	7c12      	ldrb	r2, [r2, #16]
 800c450:	f107 0108 	add.w	r1, r7, #8
 800c454:	4610      	mov	r0, r2
 800c456:	4798      	blx	r3
 800c458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c45a:	e05d      	b.n	800c518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c45c:	6839      	ldr	r1, [r7, #0]
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 fa97 	bl	800c992 <USBD_CtlError>
            err++;
 800c464:	7afb      	ldrb	r3, [r7, #11]
 800c466:	3301      	adds	r3, #1
 800c468:	72fb      	strb	r3, [r7, #11]
          break;
 800c46a:	e055      	b.n	800c518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c472:	691b      	ldr	r3, [r3, #16]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d00b      	beq.n	800c490 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	7c12      	ldrb	r2, [r2, #16]
 800c484:	f107 0108 	add.w	r1, r7, #8
 800c488:	4610      	mov	r0, r2
 800c48a:	4798      	blx	r3
 800c48c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c48e:	e043      	b.n	800c518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c490:	6839      	ldr	r1, [r7, #0]
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 fa7d 	bl	800c992 <USBD_CtlError>
            err++;
 800c498:	7afb      	ldrb	r3, [r7, #11]
 800c49a:	3301      	adds	r3, #1
 800c49c:	72fb      	strb	r3, [r7, #11]
          break;
 800c49e:	e03b      	b.n	800c518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4a6:	695b      	ldr	r3, [r3, #20]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d00b      	beq.n	800c4c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4b2:	695b      	ldr	r3, [r3, #20]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	7c12      	ldrb	r2, [r2, #16]
 800c4b8:	f107 0108 	add.w	r1, r7, #8
 800c4bc:	4610      	mov	r0, r2
 800c4be:	4798      	blx	r3
 800c4c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4c2:	e029      	b.n	800c518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4c4:	6839      	ldr	r1, [r7, #0]
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 fa63 	bl	800c992 <USBD_CtlError>
            err++;
 800c4cc:	7afb      	ldrb	r3, [r7, #11]
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4d2:	e021      	b.n	800c518 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4da:	699b      	ldr	r3, [r3, #24]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00b      	beq.n	800c4f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	7c12      	ldrb	r2, [r2, #16]
 800c4ec:	f107 0108 	add.w	r1, r7, #8
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	4798      	blx	r3
 800c4f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4f6:	e00f      	b.n	800c518 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fa49 	bl	800c992 <USBD_CtlError>
            err++;
 800c500:	7afb      	ldrb	r3, [r7, #11]
 800c502:	3301      	adds	r3, #1
 800c504:	72fb      	strb	r3, [r7, #11]
          break;
 800c506:	e007      	b.n	800c518 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fa41 	bl	800c992 <USBD_CtlError>
          err++;
 800c510:	7afb      	ldrb	r3, [r7, #11]
 800c512:	3301      	adds	r3, #1
 800c514:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c516:	bf00      	nop
      }
      break;
 800c518:	e037      	b.n	800c58a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	7c1b      	ldrb	r3, [r3, #16]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d109      	bne.n	800c536 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c52a:	f107 0208 	add.w	r2, r7, #8
 800c52e:	4610      	mov	r0, r2
 800c530:	4798      	blx	r3
 800c532:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c534:	e029      	b.n	800c58a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c536:	6839      	ldr	r1, [r7, #0]
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 fa2a 	bl	800c992 <USBD_CtlError>
        err++;
 800c53e:	7afb      	ldrb	r3, [r7, #11]
 800c540:	3301      	adds	r3, #1
 800c542:	72fb      	strb	r3, [r7, #11]
      break;
 800c544:	e021      	b.n	800c58a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	7c1b      	ldrb	r3, [r3, #16]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d10d      	bne.n	800c56a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c556:	f107 0208 	add.w	r2, r7, #8
 800c55a:	4610      	mov	r0, r2
 800c55c:	4798      	blx	r3
 800c55e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	3301      	adds	r3, #1
 800c564:	2207      	movs	r2, #7
 800c566:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c568:	e00f      	b.n	800c58a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c56a:	6839      	ldr	r1, [r7, #0]
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 fa10 	bl	800c992 <USBD_CtlError>
        err++;
 800c572:	7afb      	ldrb	r3, [r7, #11]
 800c574:	3301      	adds	r3, #1
 800c576:	72fb      	strb	r3, [r7, #11]
      break;
 800c578:	e007      	b.n	800c58a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c57a:	6839      	ldr	r1, [r7, #0]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 fa08 	bl	800c992 <USBD_CtlError>
      err++;
 800c582:	7afb      	ldrb	r3, [r7, #11]
 800c584:	3301      	adds	r3, #1
 800c586:	72fb      	strb	r3, [r7, #11]
      break;
 800c588:	bf00      	nop
  }

  if (err != 0U)
 800c58a:	7afb      	ldrb	r3, [r7, #11]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d11e      	bne.n	800c5ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	88db      	ldrh	r3, [r3, #6]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d016      	beq.n	800c5c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c598:	893b      	ldrh	r3, [r7, #8]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00e      	beq.n	800c5bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	88da      	ldrh	r2, [r3, #6]
 800c5a2:	893b      	ldrh	r3, [r7, #8]
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	bf28      	it	cs
 800c5a8:	4613      	movcs	r3, r2
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5ae:	893b      	ldrh	r3, [r7, #8]
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	68f9      	ldr	r1, [r7, #12]
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fa69 	bl	800ca8c <USBD_CtlSendData>
 800c5ba:	e009      	b.n	800c5d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5bc:	6839      	ldr	r1, [r7, #0]
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 f9e7 	bl	800c992 <USBD_CtlError>
 800c5c4:	e004      	b.n	800c5d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 faba 	bl	800cb40 <USBD_CtlSendStatus>
 800c5cc:	e000      	b.n	800c5d0 <USBD_GetDescriptor+0x320>
    return;
 800c5ce:	bf00      	nop
  }
}
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop

0800c5d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	889b      	ldrh	r3, [r3, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d131      	bne.n	800c64e <USBD_SetAddress+0x76>
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	88db      	ldrh	r3, [r3, #6]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d12d      	bne.n	800c64e <USBD_SetAddress+0x76>
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	885b      	ldrh	r3, [r3, #2]
 800c5f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5f8:	d829      	bhi.n	800c64e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	885b      	ldrh	r3, [r3, #2]
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c604:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	2b03      	cmp	r3, #3
 800c610:	d104      	bne.n	800c61c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c612:	6839      	ldr	r1, [r7, #0]
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 f9bc 	bl	800c992 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c61a:	e01d      	b.n	800c658 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	7bfa      	ldrb	r2, [r7, #15]
 800c620:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c624:	7bfb      	ldrb	r3, [r7, #15]
 800c626:	4619      	mov	r1, r3
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f005 f9bd 	bl	80119a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f000 fa86 	bl	800cb40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c634:	7bfb      	ldrb	r3, [r7, #15]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d004      	beq.n	800c644 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2202      	movs	r2, #2
 800c63e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c642:	e009      	b.n	800c658 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c64c:	e004      	b.n	800c658 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f99e 	bl	800c992 <USBD_CtlError>
  }
}
 800c656:	bf00      	nop
 800c658:	bf00      	nop
 800c65a:	3710      	adds	r7, #16
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c66a:	2300      	movs	r3, #0
 800c66c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	885b      	ldrh	r3, [r3, #2]
 800c672:	b2da      	uxtb	r2, r3
 800c674:	4b4e      	ldr	r3, [pc, #312]	@ (800c7b0 <USBD_SetConfig+0x150>)
 800c676:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c678:	4b4d      	ldr	r3, [pc, #308]	@ (800c7b0 <USBD_SetConfig+0x150>)
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d905      	bls.n	800c68c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c680:	6839      	ldr	r1, [r7, #0]
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f985 	bl	800c992 <USBD_CtlError>
    return USBD_FAIL;
 800c688:	2303      	movs	r3, #3
 800c68a:	e08c      	b.n	800c7a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c692:	b2db      	uxtb	r3, r3
 800c694:	2b02      	cmp	r3, #2
 800c696:	d002      	beq.n	800c69e <USBD_SetConfig+0x3e>
 800c698:	2b03      	cmp	r3, #3
 800c69a:	d029      	beq.n	800c6f0 <USBD_SetConfig+0x90>
 800c69c:	e075      	b.n	800c78a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c69e:	4b44      	ldr	r3, [pc, #272]	@ (800c7b0 <USBD_SetConfig+0x150>)
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d020      	beq.n	800c6e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6a6:	4b42      	ldr	r3, [pc, #264]	@ (800c7b0 <USBD_SetConfig+0x150>)
 800c6a8:	781b      	ldrb	r3, [r3, #0]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6b0:	4b3f      	ldr	r3, [pc, #252]	@ (800c7b0 <USBD_SetConfig+0x150>)
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f7ff f84b 	bl	800b752 <USBD_SetClassConfig>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6c0:	7bfb      	ldrb	r3, [r7, #15]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d008      	beq.n	800c6d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6c6:	6839      	ldr	r1, [r7, #0]
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 f962 	bl	800c992 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2202      	movs	r2, #2
 800c6d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6d6:	e065      	b.n	800c7a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 fa31 	bl	800cb40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2203      	movs	r2, #3
 800c6e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c6e6:	e05d      	b.n	800c7a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 fa29 	bl	800cb40 <USBD_CtlSendStatus>
      break;
 800c6ee:	e059      	b.n	800c7a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6f0:	4b2f      	ldr	r3, [pc, #188]	@ (800c7b0 <USBD_SetConfig+0x150>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d112      	bne.n	800c71e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2202      	movs	r2, #2
 800c6fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c700:	4b2b      	ldr	r3, [pc, #172]	@ (800c7b0 <USBD_SetConfig+0x150>)
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	461a      	mov	r2, r3
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c70a:	4b29      	ldr	r3, [pc, #164]	@ (800c7b0 <USBD_SetConfig+0x150>)
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	4619      	mov	r1, r3
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f7ff f83a 	bl	800b78a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fa12 	bl	800cb40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c71c:	e042      	b.n	800c7a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c71e:	4b24      	ldr	r3, [pc, #144]	@ (800c7b0 <USBD_SetConfig+0x150>)
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	461a      	mov	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d02a      	beq.n	800c782 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	b2db      	uxtb	r3, r3
 800c732:	4619      	mov	r1, r3
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f7ff f828 	bl	800b78a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c73a:	4b1d      	ldr	r3, [pc, #116]	@ (800c7b0 <USBD_SetConfig+0x150>)
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	461a      	mov	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c744:	4b1a      	ldr	r3, [pc, #104]	@ (800c7b0 <USBD_SetConfig+0x150>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	4619      	mov	r1, r3
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7ff f801 	bl	800b752 <USBD_SetClassConfig>
 800c750:	4603      	mov	r3, r0
 800c752:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c754:	7bfb      	ldrb	r3, [r7, #15]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00f      	beq.n	800c77a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c75a:	6839      	ldr	r1, [r7, #0]
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f000 f918 	bl	800c992 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	b2db      	uxtb	r3, r3
 800c768:	4619      	mov	r1, r3
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f7ff f80d 	bl	800b78a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2202      	movs	r2, #2
 800c774:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c778:	e014      	b.n	800c7a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f9e0 	bl	800cb40 <USBD_CtlSendStatus>
      break;
 800c780:	e010      	b.n	800c7a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 f9dc 	bl	800cb40 <USBD_CtlSendStatus>
      break;
 800c788:	e00c      	b.n	800c7a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c78a:	6839      	ldr	r1, [r7, #0]
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 f900 	bl	800c992 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c792:	4b07      	ldr	r3, [pc, #28]	@ (800c7b0 <USBD_SetConfig+0x150>)
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	4619      	mov	r1, r3
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f7fe fff6 	bl	800b78a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c79e:	2303      	movs	r3, #3
 800c7a0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7a2:	bf00      	nop
  }

  return ret;
 800c7a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	200004dc 	.word	0x200004dc

0800c7b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	88db      	ldrh	r3, [r3, #6]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d004      	beq.n	800c7d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7c6:	6839      	ldr	r1, [r7, #0]
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 f8e2 	bl	800c992 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7ce:	e023      	b.n	800c818 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	dc02      	bgt.n	800c7e2 <USBD_GetConfig+0x2e>
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	dc03      	bgt.n	800c7e8 <USBD_GetConfig+0x34>
 800c7e0:	e015      	b.n	800c80e <USBD_GetConfig+0x5a>
 800c7e2:	2b03      	cmp	r3, #3
 800c7e4:	d00b      	beq.n	800c7fe <USBD_GetConfig+0x4a>
 800c7e6:	e012      	b.n	800c80e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	3308      	adds	r3, #8
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 f948 	bl	800ca8c <USBD_CtlSendData>
        break;
 800c7fc:	e00c      	b.n	800c818 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	3304      	adds	r3, #4
 800c802:	2201      	movs	r2, #1
 800c804:	4619      	mov	r1, r3
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 f940 	bl	800ca8c <USBD_CtlSendData>
        break;
 800c80c:	e004      	b.n	800c818 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c80e:	6839      	ldr	r1, [r7, #0]
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f000 f8be 	bl	800c992 <USBD_CtlError>
        break;
 800c816:	bf00      	nop
}
 800c818:	bf00      	nop
 800c81a:	3708      	adds	r7, #8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c830:	b2db      	uxtb	r3, r3
 800c832:	3b01      	subs	r3, #1
 800c834:	2b02      	cmp	r3, #2
 800c836:	d81e      	bhi.n	800c876 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	88db      	ldrh	r3, [r3, #6]
 800c83c:	2b02      	cmp	r3, #2
 800c83e:	d004      	beq.n	800c84a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c840:	6839      	ldr	r1, [r7, #0]
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f8a5 	bl	800c992 <USBD_CtlError>
        break;
 800c848:	e01a      	b.n	800c880 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c856:	2b00      	cmp	r3, #0
 800c858:	d005      	beq.n	800c866 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	f043 0202 	orr.w	r2, r3, #2
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	330c      	adds	r3, #12
 800c86a:	2202      	movs	r2, #2
 800c86c:	4619      	mov	r1, r3
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 f90c 	bl	800ca8c <USBD_CtlSendData>
      break;
 800c874:	e004      	b.n	800c880 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c876:	6839      	ldr	r1, [r7, #0]
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 f88a 	bl	800c992 <USBD_CtlError>
      break;
 800c87e:	bf00      	nop
  }
}
 800c880:	bf00      	nop
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	885b      	ldrh	r3, [r3, #2]
 800c896:	2b01      	cmp	r3, #1
 800c898:	d107      	bne.n	800c8aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2201      	movs	r2, #1
 800c89e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 f94c 	bl	800cb40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8a8:	e013      	b.n	800c8d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	885b      	ldrh	r3, [r3, #2]
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d10b      	bne.n	800c8ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	889b      	ldrh	r3, [r3, #4]
 800c8b6:	0a1b      	lsrs	r3, r3, #8
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f93c 	bl	800cb40 <USBD_CtlSendStatus>
}
 800c8c8:	e003      	b.n	800c8d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8ca:	6839      	ldr	r1, [r7, #0]
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 f860 	bl	800c992 <USBD_CtlError>
}
 800c8d2:	bf00      	nop
 800c8d4:	3708      	adds	r7, #8
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}

0800c8da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8da:	b580      	push	{r7, lr}
 800c8dc:	b082      	sub	sp, #8
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	d80b      	bhi.n	800c90a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	885b      	ldrh	r3, [r3, #2]
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d10c      	bne.n	800c914 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f91c 	bl	800cb40 <USBD_CtlSendStatus>
      }
      break;
 800c908:	e004      	b.n	800c914 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c90a:	6839      	ldr	r1, [r7, #0]
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 f840 	bl	800c992 <USBD_CtlError>
      break;
 800c912:	e000      	b.n	800c916 <USBD_ClrFeature+0x3c>
      break;
 800c914:	bf00      	nop
  }
}
 800c916:	bf00      	nop
 800c918:	3708      	adds	r7, #8
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b084      	sub	sp, #16
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	781a      	ldrb	r2, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	3301      	adds	r3, #1
 800c938:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	781a      	ldrb	r2, [r3, #0]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	3301      	adds	r3, #1
 800c946:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f7ff fa16 	bl	800bd7a <SWAPBYTE>
 800c94e:	4603      	mov	r3, r0
 800c950:	461a      	mov	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	3301      	adds	r3, #1
 800c95a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	3301      	adds	r3, #1
 800c960:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f7ff fa09 	bl	800bd7a <SWAPBYTE>
 800c968:	4603      	mov	r3, r0
 800c96a:	461a      	mov	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	3301      	adds	r3, #1
 800c974:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	3301      	adds	r3, #1
 800c97a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f7ff f9fc 	bl	800bd7a <SWAPBYTE>
 800c982:	4603      	mov	r3, r0
 800c984:	461a      	mov	r2, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	80da      	strh	r2, [r3, #6]
}
 800c98a:	bf00      	nop
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}

0800c992 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c992:	b580      	push	{r7, lr}
 800c994:	b082      	sub	sp, #8
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
 800c99a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c99c:	2180      	movs	r1, #128	@ 0x80
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f004 ff98 	bl	80118d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f004 ff94 	bl	80118d4 <USBD_LL_StallEP>
}
 800c9ac:	bf00      	nop
 800c9ae:	3708      	adds	r7, #8
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d042      	beq.n	800ca50 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c9ce:	6938      	ldr	r0, [r7, #16]
 800c9d0:	f000 f842 	bl	800ca58 <USBD_GetLen>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	005b      	lsls	r3, r3, #1
 800c9da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9de:	d808      	bhi.n	800c9f2 <USBD_GetString+0x3e>
 800c9e0:	6938      	ldr	r0, [r7, #16]
 800c9e2:	f000 f839 	bl	800ca58 <USBD_GetLen>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	e001      	b.n	800c9f6 <USBD_GetString+0x42>
 800c9f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9fa:	7dfb      	ldrb	r3, [r7, #23]
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	4413      	add	r3, r2
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	7812      	ldrb	r2, [r2, #0]
 800ca04:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca06:	7dfb      	ldrb	r3, [r7, #23]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca0c:	7dfb      	ldrb	r3, [r7, #23]
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	4413      	add	r3, r2
 800ca12:	2203      	movs	r2, #3
 800ca14:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca16:	7dfb      	ldrb	r3, [r7, #23]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca1c:	e013      	b.n	800ca46 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ca1e:	7dfb      	ldrb	r3, [r7, #23]
 800ca20:	68ba      	ldr	r2, [r7, #8]
 800ca22:	4413      	add	r3, r2
 800ca24:	693a      	ldr	r2, [r7, #16]
 800ca26:	7812      	ldrb	r2, [r2, #0]
 800ca28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	613b      	str	r3, [r7, #16]
    idx++;
 800ca30:	7dfb      	ldrb	r3, [r7, #23]
 800ca32:	3301      	adds	r3, #1
 800ca34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca36:	7dfb      	ldrb	r3, [r7, #23]
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca40:	7dfb      	ldrb	r3, [r7, #23]
 800ca42:	3301      	adds	r3, #1
 800ca44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1e7      	bne.n	800ca1e <USBD_GetString+0x6a>
 800ca4e:	e000      	b.n	800ca52 <USBD_GetString+0x9e>
    return;
 800ca50:	bf00      	nop
  }
}
 800ca52:	3718      	adds	r7, #24
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca60:	2300      	movs	r3, #0
 800ca62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca68:	e005      	b.n	800ca76 <USBD_GetLen+0x1e>
  {
    len++;
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	3301      	adds	r3, #1
 800ca74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1f5      	bne.n	800ca6a <USBD_GetLen+0x12>
  }

  return len;
 800ca7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	60b9      	str	r1, [r7, #8]
 800ca96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2202      	movs	r2, #2
 800ca9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	68ba      	ldr	r2, [r7, #8]
 800cab0:	2100      	movs	r1, #0
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f004 ff97 	bl	80119e6 <USBD_LL_Transmit>

  return USBD_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b084      	sub	sp, #16
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	60f8      	str	r0, [r7, #12]
 800caca:	60b9      	str	r1, [r7, #8]
 800cacc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	2100      	movs	r1, #0
 800cad4:	68f8      	ldr	r0, [r7, #12]
 800cad6:	f004 ff86 	bl	80119e6 <USBD_LL_Transmit>

  return USBD_OK;
 800cada:	2300      	movs	r3, #0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2203      	movs	r2, #3
 800caf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f004 ff8a 	bl	8011a28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b084      	sub	sp, #16
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	60f8      	str	r0, [r7, #12]
 800cb26:	60b9      	str	r1, [r7, #8]
 800cb28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	2100      	movs	r1, #0
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f004 ff79 	bl	8011a28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb36:	2300      	movs	r3, #0
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3710      	adds	r7, #16
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2204      	movs	r2, #4
 800cb4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb50:	2300      	movs	r3, #0
 800cb52:	2200      	movs	r2, #0
 800cb54:	2100      	movs	r1, #0
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f004 ff45 	bl	80119e6 <USBD_LL_Transmit>

  return USBD_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3708      	adds	r7, #8
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b082      	sub	sp, #8
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2205      	movs	r2, #5
 800cb72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb76:	2300      	movs	r3, #0
 800cb78:	2200      	movs	r2, #0
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f004 ff53 	bl	8011a28 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b088      	sub	sp, #32
 800cb90:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cb96:	f107 0308 	add.w	r3, r7, #8
 800cb9a:	2218      	movs	r2, #24
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f001 f92d 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800cba4:	233f      	movs	r3, #63	@ 0x3f
 800cba6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800cba8:	2381      	movs	r3, #129	@ 0x81
 800cbaa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cbac:	1dfb      	adds	r3, r7, #7
 800cbae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cbb4:	f107 0308 	add.w	r3, r7, #8
 800cbb8:	2100      	movs	r1, #0
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f001 fba8 	bl	800e310 <hci_send_req>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	da01      	bge.n	800cbca <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cbc6:	23ff      	movs	r3, #255	@ 0xff
 800cbc8:	e000      	b.n	800cbcc <aci_gap_set_non_discoverable+0x40>
  return status;
 800cbca:	79fb      	ldrb	r3, [r7, #7]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3720      	adds	r7, #32
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800cbd4:	b5b0      	push	{r4, r5, r7, lr}
 800cbd6:	b0ce      	sub	sp, #312	@ 0x138
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	4605      	mov	r5, r0
 800cbdc:	460c      	mov	r4, r1
 800cbde:	4610      	mov	r0, r2
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cbe6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cbea:	462a      	mov	r2, r5
 800cbec:	701a      	strb	r2, [r3, #0]
 800cbee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cbf2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cbf6:	4622      	mov	r2, r4
 800cbf8:	801a      	strh	r2, [r3, #0]
 800cbfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cbfe:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800cc02:	4602      	mov	r2, r0
 800cc04:	801a      	strh	r2, [r3, #0]
 800cc06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cc0a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800cc0e:	460a      	mov	r2, r1
 800cc10:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800cc12:	f107 0310 	add.w	r3, r7, #16
 800cc16:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800cc1a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800cc1e:	3308      	adds	r3, #8
 800cc20:	f107 0210 	add.w	r2, r7, #16
 800cc24:	4413      	add	r3, r2
 800cc26:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800cc2a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800cc2e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800cc32:	4413      	add	r3, r2
 800cc34:	3309      	adds	r3, #9
 800cc36:	f107 0210 	add.w	r2, r7, #16
 800cc3a:	4413      	add	r3, r2
 800cc3c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cc40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cc44:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cc48:	2200      	movs	r2, #0
 800cc4a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800cc52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc56:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc5a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800cc5e:	7812      	ldrb	r2, [r2, #0]
 800cc60:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cc62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc66:	3301      	adds	r3, #1
 800cc68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800cc6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc70:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc74:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800cc78:	8812      	ldrh	r2, [r2, #0]
 800cc7a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800cc7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc82:	3302      	adds	r3, #2
 800cc84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800cc88:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc8c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc90:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800cc94:	8812      	ldrh	r2, [r2, #0]
 800cc96:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800cc9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc9e:	3302      	adds	r3, #2
 800cca0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800cca4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cca8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ccac:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800ccb0:	7812      	ldrb	r2, [r2, #0]
 800ccb2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ccb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccb8:	3301      	adds	r3, #1
 800ccba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800ccbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ccc2:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800ccc6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ccc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cccc:	3301      	adds	r3, #1
 800ccce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800ccd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ccd6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800ccda:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800ccdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cce0:	3301      	adds	r3, #1
 800cce2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800cce6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ccea:	3308      	adds	r3, #8
 800ccec:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800ccf0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f001 f872 	bl	800ddde <Osal_MemCpy>
    index_input += Local_Name_Length;
 800ccfa:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800ccfe:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cd02:	4413      	add	r3, r2
 800cd04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800cd08:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cd0c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800cd10:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800cd12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd16:	3301      	adds	r3, #1
 800cd18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800cd1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cd20:	3301      	adds	r3, #1
 800cd22:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800cd26:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f001 f857 	bl	800ddde <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800cd30:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800cd34:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cd38:	4413      	add	r3, r2
 800cd3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800cd3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cd42:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800cd46:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800cd48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd4c:	3302      	adds	r3, #2
 800cd4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800cd52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cd56:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800cd5a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800cd5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd60:	3302      	adds	r3, #2
 800cd62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cd66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cd6a:	2218      	movs	r2, #24
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f001 f845 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800cd74:	233f      	movs	r3, #63	@ 0x3f
 800cd76:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800cd7a:	2383      	movs	r3, #131	@ 0x83
 800cd7c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cd80:	f107 0310 	add.w	r3, r7, #16
 800cd84:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cd88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd8c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cd90:	f107 030f 	add.w	r3, r7, #15
 800cd94:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cd9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cda2:	2100      	movs	r1, #0
 800cda4:	4618      	mov	r0, r3
 800cda6:	f001 fab3 	bl	800e310 <hci_send_req>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	da01      	bge.n	800cdb4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800cdb0:	23ff      	movs	r3, #255	@ 0xff
 800cdb2:	e004      	b.n	800cdbe <aci_gap_set_discoverable+0x1ea>
  return status;
 800cdb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cdb8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cdbc:	781b      	ldrb	r3, [r3, #0]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bdb0      	pop	{r4, r5, r7, pc}

0800cdc8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b0cc      	sub	sp, #304	@ 0x130
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	4602      	mov	r2, r0
 800cdd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cdd4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cdd8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800cdda:	f107 0310 	add.w	r3, r7, #16
 800cdde:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cde2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cde6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cdea:	2200      	movs	r2, #0
 800cdec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800cdf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cdf8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cdfc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ce00:	7812      	ldrb	r2, [r2, #0]
 800ce02:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ce04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce08:	3301      	adds	r3, #1
 800ce0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ce0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce12:	2218      	movs	r2, #24
 800ce14:	2100      	movs	r1, #0
 800ce16:	4618      	mov	r0, r3
 800ce18:	f000 fff1 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800ce1c:	233f      	movs	r3, #63	@ 0x3f
 800ce1e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800ce22:	2385      	movs	r3, #133	@ 0x85
 800ce24:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ce28:	f107 0310 	add.w	r3, r7, #16
 800ce2c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ce30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce34:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ce38:	f107 030f 	add.w	r3, r7, #15
 800ce3c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ce40:	2301      	movs	r3, #1
 800ce42:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ce46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f001 fa5f 	bl	800e310 <hci_send_req>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	da01      	bge.n	800ce5c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800ce58:	23ff      	movs	r3, #255	@ 0xff
 800ce5a:	e004      	b.n	800ce66 <aci_gap_set_io_capability+0x9e>
  return status;
 800ce5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce60:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ce64:	781b      	ldrb	r3, [r3, #0]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800ce70:	b5b0      	push	{r4, r5, r7, lr}
 800ce72:	b0cc      	sub	sp, #304	@ 0x130
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	4605      	mov	r5, r0
 800ce78:	460c      	mov	r4, r1
 800ce7a:	4610      	mov	r0, r2
 800ce7c:	4619      	mov	r1, r3
 800ce7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce82:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ce86:	462a      	mov	r2, r5
 800ce88:	701a      	strb	r2, [r3, #0]
 800ce8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce8e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ce92:	4622      	mov	r2, r4
 800ce94:	701a      	strb	r2, [r3, #0]
 800ce96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce9a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ce9e:	4602      	mov	r2, r0
 800cea0:	701a      	strb	r2, [r3, #0]
 800cea2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cea6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ceaa:	460a      	mov	r2, r1
 800ceac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ceae:	f107 0310 	add.w	r3, r7, #16
 800ceb2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ceb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ceba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cebe:	2200      	movs	r2, #0
 800cec0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cec2:	2300      	movs	r3, #0
 800cec4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800cec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cecc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ced0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ced4:	7812      	ldrb	r2, [r2, #0]
 800ced6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ced8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cedc:	3301      	adds	r3, #1
 800cede:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800cee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cee6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ceea:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ceee:	7812      	ldrb	r2, [r2, #0]
 800cef0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cef2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cef6:	3301      	adds	r3, #1
 800cef8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800cefc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf00:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cf04:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800cf08:	7812      	ldrb	r2, [r2, #0]
 800cf0a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cf0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf10:	3301      	adds	r3, #1
 800cf12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800cf16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf1a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cf1e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800cf22:	7812      	ldrb	r2, [r2, #0]
 800cf24:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800cf26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800cf30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf34:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800cf38:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800cf3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf3e:	3301      	adds	r3, #1
 800cf40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800cf44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf48:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800cf4c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cf4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf52:	3301      	adds	r3, #1
 800cf54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800cf58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf5c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800cf60:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800cf62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf66:	3301      	adds	r3, #1
 800cf68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800cf6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf70:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800cf74:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800cf78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800cf82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf86:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800cf8a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800cf8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf90:	3301      	adds	r3, #1
 800cf92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cf96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cf9a:	2218      	movs	r2, #24
 800cf9c:	2100      	movs	r1, #0
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f000 ff2d 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800cfa4:	233f      	movs	r3, #63	@ 0x3f
 800cfa6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800cfaa:	2386      	movs	r3, #134	@ 0x86
 800cfac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cfb0:	f107 0310 	add.w	r3, r7, #16
 800cfb4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cfb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cfbc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cfc0:	f107 030f 	add.w	r3, r7, #15
 800cfc4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cfce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f001 f99b 	bl	800e310 <hci_send_req>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	da01      	bge.n	800cfe4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800cfe0:	23ff      	movs	r3, #255	@ 0xff
 800cfe2:	e004      	b.n	800cfee <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800cfe4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cfe8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cfec:	781b      	ldrb	r3, [r3, #0]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bdb0      	pop	{r4, r5, r7, pc}

0800cff8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b0cc      	sub	sp, #304	@ 0x130
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	4602      	mov	r2, r0
 800d000:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d004:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d008:	6019      	str	r1, [r3, #0]
 800d00a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d00e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d012:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800d014:	f107 0310 	add.w	r3, r7, #16
 800d018:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d01c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d020:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d024:	2200      	movs	r2, #0
 800d026:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d028:	2300      	movs	r3, #0
 800d02a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d02e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d032:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d036:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d03a:	8812      	ldrh	r2, [r2, #0]
 800d03c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d03e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d042:	3302      	adds	r3, #2
 800d044:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800d048:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d04c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d050:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d054:	6812      	ldr	r2, [r2, #0]
 800d056:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800d05a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d05e:	3304      	adds	r3, #4
 800d060:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d064:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d068:	2218      	movs	r2, #24
 800d06a:	2100      	movs	r1, #0
 800d06c:	4618      	mov	r0, r3
 800d06e:	f000 fec6 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800d072:	233f      	movs	r3, #63	@ 0x3f
 800d074:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800d078:	2388      	movs	r3, #136	@ 0x88
 800d07a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d07e:	f107 0310 	add.w	r3, r7, #16
 800d082:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d086:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d08a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d08e:	f107 030f 	add.w	r3, r7, #15
 800d092:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d096:	2301      	movs	r3, #1
 800d098:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d09c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f001 f934 	bl	800e310 <hci_send_req>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	da01      	bge.n	800d0b2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800d0ae:	23ff      	movs	r3, #255	@ 0xff
 800d0b0:	e004      	b.n	800d0bc <aci_gap_pass_key_resp+0xc4>
  return status;
 800d0b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d0ba:	781b      	ldrb	r3, [r3, #0]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800d0c6:	b590      	push	{r4, r7, lr}
 800d0c8:	b0cd      	sub	sp, #308	@ 0x134
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	4604      	mov	r4, r0
 800d0ce:	4608      	mov	r0, r1
 800d0d0:	4611      	mov	r1, r2
 800d0d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d0d6:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d0da:	6013      	str	r3, [r2, #0]
 800d0dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0e0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d0e4:	4622      	mov	r2, r4
 800d0e6:	701a      	strb	r2, [r3, #0]
 800d0e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0ec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	701a      	strb	r2, [r3, #0]
 800d0f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0f8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d0fc:	460a      	mov	r2, r1
 800d0fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800d100:	f107 0310 	add.w	r3, r7, #16
 800d104:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d108:	f107 0308 	add.w	r3, r7, #8
 800d10c:	2207      	movs	r2, #7
 800d10e:	2100      	movs	r1, #0
 800d110:	4618      	mov	r0, r3
 800d112:	f000 fe74 	bl	800ddfe <Osal_MemSet>
  int index_input = 0;
 800d116:	2300      	movs	r3, #0
 800d118:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800d11c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d120:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d124:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d128:	7812      	ldrb	r2, [r2, #0]
 800d12a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d12c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d130:	3301      	adds	r3, #1
 800d132:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800d136:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d13a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d13e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d142:	7812      	ldrb	r2, [r2, #0]
 800d144:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d146:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d14a:	3301      	adds	r3, #1
 800d14c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800d150:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d154:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d158:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d15c:	7812      	ldrb	r2, [r2, #0]
 800d15e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d160:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d164:	3301      	adds	r3, #1
 800d166:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d16a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d16e:	2218      	movs	r2, #24
 800d170:	2100      	movs	r1, #0
 800d172:	4618      	mov	r0, r3
 800d174:	f000 fe43 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800d178:	233f      	movs	r3, #63	@ 0x3f
 800d17a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800d17e:	238a      	movs	r3, #138	@ 0x8a
 800d180:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d184:	f107 0310 	add.w	r3, r7, #16
 800d188:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d18c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d190:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d194:	f107 0308 	add.w	r3, r7, #8
 800d198:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d19c:	2307      	movs	r3, #7
 800d19e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d1a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d1a6:	2100      	movs	r1, #0
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f001 f8b1 	bl	800e310 <hci_send_req>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	da01      	bge.n	800d1b8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800d1b4:	23ff      	movs	r3, #255	@ 0xff
 800d1b6:	e02e      	b.n	800d216 <aci_gap_init+0x150>
  if ( resp.Status )
 800d1b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d005      	beq.n	800d1d2 <aci_gap_init+0x10c>
    return resp.Status;
 800d1c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	e021      	b.n	800d216 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800d1d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d1da:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800d1ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d1f4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d1fe:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800d200:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d204:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d208:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800d212:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d214:	2300      	movs	r3, #0
}
 800d216:	4618      	mov	r0, r3
 800d218:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd90      	pop	{r4, r7, pc}

0800d220 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b0cc      	sub	sp, #304	@ 0x130
 800d224:	af00      	add	r7, sp, #0
 800d226:	4602      	mov	r2, r0
 800d228:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d22c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d230:	6019      	str	r1, [r3, #0]
 800d232:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d236:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d23a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800d23c:	f107 0310 	add.w	r3, r7, #16
 800d240:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d244:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d248:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d24c:	2200      	movs	r2, #0
 800d24e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d250:	2300      	movs	r3, #0
 800d252:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800d256:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d25a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d25e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d262:	7812      	ldrb	r2, [r2, #0]
 800d264:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d266:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d26a:	3301      	adds	r3, #1
 800d26c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800d270:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d274:	1c58      	adds	r0, r3, #1
 800d276:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d27a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d27e:	781a      	ldrb	r2, [r3, #0]
 800d280:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d284:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d288:	6819      	ldr	r1, [r3, #0]
 800d28a:	f000 fda8 	bl	800ddde <Osal_MemCpy>
  index_input += AdvDataLen;
 800d28e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d292:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d29c:	4413      	add	r3, r2
 800d29e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d2a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d2a6:	2218      	movs	r2, #24
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f000 fda7 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800d2b0:	233f      	movs	r3, #63	@ 0x3f
 800d2b2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800d2b6:	238e      	movs	r3, #142	@ 0x8e
 800d2b8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d2bc:	f107 0310 	add.w	r3, r7, #16
 800d2c0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d2c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d2cc:	f107 030f 	add.w	r3, r7, #15
 800d2d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d2da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d2de:	2100      	movs	r1, #0
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f001 f815 	bl	800e310 <hci_send_req>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	da01      	bge.n	800d2f0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800d2ec:	23ff      	movs	r3, #255	@ 0xff
 800d2ee:	e004      	b.n	800d2fa <aci_gap_update_adv_data+0xda>
  return status;
 800d2f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d2f8:	781b      	ldrb	r3, [r3, #0]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b088      	sub	sp, #32
 800d308:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d30a:	2300      	movs	r3, #0
 800d30c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d30e:	f107 0308 	add.w	r3, r7, #8
 800d312:	2218      	movs	r2, #24
 800d314:	2100      	movs	r1, #0
 800d316:	4618      	mov	r0, r3
 800d318:	f000 fd71 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800d31c:	233f      	movs	r3, #63	@ 0x3f
 800d31e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800d320:	2392      	movs	r3, #146	@ 0x92
 800d322:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d324:	1dfb      	adds	r3, r7, #7
 800d326:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d328:	2301      	movs	r3, #1
 800d32a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d32c:	f107 0308 	add.w	r3, r7, #8
 800d330:	2100      	movs	r1, #0
 800d332:	4618      	mov	r0, r3
 800d334:	f000 ffec 	bl	800e310 <hci_send_req>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	da01      	bge.n	800d342 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d33e:	23ff      	movs	r3, #255	@ 0xff
 800d340:	e000      	b.n	800d344 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800d342:	79fb      	ldrb	r3, [r7, #7]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3720      	adds	r7, #32
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b0cc      	sub	sp, #304	@ 0x130
 800d350:	af00      	add	r7, sp, #0
 800d352:	4602      	mov	r2, r0
 800d354:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d358:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d35c:	801a      	strh	r2, [r3, #0]
 800d35e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d362:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d366:	460a      	mov	r2, r1
 800d368:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800d36a:	f107 0310 	add.w	r3, r7, #16
 800d36e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d372:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d376:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d37a:	2200      	movs	r2, #0
 800d37c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d37e:	2300      	movs	r3, #0
 800d380:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d384:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d388:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d38c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d390:	8812      	ldrh	r2, [r2, #0]
 800d392:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d394:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d398:	3302      	adds	r3, #2
 800d39a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800d39e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d3a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d3a6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d3aa:	7812      	ldrb	r2, [r2, #0]
 800d3ac:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d3ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3bc:	2218      	movs	r2, #24
 800d3be:	2100      	movs	r1, #0
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f000 fd1c 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800d3c6:	233f      	movs	r3, #63	@ 0x3f
 800d3c8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800d3cc:	23a5      	movs	r3, #165	@ 0xa5
 800d3ce:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d3d2:	f107 0310 	add.w	r3, r7, #16
 800d3d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d3da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d3de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d3e2:	f107 030f 	add.w	r3, r7, #15
 800d3e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d3f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3f4:	2100      	movs	r1, #0
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 ff8a 	bl	800e310 <hci_send_req>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	da01      	bge.n	800d406 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800d402:	23ff      	movs	r3, #255	@ 0xff
 800d404:	e004      	b.n	800d410 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800d406:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d40a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d40e:	781b      	ldrb	r3, [r3, #0]
}
 800d410:	4618      	mov	r0, r3
 800d412:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}

0800d41a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800d41a:	b580      	push	{r7, lr}
 800d41c:	b088      	sub	sp, #32
 800d41e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d420:	2300      	movs	r3, #0
 800d422:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d424:	f107 0308 	add.w	r3, r7, #8
 800d428:	2218      	movs	r2, #24
 800d42a:	2100      	movs	r1, #0
 800d42c:	4618      	mov	r0, r3
 800d42e:	f000 fce6 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800d432:	233f      	movs	r3, #63	@ 0x3f
 800d434:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800d436:	f240 1301 	movw	r3, #257	@ 0x101
 800d43a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d43c:	1dfb      	adds	r3, r7, #7
 800d43e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d440:	2301      	movs	r3, #1
 800d442:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d444:	f107 0308 	add.w	r3, r7, #8
 800d448:	2100      	movs	r1, #0
 800d44a:	4618      	mov	r0, r3
 800d44c:	f000 ff60 	bl	800e310 <hci_send_req>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	da01      	bge.n	800d45a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800d456:	23ff      	movs	r3, #255	@ 0xff
 800d458:	e000      	b.n	800d45c <aci_gatt_init+0x42>
  return status;
 800d45a:	79fb      	ldrb	r3, [r7, #7]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3720      	adds	r7, #32
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800d464:	b590      	push	{r4, r7, lr}
 800d466:	b0cf      	sub	sp, #316	@ 0x13c
 800d468:	af00      	add	r7, sp, #0
 800d46a:	4604      	mov	r4, r0
 800d46c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800d470:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800d474:	6001      	str	r1, [r0, #0]
 800d476:	4610      	mov	r0, r2
 800d478:	4619      	mov	r1, r3
 800d47a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d47e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d482:	4622      	mov	r2, r4
 800d484:	701a      	strb	r2, [r3, #0]
 800d486:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d48a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d48e:	4602      	mov	r2, r0
 800d490:	701a      	strb	r2, [r3, #0]
 800d492:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d496:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d49a:	460a      	mov	r2, r1
 800d49c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800d49e:	f107 0310 	add.w	r3, r7, #16
 800d4a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800d4a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d4aa:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d00a      	beq.n	800d4ca <aci_gatt_add_service+0x66>
 800d4b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d4b8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	2b02      	cmp	r3, #2
 800d4c0:	d101      	bne.n	800d4c6 <aci_gatt_add_service+0x62>
 800d4c2:	2311      	movs	r3, #17
 800d4c4:	e002      	b.n	800d4cc <aci_gatt_add_service+0x68>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e000      	b.n	800d4cc <aci_gatt_add_service+0x68>
 800d4ca:	2303      	movs	r3, #3
 800d4cc:	f107 0210 	add.w	r2, r7, #16
 800d4d0:	4413      	add	r3, r2
 800d4d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d4d6:	f107 030c 	add.w	r3, r7, #12
 800d4da:	2203      	movs	r2, #3
 800d4dc:	2100      	movs	r1, #0
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f000 fc8d 	bl	800ddfe <Osal_MemSet>
  int index_input = 0;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d4ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d4ee:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d4f2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800d4f6:	7812      	ldrb	r2, [r2, #0]
 800d4f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d4fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4fe:	3301      	adds	r3, #1
 800d500:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d504:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d508:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	2b01      	cmp	r3, #1
 800d510:	d002      	beq.n	800d518 <aci_gatt_add_service+0xb4>
 800d512:	2b02      	cmp	r3, #2
 800d514:	d004      	beq.n	800d520 <aci_gatt_add_service+0xbc>
 800d516:	e007      	b.n	800d528 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800d518:	2302      	movs	r3, #2
 800d51a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d51e:	e005      	b.n	800d52c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800d520:	2310      	movs	r3, #16
 800d522:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d526:	e001      	b.n	800d52c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800d528:	2397      	movs	r3, #151	@ 0x97
 800d52a:	e06c      	b.n	800d606 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d52c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d530:	1c58      	adds	r0, r3, #1
 800d532:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800d536:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d53a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d53e:	6819      	ldr	r1, [r3, #0]
 800d540:	f000 fc4d 	bl	800ddde <Osal_MemCpy>
    index_input += size;
 800d544:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800d548:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d54c:	4413      	add	r3, r2
 800d54e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800d552:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d556:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d55a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d55e:	7812      	ldrb	r2, [r2, #0]
 800d560:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d562:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d566:	3301      	adds	r3, #1
 800d568:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d56c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d570:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d574:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d578:	7812      	ldrb	r2, [r2, #0]
 800d57a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d57c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d580:	3301      	adds	r3, #1
 800d582:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d58a:	2218      	movs	r2, #24
 800d58c:	2100      	movs	r1, #0
 800d58e:	4618      	mov	r0, r3
 800d590:	f000 fc35 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800d594:	233f      	movs	r3, #63	@ 0x3f
 800d596:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800d59a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800d59e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d5a2:	f107 0310 	add.w	r3, r7, #16
 800d5a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d5aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d5ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d5b2:	f107 030c 	add.w	r3, r7, #12
 800d5b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d5c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d5c4:	2100      	movs	r1, #0
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f000 fea2 	bl	800e310 <hci_send_req>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	da01      	bge.n	800d5d6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800d5d2:	23ff      	movs	r3, #255	@ 0xff
 800d5d4:	e017      	b.n	800d606 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800d5d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d5da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d005      	beq.n	800d5f0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800d5e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d5e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	e00a      	b.n	800d606 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800d5f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d5f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d5f8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d5fc:	b29a      	uxth	r2, r3
 800d5fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d602:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d604:	2300      	movs	r3, #0
}
 800d606:	4618      	mov	r0, r3
 800d608:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd90      	pop	{r4, r7, pc}

0800d610 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800d610:	b590      	push	{r4, r7, lr}
 800d612:	b0d1      	sub	sp, #324	@ 0x144
 800d614:	af00      	add	r7, sp, #0
 800d616:	4604      	mov	r4, r0
 800d618:	4608      	mov	r0, r1
 800d61a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800d61e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d622:	600a      	str	r2, [r1, #0]
 800d624:	4619      	mov	r1, r3
 800d626:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d62a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d62e:	4622      	mov	r2, r4
 800d630:	801a      	strh	r2, [r3, #0]
 800d632:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d636:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d63a:	4602      	mov	r2, r0
 800d63c:	701a      	strb	r2, [r3, #0]
 800d63e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d642:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800d646:	460a      	mov	r2, r1
 800d648:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800d64a:	f107 0318 	add.w	r3, r7, #24
 800d64e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800d652:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d656:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d00a      	beq.n	800d676 <aci_gatt_add_char+0x66>
 800d660:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d664:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	2b02      	cmp	r3, #2
 800d66c:	d101      	bne.n	800d672 <aci_gatt_add_char+0x62>
 800d66e:	2313      	movs	r3, #19
 800d670:	e002      	b.n	800d678 <aci_gatt_add_char+0x68>
 800d672:	2303      	movs	r3, #3
 800d674:	e000      	b.n	800d678 <aci_gatt_add_char+0x68>
 800d676:	2305      	movs	r3, #5
 800d678:	f107 0218 	add.w	r2, r7, #24
 800d67c:	4413      	add	r3, r2
 800d67e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d682:	f107 0314 	add.w	r3, r7, #20
 800d686:	2203      	movs	r2, #3
 800d688:	2100      	movs	r1, #0
 800d68a:	4618      	mov	r0, r3
 800d68c:	f000 fbb7 	bl	800ddfe <Osal_MemSet>
  int index_input = 0;
 800d690:	2300      	movs	r3, #0
 800d692:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800d696:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d69a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d69e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d6a2:	8812      	ldrh	r2, [r2, #0]
 800d6a4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d6a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d6aa:	3302      	adds	r3, #2
 800d6ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800d6b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d6b4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d6b8:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d6bc:	7812      	ldrb	r2, [r2, #0]
 800d6be:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d6c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800d6ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d6ce:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d002      	beq.n	800d6de <aci_gatt_add_char+0xce>
 800d6d8:	2b02      	cmp	r3, #2
 800d6da:	d004      	beq.n	800d6e6 <aci_gatt_add_char+0xd6>
 800d6dc:	e007      	b.n	800d6ee <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800d6de:	2302      	movs	r3, #2
 800d6e0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d6e4:	e005      	b.n	800d6f2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800d6e6:	2310      	movs	r3, #16
 800d6e8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d6ec:	e001      	b.n	800d6f2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800d6ee:	2397      	movs	r3, #151	@ 0x97
 800d6f0:	e091      	b.n	800d816 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800d6f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d6f6:	1cd8      	adds	r0, r3, #3
 800d6f8:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800d6fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d700:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d704:	6819      	ldr	r1, [r3, #0]
 800d706:	f000 fb6a 	bl	800ddde <Osal_MemCpy>
    index_input += size;
 800d70a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800d70e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800d712:	4413      	add	r3, r2
 800d714:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800d718:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d71c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d720:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800d724:	8812      	ldrh	r2, [r2, #0]
 800d726:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d728:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d72c:	3302      	adds	r3, #2
 800d72e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800d732:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d736:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800d73a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d73c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d740:	3301      	adds	r3, #1
 800d742:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d746:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d74a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800d74e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d750:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d754:	3301      	adds	r3, #1
 800d756:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d75a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d75e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800d762:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d764:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d768:	3301      	adds	r3, #1
 800d76a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d76e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d772:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800d776:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d778:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d77c:	3301      	adds	r3, #1
 800d77e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d782:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d786:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800d78a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d78c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d790:	3301      	adds	r3, #1
 800d792:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d796:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d79a:	2218      	movs	r2, #24
 800d79c:	2100      	movs	r1, #0
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f000 fb2d 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800d7a4:	233f      	movs	r3, #63	@ 0x3f
 800d7a6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800d7aa:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800d7ae:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800d7b2:	f107 0318 	add.w	r3, r7, #24
 800d7b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800d7ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d7be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800d7c2:	f107 0314 	add.w	r3, r7, #20
 800d7c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800d7ca:	2303      	movs	r3, #3
 800d7cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d7d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d7d4:	2100      	movs	r1, #0
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f000 fd9a 	bl	800e310 <hci_send_req>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	da01      	bge.n	800d7e6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800d7e2:	23ff      	movs	r3, #255	@ 0xff
 800d7e4:	e017      	b.n	800d816 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800d7e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d7ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d005      	beq.n	800d800 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800d7f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d7f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	e00a      	b.n	800d816 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800d800:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d804:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d808:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d80c:	b29a      	uxth	r2, r3
 800d80e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800d812:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd90      	pop	{r4, r7, pc}

0800d820 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d820:	b5b0      	push	{r4, r5, r7, lr}
 800d822:	b0cc      	sub	sp, #304	@ 0x130
 800d824:	af00      	add	r7, sp, #0
 800d826:	4605      	mov	r5, r0
 800d828:	460c      	mov	r4, r1
 800d82a:	4610      	mov	r0, r2
 800d82c:	4619      	mov	r1, r3
 800d82e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d832:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d836:	462a      	mov	r2, r5
 800d838:	801a      	strh	r2, [r3, #0]
 800d83a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d83e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d842:	4622      	mov	r2, r4
 800d844:	801a      	strh	r2, [r3, #0]
 800d846:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d84a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800d84e:	4602      	mov	r2, r0
 800d850:	701a      	strb	r2, [r3, #0]
 800d852:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d856:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d85a:	460a      	mov	r2, r1
 800d85c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d85e:	f107 0310 	add.w	r3, r7, #16
 800d862:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d866:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d86a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d86e:	2200      	movs	r2, #0
 800d870:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d872:	2300      	movs	r3, #0
 800d874:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800d878:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d87c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d880:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d884:	8812      	ldrh	r2, [r2, #0]
 800d886:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d888:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d88c:	3302      	adds	r3, #2
 800d88e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800d892:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d896:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d89a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800d89e:	8812      	ldrh	r2, [r2, #0]
 800d8a0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d8a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d8a6:	3302      	adds	r3, #2
 800d8a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800d8ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d8b4:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800d8b8:	7812      	ldrb	r2, [r2, #0]
 800d8ba:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d8bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d8c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d8ce:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800d8d2:	7812      	ldrb	r2, [r2, #0]
 800d8d4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d8d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d8da:	3301      	adds	r3, #1
 800d8dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d8e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8e4:	1d98      	adds	r0, r3, #6
 800d8e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8ea:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800d8f6:	f000 fa72 	bl	800ddde <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d8fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8fe:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d908:	4413      	add	r3, r2
 800d90a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d90e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d912:	2218      	movs	r2, #24
 800d914:	2100      	movs	r1, #0
 800d916:	4618      	mov	r0, r3
 800d918:	f000 fa71 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800d91c:	233f      	movs	r3, #63	@ 0x3f
 800d91e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800d922:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800d926:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d92a:	f107 0310 	add.w	r3, r7, #16
 800d92e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d932:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d936:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d93a:	f107 030f 	add.w	r3, r7, #15
 800d93e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d942:	2301      	movs	r3, #1
 800d944:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d948:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d94c:	2100      	movs	r1, #0
 800d94e:	4618      	mov	r0, r3
 800d950:	f000 fcde 	bl	800e310 <hci_send_req>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	da01      	bge.n	800d95e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d95a:	23ff      	movs	r3, #255	@ 0xff
 800d95c:	e004      	b.n	800d968 <aci_gatt_update_char_value+0x148>
  return status;
 800d95e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d962:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d966:	781b      	ldrb	r3, [r3, #0]
}
 800d968:	4618      	mov	r0, r3
 800d96a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d96e:	46bd      	mov	sp, r7
 800d970:	bdb0      	pop	{r4, r5, r7, pc}

0800d972 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800d972:	b580      	push	{r7, lr}
 800d974:	b0cc      	sub	sp, #304	@ 0x130
 800d976:	af00      	add	r7, sp, #0
 800d978:	4602      	mov	r2, r0
 800d97a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d97e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d982:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800d984:	f107 0310 	add.w	r3, r7, #16
 800d988:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d98c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d990:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d994:	2200      	movs	r2, #0
 800d996:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d998:	2300      	movs	r3, #0
 800d99a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d99e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d9a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d9a6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d9aa:	8812      	ldrh	r2, [r2, #0]
 800d9ac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d9ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d9b2:	3302      	adds	r3, #2
 800d9b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d9b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d9bc:	2218      	movs	r2, #24
 800d9be:	2100      	movs	r1, #0
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f000 fa1c 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800d9c6:	233f      	movs	r3, #63	@ 0x3f
 800d9c8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800d9cc:	f240 1325 	movw	r3, #293	@ 0x125
 800d9d0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d9d4:	f107 0310 	add.w	r3, r7, #16
 800d9d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d9dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d9e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d9e4:	f107 030f 	add.w	r3, r7, #15
 800d9e8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d9f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d9f6:	2100      	movs	r1, #0
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f000 fc89 	bl	800e310 <hci_send_req>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	da01      	bge.n	800da08 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800da04:	23ff      	movs	r3, #255	@ 0xff
 800da06:	e004      	b.n	800da12 <aci_gatt_confirm_indication+0xa0>
  return status;
 800da08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da0c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800da10:	781b      	ldrb	r3, [r3, #0]
}
 800da12:	4618      	mov	r0, r3
 800da14:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b0cc      	sub	sp, #304	@ 0x130
 800da20:	af00      	add	r7, sp, #0
 800da22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da26:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800da2a:	601a      	str	r2, [r3, #0]
 800da2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da30:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800da34:	4602      	mov	r2, r0
 800da36:	701a      	strb	r2, [r3, #0]
 800da38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da3c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800da40:	460a      	mov	r2, r1
 800da42:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800da44:	f107 0310 	add.w	r3, r7, #16
 800da48:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800da4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da50:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800da54:	2200      	movs	r2, #0
 800da56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800da58:	2300      	movs	r3, #0
 800da5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800da5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800da66:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800da6a:	7812      	ldrb	r2, [r2, #0]
 800da6c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800da6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800da72:	3301      	adds	r3, #1
 800da74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800da78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800da80:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800da84:	7812      	ldrb	r2, [r2, #0]
 800da86:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800da88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800da8c:	3301      	adds	r3, #1
 800da8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800da92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da96:	1c98      	adds	r0, r3, #2
 800da98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da9c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800daa0:	781a      	ldrb	r2, [r3, #0]
 800daa2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800daa6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800daaa:	6819      	ldr	r1, [r3, #0]
 800daac:	f000 f997 	bl	800ddde <Osal_MemCpy>
  index_input += Length;
 800dab0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dab4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800dabe:	4413      	add	r3, r2
 800dac0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dac4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dac8:	2218      	movs	r2, #24
 800daca:	2100      	movs	r1, #0
 800dacc:	4618      	mov	r0, r3
 800dace:	f000 f996 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800dad2:	233f      	movs	r3, #63	@ 0x3f
 800dad4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800dad8:	230c      	movs	r3, #12
 800dada:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dade:	f107 0310 	add.w	r3, r7, #16
 800dae2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800daea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800daee:	f107 030f 	add.w	r3, r7, #15
 800daf2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800daf6:	2301      	movs	r3, #1
 800daf8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dafc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db00:	2100      	movs	r1, #0
 800db02:	4618      	mov	r0, r3
 800db04:	f000 fc04 	bl	800e310 <hci_send_req>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	da01      	bge.n	800db12 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800db0e:	23ff      	movs	r3, #255	@ 0xff
 800db10:	e004      	b.n	800db1c <aci_hal_write_config_data+0x100>
  return status;
 800db12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db16:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800db1a:	781b      	ldrb	r3, [r3, #0]
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}

0800db26 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800db26:	b580      	push	{r7, lr}
 800db28:	b0cc      	sub	sp, #304	@ 0x130
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	4602      	mov	r2, r0
 800db2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db32:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800db36:	701a      	strb	r2, [r3, #0]
 800db38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db3c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800db40:	460a      	mov	r2, r1
 800db42:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800db44:	f107 0310 	add.w	r3, r7, #16
 800db48:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800db4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db50:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800db54:	2200      	movs	r2, #0
 800db56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800db58:	2300      	movs	r3, #0
 800db5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800db5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800db62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800db66:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800db6a:	7812      	ldrb	r2, [r2, #0]
 800db6c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800db6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db72:	3301      	adds	r3, #1
 800db74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800db78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800db7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800db80:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800db84:	7812      	ldrb	r2, [r2, #0]
 800db86:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800db88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db8c:	3301      	adds	r3, #1
 800db8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800db92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db96:	2218      	movs	r2, #24
 800db98:	2100      	movs	r1, #0
 800db9a:	4618      	mov	r0, r3
 800db9c:	f000 f92f 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800dba0:	233f      	movs	r3, #63	@ 0x3f
 800dba2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800dba6:	230f      	movs	r3, #15
 800dba8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dbac:	f107 0310 	add.w	r3, r7, #16
 800dbb0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dbb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dbb8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dbbc:	f107 030f 	add.w	r3, r7, #15
 800dbc0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dbca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dbce:	2100      	movs	r1, #0
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f000 fb9d 	bl	800e310 <hci_send_req>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	da01      	bge.n	800dbe0 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800dbdc:	23ff      	movs	r3, #255	@ 0xff
 800dbde:	e004      	b.n	800dbea <aci_hal_set_tx_power_level+0xc4>
  return status;
 800dbe0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbe4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dbe8:	781b      	ldrb	r3, [r3, #0]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b0cc      	sub	sp, #304	@ 0x130
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc00:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dc04:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800dc06:	f107 0310 	add.w	r3, r7, #16
 800dc0a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dc0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc12:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dc16:	2200      	movs	r2, #0
 800dc18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800dc20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dc24:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dc28:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dc2c:	8812      	ldrh	r2, [r2, #0]
 800dc2e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dc30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc34:	3302      	adds	r3, #2
 800dc36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc3e:	2218      	movs	r2, #24
 800dc40:	2100      	movs	r1, #0
 800dc42:	4618      	mov	r0, r3
 800dc44:	f000 f8db 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x3f;
 800dc48:	233f      	movs	r3, #63	@ 0x3f
 800dc4a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800dc4e:	2318      	movs	r3, #24
 800dc50:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dc54:	f107 0310 	add.w	r3, r7, #16
 800dc58:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dc5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dc64:	f107 030f 	add.w	r3, r7, #15
 800dc68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc76:	2100      	movs	r1, #0
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f000 fb49 	bl	800e310 <hci_send_req>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	da01      	bge.n	800dc88 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800dc84:	23ff      	movs	r3, #255	@ 0xff
 800dc86:	e004      	b.n	800dc92 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800dc88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc8c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dc90:	781b      	ldrb	r3, [r3, #0]
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b088      	sub	sp, #32
 800dca0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dca6:	f107 0308 	add.w	r3, r7, #8
 800dcaa:	2218      	movs	r2, #24
 800dcac:	2100      	movs	r1, #0
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f000 f8a5 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x03;
 800dcb4:	2303      	movs	r3, #3
 800dcb6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800dcb8:	2303      	movs	r3, #3
 800dcba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800dcbc:	1dfb      	adds	r3, r7, #7
 800dcbe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dcc4:	f107 0308 	add.w	r3, r7, #8
 800dcc8:	2100      	movs	r1, #0
 800dcca:	4618      	mov	r0, r3
 800dccc:	f000 fb20 	bl	800e310 <hci_send_req>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	da01      	bge.n	800dcda <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800dcd6:	23ff      	movs	r3, #255	@ 0xff
 800dcd8:	e000      	b.n	800dcdc <hci_reset+0x40>
  return status;
 800dcda:	79fb      	ldrb	r3, [r7, #7]
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3720      	adds	r7, #32
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800dce4:	b590      	push	{r4, r7, lr}
 800dce6:	b0cd      	sub	sp, #308	@ 0x134
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	4604      	mov	r4, r0
 800dcec:	4608      	mov	r0, r1
 800dcee:	4611      	mov	r1, r2
 800dcf0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcf4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800dcf8:	4622      	mov	r2, r4
 800dcfa:	701a      	strb	r2, [r3, #0]
 800dcfc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd00:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dd04:	4602      	mov	r2, r0
 800dd06:	701a      	strb	r2, [r3, #0]
 800dd08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd0c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800dd10:	460a      	mov	r2, r1
 800dd12:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800dd14:	f107 0310 	add.w	r3, r7, #16
 800dd18:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dd1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd20:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dd24:	2200      	movs	r2, #0
 800dd26:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800dd2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd36:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800dd3a:	7812      	ldrb	r2, [r2, #0]
 800dd3c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dd3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd42:	3301      	adds	r3, #1
 800dd44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800dd48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd4c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd50:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dd54:	7812      	ldrb	r2, [r2, #0]
 800dd56:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800dd58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800dd62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd66:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd6a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800dd6e:	7812      	ldrb	r2, [r2, #0]
 800dd70:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800dd72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd76:	3301      	adds	r3, #1
 800dd78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dd7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dd80:	2218      	movs	r2, #24
 800dd82:	2100      	movs	r1, #0
 800dd84:	4618      	mov	r0, r3
 800dd86:	f000 f83a 	bl	800ddfe <Osal_MemSet>
  rq.ogf = 0x08;
 800dd8a:	2308      	movs	r3, #8
 800dd8c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800dd90:	2331      	movs	r3, #49	@ 0x31
 800dd92:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dd96:	f107 0310 	add.w	r3, r7, #16
 800dd9a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dd9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dda2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dda6:	f107 030f 	add.w	r3, r7, #15
 800ddaa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ddb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ddb8:	2100      	movs	r1, #0
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f000 faa8 	bl	800e310 <hci_send_req>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	da01      	bge.n	800ddca <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800ddc6:	23ff      	movs	r3, #255	@ 0xff
 800ddc8:	e004      	b.n	800ddd4 <hci_le_set_default_phy+0xf0>
  return status;
 800ddca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ddce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ddd2:	781b      	ldrb	r3, [r3, #0]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd90      	pop	{r4, r7, pc}

0800ddde <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b084      	sub	sp, #16
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	60f8      	str	r0, [r7, #12]
 800dde6:	60b9      	str	r1, [r7, #8]
 800dde8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	68b9      	ldr	r1, [r7, #8]
 800ddee:	68f8      	ldr	r0, [r7, #12]
 800ddf0:	f004 fc11 	bl	8012616 <memcpy>
 800ddf4:	4603      	mov	r3, r0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3710      	adds	r7, #16
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}

0800ddfe <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b084      	sub	sp, #16
 800de02:	af00      	add	r7, sp, #0
 800de04:	60f8      	str	r0, [r7, #12]
 800de06:	60b9      	str	r1, [r7, #8]
 800de08:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	68b9      	ldr	r1, [r7, #8]
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f004 fb70 	bl	80124f4 <memset>
 800de14:	4603      	mov	r3, r0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800de1e:	b480      	push	{r7}
 800de20:	af00      	add	r7, sp, #0
  return;
 800de22:	bf00      	nop
}
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800de2c:	b480      	push	{r7}
 800de2e:	af00      	add	r7, sp, #0
  return;
 800de30:	bf00      	nop
}
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr

0800de3a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800de3a:	b480      	push	{r7}
 800de3c:	af00      	add	r7, sp, #0
  return;
 800de3e:	bf00      	nop
}
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800de48:	b480      	push	{r7}
 800de4a:	af00      	add	r7, sp, #0
  return;
 800de4c:	bf00      	nop
}
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr

0800de56 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800de56:	b480      	push	{r7}
 800de58:	af00      	add	r7, sp, #0
  return;
 800de5a:	bf00      	nop
}
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800de64:	b480      	push	{r7}
 800de66:	af00      	add	r7, sp, #0
  return;
 800de68:	bf00      	nop
}
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr

0800de72 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800de72:	b480      	push	{r7}
 800de74:	af00      	add	r7, sp, #0
  return;
 800de76:	bf00      	nop
}
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800de80:	b480      	push	{r7}
 800de82:	af00      	add	r7, sp, #0
  return;
 800de84:	bf00      	nop
}
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr

0800de8e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800de8e:	b480      	push	{r7}
 800de90:	af00      	add	r7, sp, #0
  return;
 800de92:	bf00      	nop
}
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr

0800de9c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800de9c:	b480      	push	{r7}
 800de9e:	af00      	add	r7, sp, #0
  return;
 800dea0:	bf00      	nop
}
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr

0800deaa <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800deaa:	b480      	push	{r7}
 800deac:	af00      	add	r7, sp, #0
  return;
 800deae:	bf00      	nop
}
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr

0800deb8 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800deb8:	b480      	push	{r7}
 800deba:	af00      	add	r7, sp, #0
  return;
 800debc:	bf00      	nop
}
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr

0800dec6 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800dec6:	b480      	push	{r7}
 800dec8:	af00      	add	r7, sp, #0
  return;
 800deca:	bf00      	nop
}
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr

0800ded4 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800ded4:	b480      	push	{r7}
 800ded6:	af00      	add	r7, sp, #0
  return;
 800ded8:	bf00      	nop
}
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr

0800dee2 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800dee2:	b480      	push	{r7}
 800dee4:	af00      	add	r7, sp, #0
  return;
 800dee6:	bf00      	nop
}
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800def0:	b480      	push	{r7}
 800def2:	af00      	add	r7, sp, #0
  return;
 800def4:	bf00      	nop
}
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr

0800defe <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800defe:	b480      	push	{r7}
 800df00:	af00      	add	r7, sp, #0
  return;
 800df02:	bf00      	nop
}
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800df10:	4b04      	ldr	r3, [pc, #16]	@ (800df24 <SVCCTL_Init+0x18>)
 800df12:	2200      	movs	r2, #0
 800df14:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800df16:	4b04      	ldr	r3, [pc, #16]	@ (800df28 <SVCCTL_Init+0x1c>)
 800df18:	2200      	movs	r2, #0
 800df1a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800df1c:	f000 f806 	bl	800df2c <SVCCTL_SvcInit>

  return;
 800df20:	bf00      	nop
}
 800df22:	bd80      	pop	{r7, pc}
 800df24:	20000184 	.word	0x20000184
 800df28:	200001a4 	.word	0x200001a4

0800df2c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	af00      	add	r7, sp, #0
  BAS_Init();
 800df30:	f7ff ff75 	bl	800de1e <BAS_Init>

  BLS_Init();
 800df34:	f7ff ff7a 	bl	800de2c <BLS_Init>

  CRS_STM_Init();
 800df38:	f7ff ff7f 	bl	800de3a <CRS_STM_Init>

  DIS_Init();
 800df3c:	f7ff ff84 	bl	800de48 <DIS_Init>

  EDS_STM_Init();
 800df40:	f7ff ff89 	bl	800de56 <EDS_STM_Init>

  HIDS_Init();
 800df44:	f7ff ff8e 	bl	800de64 <HIDS_Init>

  HRS_Init();
 800df48:	f7ff ff93 	bl	800de72 <HRS_Init>

  HTS_Init();
 800df4c:	f7ff ff98 	bl	800de80 <HTS_Init>

  IAS_Init();
 800df50:	f7ff ff9d 	bl	800de8e <IAS_Init>

  LLS_Init();
 800df54:	f7ff ffa2 	bl	800de9c <LLS_Init>

  TPS_Init();
 800df58:	f7ff ffa7 	bl	800deaa <TPS_Init>

  MOTENV_STM_Init();
 800df5c:	f7ff ffac 	bl	800deb8 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800df60:	f7ff ffb1 	bl	800dec6 <P2PS_STM_Init>

  ZDD_STM_Init();
 800df64:	f7ff ffb6 	bl	800ded4 <ZDD_STM_Init>

  OTAS_STM_Init();
 800df68:	f7ff ffbb 	bl	800dee2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800df6c:	f7ff ffc7 	bl	800defe <BVOPUS_STM_Init>

  MESH_Init();
 800df70:	f7ff ffbe 	bl	800def0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800df74:	f002 fcc6 	bl	8010904 <SVCCTL_InitCustomSvc>
  
  return;
 800df78:	bf00      	nop
}
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800df84:	4b09      	ldr	r3, [pc, #36]	@ (800dfac <SVCCTL_RegisterSvcHandler+0x30>)
 800df86:	7f1b      	ldrb	r3, [r3, #28]
 800df88:	4619      	mov	r1, r3
 800df8a:	4a08      	ldr	r2, [pc, #32]	@ (800dfac <SVCCTL_RegisterSvcHandler+0x30>)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800df92:	4b06      	ldr	r3, [pc, #24]	@ (800dfac <SVCCTL_RegisterSvcHandler+0x30>)
 800df94:	7f1b      	ldrb	r3, [r3, #28]
 800df96:	3301      	adds	r3, #1
 800df98:	b2da      	uxtb	r2, r3
 800df9a:	4b04      	ldr	r3, [pc, #16]	@ (800dfac <SVCCTL_RegisterSvcHandler+0x30>)
 800df9c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800df9e:	bf00      	nop
}
 800dfa0:	370c      	adds	r7, #12
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	20000184 	.word	0x20000184

0800dfb0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b086      	sub	sp, #24
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	2bff      	cmp	r3, #255	@ 0xff
 800dfc8:	d125      	bne.n	800e016 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	3302      	adds	r3, #2
 800dfce:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	881b      	ldrh	r3, [r3, #0]
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dfda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dfde:	d118      	bne.n	800e012 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	757b      	strb	r3, [r7, #21]
 800dfe4:	e00d      	b.n	800e002 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800dfe6:	7d7b      	ldrb	r3, [r7, #21]
 800dfe8:	4a1a      	ldr	r2, [pc, #104]	@ (800e054 <SVCCTL_UserEvtRx+0xa4>)
 800dfea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	4798      	blx	r3
 800dff2:	4603      	mov	r3, r0
 800dff4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800dff6:	7dfb      	ldrb	r3, [r7, #23]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d108      	bne.n	800e00e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800dffc:	7d7b      	ldrb	r3, [r7, #21]
 800dffe:	3301      	adds	r3, #1
 800e000:	757b      	strb	r3, [r7, #21]
 800e002:	4b14      	ldr	r3, [pc, #80]	@ (800e054 <SVCCTL_UserEvtRx+0xa4>)
 800e004:	7f1b      	ldrb	r3, [r3, #28]
 800e006:	7d7a      	ldrb	r2, [r7, #21]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d3ec      	bcc.n	800dfe6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800e00c:	e002      	b.n	800e014 <SVCCTL_UserEvtRx+0x64>
              break;
 800e00e:	bf00      	nop
          break;
 800e010:	e000      	b.n	800e014 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800e012:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800e014:	e000      	b.n	800e018 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800e016:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800e018:	7dfb      	ldrb	r3, [r7, #23]
 800e01a:	2b02      	cmp	r3, #2
 800e01c:	d00f      	beq.n	800e03e <SVCCTL_UserEvtRx+0x8e>
 800e01e:	2b02      	cmp	r3, #2
 800e020:	dc10      	bgt.n	800e044 <SVCCTL_UserEvtRx+0x94>
 800e022:	2b00      	cmp	r3, #0
 800e024:	d002      	beq.n	800e02c <SVCCTL_UserEvtRx+0x7c>
 800e026:	2b01      	cmp	r3, #1
 800e028:	d006      	beq.n	800e038 <SVCCTL_UserEvtRx+0x88>
 800e02a:	e00b      	b.n	800e044 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f001 fc65 	bl	800f8fc <SVCCTL_App_Notification>
 800e032:	4603      	mov	r3, r0
 800e034:	75bb      	strb	r3, [r7, #22]
      break;
 800e036:	e008      	b.n	800e04a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e038:	2301      	movs	r3, #1
 800e03a:	75bb      	strb	r3, [r7, #22]
      break;
 800e03c:	e005      	b.n	800e04a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800e03e:	2300      	movs	r3, #0
 800e040:	75bb      	strb	r3, [r7, #22]
      break;
 800e042:	e002      	b.n	800e04a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e044:	2301      	movs	r3, #1
 800e046:	75bb      	strb	r3, [r7, #22]
      break;
 800e048:	bf00      	nop
  }

  return (return_status);
 800e04a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3718      	adds	r7, #24
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	20000184 	.word	0x20000184

0800e058 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b088      	sub	sp, #32
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e060:	f107 030c 	add.w	r3, r7, #12
 800e064:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	212e      	movs	r1, #46	@ 0x2e
 800e070:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800e074:	f000 fae8 	bl	800e648 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e078:	69fb      	ldr	r3, [r7, #28]
 800e07a:	330b      	adds	r3, #11
 800e07c:	78db      	ldrb	r3, [r3, #3]
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3720      	adds	r7, #32
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}

0800e086 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800e086:	b580      	push	{r7, lr}
 800e088:	b088      	sub	sp, #32
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e08e:	f107 030c 	add.w	r3, r7, #12
 800e092:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	210f      	movs	r1, #15
 800e09e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800e0a2:	f000 fad1 	bl	800e648 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	330b      	adds	r3, #11
 800e0aa:	78db      	ldrb	r3, [r3, #3]
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3720      	adds	r7, #32
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b088      	sub	sp, #32
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e0bc:	f107 030c 	add.w	r3, r7, #12
 800e0c0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	2110      	movs	r1, #16
 800e0c8:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800e0cc:	f000 fabc 	bl	800e648 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	330b      	adds	r3, #11
 800e0d4:	78db      	ldrb	r3, [r3, #3]
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3720      	adds	r7, #32
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
	...

0800e0e0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b08b      	sub	sp, #44	@ 0x2c
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800e100:	2300      	movs	r3, #0
 800e102:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800e104:	2300      	movs	r3, #0
 800e106:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800e108:	4b4a      	ldr	r3, [pc, #296]	@ (800e234 <SHCI_GetWirelessFwInfo+0x154>)
 800e10a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e10c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e110:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e11a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4a44      	ldr	r2, [pc, #272]	@ (800e238 <SHCI_GetWirelessFwInfo+0x158>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d10f      	bne.n	800e14c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	695b      	ldr	r3, [r3, #20]
 800e130:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	699b      	ldr	r3, [r3, #24]
 800e136:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	69db      	ldr	r3, [r3, #28]
 800e13c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	691b      	ldr	r3, [r3, #16]
 800e148:	617b      	str	r3, [r7, #20]
 800e14a:	e01a      	b.n	800e182 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	009b      	lsls	r3, r3, #2
 800e150:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e154:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e158:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	691b      	ldr	r3, [r3, #16]
 800e160:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	695b      	ldr	r3, [r3, #20]
 800e168:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	699b      	ldr	r3, [r3, #24]
 800e170:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	689b      	ldr	r3, [r3, #8]
 800e180:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e184:	0e1b      	lsrs	r3, r3, #24
 800e186:	b2da      	uxtb	r2, r3
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e18e:	0c1b      	lsrs	r3, r3, #16
 800e190:	b2da      	uxtb	r2, r3
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e198:	0a1b      	lsrs	r3, r3, #8
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1a2:	091b      	lsrs	r3, r3, #4
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	f003 030f 	and.w	r3, r3, #15
 800e1aa:	b2da      	uxtb	r2, r3
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800e1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	f003 030f 	and.w	r3, r3, #15
 800e1b8:	b2da      	uxtb	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e1be:	6a3b      	ldr	r3, [r7, #32]
 800e1c0:	0e1b      	lsrs	r3, r3, #24
 800e1c2:	b2da      	uxtb	r2, r3
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e1c8:	6a3b      	ldr	r3, [r7, #32]
 800e1ca:	0c1b      	lsrs	r3, r3, #16
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800e1d2:	6a3b      	ldr	r3, [r7, #32]
 800e1d4:	0a1b      	lsrs	r3, r3, #8
 800e1d6:	b2da      	uxtb	r2, r3
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e1dc:	6a3b      	ldr	r3, [r7, #32]
 800e1de:	b2da      	uxtb	r2, r3
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	b2da      	uxtb	r2, r3
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	0e1b      	lsrs	r3, r3, #24
 800e1f0:	b2da      	uxtb	r2, r3
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	0c1b      	lsrs	r3, r3, #16
 800e1fa:	b2da      	uxtb	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	0a1b      	lsrs	r3, r3, #8
 800e204:	b2da      	uxtb	r2, r3
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	0e1b      	lsrs	r3, r3, #24
 800e20e:	b2da      	uxtb	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	0c1b      	lsrs	r3, r3, #16
 800e218:	b2da      	uxtb	r2, r3
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	b2da      	uxtb	r2, r3
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800e226:	2300      	movs	r3, #0
}
 800e228:	4618      	mov	r0, r3
 800e22a:	372c      	adds	r7, #44	@ 0x2c
 800e22c:	46bd      	mov	sp, r7
 800e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e232:	4770      	bx	lr
 800e234:	58004000 	.word	0x58004000
 800e238:	a94656b9 	.word	0xa94656b9

0800e23c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	4a08      	ldr	r2, [pc, #32]	@ (800e26c <hci_init+0x30>)
 800e24c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800e24e:	4a08      	ldr	r2, [pc, #32]	@ (800e270 <hci_init+0x34>)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800e254:	4806      	ldr	r0, [pc, #24]	@ (800e270 <hci_init+0x34>)
 800e256:	f000 f979 	bl	800e54c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	4618      	mov	r0, r3
 800e260:	f000 f8da 	bl	800e418 <TlInit>

  return;
 800e264:	bf00      	nop
}
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	20000508 	.word	0x20000508
 800e270:	200004e0 	.word	0x200004e0

0800e274 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b084      	sub	sp, #16
 800e278:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e27a:	4822      	ldr	r0, [pc, #136]	@ (800e304 <hci_user_evt_proc+0x90>)
 800e27c:	f000 fdfa 	bl	800ee74 <LST_is_empty>
 800e280:	4603      	mov	r3, r0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d12b      	bne.n	800e2de <hci_user_evt_proc+0x6a>
 800e286:	4b20      	ldr	r3, [pc, #128]	@ (800e308 <hci_user_evt_proc+0x94>)
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d027      	beq.n	800e2de <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e28e:	f107 030c 	add.w	r3, r7, #12
 800e292:	4619      	mov	r1, r3
 800e294:	481b      	ldr	r0, [pc, #108]	@ (800e304 <hci_user_evt_proc+0x90>)
 800e296:	f000 fe7c 	bl	800ef92 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e29a:	4b1c      	ldr	r3, [pc, #112]	@ (800e30c <hci_user_evt_proc+0x98>)
 800e29c:	69db      	ldr	r3, [r3, #28]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d00c      	beq.n	800e2bc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e2aa:	4b18      	ldr	r3, [pc, #96]	@ (800e30c <hci_user_evt_proc+0x98>)
 800e2ac:	69db      	ldr	r3, [r3, #28]
 800e2ae:	1d3a      	adds	r2, r7, #4
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800e2b4:	793a      	ldrb	r2, [r7, #4]
 800e2b6:	4b14      	ldr	r3, [pc, #80]	@ (800e308 <hci_user_evt_proc+0x94>)
 800e2b8:	701a      	strb	r2, [r3, #0]
 800e2ba:	e002      	b.n	800e2c2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e2bc:	4b12      	ldr	r3, [pc, #72]	@ (800e308 <hci_user_evt_proc+0x94>)
 800e2be:	2201      	movs	r2, #1
 800e2c0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800e2c2:	4b11      	ldr	r3, [pc, #68]	@ (800e308 <hci_user_evt_proc+0x94>)
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d004      	beq.n	800e2d4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f000 fc0d 	bl	800eaec <TL_MM_EvtDone>
 800e2d2:	e004      	b.n	800e2de <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	480a      	ldr	r0, [pc, #40]	@ (800e304 <hci_user_evt_proc+0x90>)
 800e2da:	f000 fded 	bl	800eeb8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e2de:	4809      	ldr	r0, [pc, #36]	@ (800e304 <hci_user_evt_proc+0x90>)
 800e2e0:	f000 fdc8 	bl	800ee74 <LST_is_empty>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d107      	bne.n	800e2fa <hci_user_evt_proc+0x86>
 800e2ea:	4b07      	ldr	r3, [pc, #28]	@ (800e308 <hci_user_evt_proc+0x94>)
 800e2ec:	781b      	ldrb	r3, [r3, #0]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d003      	beq.n	800e2fa <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800e2f2:	4804      	ldr	r0, [pc, #16]	@ (800e304 <hci_user_evt_proc+0x90>)
 800e2f4:	f002 f9d0 	bl	8010698 <hci_notify_asynch_evt>
  }


  return;
 800e2f8:	bf00      	nop
 800e2fa:	bf00      	nop
}
 800e2fc:	3710      	adds	r7, #16
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	200001ac 	.word	0x200001ac
 800e308:	200001b8 	.word	0x200001b8
 800e30c:	200004e0 	.word	0x200004e0

0800e310 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b088      	sub	sp, #32
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	460b      	mov	r3, r1
 800e31a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800e31c:	2000      	movs	r0, #0
 800e31e:	f000 f8d1 	bl	800e4c4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800e322:	2300      	movs	r3, #0
 800e324:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	885b      	ldrh	r3, [r3, #2]
 800e32a:	b21b      	sxth	r3, r3
 800e32c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e330:	b21a      	sxth	r2, r3
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	881b      	ldrh	r3, [r3, #0]
 800e336:	b21b      	sxth	r3, r3
 800e338:	029b      	lsls	r3, r3, #10
 800e33a:	b21b      	sxth	r3, r3
 800e33c:	4313      	orrs	r3, r2
 800e33e:	b21b      	sxth	r3, r3
 800e340:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800e342:	4b33      	ldr	r3, [pc, #204]	@ (800e410 <hci_send_req+0x100>)
 800e344:	2201      	movs	r2, #1
 800e346:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	b2d9      	uxtb	r1, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	689a      	ldr	r2, [r3, #8]
 800e352:	8bbb      	ldrh	r3, [r7, #28]
 800e354:	4618      	mov	r0, r3
 800e356:	f000 f88f 	bl	800e478 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800e35a:	e04e      	b.n	800e3fa <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800e35c:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e360:	f002 f9b1 	bl	80106c6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e364:	e043      	b.n	800e3ee <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e366:	f107 030c 	add.w	r3, r7, #12
 800e36a:	4619      	mov	r1, r3
 800e36c:	4829      	ldr	r0, [pc, #164]	@ (800e414 <hci_send_req+0x104>)
 800e36e:	f000 fe10 	bl	800ef92 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	7a5b      	ldrb	r3, [r3, #9]
 800e376:	2b0f      	cmp	r3, #15
 800e378:	d114      	bne.n	800e3a4 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	330b      	adds	r3, #11
 800e37e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	885b      	ldrh	r3, [r3, #2]
 800e384:	b29b      	uxth	r3, r3
 800e386:	8bba      	ldrh	r2, [r7, #28]
 800e388:	429a      	cmp	r2, r3
 800e38a:	d104      	bne.n	800e396 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	691b      	ldr	r3, [r3, #16]
 800e390:	693a      	ldr	r2, [r7, #16]
 800e392:	7812      	ldrb	r2, [r2, #0]
 800e394:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	785b      	ldrb	r3, [r3, #1]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d027      	beq.n	800e3ee <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	77fb      	strb	r3, [r7, #31]
 800e3a2:	e024      	b.n	800e3ee <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	330b      	adds	r3, #11
 800e3a8:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	8bba      	ldrh	r2, [r7, #28]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d114      	bne.n	800e3e2 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	7a9b      	ldrb	r3, [r3, #10]
 800e3bc:	3b03      	subs	r3, #3
 800e3be:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	695a      	ldr	r2, [r3, #20]
 800e3c4:	7dfb      	ldrb	r3, [r7, #23]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	bfa8      	it	ge
 800e3ca:	461a      	movge	r2, r3
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6918      	ldr	r0, [r3, #16]
 800e3d4:	69bb      	ldr	r3, [r7, #24]
 800e3d6:	1cd9      	adds	r1, r3, #3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	695b      	ldr	r3, [r3, #20]
 800e3dc:	461a      	mov	r2, r3
 800e3de:	f004 f91a 	bl	8012616 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800e3e2:	69bb      	ldr	r3, [r7, #24]
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d001      	beq.n	800e3ee <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e3ee:	4809      	ldr	r0, [pc, #36]	@ (800e414 <hci_send_req+0x104>)
 800e3f0:	f000 fd40 	bl	800ee74 <LST_is_empty>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d0b5      	beq.n	800e366 <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800e3fa:	7ffb      	ldrb	r3, [r7, #31]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d0ad      	beq.n	800e35c <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800e400:	2001      	movs	r0, #1
 800e402:	f000 f85f 	bl	800e4c4 <NotifyCmdStatus>

  return 0;
 800e406:	2300      	movs	r3, #0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3720      	adds	r7, #32
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	2000050c 	.word	0x2000050c
 800e414:	20000500 	.word	0x20000500

0800e418 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b086      	sub	sp, #24
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800e420:	480f      	ldr	r0, [pc, #60]	@ (800e460 <TlInit+0x48>)
 800e422:	f000 fd17 	bl	800ee54 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800e426:	4a0f      	ldr	r2, [pc, #60]	@ (800e464 <TlInit+0x4c>)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800e42c:	480e      	ldr	r0, [pc, #56]	@ (800e468 <TlInit+0x50>)
 800e42e:	f000 fd11 	bl	800ee54 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e432:	4b0e      	ldr	r3, [pc, #56]	@ (800e46c <TlInit+0x54>)
 800e434:	2201      	movs	r2, #1
 800e436:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800e438:	4b0d      	ldr	r3, [pc, #52]	@ (800e470 <TlInit+0x58>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00a      	beq.n	800e456 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800e444:	4b0b      	ldr	r3, [pc, #44]	@ (800e474 <TlInit+0x5c>)
 800e446:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800e448:	4b09      	ldr	r3, [pc, #36]	@ (800e470 <TlInit+0x58>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f107 0208 	add.w	r2, r7, #8
 800e450:	4610      	mov	r0, r2
 800e452:	4798      	blx	r3
  }

  return;
 800e454:	bf00      	nop
 800e456:	bf00      	nop
}
 800e458:	3718      	adds	r7, #24
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}
 800e45e:	bf00      	nop
 800e460:	20000500 	.word	0x20000500
 800e464:	200001b4 	.word	0x200001b4
 800e468:	200001ac 	.word	0x200001ac
 800e46c:	200001b8 	.word	0x200001b8
 800e470:	200004e0 	.word	0x200004e0
 800e474:	0800e505 	.word	0x0800e505

0800e478 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	4603      	mov	r3, r0
 800e480:	603a      	str	r2, [r7, #0]
 800e482:	80fb      	strh	r3, [r7, #6]
 800e484:	460b      	mov	r3, r1
 800e486:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e488:	4b0c      	ldr	r3, [pc, #48]	@ (800e4bc <SendCmd+0x44>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	88fa      	ldrh	r2, [r7, #6]
 800e48e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800e492:	4b0a      	ldr	r3, [pc, #40]	@ (800e4bc <SendCmd+0x44>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	797a      	ldrb	r2, [r7, #5]
 800e498:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e49a:	4b08      	ldr	r3, [pc, #32]	@ (800e4bc <SendCmd+0x44>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	330c      	adds	r3, #12
 800e4a0:	797a      	ldrb	r2, [r7, #5]
 800e4a2:	6839      	ldr	r1, [r7, #0]
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f004 f8b6 	bl	8012616 <memcpy>

  hciContext.io.Send(0,0);
 800e4aa:	4b05      	ldr	r3, [pc, #20]	@ (800e4c0 <SendCmd+0x48>)
 800e4ac:	691b      	ldr	r3, [r3, #16]
 800e4ae:	2100      	movs	r1, #0
 800e4b0:	2000      	movs	r0, #0
 800e4b2:	4798      	blx	r3

  return;
 800e4b4:	bf00      	nop
}
 800e4b6:	3708      	adds	r7, #8
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	200001b4 	.word	0x200001b4
 800e4c0:	200004e0 	.word	0x200004e0

0800e4c4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800e4ce:	79fb      	ldrb	r3, [r7, #7]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d108      	bne.n	800e4e6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800e4d4:	4b0a      	ldr	r3, [pc, #40]	@ (800e500 <NotifyCmdStatus+0x3c>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d00d      	beq.n	800e4f8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800e4dc:	4b08      	ldr	r3, [pc, #32]	@ (800e500 <NotifyCmdStatus+0x3c>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2000      	movs	r0, #0
 800e4e2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800e4e4:	e008      	b.n	800e4f8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800e4e6:	4b06      	ldr	r3, [pc, #24]	@ (800e500 <NotifyCmdStatus+0x3c>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d004      	beq.n	800e4f8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e4ee:	4b04      	ldr	r3, [pc, #16]	@ (800e500 <NotifyCmdStatus+0x3c>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2001      	movs	r0, #1
 800e4f4:	4798      	blx	r3
  return;
 800e4f6:	bf00      	nop
 800e4f8:	bf00      	nop
}
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	20000508 	.word	0x20000508

0800e504 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	7a5b      	ldrb	r3, [r3, #9]
 800e510:	2b0f      	cmp	r3, #15
 800e512:	d003      	beq.n	800e51c <TlEvtReceived+0x18>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	7a5b      	ldrb	r3, [r3, #9]
 800e518:	2b0e      	cmp	r3, #14
 800e51a:	d107      	bne.n	800e52c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e51c:	6879      	ldr	r1, [r7, #4]
 800e51e:	4809      	ldr	r0, [pc, #36]	@ (800e544 <TlEvtReceived+0x40>)
 800e520:	f000 fcf0 	bl	800ef04 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e524:	2000      	movs	r0, #0
 800e526:	f002 f8c3 	bl	80106b0 <hci_cmd_resp_release>
 800e52a:	e006      	b.n	800e53a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e52c:	6879      	ldr	r1, [r7, #4]
 800e52e:	4806      	ldr	r0, [pc, #24]	@ (800e548 <TlEvtReceived+0x44>)
 800e530:	f000 fce8 	bl	800ef04 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e534:	4804      	ldr	r0, [pc, #16]	@ (800e548 <TlEvtReceived+0x44>)
 800e536:	f002 f8af 	bl	8010698 <hci_notify_asynch_evt>
  }

  return;
 800e53a:	bf00      	nop
}
 800e53c:	3708      	adds	r7, #8
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	20000500 	.word	0x20000500
 800e548:	200001ac 	.word	0x200001ac

0800e54c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	4a05      	ldr	r2, [pc, #20]	@ (800e56c <hci_register_io_bus+0x20>)
 800e558:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4a04      	ldr	r2, [pc, #16]	@ (800e570 <hci_register_io_bus+0x24>)
 800e55e:	611a      	str	r2, [r3, #16]

  return;
 800e560:	bf00      	nop
}
 800e562:	370c      	adds	r7, #12
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr
 800e56c:	0800e865 	.word	0x0800e865
 800e570:	0800e8cd 	.word	0x0800e8cd

0800e574 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	4a08      	ldr	r2, [pc, #32]	@ (800e5a4 <shci_init+0x30>)
 800e584:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e586:	4a08      	ldr	r2, [pc, #32]	@ (800e5a8 <shci_init+0x34>)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e58c:	4806      	ldr	r0, [pc, #24]	@ (800e5a8 <shci_init+0x34>)
 800e58e:	f000 f915 	bl	800e7bc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4618      	mov	r0, r3
 800e598:	f000 f898 	bl	800e6cc <TlInit>

  return;
 800e59c:	bf00      	nop
}
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	20000530 	.word	0x20000530
 800e5a8:	20000510 	.word	0x20000510

0800e5ac <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e5b2:	4822      	ldr	r0, [pc, #136]	@ (800e63c <shci_user_evt_proc+0x90>)
 800e5b4:	f000 fc5e 	bl	800ee74 <LST_is_empty>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d12b      	bne.n	800e616 <shci_user_evt_proc+0x6a>
 800e5be:	4b20      	ldr	r3, [pc, #128]	@ (800e640 <shci_user_evt_proc+0x94>)
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d027      	beq.n	800e616 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e5c6:	f107 030c 	add.w	r3, r7, #12
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	481b      	ldr	r0, [pc, #108]	@ (800e63c <shci_user_evt_proc+0x90>)
 800e5ce:	f000 fce0 	bl	800ef92 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e5d2:	4b1c      	ldr	r3, [pc, #112]	@ (800e644 <shci_user_evt_proc+0x98>)
 800e5d4:	69db      	ldr	r3, [r3, #28]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00c      	beq.n	800e5f4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e5e2:	4b18      	ldr	r3, [pc, #96]	@ (800e644 <shci_user_evt_proc+0x98>)
 800e5e4:	69db      	ldr	r3, [r3, #28]
 800e5e6:	1d3a      	adds	r2, r7, #4
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e5ec:	793a      	ldrb	r2, [r7, #4]
 800e5ee:	4b14      	ldr	r3, [pc, #80]	@ (800e640 <shci_user_evt_proc+0x94>)
 800e5f0:	701a      	strb	r2, [r3, #0]
 800e5f2:	e002      	b.n	800e5fa <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e5f4:	4b12      	ldr	r3, [pc, #72]	@ (800e640 <shci_user_evt_proc+0x94>)
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e5fa:	4b11      	ldr	r3, [pc, #68]	@ (800e640 <shci_user_evt_proc+0x94>)
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d004      	beq.n	800e60c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	4618      	mov	r0, r3
 800e606:	f000 fa71 	bl	800eaec <TL_MM_EvtDone>
 800e60a:	e004      	b.n	800e616 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	4619      	mov	r1, r3
 800e610:	480a      	ldr	r0, [pc, #40]	@ (800e63c <shci_user_evt_proc+0x90>)
 800e612:	f000 fc51 	bl	800eeb8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e616:	4809      	ldr	r0, [pc, #36]	@ (800e63c <shci_user_evt_proc+0x90>)
 800e618:	f000 fc2c 	bl	800ee74 <LST_is_empty>
 800e61c:	4603      	mov	r3, r0
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d107      	bne.n	800e632 <shci_user_evt_proc+0x86>
 800e622:	4b07      	ldr	r3, [pc, #28]	@ (800e640 <shci_user_evt_proc+0x94>)
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d003      	beq.n	800e632 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e62a:	4804      	ldr	r0, [pc, #16]	@ (800e63c <shci_user_evt_proc+0x90>)
 800e62c:	f7f3 f8c8 	bl	80017c0 <shci_notify_asynch_evt>
  }


  return;
 800e630:	bf00      	nop
 800e632:	bf00      	nop
}
 800e634:	3710      	adds	r7, #16
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	200001bc 	.word	0x200001bc
 800e640:	200001cc 	.word	0x200001cc
 800e644:	20000510 	.word	0x20000510

0800e648 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60ba      	str	r2, [r7, #8]
 800e650:	607b      	str	r3, [r7, #4]
 800e652:	4603      	mov	r3, r0
 800e654:	81fb      	strh	r3, [r7, #14]
 800e656:	460b      	mov	r3, r1
 800e658:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e65a:	2000      	movs	r0, #0
 800e65c:	f000 f868 	bl	800e730 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e660:	4b17      	ldr	r3, [pc, #92]	@ (800e6c0 <shci_send+0x78>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	89fa      	ldrh	r2, [r7, #14]
 800e666:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e66a:	4b15      	ldr	r3, [pc, #84]	@ (800e6c0 <shci_send+0x78>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	7b7a      	ldrb	r2, [r7, #13]
 800e670:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e672:	4b13      	ldr	r3, [pc, #76]	@ (800e6c0 <shci_send+0x78>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	330c      	adds	r3, #12
 800e678:	7b7a      	ldrb	r2, [r7, #13]
 800e67a:	68b9      	ldr	r1, [r7, #8]
 800e67c:	4618      	mov	r0, r3
 800e67e:	f003 ffca 	bl	8012616 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800e682:	4b10      	ldr	r3, [pc, #64]	@ (800e6c4 <shci_send+0x7c>)
 800e684:	2201      	movs	r2, #1
 800e686:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800e688:	4b0f      	ldr	r3, [pc, #60]	@ (800e6c8 <shci_send+0x80>)
 800e68a:	691b      	ldr	r3, [r3, #16]
 800e68c:	2100      	movs	r1, #0
 800e68e:	2000      	movs	r0, #0
 800e690:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e692:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e696:	f7f3 f8aa 	bl	80017ee <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f103 0008 	add.w	r0, r3, #8
 800e6a0:	4b07      	ldr	r3, [pc, #28]	@ (800e6c0 <shci_send+0x78>)
 800e6a2:	6819      	ldr	r1, [r3, #0]
 800e6a4:	4b06      	ldr	r3, [pc, #24]	@ (800e6c0 <shci_send+0x78>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	789b      	ldrb	r3, [r3, #2]
 800e6aa:	3303      	adds	r3, #3
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	f003 ffb2 	bl	8012616 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e6b2:	2001      	movs	r0, #1
 800e6b4:	f000 f83c 	bl	800e730 <Cmd_SetStatus>

  return;
 800e6b8:	bf00      	nop
}
 800e6ba:	3710      	adds	r7, #16
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}
 800e6c0:	200001c8 	.word	0x200001c8
 800e6c4:	20000534 	.word	0x20000534
 800e6c8:	20000510 	.word	0x20000510

0800e6cc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b086      	sub	sp, #24
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e6d4:	4a10      	ldr	r2, [pc, #64]	@ (800e718 <TlInit+0x4c>)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e6da:	4810      	ldr	r0, [pc, #64]	@ (800e71c <TlInit+0x50>)
 800e6dc:	f000 fbba 	bl	800ee54 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e6e0:	2001      	movs	r0, #1
 800e6e2:	f000 f825 	bl	800e730 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e6e6:	4b0e      	ldr	r3, [pc, #56]	@ (800e720 <TlInit+0x54>)
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e6ec:	4b0d      	ldr	r3, [pc, #52]	@ (800e724 <TlInit+0x58>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d00c      	beq.n	800e70e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e6f8:	4b0b      	ldr	r3, [pc, #44]	@ (800e728 <TlInit+0x5c>)
 800e6fa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e6fc:	4b0b      	ldr	r3, [pc, #44]	@ (800e72c <TlInit+0x60>)
 800e6fe:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e700:	4b08      	ldr	r3, [pc, #32]	@ (800e724 <TlInit+0x58>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f107 020c 	add.w	r2, r7, #12
 800e708:	4610      	mov	r0, r2
 800e70a:	4798      	blx	r3
  }

  return;
 800e70c:	bf00      	nop
 800e70e:	bf00      	nop
}
 800e710:	3718      	adds	r7, #24
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	200001c8 	.word	0x200001c8
 800e71c:	200001bc 	.word	0x200001bc
 800e720:	200001cc 	.word	0x200001cc
 800e724:	20000510 	.word	0x20000510
 800e728:	0800e781 	.word	0x0800e781
 800e72c:	0800e799 	.word	0x0800e799

0800e730 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	4603      	mov	r3, r0
 800e738:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e73a:	79fb      	ldrb	r3, [r7, #7]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d10b      	bne.n	800e758 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e740:	4b0d      	ldr	r3, [pc, #52]	@ (800e778 <Cmd_SetStatus+0x48>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d003      	beq.n	800e750 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e748:	4b0b      	ldr	r3, [pc, #44]	@ (800e778 <Cmd_SetStatus+0x48>)
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	2000      	movs	r0, #0
 800e74e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e750:	4b0a      	ldr	r3, [pc, #40]	@ (800e77c <Cmd_SetStatus+0x4c>)
 800e752:	2200      	movs	r2, #0
 800e754:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e756:	e00b      	b.n	800e770 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e758:	4b08      	ldr	r3, [pc, #32]	@ (800e77c <Cmd_SetStatus+0x4c>)
 800e75a:	2201      	movs	r2, #1
 800e75c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e75e:	4b06      	ldr	r3, [pc, #24]	@ (800e778 <Cmd_SetStatus+0x48>)
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d004      	beq.n	800e770 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e766:	4b04      	ldr	r3, [pc, #16]	@ (800e778 <Cmd_SetStatus+0x48>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2001      	movs	r0, #1
 800e76c:	4798      	blx	r3
  return;
 800e76e:	bf00      	nop
 800e770:	bf00      	nop
}
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	20000530 	.word	0x20000530
 800e77c:	200001c4 	.word	0x200001c4

0800e780 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e788:	2000      	movs	r0, #0
 800e78a:	f7f3 f825 	bl	80017d8 <shci_cmd_resp_release>

  return;
 800e78e:	bf00      	nop
}
 800e790:	3708      	adds	r7, #8
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
	...

0800e798 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b082      	sub	sp, #8
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e7a0:	6879      	ldr	r1, [r7, #4]
 800e7a2:	4805      	ldr	r0, [pc, #20]	@ (800e7b8 <TlUserEvtReceived+0x20>)
 800e7a4:	f000 fbae 	bl	800ef04 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e7a8:	4803      	ldr	r0, [pc, #12]	@ (800e7b8 <TlUserEvtReceived+0x20>)
 800e7aa:	f7f3 f809 	bl	80017c0 <shci_notify_asynch_evt>

  return;
 800e7ae:	bf00      	nop
}
 800e7b0:	3708      	adds	r7, #8
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	200001bc 	.word	0x200001bc

0800e7bc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	4a05      	ldr	r2, [pc, #20]	@ (800e7dc <shci_register_io_bus+0x20>)
 800e7c8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4a04      	ldr	r2, [pc, #16]	@ (800e7e0 <shci_register_io_bus+0x24>)
 800e7ce:	611a      	str	r2, [r3, #16]

  return;
 800e7d0:	bf00      	nop
}
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr
 800e7dc:	0800e979 	.word	0x0800e979
 800e7e0:	0800e9cd 	.word	0x0800e9cd

0800e7e4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e7e8:	f002 fb24 	bl	8010e34 <HW_IPCC_Enable>

  return;
 800e7ec:	bf00      	nop
}
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <TL_Init>:


void TL_Init( void )
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e7f4:	4b10      	ldr	r3, [pc, #64]	@ (800e838 <TL_Init+0x48>)
 800e7f6:	4a11      	ldr	r2, [pc, #68]	@ (800e83c <TL_Init+0x4c>)
 800e7f8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e7fa:	4b0f      	ldr	r3, [pc, #60]	@ (800e838 <TL_Init+0x48>)
 800e7fc:	4a10      	ldr	r2, [pc, #64]	@ (800e840 <TL_Init+0x50>)
 800e7fe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e800:	4b0d      	ldr	r3, [pc, #52]	@ (800e838 <TL_Init+0x48>)
 800e802:	4a10      	ldr	r2, [pc, #64]	@ (800e844 <TL_Init+0x54>)
 800e804:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e806:	4b0c      	ldr	r3, [pc, #48]	@ (800e838 <TL_Init+0x48>)
 800e808:	4a0f      	ldr	r2, [pc, #60]	@ (800e848 <TL_Init+0x58>)
 800e80a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800e80c:	4b0a      	ldr	r3, [pc, #40]	@ (800e838 <TL_Init+0x48>)
 800e80e:	4a0f      	ldr	r2, [pc, #60]	@ (800e84c <TL_Init+0x5c>)
 800e810:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e812:	4b09      	ldr	r3, [pc, #36]	@ (800e838 <TL_Init+0x48>)
 800e814:	4a0e      	ldr	r2, [pc, #56]	@ (800e850 <TL_Init+0x60>)
 800e816:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e818:	4b07      	ldr	r3, [pc, #28]	@ (800e838 <TL_Init+0x48>)
 800e81a:	4a0e      	ldr	r2, [pc, #56]	@ (800e854 <TL_Init+0x64>)
 800e81c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e81e:	4b06      	ldr	r3, [pc, #24]	@ (800e838 <TL_Init+0x48>)
 800e820:	4a0d      	ldr	r2, [pc, #52]	@ (800e858 <TL_Init+0x68>)
 800e822:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e824:	4b04      	ldr	r3, [pc, #16]	@ (800e838 <TL_Init+0x48>)
 800e826:	4a0d      	ldr	r2, [pc, #52]	@ (800e85c <TL_Init+0x6c>)
 800e828:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e82a:	4b03      	ldr	r3, [pc, #12]	@ (800e838 <TL_Init+0x48>)
 800e82c:	4a0c      	ldr	r2, [pc, #48]	@ (800e860 <TL_Init+0x70>)
 800e82e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e830:	f002 fb14 	bl	8010e5c <HW_IPCC_Init>

  return;
 800e834:	bf00      	nop
}
 800e836:	bd80      	pop	{r7, pc}
 800e838:	20030000 	.word	0x20030000
 800e83c:	20030028 	.word	0x20030028
 800e840:	20030048 	.word	0x20030048
 800e844:	20030058 	.word	0x20030058
 800e848:	20030068 	.word	0x20030068
 800e84c:	20030070 	.word	0x20030070
 800e850:	20030078 	.word	0x20030078
 800e854:	20030080 	.word	0x20030080
 800e858:	2003009c 	.word	0x2003009c
 800e85c:	200300a0 	.word	0x200300a0
 800e860:	200300ac 	.word	0x200300ac

0800e864 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800e870:	4811      	ldr	r0, [pc, #68]	@ (800e8b8 <TL_BLE_Init+0x54>)
 800e872:	f000 faef 	bl	800ee54 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800e876:	4b11      	ldr	r3, [pc, #68]	@ (800e8bc <TL_BLE_Init+0x58>)
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	689a      	ldr	r2, [r3, #8]
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	68da      	ldr	r2, [r3, #12]
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	4a0c      	ldr	r2, [pc, #48]	@ (800e8c0 <TL_BLE_Init+0x5c>)
 800e890:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	4a08      	ldr	r2, [pc, #32]	@ (800e8b8 <TL_BLE_Init+0x54>)
 800e896:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800e898:	f002 faf6 	bl	8010e88 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4a08      	ldr	r2, [pc, #32]	@ (800e8c4 <TL_BLE_Init+0x60>)
 800e8a2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	4a07      	ldr	r2, [pc, #28]	@ (800e8c8 <TL_BLE_Init+0x64>)
 800e8aa:	6013      	str	r3, [r2, #0]

  return 0;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	200300c8 	.word	0x200300c8
 800e8bc:	20030000 	.word	0x20030000
 800e8c0:	20030a58 	.word	0x20030a58
 800e8c4:	20000540 	.word	0x20000540
 800e8c8:	20000544 	.word	0x20000544

0800e8cc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800e8d8:	4b09      	ldr	r3, [pc, #36]	@ (800e900 <TL_BLE_SendCmd+0x34>)
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	2201      	movs	r2, #1
 800e8e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800e8e2:	4b07      	ldr	r3, [pc, #28]	@ (800e900 <TL_BLE_SendCmd+0x34>)
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	2001      	movs	r0, #1
 800e8ec:	f000 f96c 	bl	800ebc8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e8f0:	f002 fae4 	bl	8010ebc <HW_IPCC_BLE_SendCmd>

  return 0;
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3708      	adds	r7, #8
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	20030000 	.word	0x20030000

0800e904 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b082      	sub	sp, #8
 800e908:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e90a:	e01c      	b.n	800e946 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e90c:	1d3b      	adds	r3, r7, #4
 800e90e:	4619      	mov	r1, r3
 800e910:	4812      	ldr	r0, [pc, #72]	@ (800e95c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e912:	f000 fb3e 	bl	800ef92 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	7a5b      	ldrb	r3, [r3, #9]
 800e91a:	2b0f      	cmp	r3, #15
 800e91c:	d003      	beq.n	800e926 <HW_IPCC_BLE_RxEvtNot+0x22>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	7a5b      	ldrb	r3, [r3, #9]
 800e922:	2b0e      	cmp	r3, #14
 800e924:	d105      	bne.n	800e932 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4619      	mov	r1, r3
 800e92a:	2002      	movs	r0, #2
 800e92c:	f000 f94c 	bl	800ebc8 <OutputDbgTrace>
 800e930:	e004      	b.n	800e93c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	4619      	mov	r1, r3
 800e936:	2003      	movs	r0, #3
 800e938:	f000 f946 	bl	800ebc8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e93c:	4b08      	ldr	r3, [pc, #32]	@ (800e960 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	4610      	mov	r0, r2
 800e944:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e946:	4805      	ldr	r0, [pc, #20]	@ (800e95c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e948:	f000 fa94 	bl	800ee74 <LST_is_empty>
 800e94c:	4603      	mov	r3, r0
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d0dc      	beq.n	800e90c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e952:	bf00      	nop
}
 800e954:	3708      	adds	r7, #8
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}
 800e95a:	bf00      	nop
 800e95c:	200300c8 	.word	0x200300c8
 800e960:	20000540 	.word	0x20000540

0800e964 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e968:	4b02      	ldr	r3, [pc, #8]	@ (800e974 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	4798      	blx	r3

  return;
 800e96e:	bf00      	nop
}
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	20000544 	.word	0x20000544

0800e978 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e984:	480d      	ldr	r0, [pc, #52]	@ (800e9bc <TL_SYS_Init+0x44>)
 800e986:	f000 fa65 	bl	800ee54 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e98a:	4b0d      	ldr	r3, [pc, #52]	@ (800e9c0 <TL_SYS_Init+0x48>)
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	689a      	ldr	r2, [r3, #8]
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	4a08      	ldr	r2, [pc, #32]	@ (800e9bc <TL_SYS_Init+0x44>)
 800e99c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e99e:	f002 fabf 	bl	8010f20 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	4a07      	ldr	r2, [pc, #28]	@ (800e9c4 <TL_SYS_Init+0x4c>)
 800e9a8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	4a06      	ldr	r2, [pc, #24]	@ (800e9c8 <TL_SYS_Init+0x50>)
 800e9b0:	6013      	str	r3, [r2, #0]

  return 0;
 800e9b2:	2300      	movs	r3, #0
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3710      	adds	r7, #16
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	200300d0 	.word	0x200300d0
 800e9c0:	20030000 	.word	0x20030000
 800e9c4:	20000548 	.word	0x20000548
 800e9c8:	2000054c 	.word	0x2000054c

0800e9cc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e9d8:	4b09      	ldr	r3, [pc, #36]	@ (800ea00 <TL_SYS_SendCmd+0x34>)
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	2210      	movs	r2, #16
 800e9e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e9e2:	4b07      	ldr	r3, [pc, #28]	@ (800ea00 <TL_SYS_SendCmd+0x34>)
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	2004      	movs	r0, #4
 800e9ec:	f000 f8ec 	bl	800ebc8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e9f0:	f002 fab0 	bl	8010f54 <HW_IPCC_SYS_SendCmd>

  return 0;
 800e9f4:	2300      	movs	r3, #0
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3708      	adds	r7, #8
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	20030000 	.word	0x20030000

0800ea04 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ea08:	4b07      	ldr	r3, [pc, #28]	@ (800ea28 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4619      	mov	r1, r3
 800ea10:	2005      	movs	r0, #5
 800ea12:	f000 f8d9 	bl	800ebc8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ea16:	4b05      	ldr	r3, [pc, #20]	@ (800ea2c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4a03      	ldr	r2, [pc, #12]	@ (800ea28 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ea1c:	68d2      	ldr	r2, [r2, #12]
 800ea1e:	6812      	ldr	r2, [r2, #0]
 800ea20:	4610      	mov	r0, r2
 800ea22:	4798      	blx	r3

  return;
 800ea24:	bf00      	nop
}
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	20030000 	.word	0x20030000
 800ea2c:	20000548 	.word	0x20000548

0800ea30 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ea36:	e00e      	b.n	800ea56 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ea38:	1d3b      	adds	r3, r7, #4
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	480b      	ldr	r0, [pc, #44]	@ (800ea6c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ea3e:	f000 faa8 	bl	800ef92 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	4619      	mov	r1, r3
 800ea46:	2006      	movs	r0, #6
 800ea48:	f000 f8be 	bl	800ebc8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ea4c:	4b08      	ldr	r3, [pc, #32]	@ (800ea70 <HW_IPCC_SYS_EvtNot+0x40>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	4610      	mov	r0, r2
 800ea54:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ea56:	4805      	ldr	r0, [pc, #20]	@ (800ea6c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ea58:	f000 fa0c 	bl	800ee74 <LST_is_empty>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d0ea      	beq.n	800ea38 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ea62:	bf00      	nop
}
 800ea64:	3708      	adds	r7, #8
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}
 800ea6a:	bf00      	nop
 800ea6c:	200300d0 	.word	0x200300d0
 800ea70:	2000054c 	.word	0x2000054c

0800ea74 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ea7c:	4817      	ldr	r0, [pc, #92]	@ (800eadc <TL_MM_Init+0x68>)
 800ea7e:	f000 f9e9 	bl	800ee54 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ea82:	4817      	ldr	r0, [pc, #92]	@ (800eae0 <TL_MM_Init+0x6c>)
 800ea84:	f000 f9e6 	bl	800ee54 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ea88:	4b16      	ldr	r3, [pc, #88]	@ (800eae4 <TL_MM_Init+0x70>)
 800ea8a:	691b      	ldr	r3, [r3, #16]
 800ea8c:	4a16      	ldr	r2, [pc, #88]	@ (800eae8 <TL_MM_Init+0x74>)
 800ea8e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ea90:	4b15      	ldr	r3, [pc, #84]	@ (800eae8 <TL_MM_Init+0x74>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	6892      	ldr	r2, [r2, #8]
 800ea98:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ea9a:	4b13      	ldr	r3, [pc, #76]	@ (800eae8 <TL_MM_Init+0x74>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	68d2      	ldr	r2, [r2, #12]
 800eaa2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800eaa4:	4b10      	ldr	r3, [pc, #64]	@ (800eae8 <TL_MM_Init+0x74>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	4a0c      	ldr	r2, [pc, #48]	@ (800eadc <TL_MM_Init+0x68>)
 800eaaa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800eaac:	4b0e      	ldr	r3, [pc, #56]	@ (800eae8 <TL_MM_Init+0x74>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	6812      	ldr	r2, [r2, #0]
 800eab4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800eab6:	4b0c      	ldr	r3, [pc, #48]	@ (800eae8 <TL_MM_Init+0x74>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	6852      	ldr	r2, [r2, #4]
 800eabe:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800eac0:	4b09      	ldr	r3, [pc, #36]	@ (800eae8 <TL_MM_Init+0x74>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	6912      	ldr	r2, [r2, #16]
 800eac8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800eaca:	4b07      	ldr	r3, [pc, #28]	@ (800eae8 <TL_MM_Init+0x74>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	6952      	ldr	r2, [r2, #20]
 800ead2:	619a      	str	r2, [r3, #24]

  return;
 800ead4:	bf00      	nop
}
 800ead6:	3708      	adds	r7, #8
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	200300b8 	.word	0x200300b8
 800eae0:	20000538 	.word	0x20000538
 800eae4:	20030000 	.word	0x20030000
 800eae8:	20000550 	.word	0x20000550

0800eaec <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800eaf4:	6879      	ldr	r1, [r7, #4]
 800eaf6:	4807      	ldr	r0, [pc, #28]	@ (800eb14 <TL_MM_EvtDone+0x28>)
 800eaf8:	f000 fa04 	bl	800ef04 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800eafc:	6879      	ldr	r1, [r7, #4]
 800eafe:	2000      	movs	r0, #0
 800eb00:	f000 f862 	bl	800ebc8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800eb04:	4804      	ldr	r0, [pc, #16]	@ (800eb18 <TL_MM_EvtDone+0x2c>)
 800eb06:	f002 fa6b 	bl	8010fe0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800eb0a:	bf00      	nop
}
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	20000538 	.word	0x20000538
 800eb18:	0800eb1d 	.word	0x0800eb1d

0800eb1c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800eb22:	e00c      	b.n	800eb3e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800eb24:	1d3b      	adds	r3, r7, #4
 800eb26:	4619      	mov	r1, r3
 800eb28:	480a      	ldr	r0, [pc, #40]	@ (800eb54 <SendFreeBuf+0x38>)
 800eb2a:	f000 fa32 	bl	800ef92 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800eb2e:	4b0a      	ldr	r3, [pc, #40]	@ (800eb58 <SendFreeBuf+0x3c>)
 800eb30:	691b      	ldr	r3, [r3, #16]
 800eb32:	691b      	ldr	r3, [r3, #16]
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	4611      	mov	r1, r2
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f000 f9e3 	bl	800ef04 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800eb3e:	4805      	ldr	r0, [pc, #20]	@ (800eb54 <SendFreeBuf+0x38>)
 800eb40:	f000 f998 	bl	800ee74 <LST_is_empty>
 800eb44:	4603      	mov	r3, r0
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d0ec      	beq.n	800eb24 <SendFreeBuf+0x8>
  }

  return;
 800eb4a:	bf00      	nop
}
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	20000538 	.word	0x20000538
 800eb58:	20030000 	.word	0x20030000

0800eb5c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800eb60:	4805      	ldr	r0, [pc, #20]	@ (800eb78 <TL_TRACES_Init+0x1c>)
 800eb62:	f000 f977 	bl	800ee54 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800eb66:	4b05      	ldr	r3, [pc, #20]	@ (800eb7c <TL_TRACES_Init+0x20>)
 800eb68:	695b      	ldr	r3, [r3, #20]
 800eb6a:	4a03      	ldr	r2, [pc, #12]	@ (800eb78 <TL_TRACES_Init+0x1c>)
 800eb6c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800eb6e:	f002 fa89 	bl	8011084 <HW_IPCC_TRACES_Init>

  return;
 800eb72:	bf00      	nop
}
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	200300c0 	.word	0x200300c0
 800eb7c:	20030000 	.word	0x20030000

0800eb80 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800eb86:	e008      	b.n	800eb9a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800eb88:	1d3b      	adds	r3, r7, #4
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	4808      	ldr	r0, [pc, #32]	@ (800ebb0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800eb8e:	f000 fa00 	bl	800ef92 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	4618      	mov	r0, r3
 800eb96:	f000 f80d 	bl	800ebb4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800eb9a:	4805      	ldr	r0, [pc, #20]	@ (800ebb0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800eb9c:	f000 f96a 	bl	800ee74 <LST_is_empty>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d0f0      	beq.n	800eb88 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800eba6:	bf00      	nop
}
 800eba8:	3708      	adds	r7, #8
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	200300c0 	.word	0x200300c0

0800ebb4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ebbc:	bf00      	nop
 800ebbe:	370c      	adds	r7, #12
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr

0800ebc8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b087      	sub	sp, #28
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	4603      	mov	r3, r0
 800ebd0:	6039      	str	r1, [r7, #0]
 800ebd2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 800ebd4:	79fb      	ldrb	r3, [r7, #7]
 800ebd6:	2b06      	cmp	r3, #6
 800ebd8:	d845      	bhi.n	800ec66 <OutputDbgTrace+0x9e>
 800ebda:	a201      	add	r2, pc, #4	@ (adr r2, 800ebe0 <OutputDbgTrace+0x18>)
 800ebdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe0:	0800ebfd 	.word	0x0800ebfd
 800ebe4:	0800ec21 	.word	0x0800ec21
 800ebe8:	0800ec27 	.word	0x0800ec27
 800ebec:	0800ec3b 	.word	0x0800ec3b
 800ebf0:	0800ec47 	.word	0x0800ec47
 800ebf4:	0800ec4d 	.word	0x0800ec4d
 800ebf8:	0800ec5b 	.word	0x0800ec5b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	7a5b      	ldrb	r3, [r3, #9]
 800ec04:	2bff      	cmp	r3, #255	@ 0xff
 800ec06:	d005      	beq.n	800ec14 <OutputDbgTrace+0x4c>
 800ec08:	2bff      	cmp	r3, #255	@ 0xff
 800ec0a:	dc05      	bgt.n	800ec18 <OutputDbgTrace+0x50>
 800ec0c:	2b0e      	cmp	r3, #14
 800ec0e:	d005      	beq.n	800ec1c <OutputDbgTrace+0x54>
 800ec10:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ec12:	e001      	b.n	800ec18 <OutputDbgTrace+0x50>
          break;
 800ec14:	bf00      	nop
 800ec16:	e027      	b.n	800ec68 <OutputDbgTrace+0xa0>
          break;
 800ec18:	bf00      	nop
 800ec1a:	e025      	b.n	800ec68 <OutputDbgTrace+0xa0>
          break;
 800ec1c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ec1e:	e023      	b.n	800ec68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ec24:	e020      	b.n	800ec68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	7a5b      	ldrb	r3, [r3, #9]
 800ec2e:	2b0e      	cmp	r3, #14
 800ec30:	d001      	beq.n	800ec36 <OutputDbgTrace+0x6e>
 800ec32:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ec34:	e000      	b.n	800ec38 <OutputDbgTrace+0x70>
          break;
 800ec36:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec38:	e016      	b.n	800ec68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	7a5b      	ldrb	r3, [r3, #9]
 800ec42:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec44:	e010      	b.n	800ec68 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ec4a:	e00d      	b.n	800ec68 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	785b      	ldrb	r3, [r3, #1]
 800ec54:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 800ec56:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec58:	e006      	b.n	800ec68 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	7a5b      	ldrb	r3, [r3, #9]
 800ec62:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec64:	e000      	b.n	800ec68 <OutputDbgTrace+0xa0>

    default:
      break;
 800ec66:	bf00      	nop
  }

  return;
 800ec68:	bf00      	nop
}
 800ec6a:	371c      	adds	r7, #28
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800ec80:	215c      	movs	r1, #92	@ 0x5c
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f003 fc3e 	bl	8012504 <strrchr>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d007      	beq.n	800ec9e <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800ec8e:	215c      	movs	r1, #92	@ 0x5c
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f003 fc37 	bl	8012504 <strrchr>
 800ec96:	4603      	mov	r3, r0
 800ec98:	3301      	adds	r3, #1
 800ec9a:	60fb      	str	r3, [r7, #12]
 800ec9c:	e00d      	b.n	800ecba <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800ec9e:	212f      	movs	r1, #47	@ 0x2f
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f003 fc2f 	bl	8012504 <strrchr>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d006      	beq.n	800ecba <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800ecac:	212f      	movs	r1, #47	@ 0x2f
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f003 fc28 	bl	8012504 <strrchr>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ecba:	68fb      	ldr	r3, [r7, #12]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b086      	sub	sp, #24
 800ecc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecca:	f3ef 8310 	mrs	r3, PRIMASK
 800ecce:	60fb      	str	r3, [r7, #12]
  return(result);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800ecd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ecd4:	b672      	cpsid	i
}
 800ecd6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800ecd8:	1cbb      	adds	r3, r7, #2
 800ecda:	4619      	mov	r1, r3
 800ecdc:	4812      	ldr	r0, [pc, #72]	@ (800ed28 <DbgTrace_TxCpltCallback+0x64>)
 800ecde:	f000 fb9d 	bl	800f41c <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800ece2:	1cbb      	adds	r3, r7, #2
 800ece4:	4619      	mov	r1, r3
 800ece6:	4810      	ldr	r0, [pc, #64]	@ (800ed28 <DbgTrace_TxCpltCallback+0x64>)
 800ece8:	f000 fc87 	bl	800f5fa <CircularQueue_Sense>
 800ecec:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d00c      	beq.n	800ed0e <DbgTrace_TxCpltCallback+0x4a>
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	f383 8810 	msr	PRIMASK, r3
}
 800ecfe:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800ed00:	887b      	ldrh	r3, [r7, #2]
 800ed02:	4a0a      	ldr	r2, [pc, #40]	@ (800ed2c <DbgTrace_TxCpltCallback+0x68>)
 800ed04:	4619      	mov	r1, r3
 800ed06:	6938      	ldr	r0, [r7, #16]
 800ed08:	f7f2 f8c8 	bl	8000e9c <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800ed0c:	e008      	b.n	800ed20 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800ed0e:	4b08      	ldr	r3, [pc, #32]	@ (800ed30 <DbgTrace_TxCpltCallback+0x6c>)
 800ed10:	2201      	movs	r2, #1
 800ed12:	701a      	strb	r2, [r3, #0]
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f383 8810 	msr	PRIMASK, r3
}
 800ed1e:	bf00      	nop
}
 800ed20:	bf00      	nop
 800ed22:	3718      	adds	r7, #24
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	20000554 	.word	0x20000554
 800ed2c:	0800ecc5 	.word	0x0800ecc5
 800ed30:	2000009e 	.word	0x2000009e

0800ed34 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	60b9      	str	r1, [r7, #8]
 800ed3e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800ed40:	687a      	ldr	r2, [r7, #4]
 800ed42:	68b9      	ldr	r1, [r7, #8]
 800ed44:	68f8      	ldr	r0, [r7, #12]
 800ed46:	f000 f805 	bl	800ed54 <DbgTraceWrite>
 800ed4a:	4603      	mov	r3, r0
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3710      	adds	r7, #16
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b08a      	sub	sp, #40	@ 0x28
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800ed60:	2300      	movs	r3, #0
 800ed62:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed64:	f3ef 8310 	mrs	r3, PRIMASK
 800ed68:	61bb      	str	r3, [r7, #24]
  return(result);
 800ed6a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ed6c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed74:	d102      	bne.n	800ed7c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800ed76:	2300      	movs	r3, #0
 800ed78:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed7a:	e037      	b.n	800edec <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	d006      	beq.n	800ed90 <DbgTraceWrite+0x3c>
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	d003      	beq.n	800ed90 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800ed88:	f04f 33ff 	mov.w	r3, #4294967295
 800ed8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed8e:	e02d      	b.n	800edec <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d02a      	beq.n	800edec <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800ed9a:	b672      	cpsid	i
}
 800ed9c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	2301      	movs	r3, #1
 800eda4:	68b9      	ldr	r1, [r7, #8]
 800eda6:	4814      	ldr	r0, [pc, #80]	@ (800edf8 <DbgTraceWrite+0xa4>)
 800eda8:	f000 f912 	bl	800efd0 <CircularQueue_Add>
 800edac:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800edae:	69fb      	ldr	r3, [r7, #28]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d015      	beq.n	800ede0 <DbgTraceWrite+0x8c>
 800edb4:	4b11      	ldr	r3, [pc, #68]	@ (800edfc <DbgTraceWrite+0xa8>)
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d010      	beq.n	800ede0 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800edbe:	4b0f      	ldr	r3, [pc, #60]	@ (800edfc <DbgTraceWrite+0xa8>)
 800edc0:	2200      	movs	r2, #0
 800edc2:	701a      	strb	r2, [r3, #0]
 800edc4:	6a3b      	ldr	r3, [r7, #32]
 800edc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edc8:	697b      	ldr	r3, [r7, #20]
 800edca:	f383 8810 	msr	PRIMASK, r3
}
 800edce:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	4a0a      	ldr	r2, [pc, #40]	@ (800ee00 <DbgTraceWrite+0xac>)
 800edd6:	4619      	mov	r1, r3
 800edd8:	69f8      	ldr	r0, [r7, #28]
 800edda:	f7f2 f85f 	bl	8000e9c <DbgOutputTraces>
 800edde:	e005      	b.n	800edec <DbgTraceWrite+0x98>
 800ede0:	6a3b      	ldr	r3, [r7, #32]
 800ede2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	f383 8810 	msr	PRIMASK, r3
}
 800edea:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800edec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3728      	adds	r7, #40	@ 0x28
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
 800edf6:	bf00      	nop
 800edf8:	20000554 	.word	0x20000554
 800edfc:	2000009e 	.word	0x2000009e
 800ee00:	0800ecc5 	.word	0x0800ecc5

0800ee04 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ee04:	b480      	push	{r7}
 800ee06:	b085      	sub	sp, #20
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ee0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ee4c <OTP_Read+0x48>)
 800ee10:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ee12:	e002      	b.n	800ee1a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	3b08      	subs	r3, #8
 800ee18:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	3307      	adds	r3, #7
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	79fa      	ldrb	r2, [r7, #7]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d003      	beq.n	800ee2e <OTP_Read+0x2a>
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	4a09      	ldr	r2, [pc, #36]	@ (800ee50 <OTP_Read+0x4c>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d1f2      	bne.n	800ee14 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	3307      	adds	r3, #7
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	79fa      	ldrb	r2, [r7, #7]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d001      	beq.n	800ee3e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3714      	adds	r7, #20
 800ee44:	46bd      	mov	sp, r7
 800ee46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4a:	4770      	bx	lr
 800ee4c:	1fff73f8 	.word	0x1fff73f8
 800ee50:	1fff7000 	.word	0x1fff7000

0800ee54 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	687a      	ldr	r2, [r7, #4]
 800ee60:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	605a      	str	r2, [r3, #4]
}
 800ee68:	bf00      	nop
 800ee6a:	370c      	adds	r7, #12
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee72:	4770      	bx	lr

0800ee74 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b087      	sub	sp, #28
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee7c:	f3ef 8310 	mrs	r3, PRIMASK
 800ee80:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee82:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ee84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee86:	b672      	cpsid	i
}
 800ee88:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d102      	bne.n	800ee9a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ee94:	2301      	movs	r3, #1
 800ee96:	75fb      	strb	r3, [r7, #23]
 800ee98:	e001      	b.n	800ee9e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	75fb      	strb	r3, [r7, #23]
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	f383 8810 	msr	PRIMASK, r3
}
 800eea8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800eeaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	371c      	adds	r7, #28
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr

0800eeb8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b087      	sub	sp, #28
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eec2:	f3ef 8310 	mrs	r3, PRIMASK
 800eec6:	60fb      	str	r3, [r7, #12]
  return(result);
 800eec8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800eeca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eecc:	b672      	cpsid	i
}
 800eece:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681a      	ldr	r2, [r3, #0]
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	683a      	ldr	r2, [r7, #0]
 800eee2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	683a      	ldr	r2, [r7, #0]
 800eeea:	605a      	str	r2, [r3, #4]
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	f383 8810 	msr	PRIMASK, r3
}
 800eef6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800eef8:	bf00      	nop
 800eefa:	371c      	adds	r7, #28
 800eefc:	46bd      	mov	sp, r7
 800eefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef02:	4770      	bx	lr

0800ef04 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b087      	sub	sp, #28
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef0e:	f3ef 8310 	mrs	r3, PRIMASK
 800ef12:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef14:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ef16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef18:	b672      	cpsid	i
}
 800ef1a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	687a      	ldr	r2, [r7, #4]
 800ef20:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	685a      	ldr	r2, [r3, #4]
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	683a      	ldr	r2, [r7, #0]
 800ef2e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	683a      	ldr	r2, [r7, #0]
 800ef36:	601a      	str	r2, [r3, #0]
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	f383 8810 	msr	PRIMASK, r3
}
 800ef42:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ef44:	bf00      	nop
 800ef46:	371c      	adds	r7, #28
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b087      	sub	sp, #28
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef58:	f3ef 8310 	mrs	r3, PRIMASK
 800ef5c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ef60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ef62:	b672      	cpsid	i
}
 800ef64:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	6812      	ldr	r2, [r2, #0]
 800ef6e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	6852      	ldr	r2, [r2, #4]
 800ef78:	605a      	str	r2, [r3, #4]
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	f383 8810 	msr	PRIMASK, r3
}
 800ef84:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ef86:	bf00      	nop
 800ef88:	371c      	adds	r7, #28
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef90:	4770      	bx	lr

0800ef92 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ef92:	b580      	push	{r7, lr}
 800ef94:	b086      	sub	sp, #24
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
 800ef9a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef9c:	f3ef 8310 	mrs	r3, PRIMASK
 800efa0:	60fb      	str	r3, [r7, #12]
  return(result);
 800efa2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800efa4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800efa6:	b672      	cpsid	i
}
 800efa8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7ff ffca 	bl	800ef50 <LST_remove_node>
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	f383 8810 	msr	PRIMASK, r3
}
 800efc6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800efc8:	bf00      	nop
 800efca:	3718      	adds	r7, #24
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b08e      	sub	sp, #56	@ 0x38
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	603b      	str	r3, [r7, #0]
 800efdc:	4613      	mov	r3, r2
 800efde:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800efe0:	2300      	movs	r3, #0
 800efe2:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800efe4:	2300      	movs	r3, #0
 800efe6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800efe8:	2300      	movs	r3, #0
 800efea:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800efec:	2300      	movs	r3, #0
 800efee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eff0:	2300      	movs	r3, #0
 800eff2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800eff4:	2300      	movs	r3, #0
 800eff6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800eff8:	2300      	movs	r3, #0
 800effa:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	891b      	ldrh	r3, [r3, #8]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d101      	bne.n	800f008 <CircularQueue_Add+0x38>
 800f004:	2302      	movs	r3, #2
 800f006:	e000      	b.n	800f00a <CircularQueue_Add+0x3a>
 800f008:	2300      	movs	r3, #0
 800f00a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	695b      	ldr	r3, [r3, #20]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d029      	beq.n	800f068 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	891b      	ldrh	r3, [r3, #8]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d122      	bne.n	800f062 <CircularQueue_Add+0x92>
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	4413      	add	r3, r2
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	4618      	mov	r0, r3
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681a      	ldr	r2, [r3, #0]
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	691b      	ldr	r3, [r3, #16]
 800f032:	1c59      	adds	r1, r3, #1
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	4299      	cmp	r1, r3
 800f03a:	d306      	bcc.n	800f04a <CircularQueue_Add+0x7a>
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	6919      	ldr	r1, [r3, #16]
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	1acb      	subs	r3, r1, r3
 800f046:	3301      	adds	r3, #1
 800f048:	e002      	b.n	800f050 <CircularQueue_Add+0x80>
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	691b      	ldr	r3, [r3, #16]
 800f04e:	3301      	adds	r3, #1
 800f050:	4413      	add	r3, r2
 800f052:	781b      	ldrb	r3, [r3, #0]
 800f054:	021b      	lsls	r3, r3, #8
 800f056:	b29b      	uxth	r3, r3
 800f058:	4403      	add	r3, r0
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	3302      	adds	r3, #2
 800f05e:	b29b      	uxth	r3, r3
 800f060:	e001      	b.n	800f066 <CircularQueue_Add+0x96>
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	891b      	ldrh	r3, [r3, #8]
 800f066:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	891b      	ldrh	r3, [r3, #8]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d002      	beq.n	800f076 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	891b      	ldrh	r3, [r3, #8]
 800f074:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	691a      	ldr	r2, [r3, #16]
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d307      	bcc.n	800f092 <CircularQueue_Add+0xc2>
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	685a      	ldr	r2, [r3, #4]
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	6919      	ldr	r1, [r3, #16]
 800f08a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f08c:	440b      	add	r3, r1
 800f08e:	1ad3      	subs	r3, r2, r3
 800f090:	e000      	b.n	800f094 <CircularQueue_Add+0xc4>
 800f092:	2300      	movs	r3, #0
 800f094:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800f096:	88fa      	ldrh	r2, [r7, #6]
 800f098:	7ffb      	ldrb	r3, [r7, #31]
 800f09a:	4413      	add	r3, r2
 800f09c:	461a      	mov	r2, r3
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	fb02 f303 	mul.w	r3, r2, r3
 800f0a4:	69ba      	ldr	r2, [r7, #24]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d80b      	bhi.n	800f0c2 <CircularQueue_Add+0xf2>
 800f0aa:	88fa      	ldrh	r2, [r7, #6]
 800f0ac:	7ffb      	ldrb	r3, [r7, #31]
 800f0ae:	4413      	add	r3, r2
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0b8:	fb01 f202 	mul.w	r2, r1, r2
 800f0bc:	1a9b      	subs	r3, r3, r2
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	e000      	b.n	800f0c4 <CircularQueue_Add+0xf4>
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800f0c6:	7dfa      	ldrb	r2, [r7, #23]
 800f0c8:	7ffb      	ldrb	r3, [r7, #31]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	bf8c      	ite	hi
 800f0ce:	2301      	movhi	r3, #1
 800f0d0:	2300      	movls	r3, #0
 800f0d2:	b2db      	uxtb	r3, r3
 800f0d4:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800f0d6:	7fbb      	ldrb	r3, [r7, #30]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d008      	beq.n	800f0ee <CircularQueue_Add+0x11e>
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	7f1b      	ldrb	r3, [r3, #28]
 800f0e0:	f003 0301 	and.w	r3, r3, #1
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d002      	beq.n	800f0ee <CircularQueue_Add+0x11e>
 800f0e8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	e000      	b.n	800f0f0 <CircularQueue_Add+0x120>
 800f0ee:	8bbb      	ldrh	r3, [r7, #28]
 800f0f0:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800f0f2:	7fbb      	ldrb	r3, [r7, #30]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d008      	beq.n	800f10a <CircularQueue_Add+0x13a>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	7f1b      	ldrb	r3, [r3, #28]
 800f0fc:	f003 0302 	and.w	r3, r3, #2
 800f100:	2b00      	cmp	r3, #0
 800f102:	d002      	beq.n	800f10a <CircularQueue_Add+0x13a>
 800f104:	7ffb      	ldrb	r3, [r7, #31]
 800f106:	b29b      	uxth	r3, r3
 800f108:	e000      	b.n	800f10c <CircularQueue_Add+0x13c>
 800f10a:	8bbb      	ldrh	r3, [r7, #28]
 800f10c:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800f10e:	88fb      	ldrh	r3, [r7, #6]
 800f110:	2b00      	cmp	r3, #0
 800f112:	f000 817e 	beq.w	800f412 <CircularQueue_Add+0x442>
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	695a      	ldr	r2, [r3, #20]
 800f11a:	88f9      	ldrh	r1, [r7, #6]
 800f11c:	7ffb      	ldrb	r3, [r7, #31]
 800f11e:	440b      	add	r3, r1
 800f120:	4619      	mov	r1, r3
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	fb01 f303 	mul.w	r3, r1, r3
 800f128:	441a      	add	r2, r3
 800f12a:	8bbb      	ldrh	r3, [r7, #28]
 800f12c:	441a      	add	r2, r3
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	429a      	cmp	r2, r3
 800f134:	f200 816d 	bhi.w	800f412 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800f138:	2300      	movs	r3, #0
 800f13a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f13c:	e14a      	b.n	800f3d4 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	691a      	ldr	r2, [r3, #16]
 800f142:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f144:	441a      	add	r2, r3
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d307      	bcc.n	800f15e <CircularQueue_Add+0x18e>
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	691a      	ldr	r2, [r3, #16]
 800f152:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f154:	441a      	add	r2, r3
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	1ad3      	subs	r3, r2, r3
 800f15c:	e003      	b.n	800f166 <CircularQueue_Add+0x196>
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	691a      	ldr	r2, [r3, #16]
 800f162:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f164:	4413      	add	r3, r2
 800f166:	68fa      	ldr	r2, [r7, #12]
 800f168:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	691b      	ldr	r3, [r3, #16]
 800f16e:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	891b      	ldrh	r3, [r3, #8]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d130      	bne.n	800f1da <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f17e:	1c59      	adds	r1, r3, #1
 800f180:	6339      	str	r1, [r7, #48]	@ 0x30
 800f182:	4413      	add	r3, r2
 800f184:	88fa      	ldrh	r2, [r7, #6]
 800f186:	b2d2      	uxtb	r2, r2
 800f188:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f190:	429a      	cmp	r2, r3
 800f192:	d304      	bcc.n	800f19e <CircularQueue_Add+0x1ce>
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f19a:	1ad3      	subs	r3, r2, r3
 800f19c:	e000      	b.n	800f1a0 <CircularQueue_Add+0x1d0>
 800f19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a0:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800f1a2:	88fb      	ldrh	r3, [r7, #6]
 800f1a4:	0a1b      	lsrs	r3, r3, #8
 800f1a6:	b298      	uxth	r0, r3
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	681a      	ldr	r2, [r3, #0]
 800f1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ae:	1c59      	adds	r1, r3, #1
 800f1b0:	6339      	str	r1, [r7, #48]	@ 0x30
 800f1b2:	4413      	add	r3, r2
 800f1b4:	b2c2      	uxtb	r2, r0
 800f1b6:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d304      	bcc.n	800f1cc <CircularQueue_Add+0x1fc>
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1c8:	1ad3      	subs	r3, r2, r3
 800f1ca:	e000      	b.n	800f1ce <CircularQueue_Add+0x1fe>
 800f1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ce:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	695b      	ldr	r3, [r3, #20]
 800f1d4:	1c9a      	adds	r2, r3, #2
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800f1da:	88fa      	ldrh	r2, [r7, #6]
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	6859      	ldr	r1, [r3, #4]
 800f1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1e2:	1acb      	subs	r3, r1, r3
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	bf28      	it	cs
 800f1e8:	4613      	movcs	r3, r2
 800f1ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800f1ec:	88fb      	ldrh	r3, [r7, #6]
 800f1ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d007      	beq.n	800f204 <CircularQueue_Add+0x234>
 800f1f4:	88fb      	ldrh	r3, [r7, #6]
 800f1f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d225      	bcs.n	800f248 <CircularQueue_Add+0x278>
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	7f1b      	ldrb	r3, [r3, #28]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d121      	bne.n	800f248 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681a      	ldr	r2, [r3, #0]
 800f208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f20a:	18d0      	adds	r0, r2, r3
 800f20c:	88fb      	ldrh	r3, [r7, #6]
 800f20e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f210:	fb02 f303 	mul.w	r3, r2, r3
 800f214:	68ba      	ldr	r2, [r7, #8]
 800f216:	4413      	add	r3, r2
 800f218:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f21a:	4619      	mov	r1, r3
 800f21c:	f003 f9fb 	bl	8012616 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	695a      	ldr	r2, [r3, #20]
 800f224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f226:	441a      	add	r2, r3
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800f22c:	2300      	movs	r3, #0
 800f22e:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800f230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f232:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800f234:	88fa      	ldrh	r2, [r7, #6]
 800f236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f238:	1ad3      	subs	r3, r2, r3
 800f23a:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800f23c:	7ffb      	ldrb	r3, [r7, #31]
 800f23e:	b29a      	uxth	r2, r3
 800f240:	88fb      	ldrh	r3, [r7, #6]
 800f242:	4413      	add	r3, r2
 800f244:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f246:	e0a4      	b.n	800f392 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800f248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	f000 80a1 	beq.w	800f392 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	7f1b      	ldrb	r3, [r3, #28]
 800f254:	f003 0301 	and.w	r3, r3, #1
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d03a      	beq.n	800f2d2 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	891b      	ldrh	r3, [r3, #8]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d10d      	bne.n	800f280 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	681a      	ldr	r2, [r3, #0]
 800f268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f26a:	3b02      	subs	r3, #2
 800f26c:	4413      	add	r3, r2
 800f26e:	22ff      	movs	r2, #255	@ 0xff
 800f270:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681a      	ldr	r2, [r3, #0]
 800f276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f278:	3b01      	subs	r3, #1
 800f27a:	4413      	add	r3, r2
 800f27c:	22ff      	movs	r2, #255	@ 0xff
 800f27e:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	695a      	ldr	r2, [r3, #20]
 800f284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f286:	441a      	add	r2, r3
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800f28c:	2300      	movs	r3, #0
 800f28e:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800f290:	88fb      	ldrh	r3, [r7, #6]
 800f292:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800f294:	2300      	movs	r3, #0
 800f296:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	891b      	ldrh	r3, [r3, #8]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d16f      	bne.n	800f380 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2a6:	1c59      	adds	r1, r3, #1
 800f2a8:	6339      	str	r1, [r7, #48]	@ 0x30
 800f2aa:	4413      	add	r3, r2
 800f2ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f2ae:	b2d2      	uxtb	r2, r2
 800f2b0:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2b4:	0a18      	lsrs	r0, r3, #8
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2bc:	1c59      	adds	r1, r3, #1
 800f2be:	6339      	str	r1, [r7, #48]	@ 0x30
 800f2c0:	4413      	add	r3, r2
 800f2c2:	b2c2      	uxtb	r2, r0
 800f2c4:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	695b      	ldr	r3, [r3, #20]
 800f2ca:	1c9a      	adds	r2, r3, #2
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	615a      	str	r2, [r3, #20]
 800f2d0:	e056      	b.n	800f380 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	7f1b      	ldrb	r3, [r3, #28]
 800f2d6:	f003 0302 	and.w	r3, r3, #2
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d050      	beq.n	800f380 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	891b      	ldrh	r3, [r3, #8]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d14a      	bne.n	800f37c <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ec:	3b02      	subs	r3, #2
 800f2ee:	4413      	add	r3, r2
 800f2f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f2f2:	b2d2      	uxtb	r2, r2
 800f2f4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2f8:	0a19      	lsrs	r1, r3, #8
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681a      	ldr	r2, [r3, #0]
 800f2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f300:	3b01      	subs	r3, #1
 800f302:	4413      	add	r3, r2
 800f304:	b2ca      	uxtb	r2, r1
 800f306:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681a      	ldr	r2, [r3, #0]
 800f30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f30e:	18d0      	adds	r0, r2, r3
 800f310:	88fb      	ldrh	r3, [r7, #6]
 800f312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f314:	fb02 f303 	mul.w	r3, r2, r3
 800f318:	68ba      	ldr	r2, [r7, #8]
 800f31a:	4413      	add	r3, r2
 800f31c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f31e:	4619      	mov	r1, r3
 800f320:	f003 f979 	bl	8012616 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	695a      	ldr	r2, [r3, #20]
 800f328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f32a:	441a      	add	r2, r3
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800f330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f332:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800f334:	88fa      	ldrh	r2, [r7, #6]
 800f336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	699b      	ldr	r3, [r3, #24]
 800f340:	1c5a      	adds	r2, r3, #1
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800f346:	2300      	movs	r3, #0
 800f348:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f350:	1c59      	adds	r1, r3, #1
 800f352:	6339      	str	r1, [r7, #48]	@ 0x30
 800f354:	4413      	add	r3, r2
 800f356:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f358:	b2d2      	uxtb	r2, r2
 800f35a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f35e:	0a18      	lsrs	r0, r3, #8
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	681a      	ldr	r2, [r3, #0]
 800f364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f366:	1c59      	adds	r1, r3, #1
 800f368:	6339      	str	r1, [r7, #48]	@ 0x30
 800f36a:	4413      	add	r3, r2
 800f36c:	b2c2      	uxtb	r2, r0
 800f36e:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	695b      	ldr	r3, [r3, #20]
 800f374:	1c9a      	adds	r2, r3, #2
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	615a      	str	r2, [r3, #20]
 800f37a:	e001      	b.n	800f380 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800f37c:	2300      	movs	r3, #0
 800f37e:	e049      	b.n	800f414 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800f380:	7ffb      	ldrb	r3, [r7, #31]
 800f382:	b29a      	uxth	r2, r3
 800f384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f386:	b29b      	uxth	r3, r3
 800f388:	4413      	add	r3, r2
 800f38a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2200      	movs	r2, #0
 800f390:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800f392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f394:	2b00      	cmp	r3, #0
 800f396:	d015      	beq.n	800f3c4 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f39e:	18d0      	adds	r0, r2, r3
 800f3a0:	88fb      	ldrh	r3, [r7, #6]
 800f3a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3a4:	fb03 f202 	mul.w	r2, r3, r2
 800f3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3aa:	4413      	add	r3, r2
 800f3ac:	68ba      	ldr	r2, [r7, #8]
 800f3ae:	4413      	add	r3, r2
 800f3b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	f003 f92f 	bl	8012616 <memcpy>
        q->byteCount += NbBytesToCopy;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	695a      	ldr	r2, [r3, #20]
 800f3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3be:	441a      	add	r2, r3
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	699b      	ldr	r3, [r3, #24]
 800f3c8:	1c5a      	adds	r2, r3, #1
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800f3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3d0:	3301      	adds	r3, #1
 800f3d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f3d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	f4ff aeb0 	bcc.w	800f13e <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	6919      	ldr	r1, [r3, #16]
 800f3e6:	7ffb      	ldrb	r3, [r7, #31]
 800f3e8:	4419      	add	r1, r3
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	4299      	cmp	r1, r3
 800f3f0:	d307      	bcc.n	800f402 <CircularQueue_Add+0x432>
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	6919      	ldr	r1, [r3, #16]
 800f3f6:	7ffb      	ldrb	r3, [r7, #31]
 800f3f8:	4419      	add	r1, r3
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	1acb      	subs	r3, r1, r3
 800f400:	e003      	b.n	800f40a <CircularQueue_Add+0x43a>
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	6919      	ldr	r1, [r3, #16]
 800f406:	7ffb      	ldrb	r3, [r7, #31]
 800f408:	440b      	add	r3, r1
 800f40a:	4413      	add	r3, r2
 800f40c:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800f40e:	6a3b      	ldr	r3, [r7, #32]
 800f410:	e000      	b.n	800f414 <CircularQueue_Add+0x444>
    return NULL;
 800f412:	2300      	movs	r3, #0
}
 800f414:	4618      	mov	r0, r3
 800f416:	3738      	adds	r7, #56	@ 0x38
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b085      	sub	sp, #20
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800f426:	2300      	movs	r3, #0
 800f428:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800f42a:	2300      	movs	r3, #0
 800f42c:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	891b      	ldrh	r3, [r3, #8]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d101      	bne.n	800f43a <CircularQueue_Remove+0x1e>
 800f436:	2302      	movs	r3, #2
 800f438:	e000      	b.n	800f43c <CircularQueue_Remove+0x20>
 800f43a:	2300      	movs	r3, #0
 800f43c:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800f43e:	2300      	movs	r3, #0
 800f440:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	695b      	ldr	r3, [r3, #20]
 800f446:	2b00      	cmp	r3, #0
 800f448:	f000 80ca 	beq.w	800f5e0 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	891b      	ldrh	r3, [r3, #8]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d120      	bne.n	800f496 <CircularQueue_Remove+0x7a>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	68db      	ldr	r3, [r3, #12]
 800f45c:	4413      	add	r3, r2
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	4618      	mov	r0, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	1c59      	adds	r1, r3, #1
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	4299      	cmp	r1, r3
 800f472:	d306      	bcc.n	800f482 <CircularQueue_Remove+0x66>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	68d9      	ldr	r1, [r3, #12]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	1acb      	subs	r3, r1, r3
 800f47e:	3301      	adds	r3, #1
 800f480:	e002      	b.n	800f488 <CircularQueue_Remove+0x6c>
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	3301      	adds	r3, #1
 800f488:	4413      	add	r3, r2
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	021b      	lsls	r3, r3, #8
 800f48e:	b29b      	uxth	r3, r3
 800f490:	4403      	add	r3, r0
 800f492:	b29b      	uxth	r3, r3
 800f494:	e001      	b.n	800f49a <CircularQueue_Remove+0x7e>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	891b      	ldrh	r3, [r3, #8]
 800f49a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	7f1b      	ldrb	r3, [r3, #28]
 800f4a0:	f003 0301 	and.w	r3, r3, #1
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d056      	beq.n	800f556 <CircularQueue_Remove+0x13a>
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	7f1b      	ldrb	r3, [r3, #28]
 800f4ac:	f003 0302 	and.w	r3, r3, #2
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d150      	bne.n	800f556 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800f4b4:	897b      	ldrh	r3, [r7, #10]
 800f4b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d103      	bne.n	800f4c6 <CircularQueue_Remove+0xaa>
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	891b      	ldrh	r3, [r3, #8]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d012      	beq.n	800f4ec <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	68da      	ldr	r2, [r3, #12]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d941      	bls.n	800f556 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	891b      	ldrh	r3, [r3, #8]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d03d      	beq.n	800f556 <CircularQueue_Remove+0x13a>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	685a      	ldr	r2, [r3, #4]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	1ad3      	subs	r3, r2, r3
 800f4e4:	687a      	ldr	r2, [r7, #4]
 800f4e6:	8912      	ldrh	r2, [r2, #8]
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d234      	bcs.n	800f556 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	695a      	ldr	r2, [r3, #20]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	68d9      	ldr	r1, [r3, #12]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	1acb      	subs	r3, r1, r3
 800f4fa:	441a      	add	r2, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2200      	movs	r2, #0
 800f504:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	891b      	ldrh	r3, [r3, #8]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d120      	bne.n	800f550 <CircularQueue_Remove+0x134>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	4413      	add	r3, r2
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	4618      	mov	r0, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	68db      	ldr	r3, [r3, #12]
 800f524:	1c59      	adds	r1, r3, #1
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	685b      	ldr	r3, [r3, #4]
 800f52a:	4299      	cmp	r1, r3
 800f52c:	d306      	bcc.n	800f53c <CircularQueue_Remove+0x120>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	68d9      	ldr	r1, [r3, #12]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	1acb      	subs	r3, r1, r3
 800f538:	3301      	adds	r3, #1
 800f53a:	e002      	b.n	800f542 <CircularQueue_Remove+0x126>
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	3301      	adds	r3, #1
 800f542:	4413      	add	r3, r2
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	021b      	lsls	r3, r3, #8
 800f548:	b29b      	uxth	r3, r3
 800f54a:	4403      	add	r3, r0
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	e001      	b.n	800f554 <CircularQueue_Remove+0x138>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	891b      	ldrh	r3, [r3, #8]
 800f554:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681a      	ldr	r2, [r3, #0]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	68d9      	ldr	r1, [r3, #12]
 800f55e:	7a7b      	ldrb	r3, [r7, #9]
 800f560:	4419      	add	r1, r3
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	4299      	cmp	r1, r3
 800f568:	d307      	bcc.n	800f57a <CircularQueue_Remove+0x15e>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	68d9      	ldr	r1, [r3, #12]
 800f56e:	7a7b      	ldrb	r3, [r7, #9]
 800f570:	4419      	add	r1, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	685b      	ldr	r3, [r3, #4]
 800f576:	1acb      	subs	r3, r1, r3
 800f578:	e003      	b.n	800f582 <CircularQueue_Remove+0x166>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	68d9      	ldr	r1, [r3, #12]
 800f57e:	7a7b      	ldrb	r3, [r7, #9]
 800f580:	440b      	add	r3, r1
 800f582:	4413      	add	r3, r2
 800f584:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	695b      	ldr	r3, [r3, #20]
 800f58a:	8979      	ldrh	r1, [r7, #10]
 800f58c:	7a7a      	ldrb	r2, [r7, #9]
 800f58e:	440a      	add	r2, r1
 800f590:	1a9a      	subs	r2, r3, r2
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	695b      	ldr	r3, [r3, #20]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d01b      	beq.n	800f5d6 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	68da      	ldr	r2, [r3, #12]
 800f5a2:	897b      	ldrh	r3, [r7, #10]
 800f5a4:	441a      	add	r2, r3
 800f5a6:	7a7b      	ldrb	r3, [r7, #9]
 800f5a8:	441a      	add	r2, r3
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d309      	bcc.n	800f5c6 <CircularQueue_Remove+0x1aa>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	68da      	ldr	r2, [r3, #12]
 800f5b6:	897b      	ldrh	r3, [r7, #10]
 800f5b8:	441a      	add	r2, r3
 800f5ba:	7a7b      	ldrb	r3, [r7, #9]
 800f5bc:	441a      	add	r2, r3
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	1ad3      	subs	r3, r2, r3
 800f5c4:	e005      	b.n	800f5d2 <CircularQueue_Remove+0x1b6>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	68da      	ldr	r2, [r3, #12]
 800f5ca:	897b      	ldrh	r3, [r7, #10]
 800f5cc:	441a      	add	r2, r3
 800f5ce:	7a7b      	ldrb	r3, [r7, #9]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	699b      	ldr	r3, [r3, #24]
 800f5da:	1e5a      	subs	r2, r3, #1
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d002      	beq.n	800f5ec <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	897a      	ldrh	r2, [r7, #10]
 800f5ea:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800f5ec:	68fb      	ldr	r3, [r7, #12]
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3714      	adds	r7, #20
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr

0800f5fa <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800f5fa:	b480      	push	{r7}
 800f5fc:	b087      	sub	sp, #28
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
 800f602:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800f604:	2300      	movs	r3, #0
 800f606:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800f608:	2300      	movs	r3, #0
 800f60a:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	891b      	ldrh	r3, [r3, #8]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d101      	bne.n	800f618 <CircularQueue_Sense+0x1e>
 800f614:	2302      	movs	r3, #2
 800f616:	e000      	b.n	800f61a <CircularQueue_Sense+0x20>
 800f618:	2300      	movs	r3, #0
 800f61a:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800f61c:	2300      	movs	r3, #0
 800f61e:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800f620:	2300      	movs	r3, #0
 800f622:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	695b      	ldr	r3, [r3, #20]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	f000 808e 	beq.w	800f74a <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	891b      	ldrh	r3, [r3, #8]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d120      	bne.n	800f67e <CircularQueue_Sense+0x84>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	4413      	add	r3, r2
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	4618      	mov	r0, r3
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681a      	ldr	r2, [r3, #0]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	1c59      	adds	r1, r3, #1
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	685b      	ldr	r3, [r3, #4]
 800f658:	4299      	cmp	r1, r3
 800f65a:	d306      	bcc.n	800f66a <CircularQueue_Sense+0x70>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	68d9      	ldr	r1, [r3, #12]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	1acb      	subs	r3, r1, r3
 800f666:	3301      	adds	r3, #1
 800f668:	e002      	b.n	800f670 <CircularQueue_Sense+0x76>
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	3301      	adds	r3, #1
 800f670:	4413      	add	r3, r2
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	021b      	lsls	r3, r3, #8
 800f676:	b29b      	uxth	r3, r3
 800f678:	4403      	add	r3, r0
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	e001      	b.n	800f682 <CircularQueue_Sense+0x88>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	891b      	ldrh	r3, [r3, #8]
 800f682:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	7f1b      	ldrb	r3, [r3, #28]
 800f688:	f003 0301 	and.w	r3, r3, #1
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d047      	beq.n	800f720 <CircularQueue_Sense+0x126>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	7f1b      	ldrb	r3, [r3, #28]
 800f694:	f003 0302 	and.w	r3, r3, #2
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d141      	bne.n	800f720 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800f69c:	8a7b      	ldrh	r3, [r7, #18]
 800f69e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d103      	bne.n	800f6ae <CircularQueue_Sense+0xb4>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	891b      	ldrh	r3, [r3, #8]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d012      	beq.n	800f6d4 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	68da      	ldr	r2, [r3, #12]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d932      	bls.n	800f720 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	891b      	ldrh	r3, [r3, #8]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d02e      	beq.n	800f720 <CircularQueue_Sense+0x126>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	685a      	ldr	r2, [r3, #4]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	8912      	ldrh	r2, [r2, #8]
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d225      	bcs.n	800f720 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	891b      	ldrh	r3, [r3, #8]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d11c      	bne.n	800f71a <CircularQueue_Sense+0x120>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	4413      	add	r3, r2
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681a      	ldr	r2, [r3, #0]
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	1c59      	adds	r1, r3, #1
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	4299      	cmp	r1, r3
 800f6fa:	d305      	bcc.n	800f708 <CircularQueue_Sense+0x10e>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	685b      	ldr	r3, [r3, #4]
 800f700:	68f9      	ldr	r1, [r7, #12]
 800f702:	1acb      	subs	r3, r1, r3
 800f704:	3301      	adds	r3, #1
 800f706:	e001      	b.n	800f70c <CircularQueue_Sense+0x112>
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	3301      	adds	r3, #1
 800f70c:	4413      	add	r3, r2
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	021b      	lsls	r3, r3, #8
 800f712:	b29b      	uxth	r3, r3
 800f714:	4403      	add	r3, r0
 800f716:	b29b      	uxth	r3, r3
 800f718:	e001      	b.n	800f71e <CircularQueue_Sense+0x124>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	891b      	ldrh	r3, [r3, #8]
 800f71e:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681a      	ldr	r2, [r3, #0]
 800f724:	7af9      	ldrb	r1, [r7, #11]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	4419      	add	r1, r3
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	4299      	cmp	r1, r3
 800f730:	d306      	bcc.n	800f740 <CircularQueue_Sense+0x146>
 800f732:	7af9      	ldrb	r1, [r7, #11]
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	4419      	add	r1, r3
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	685b      	ldr	r3, [r3, #4]
 800f73c:	1acb      	subs	r3, r1, r3
 800f73e:	e002      	b.n	800f746 <CircularQueue_Sense+0x14c>
 800f740:	7af9      	ldrb	r1, [r7, #11]
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	440b      	add	r3, r1
 800f746:	4413      	add	r3, r2
 800f748:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d002      	beq.n	800f756 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	8a7a      	ldrh	r2, [r7, #18]
 800f754:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800f756:	697b      	ldr	r3, [r7, #20]
}
 800f758:	4618      	mov	r0, r3
 800f75a:	371c      	adds	r7, #28
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800f764:	b480      	push	{r7}
 800f766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800f768:	4b03      	ldr	r3, [pc, #12]	@ (800f778 <LL_FLASH_GetUDN+0x14>)
 800f76a:	681b      	ldr	r3, [r3, #0]
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	46bd      	mov	sp, r7
 800f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f774:	4770      	bx	lr
 800f776:	bf00      	nop
 800f778:	1fff7580 	.word	0x1fff7580

0800f77c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800f77c:	b480      	push	{r7}
 800f77e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800f780:	4b03      	ldr	r3, [pc, #12]	@ (800f790 <LL_FLASH_GetDeviceID+0x14>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	b2db      	uxtb	r3, r3
}
 800f786:	4618      	mov	r0, r3
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr
 800f790:	1fff7584 	.word	0x1fff7584

0800f794 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800f794:	b480      	push	{r7}
 800f796:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800f798:	4b03      	ldr	r3, [pc, #12]	@ (800f7a8 <LL_FLASH_GetSTCompanyID+0x14>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	0a1b      	lsrs	r3, r3, #8
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr
 800f7a8:	1fff7584 	.word	0x1fff7584

0800f7ac <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800f7ac:	b5b0      	push	{r4, r5, r7, lr}
 800f7ae:	b090      	sub	sp, #64	@ 0x40
 800f7b0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f7b2:	2392      	movs	r3, #146	@ 0x92
 800f7b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800f7b8:	4b45      	ldr	r3, [pc, #276]	@ (800f8d0 <APP_BLE_Init+0x124>)
 800f7ba:	1d3c      	adds	r4, r7, #4
 800f7bc:	461d      	mov	r5, r3
 800f7be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f7ce:	c403      	stmia	r4!, {r0, r1}
 800f7d0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800f7d2:	f000 fba5 	bl	800ff20 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800f7d6:	2101      	movs	r1, #1
 800f7d8:	2002      	movs	r0, #2
 800f7da:	f002 f9eb 	bl	8011bb4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800f7de:	4a3d      	ldr	r2, [pc, #244]	@ (800f8d4 <APP_BLE_Init+0x128>)
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	2002      	movs	r0, #2
 800f7e4:	f002 fb12 	bl	8011e0c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800f7e8:	1d3b      	adds	r3, r7, #4
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7fe fc34 	bl	800e058 <SHCI_C2_BLE_Init>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800f7f6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d012      	beq.n	800f824 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800f7fe:	4836      	ldr	r0, [pc, #216]	@ (800f8d8 <APP_BLE_Init+0x12c>)
 800f800:	f7ff fa38 	bl	800ec74 <DbgTraceGetFileName>
 800f804:	4601      	mov	r1, r0
 800f806:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 800f80a:	4a34      	ldr	r2, [pc, #208]	@ (800f8dc <APP_BLE_Init+0x130>)
 800f80c:	4834      	ldr	r0, [pc, #208]	@ (800f8e0 <APP_BLE_Init+0x134>)
 800f80e:	f002 fceb 	bl	80121e8 <iprintf>
 800f812:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f816:	4619      	mov	r1, r3
 800f818:	4832      	ldr	r0, [pc, #200]	@ (800f8e4 <APP_BLE_Init+0x138>)
 800f81a:	f002 fce5 	bl	80121e8 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800f81e:	f7f3 f997 	bl	8002b50 <Error_Handler>
 800f822:	e00c      	b.n	800f83e <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800f824:	482c      	ldr	r0, [pc, #176]	@ (800f8d8 <APP_BLE_Init+0x12c>)
 800f826:	f7ff fa25 	bl	800ec74 <DbgTraceGetFileName>
 800f82a:	4601      	mov	r1, r0
 800f82c:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 800f830:	4a2a      	ldr	r2, [pc, #168]	@ (800f8dc <APP_BLE_Init+0x130>)
 800f832:	482b      	ldr	r0, [pc, #172]	@ (800f8e0 <APP_BLE_Init+0x134>)
 800f834:	f002 fcd8 	bl	80121e8 <iprintf>
 800f838:	482b      	ldr	r0, [pc, #172]	@ (800f8e8 <APP_BLE_Init+0x13c>)
 800f83a:	f002 fcd5 	bl	80121e8 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800f83e:	f000 fb85 	bl	800ff4c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800f842:	f7fe fb63 	bl	800df0c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f846:	4b29      	ldr	r3, [pc, #164]	@ (800f8ec <APP_BLE_Init+0x140>)
 800f848:	2200      	movs	r2, #0
 800f84a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800f84e:	4b27      	ldr	r3, [pc, #156]	@ (800f8ec <APP_BLE_Init+0x140>)
 800f850:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f854:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800f856:	4a26      	ldr	r2, [pc, #152]	@ (800f8f0 <APP_BLE_Init+0x144>)
 800f858:	2100      	movs	r1, #0
 800f85a:	2001      	movs	r0, #1
 800f85c:	f002 fad6 	bl	8011e0c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800f860:	2006      	movs	r0, #6
 800f862:	f7fe f9c7 	bl	800dbf4 <aci_hal_set_radio_activity_mask>
 800f866:	4603      	mov	r3, r0
 800f868:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800f86c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f870:	2b00      	cmp	r3, #0
 800f872:	d010      	beq.n	800f896 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800f874:	4818      	ldr	r0, [pc, #96]	@ (800f8d8 <APP_BLE_Init+0x12c>)
 800f876:	f7ff f9fd 	bl	800ec74 <DbgTraceGetFileName>
 800f87a:	4601      	mov	r1, r0
 800f87c:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 800f880:	4a16      	ldr	r2, [pc, #88]	@ (800f8dc <APP_BLE_Init+0x130>)
 800f882:	4817      	ldr	r0, [pc, #92]	@ (800f8e0 <APP_BLE_Init+0x134>)
 800f884:	f002 fcb0 	bl	80121e8 <iprintf>
 800f888:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f88c:	4619      	mov	r1, r3
 800f88e:	4819      	ldr	r0, [pc, #100]	@ (800f8f4 <APP_BLE_Init+0x148>)
 800f890:	f002 fcaa 	bl	80121e8 <iprintf>
 800f894:	e00c      	b.n	800f8b0 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800f896:	4810      	ldr	r0, [pc, #64]	@ (800f8d8 <APP_BLE_Init+0x12c>)
 800f898:	f7ff f9ec 	bl	800ec74 <DbgTraceGetFileName>
 800f89c:	4601      	mov	r1, r0
 800f89e:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 800f8a2:	4a0e      	ldr	r2, [pc, #56]	@ (800f8dc <APP_BLE_Init+0x130>)
 800f8a4:	480e      	ldr	r0, [pc, #56]	@ (800f8e0 <APP_BLE_Init+0x134>)
 800f8a6:	f002 fc9f 	bl	80121e8 <iprintf>
 800f8aa:	4813      	ldr	r0, [pc, #76]	@ (800f8f8 <APP_BLE_Init+0x14c>)
 800f8ac:	f002 fc9c 	bl	80121e8 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800f8b0:	f000 ff7e 	bl	80107b0 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800f8b4:	4b0d      	ldr	r3, [pc, #52]	@ (800f8ec <APP_BLE_Init+0x140>)
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800f8ba:	4b0c      	ldr	r3, [pc, #48]	@ (800f8ec <APP_BLE_Init+0x140>)
 800f8bc:	2200      	movs	r2, #0
 800f8be:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800f8c0:	2001      	movs	r0, #1
 800f8c2:	f000 fdd7 	bl	8010474 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800f8c6:	bf00      	nop
}
 800f8c8:	3740      	adds	r7, #64	@ 0x40
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bdb0      	pop	{r4, r5, r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	08013910 	.word	0x08013910
 800f8d4:	0800e275 	.word	0x0800e275
 800f8d8:	08013804 	.word	0x08013804
 800f8dc:	08014c6c 	.word	0x08014c6c
 800f8e0:	08013820 	.word	0x08013820
 800f8e4:	08013834 	.word	0x08013834
 800f8e8:	0801386c 	.word	0x0801386c
 800f8ec:	2000057c 	.word	0x2000057c
 800f8f0:	080105f9 	.word	0x080105f9
 800f8f4:	08013894 	.word	0x08013894
 800f8f8:	080138d8 	.word	0x080138d8

0800f8fc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800f8fc:	b5b0      	push	{r4, r5, r7, lr}
 800f8fe:	b090      	sub	sp, #64	@ 0x40
 800f900:	af04      	add	r7, sp, #16
 800f902:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800f904:	2392      	movs	r3, #146	@ 0x92
 800f906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	3301      	adds	r3, #1
 800f90e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 800f910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	2bff      	cmp	r3, #255	@ 0xff
 800f916:	f000 8143 	beq.w	800fba0 <SVCCTL_App_Notification+0x2a4>
 800f91a:	2bff      	cmp	r3, #255	@ 0xff
 800f91c:	f300 82cd 	bgt.w	800feba <SVCCTL_App_Notification+0x5be>
 800f920:	2b3e      	cmp	r3, #62	@ 0x3e
 800f922:	d06a      	beq.n	800f9fa <SVCCTL_App_Notification+0xfe>
 800f924:	2b3e      	cmp	r3, #62	@ 0x3e
 800f926:	f300 82c8 	bgt.w	800feba <SVCCTL_App_Notification+0x5be>
 800f92a:	2b05      	cmp	r3, #5
 800f92c:	d002      	beq.n	800f934 <SVCCTL_App_Notification+0x38>
 800f92e:	2b10      	cmp	r3, #16
 800f930:	d042      	beq.n	800f9b8 <SVCCTL_App_Notification+0xbc>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800f932:	e2c2      	b.n	800feba <SVCCTL_App_Notification+0x5be>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800f934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f936:	3302      	adds	r3, #2
 800f938:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f940:	b29a      	uxth	r2, r3
 800f942:	4bab      	ldr	r3, [pc, #684]	@ (800fbf0 <SVCCTL_App_Notification+0x2f4>)
 800f944:	8adb      	ldrh	r3, [r3, #22]
 800f946:	429a      	cmp	r2, r3
 800f948:	d128      	bne.n	800f99c <SVCCTL_App_Notification+0xa0>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800f94a:	4ba9      	ldr	r3, [pc, #676]	@ (800fbf0 <SVCCTL_App_Notification+0x2f4>)
 800f94c:	2200      	movs	r2, #0
 800f94e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f950:	4ba7      	ldr	r3, [pc, #668]	@ (800fbf0 <SVCCTL_App_Notification+0x2f4>)
 800f952:	2200      	movs	r2, #0
 800f954:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800f958:	48a6      	ldr	r0, [pc, #664]	@ (800fbf4 <SVCCTL_App_Notification+0x2f8>)
 800f95a:	f7ff f98b 	bl	800ec74 <DbgTraceGetFileName>
 800f95e:	4601      	mov	r1, r0
 800f960:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 800f964:	4aa4      	ldr	r2, [pc, #656]	@ (800fbf8 <SVCCTL_App_Notification+0x2fc>)
 800f966:	48a5      	ldr	r0, [pc, #660]	@ (800fbfc <SVCCTL_App_Notification+0x300>)
 800f968:	f002 fc3e 	bl	80121e8 <iprintf>
 800f96c:	48a4      	ldr	r0, [pc, #656]	@ (800fc00 <SVCCTL_App_Notification+0x304>)
 800f96e:	f002 fcab 	bl	80122c8 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800f972:	48a0      	ldr	r0, [pc, #640]	@ (800fbf4 <SVCCTL_App_Notification+0x2f8>)
 800f974:	f7ff f97e 	bl	800ec74 <DbgTraceGetFileName>
 800f978:	4601      	mov	r1, r0
 800f97a:	f240 13bb 	movw	r3, #443	@ 0x1bb
 800f97e:	4a9e      	ldr	r2, [pc, #632]	@ (800fbf8 <SVCCTL_App_Notification+0x2fc>)
 800f980:	489e      	ldr	r0, [pc, #632]	@ (800fbfc <SVCCTL_App_Notification+0x300>)
 800f982:	f002 fc31 	bl	80121e8 <iprintf>
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	4619      	mov	r1, r3
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	78db      	ldrb	r3, [r3, #3]
 800f994:	461a      	mov	r2, r3
 800f996:	489b      	ldr	r0, [pc, #620]	@ (800fc04 <SVCCTL_App_Notification+0x308>)
 800f998:	f002 fc26 	bl	80121e8 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800f99c:	2001      	movs	r0, #1
 800f99e:	f000 fd69 	bl	8010474 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800f9a2:	4b99      	ldr	r3, [pc, #612]	@ (800fc08 <SVCCTL_App_Notification+0x30c>)
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f9a8:	4b91      	ldr	r3, [pc, #580]	@ (800fbf0 <SVCCTL_App_Notification+0x2f4>)
 800f9aa:	8ada      	ldrh	r2, [r3, #22]
 800f9ac:	4b96      	ldr	r3, [pc, #600]	@ (800fc08 <SVCCTL_App_Notification+0x30c>)
 800f9ae:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800f9b0:	4895      	ldr	r0, [pc, #596]	@ (800fc08 <SVCCTL_App_Notification+0x30c>)
 800f9b2:	f000 fee9 	bl	8010788 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800f9b6:	e283      	b.n	800fec0 <SVCCTL_App_Notification+0x5c4>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 800f9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ba:	3302      	adds	r3, #2
 800f9bc:	60fb      	str	r3, [r7, #12]
      APP_DBG_MSG(">>== HCI_HARDWARE_ERROR_EVT_CODE\n");
 800f9be:	488d      	ldr	r0, [pc, #564]	@ (800fbf4 <SVCCTL_App_Notification+0x2f8>)
 800f9c0:	f7ff f958 	bl	800ec74 <DbgTraceGetFileName>
 800f9c4:	4601      	mov	r1, r0
 800f9c6:	f240 13dd 	movw	r3, #477	@ 0x1dd
 800f9ca:	4a8b      	ldr	r2, [pc, #556]	@ (800fbf8 <SVCCTL_App_Notification+0x2fc>)
 800f9cc:	488b      	ldr	r0, [pc, #556]	@ (800fbfc <SVCCTL_App_Notification+0x300>)
 800f9ce:	f002 fc0b 	bl	80121e8 <iprintf>
 800f9d2:	488e      	ldr	r0, [pc, #568]	@ (800fc0c <SVCCTL_App_Notification+0x310>)
 800f9d4:	f002 fc78 	bl	80122c8 <puts>
      APP_DBG_MSG("Hardware Code = 0x%02X\n",p_hardware_error_event->Hardware_Code);
 800f9d8:	4886      	ldr	r0, [pc, #536]	@ (800fbf4 <SVCCTL_App_Notification+0x2f8>)
 800f9da:	f7ff f94b 	bl	800ec74 <DbgTraceGetFileName>
 800f9de:	4601      	mov	r1, r0
 800f9e0:	f44f 73ef 	mov.w	r3, #478	@ 0x1de
 800f9e4:	4a84      	ldr	r2, [pc, #528]	@ (800fbf8 <SVCCTL_App_Notification+0x2fc>)
 800f9e6:	4885      	ldr	r0, [pc, #532]	@ (800fbfc <SVCCTL_App_Notification+0x300>)
 800f9e8:	f002 fbfe 	bl	80121e8 <iprintf>
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	4887      	ldr	r0, [pc, #540]	@ (800fc10 <SVCCTL_App_Notification+0x314>)
 800f9f4:	f002 fbf8 	bl	80121e8 <iprintf>
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 800f9f8:	e262      	b.n	800fec0 <SVCCTL_App_Notification+0x5c4>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800f9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9fc:	3302      	adds	r3, #2
 800f9fe:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800fa00:	69bb      	ldr	r3, [r7, #24]
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	d042      	beq.n	800fa8e <SVCCTL_App_Notification+0x192>
 800fa08:	2b03      	cmp	r3, #3
 800fa0a:	f040 80c7 	bne.w	800fb9c <SVCCTL_App_Notification+0x2a0>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800fa0e:	69bb      	ldr	r3, [r7, #24]
 800fa10:	3301      	adds	r3, #1
 800fa12:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800fa14:	4877      	ldr	r0, [pc, #476]	@ (800fbf4 <SVCCTL_App_Notification+0x2f8>)
 800fa16:	f7ff f92d 	bl	800ec74 <DbgTraceGetFileName>
 800fa1a:	4601      	mov	r1, r0
 800fa1c:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 800fa20:	4a75      	ldr	r2, [pc, #468]	@ (800fbf8 <SVCCTL_App_Notification+0x2fc>)
 800fa22:	4876      	ldr	r0, [pc, #472]	@ (800fbfc <SVCCTL_App_Notification+0x300>)
 800fa24:	f002 fbe0 	bl	80121e8 <iprintf>
 800fa28:	487a      	ldr	r0, [pc, #488]	@ (800fc14 <SVCCTL_App_Notification+0x318>)
 800fa2a:	f002 fc4d 	bl	80122c8 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800fa2e:	4871      	ldr	r0, [pc, #452]	@ (800fbf4 <SVCCTL_App_Notification+0x2f8>)
 800fa30:	f7ff f920 	bl	800ec74 <DbgTraceGetFileName>
 800fa34:	4601      	mov	r1, r0
 800fa36:	f240 13f1 	movw	r3, #497	@ 0x1f1
 800fa3a:	4a6f      	ldr	r2, [pc, #444]	@ (800fbf8 <SVCCTL_App_Notification+0x2fc>)
 800fa3c:	486f      	ldr	r0, [pc, #444]	@ (800fbfc <SVCCTL_App_Notification+0x300>)
 800fa3e:	f002 fbd3 	bl	80121e8 <iprintf>
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7f0 fd42 	bl	80004d4 <__aeabi_i2d>
 800fa50:	f04f 0200 	mov.w	r2, #0
 800fa54:	4b70      	ldr	r3, [pc, #448]	@ (800fc18 <SVCCTL_App_Notification+0x31c>)
 800fa56:	f7f0 fda7 	bl	80005a8 <__aeabi_dmul>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	4610      	mov	r0, r2
 800fa60:	4619      	mov	r1, r3
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	461c      	mov	r4, r3
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	461a      	mov	r2, r3
 800fa76:	4613      	mov	r3, r2
 800fa78:	009b      	lsls	r3, r3, #2
 800fa7a:	4413      	add	r3, r2
 800fa7c:	005b      	lsls	r3, r3, #1
 800fa7e:	9301      	str	r3, [sp, #4]
 800fa80:	9400      	str	r4, [sp, #0]
 800fa82:	4602      	mov	r2, r0
 800fa84:	460b      	mov	r3, r1
 800fa86:	4865      	ldr	r0, [pc, #404]	@ (800fc1c <SVCCTL_App_Notification+0x320>)
 800fa88:	f002 fbae 	bl	80121e8 <iprintf>
          break;
 800fa8c:	e087      	b.n	800fb9e <SVCCTL_App_Notification+0x2a2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800fa8e:	69bb      	ldr	r3, [r7, #24]
 800fa90:	3301      	adds	r3, #1
 800fa92:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800fa94:	4857      	ldr	r0, [pc, #348]	@ (800fbf4 <SVCCTL_App_Notification+0x2f8>)
 800fa96:	f7ff f8ed 	bl	800ec74 <DbgTraceGetFileName>
 800fa9a:	4601      	mov	r1, r0
 800fa9c:	f240 2303 	movw	r3, #515	@ 0x203
 800faa0:	4a55      	ldr	r2, [pc, #340]	@ (800fbf8 <SVCCTL_App_Notification+0x2fc>)
 800faa2:	4856      	ldr	r0, [pc, #344]	@ (800fbfc <SVCCTL_App_Notification+0x300>)
 800faa4:	f002 fba0 	bl	80121e8 <iprintf>
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800faae:	b29b      	uxth	r3, r3
 800fab0:	4619      	mov	r1, r3
 800fab2:	485b      	ldr	r0, [pc, #364]	@ (800fc20 <SVCCTL_App_Notification+0x324>)
 800fab4:	f002 fb98 	bl	80121e8 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800fab8:	484e      	ldr	r0, [pc, #312]	@ (800fbf4 <SVCCTL_App_Notification+0x2f8>)
 800faba:	f7ff f8db 	bl	800ec74 <DbgTraceGetFileName>
 800fabe:	4601      	mov	r1, r0
 800fac0:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800fac4:	4a4c      	ldr	r2, [pc, #304]	@ (800fbf8 <SVCCTL_App_Notification+0x2fc>)
 800fac6:	484d      	ldr	r0, [pc, #308]	@ (800fbfc <SVCCTL_App_Notification+0x300>)
 800fac8:	f002 fb8e 	bl	80121e8 <iprintf>
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	7a9b      	ldrb	r3, [r3, #10]
 800fad0:	4618      	mov	r0, r3
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	7a5b      	ldrb	r3, [r3, #9]
 800fad6:	461c      	mov	r4, r3
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	7a1b      	ldrb	r3, [r3, #8]
 800fadc:	461d      	mov	r5, r3
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	79db      	ldrb	r3, [r3, #7]
 800fae2:	461a      	mov	r2, r3
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	799b      	ldrb	r3, [r3, #6]
 800fae8:	4619      	mov	r1, r3
 800faea:	693b      	ldr	r3, [r7, #16]
 800faec:	795b      	ldrb	r3, [r3, #5]
 800faee:	9302      	str	r3, [sp, #8]
 800faf0:	9101      	str	r1, [sp, #4]
 800faf2:	9200      	str	r2, [sp, #0]
 800faf4:	462b      	mov	r3, r5
 800faf6:	4622      	mov	r2, r4
 800faf8:	4601      	mov	r1, r0
 800fafa:	484a      	ldr	r0, [pc, #296]	@ (800fc24 <SVCCTL_App_Notification+0x328>)
 800fafc:	f002 fb74 	bl	80121e8 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800fb00:	483c      	ldr	r0, [pc, #240]	@ (800fbf4 <SVCCTL_App_Notification+0x2f8>)
 800fb02:	f7ff f8b7 	bl	800ec74 <DbgTraceGetFileName>
 800fb06:	4601      	mov	r1, r0
 800fb08:	f240 230b 	movw	r3, #523	@ 0x20b
 800fb0c:	4a3a      	ldr	r2, [pc, #232]	@ (800fbf8 <SVCCTL_App_Notification+0x2fc>)
 800fb0e:	483b      	ldr	r0, [pc, #236]	@ (800fbfc <SVCCTL_App_Notification+0x300>)
 800fb10:	f002 fb6a 	bl	80121e8 <iprintf>
 800fb14:	693b      	ldr	r3, [r7, #16]
 800fb16:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7f0 fcd9 	bl	80004d4 <__aeabi_i2d>
 800fb22:	f04f 0200 	mov.w	r2, #0
 800fb26:	4b3c      	ldr	r3, [pc, #240]	@ (800fc18 <SVCCTL_App_Notification+0x31c>)
 800fb28:	f7f0 fd3e 	bl	80005a8 <__aeabi_dmul>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	460b      	mov	r3, r1
 800fb30:	4610      	mov	r0, r2
 800fb32:	4619      	mov	r1, r3
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	461c      	mov	r4, r3
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	461a      	mov	r2, r3
 800fb48:	4613      	mov	r3, r2
 800fb4a:	009b      	lsls	r3, r3, #2
 800fb4c:	4413      	add	r3, r2
 800fb4e:	005b      	lsls	r3, r3, #1
 800fb50:	9301      	str	r3, [sp, #4]
 800fb52:	9400      	str	r4, [sp, #0]
 800fb54:	4602      	mov	r2, r0
 800fb56:	460b      	mov	r3, r1
 800fb58:	4830      	ldr	r0, [pc, #192]	@ (800fc1c <SVCCTL_App_Notification+0x320>)
 800fb5a:	f002 fb45 	bl	80121e8 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800fb5e:	4b24      	ldr	r3, [pc, #144]	@ (800fbf0 <SVCCTL_App_Notification+0x2f4>)
 800fb60:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800fb64:	2b04      	cmp	r3, #4
 800fb66:	d104      	bne.n	800fb72 <SVCCTL_App_Notification+0x276>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800fb68:	4b21      	ldr	r3, [pc, #132]	@ (800fbf0 <SVCCTL_App_Notification+0x2f4>)
 800fb6a:	2206      	movs	r2, #6
 800fb6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800fb70:	e003      	b.n	800fb7a <SVCCTL_App_Notification+0x27e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800fb72:	4b1f      	ldr	r3, [pc, #124]	@ (800fbf0 <SVCCTL_App_Notification+0x2f4>)
 800fb74:	2205      	movs	r2, #5
 800fb76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800fb7a:	693b      	ldr	r3, [r7, #16]
 800fb7c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fb80:	b29a      	uxth	r2, r3
 800fb82:	4b1b      	ldr	r3, [pc, #108]	@ (800fbf0 <SVCCTL_App_Notification+0x2f4>)
 800fb84:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800fb86:	4b20      	ldr	r3, [pc, #128]	@ (800fc08 <SVCCTL_App_Notification+0x30c>)
 800fb88:	2200      	movs	r2, #0
 800fb8a:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800fb8c:	4b18      	ldr	r3, [pc, #96]	@ (800fbf0 <SVCCTL_App_Notification+0x2f4>)
 800fb8e:	8ada      	ldrh	r2, [r3, #22]
 800fb90:	4b1d      	ldr	r3, [pc, #116]	@ (800fc08 <SVCCTL_App_Notification+0x30c>)
 800fb92:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800fb94:	481c      	ldr	r0, [pc, #112]	@ (800fc08 <SVCCTL_App_Notification+0x30c>)
 800fb96:	f000 fdf7 	bl	8010788 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800fb9a:	e000      	b.n	800fb9e <SVCCTL_App_Notification+0x2a2>
          break;
 800fb9c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800fb9e:	e18f      	b.n	800fec0 <SVCCTL_App_Notification+0x5c4>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800fba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fba2:	3302      	adds	r3, #2
 800fba4:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800fba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fba8:	881b      	ldrh	r3, [r3, #0]
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	f000 814a 	beq.w	800fe4a <SVCCTL_App_Notification+0x54e>
 800fbb6:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	f300 817f 	bgt.w	800febe <SVCCTL_App_Notification+0x5c2>
 800fbc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fbc4:	f000 8175 	beq.w	800feb2 <SVCCTL_App_Notification+0x5b6>
 800fbc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fbcc:	f300 8177 	bgt.w	800febe <SVCCTL_App_Notification+0x5c2>
 800fbd0:	f240 420a 	movw	r2, #1034	@ 0x40a
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	f300 8172 	bgt.w	800febe <SVCCTL_App_Notification+0x5c2>
 800fbda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fbde:	dc23      	bgt.n	800fc28 <SVCCTL_App_Notification+0x32c>
 800fbe0:	2b04      	cmp	r3, #4
 800fbe2:	f000 8168 	beq.w	800feb6 <SVCCTL_App_Notification+0x5ba>
 800fbe6:	2b06      	cmp	r3, #6
 800fbe8:	f000 8142 	beq.w	800fe70 <SVCCTL_App_Notification+0x574>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800fbec:	e167      	b.n	800febe <SVCCTL_App_Notification+0x5c2>
 800fbee:	bf00      	nop
 800fbf0:	2000057c 	.word	0x2000057c
 800fbf4:	08013804 	.word	0x08013804
 800fbf8:	08014c7c 	.word	0x08014c7c
 800fbfc:	08013820 	.word	0x08013820
 800fc00:	0801394c 	.word	0x0801394c
 800fc04:	08013978 	.word	0x08013978
 800fc08:	20000600 	.word	0x20000600
 800fc0c:	080139b4 	.word	0x080139b4
 800fc10:	080139d8 	.word	0x080139d8
 800fc14:	080139f0 	.word	0x080139f0
 800fc18:	3ff40000 	.word	0x3ff40000
 800fc1c:	08013a24 	.word	0x08013a24
 800fc20:	08013a90 	.word	0x08013a90
 800fc24:	08013ad8 	.word	0x08013ad8
      switch (p_blecore_evt->ecode)
 800fc28:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800fc2c:	2b09      	cmp	r3, #9
 800fc2e:	f200 8146 	bhi.w	800febe <SVCCTL_App_Notification+0x5c2>
 800fc32:	a201      	add	r2, pc, #4	@ (adr r2, 800fc38 <SVCCTL_App_Notification+0x33c>)
 800fc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc38:	0800fdc5 	.word	0x0800fdc5
 800fc3c:	0800fc99 	.word	0x0800fc99
 800fc40:	0800febf 	.word	0x0800febf
 800fc44:	0800febf 	.word	0x0800febf
 800fc48:	0800febf 	.word	0x0800febf
 800fc4c:	0800febf 	.word	0x0800febf
 800fc50:	0800fc61 	.word	0x0800fc61
 800fc54:	0800febf 	.word	0x0800febf
 800fc58:	0800fd0b 	.word	0x0800fd0b
 800fc5c:	0800fc7d 	.word	0x0800fc7d
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800fc60:	489a      	ldr	r0, [pc, #616]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fc62:	f7ff f807 	bl	800ec74 <DbgTraceGetFileName>
 800fc66:	4601      	mov	r1, r0
 800fc68:	f240 234d 	movw	r3, #589	@ 0x24d
 800fc6c:	4a98      	ldr	r2, [pc, #608]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fc6e:	4899      	ldr	r0, [pc, #612]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fc70:	f002 faba 	bl	80121e8 <iprintf>
 800fc74:	4898      	ldr	r0, [pc, #608]	@ (800fed8 <SVCCTL_App_Notification+0x5dc>)
 800fc76:	f002 fab7 	bl	80121e8 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800fc7a:	e11d      	b.n	800feb8 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800fc7c:	4893      	ldr	r0, [pc, #588]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fc7e:	f7fe fff9 	bl	800ec74 <DbgTraceGetFileName>
 800fc82:	4601      	mov	r1, r0
 800fc84:	f240 235d 	movw	r3, #605	@ 0x25d
 800fc88:	4a91      	ldr	r2, [pc, #580]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fc8a:	4892      	ldr	r0, [pc, #584]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fc8c:	f002 faac 	bl	80121e8 <iprintf>
 800fc90:	4892      	ldr	r0, [pc, #584]	@ (800fedc <SVCCTL_App_Notification+0x5e0>)
 800fc92:	f002 fb19 	bl	80122c8 <puts>
          break;
 800fc96:	e10f      	b.n	800feb8 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800fc98:	488c      	ldr	r0, [pc, #560]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fc9a:	f7fe ffeb 	bl	800ec74 <DbgTraceGetFileName>
 800fc9e:	4601      	mov	r1, r0
 800fca0:	f44f 7319 	mov.w	r3, #612	@ 0x264
 800fca4:	4a8a      	ldr	r2, [pc, #552]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fca6:	488b      	ldr	r0, [pc, #556]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fca8:	f002 fa9e 	bl	80121e8 <iprintf>
 800fcac:	488c      	ldr	r0, [pc, #560]	@ (800fee0 <SVCCTL_App_Notification+0x5e4>)
 800fcae:	f002 fb0b 	bl	80122c8 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800fcb2:	4b8c      	ldr	r3, [pc, #560]	@ (800fee4 <SVCCTL_App_Notification+0x5e8>)
 800fcb4:	8adb      	ldrh	r3, [r3, #22]
 800fcb6:	498c      	ldr	r1, [pc, #560]	@ (800fee8 <SVCCTL_App_Notification+0x5ec>)
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f7fd f99d 	bl	800cff8 <aci_gap_pass_key_resp>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800fcc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d010      	beq.n	800fcee <SVCCTL_App_Notification+0x3f2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800fccc:	487f      	ldr	r0, [pc, #508]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fcce:	f7fe ffd1 	bl	800ec74 <DbgTraceGetFileName>
 800fcd2:	4601      	mov	r1, r0
 800fcd4:	f240 2369 	movw	r3, #617	@ 0x269
 800fcd8:	4a7d      	ldr	r2, [pc, #500]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fcda:	487e      	ldr	r0, [pc, #504]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fcdc:	f002 fa84 	bl	80121e8 <iprintf>
 800fce0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fce4:	4619      	mov	r1, r3
 800fce6:	4881      	ldr	r0, [pc, #516]	@ (800feec <SVCCTL_App_Notification+0x5f0>)
 800fce8:	f002 fa7e 	bl	80121e8 <iprintf>
          break;
 800fcec:	e0e4      	b.n	800feb8 <SVCCTL_App_Notification+0x5bc>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800fcee:	4877      	ldr	r0, [pc, #476]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fcf0:	f7fe ffc0 	bl	800ec74 <DbgTraceGetFileName>
 800fcf4:	4601      	mov	r1, r0
 800fcf6:	f240 236d 	movw	r3, #621	@ 0x26d
 800fcfa:	4a75      	ldr	r2, [pc, #468]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fcfc:	4875      	ldr	r0, [pc, #468]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fcfe:	f002 fa73 	bl	80121e8 <iprintf>
 800fd02:	487b      	ldr	r0, [pc, #492]	@ (800fef0 <SVCCTL_App_Notification+0x5f4>)
 800fd04:	f002 fae0 	bl	80122c8 <puts>
          break;
 800fd08:	e0d6      	b.n	800feb8 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800fd0a:	4870      	ldr	r0, [pc, #448]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fd0c:	f7fe ffb2 	bl	800ec74 <DbgTraceGetFileName>
 800fd10:	4601      	mov	r1, r0
 800fd12:	f240 2375 	movw	r3, #629	@ 0x275
 800fd16:	4a6e      	ldr	r2, [pc, #440]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fd18:	486e      	ldr	r0, [pc, #440]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fd1a:	f002 fa65 	bl	80121e8 <iprintf>
 800fd1e:	4875      	ldr	r0, [pc, #468]	@ (800fef4 <SVCCTL_App_Notification+0x5f8>)
 800fd20:	f002 fad2 	bl	80122c8 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800fd24:	4869      	ldr	r0, [pc, #420]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fd26:	f7fe ffa5 	bl	800ec74 <DbgTraceGetFileName>
 800fd2a:	4601      	mov	r1, r0
 800fd2c:	f240 2376 	movw	r3, #630	@ 0x276
 800fd30:	4a67      	ldr	r2, [pc, #412]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fd32:	4868      	ldr	r0, [pc, #416]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fd34:	f002 fa58 	bl	80121e8 <iprintf>
 800fd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd3a:	3302      	adds	r3, #2
 800fd3c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800fd40:	4619      	mov	r1, r3
 800fd42:	486d      	ldr	r0, [pc, #436]	@ (800fef8 <SVCCTL_App_Notification+0x5fc>)
 800fd44:	f002 fa50 	bl	80121e8 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800fd48:	4860      	ldr	r0, [pc, #384]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fd4a:	f7fe ff93 	bl	800ec74 <DbgTraceGetFileName>
 800fd4e:	4601      	mov	r1, r0
 800fd50:	f44f 731e 	mov.w	r3, #632	@ 0x278
 800fd54:	4a5e      	ldr	r2, [pc, #376]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fd56:	485f      	ldr	r0, [pc, #380]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fd58:	f002 fa46 	bl	80121e8 <iprintf>
 800fd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd5e:	3302      	adds	r3, #2
 800fd60:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800fd64:	4619      	mov	r1, r3
 800fd66:	4865      	ldr	r0, [pc, #404]	@ (800fefc <SVCCTL_App_Notification+0x600>)
 800fd68:	f002 fa3e 	bl	80121e8 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800fd6c:	4b5d      	ldr	r3, [pc, #372]	@ (800fee4 <SVCCTL_App_Notification+0x5e8>)
 800fd6e:	8adb      	ldrh	r3, [r3, #22]
 800fd70:	2101      	movs	r1, #1
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fd faea 	bl	800d34c <aci_gap_numeric_comparison_value_confirm_yesno>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800fd7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d010      	beq.n	800fda8 <SVCCTL_App_Notification+0x4ac>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800fd86:	4851      	ldr	r0, [pc, #324]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fd88:	f7fe ff74 	bl	800ec74 <DbgTraceGetFileName>
 800fd8c:	4601      	mov	r1, r0
 800fd8e:	f240 237d 	movw	r3, #637	@ 0x27d
 800fd92:	4a4f      	ldr	r2, [pc, #316]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fd94:	484f      	ldr	r0, [pc, #316]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fd96:	f002 fa27 	bl	80121e8 <iprintf>
 800fd9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd9e:	4619      	mov	r1, r3
 800fda0:	4857      	ldr	r0, [pc, #348]	@ (800ff00 <SVCCTL_App_Notification+0x604>)
 800fda2:	f002 fa21 	bl	80121e8 <iprintf>
          break;
 800fda6:	e087      	b.n	800feb8 <SVCCTL_App_Notification+0x5bc>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800fda8:	4848      	ldr	r0, [pc, #288]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fdaa:	f7fe ff63 	bl	800ec74 <DbgTraceGetFileName>
 800fdae:	4601      	mov	r1, r0
 800fdb0:	f240 2381 	movw	r3, #641	@ 0x281
 800fdb4:	4a46      	ldr	r2, [pc, #280]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fdb6:	4847      	ldr	r0, [pc, #284]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fdb8:	f002 fa16 	bl	80121e8 <iprintf>
 800fdbc:	4851      	ldr	r0, [pc, #324]	@ (800ff04 <SVCCTL_App_Notification+0x608>)
 800fdbe:	f002 fa83 	bl	80122c8 <puts>
          break;
 800fdc2:	e079      	b.n	800feb8 <SVCCTL_App_Notification+0x5bc>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800fdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc6:	3302      	adds	r3, #2
 800fdc8:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800fdca:	4840      	ldr	r0, [pc, #256]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fdcc:	f7fe ff52 	bl	800ec74 <DbgTraceGetFileName>
 800fdd0:	4601      	mov	r1, r0
 800fdd2:	f240 238b 	movw	r3, #651	@ 0x28b
 800fdd6:	4a3e      	ldr	r2, [pc, #248]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fdd8:	483e      	ldr	r0, [pc, #248]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fdda:	f002 fa05 	bl	80121e8 <iprintf>
 800fdde:	484a      	ldr	r0, [pc, #296]	@ (800ff08 <SVCCTL_App_Notification+0x60c>)
 800fde0:	f002 fa72 	bl	80122c8 <puts>
          if (p_pairing_complete->Status != 0)
 800fde4:	6a3b      	ldr	r3, [r7, #32]
 800fde6:	789b      	ldrb	r3, [r3, #2]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d013      	beq.n	800fe14 <SVCCTL_App_Notification+0x518>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800fdec:	4837      	ldr	r0, [pc, #220]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fdee:	f7fe ff41 	bl	800ec74 <DbgTraceGetFileName>
 800fdf2:	4601      	mov	r1, r0
 800fdf4:	f240 238e 	movw	r3, #654	@ 0x28e
 800fdf8:	4a35      	ldr	r2, [pc, #212]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fdfa:	4836      	ldr	r0, [pc, #216]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fdfc:	f002 f9f4 	bl	80121e8 <iprintf>
 800fe00:	6a3b      	ldr	r3, [r7, #32]
 800fe02:	789b      	ldrb	r3, [r3, #2]
 800fe04:	4619      	mov	r1, r3
 800fe06:	6a3b      	ldr	r3, [r7, #32]
 800fe08:	78db      	ldrb	r3, [r3, #3]
 800fe0a:	461a      	mov	r2, r3
 800fe0c:	483f      	ldr	r0, [pc, #252]	@ (800ff0c <SVCCTL_App_Notification+0x610>)
 800fe0e:	f002 f9eb 	bl	80121e8 <iprintf>
 800fe12:	e00c      	b.n	800fe2e <SVCCTL_App_Notification+0x532>
            APP_DBG_MSG("     - Pairing Success\n");
 800fe14:	482d      	ldr	r0, [pc, #180]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fe16:	f7fe ff2d 	bl	800ec74 <DbgTraceGetFileName>
 800fe1a:	4601      	mov	r1, r0
 800fe1c:	f240 2392 	movw	r3, #658	@ 0x292
 800fe20:	4a2b      	ldr	r2, [pc, #172]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fe22:	482c      	ldr	r0, [pc, #176]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fe24:	f002 f9e0 	bl	80121e8 <iprintf>
 800fe28:	4839      	ldr	r0, [pc, #228]	@ (800ff10 <SVCCTL_App_Notification+0x614>)
 800fe2a:	f002 fa4d 	bl	80122c8 <puts>
          APP_DBG_MSG("\n");
 800fe2e:	4827      	ldr	r0, [pc, #156]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fe30:	f7fe ff20 	bl	800ec74 <DbgTraceGetFileName>
 800fe34:	4601      	mov	r1, r0
 800fe36:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800fe3a:	4a25      	ldr	r2, [pc, #148]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fe3c:	4825      	ldr	r0, [pc, #148]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fe3e:	f002 f9d3 	bl	80121e8 <iprintf>
 800fe42:	200a      	movs	r0, #10
 800fe44:	f002 f9e2 	bl	801220c <putchar>
          break;
 800fe48:	e036      	b.n	800feb8 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800fe4a:	4820      	ldr	r0, [pc, #128]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fe4c:	f7fe ff12 	bl	800ec74 <DbgTraceGetFileName>
 800fe50:	4601      	mov	r1, r0
 800fe52:	f240 239d 	movw	r3, #669	@ 0x29d
 800fe56:	4a1e      	ldr	r2, [pc, #120]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fe58:	481e      	ldr	r0, [pc, #120]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fe5a:	f002 f9c5 	bl	80121e8 <iprintf>
 800fe5e:	482d      	ldr	r0, [pc, #180]	@ (800ff14 <SVCCTL_App_Notification+0x618>)
 800fe60:	f002 f9c2 	bl	80121e8 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800fe64:	4b1f      	ldr	r3, [pc, #124]	@ (800fee4 <SVCCTL_App_Notification+0x5e8>)
 800fe66:	8adb      	ldrh	r3, [r3, #22]
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7fd fd82 	bl	800d972 <aci_gatt_confirm_indication>
        break;
 800fe6e:	e023      	b.n	800feb8 <SVCCTL_App_Notification+0x5bc>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 800fe70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe72:	3302      	adds	r3, #2
 800fe74:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG(">>== ACI_HAL_WARNING_VSEVT_CODE\n");
 800fe76:	4815      	ldr	r0, [pc, #84]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fe78:	f7fe fefc 	bl	800ec74 <DbgTraceGetFileName>
 800fe7c:	4601      	mov	r1, r0
 800fe7e:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 800fe82:	4a13      	ldr	r2, [pc, #76]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fe84:	4813      	ldr	r0, [pc, #76]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fe86:	f002 f9af 	bl	80121e8 <iprintf>
 800fe8a:	4823      	ldr	r0, [pc, #140]	@ (800ff18 <SVCCTL_App_Notification+0x61c>)
 800fe8c:	f002 fa1c 	bl	80122c8 <puts>
          APP_DBG_MSG("Warning Type = 0x%02X\n", p_warning_event->Warning_Type);
 800fe90:	480e      	ldr	r0, [pc, #56]	@ (800fecc <SVCCTL_App_Notification+0x5d0>)
 800fe92:	f7fe feef 	bl	800ec74 <DbgTraceGetFileName>
 800fe96:	4601      	mov	r1, r0
 800fe98:	f240 23a9 	movw	r3, #681	@ 0x2a9
 800fe9c:	4a0c      	ldr	r2, [pc, #48]	@ (800fed0 <SVCCTL_App_Notification+0x5d4>)
 800fe9e:	480d      	ldr	r0, [pc, #52]	@ (800fed4 <SVCCTL_App_Notification+0x5d8>)
 800fea0:	f002 f9a2 	bl	80121e8 <iprintf>
 800fea4:	69fb      	ldr	r3, [r7, #28]
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	4619      	mov	r1, r3
 800feaa:	481c      	ldr	r0, [pc, #112]	@ (800ff1c <SVCCTL_App_Notification+0x620>)
 800feac:	f002 f99c 	bl	80121e8 <iprintf>
          break;
 800feb0:	e002      	b.n	800feb8 <SVCCTL_App_Notification+0x5bc>
          break;
 800feb2:	bf00      	nop
 800feb4:	e003      	b.n	800febe <SVCCTL_App_Notification+0x5c2>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800feb6:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800feb8:	e001      	b.n	800febe <SVCCTL_App_Notification+0x5c2>
      break;
 800feba:	bf00      	nop
 800febc:	e000      	b.n	800fec0 <SVCCTL_App_Notification+0x5c4>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800febe:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800fec0:	2301      	movs	r3, #1
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3730      	adds	r7, #48	@ 0x30
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bdb0      	pop	{r4, r5, r7, pc}
 800feca:	bf00      	nop
 800fecc:	08013804 	.word	0x08013804
 800fed0:	08014c7c 	.word	0x08014c7c
 800fed4:	08013820 	.word	0x08013820
 800fed8:	08013b28 	.word	0x08013b28
 800fedc:	08013b50 	.word	0x08013b50
 800fee0:	08013b80 	.word	0x08013b80
 800fee4:	2000057c 	.word	0x2000057c
 800fee8:	0001b207 	.word	0x0001b207
 800feec:	08013ba8 	.word	0x08013ba8
 800fef0:	08013bdc 	.word	0x08013bdc
 800fef4:	08013c04 	.word	0x08013c04
 800fef8:	08013c38 	.word	0x08013c38
 800fefc:	08013c54 	.word	0x08013c54
 800ff00:	08013c6c 	.word	0x08013c6c
 800ff04:	08013cbc 	.word	0x08013cbc
 800ff08:	08013d04 	.word	0x08013d04
 800ff0c:	08013d30 	.word	0x08013d30
 800ff10:	08013d6c 	.word	0x08013d6c
 800ff14:	08013d84 	.word	0x08013d84
 800ff18:	08013dac 	.word	0x08013dac
 800ff1c:	08013dcc 	.word	0x08013dcc

0800ff20 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b082      	sub	sp, #8
 800ff24:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800ff26:	4b06      	ldr	r3, [pc, #24]	@ (800ff40 <Ble_Tl_Init+0x20>)
 800ff28:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800ff2a:	4b06      	ldr	r3, [pc, #24]	@ (800ff44 <Ble_Tl_Init+0x24>)
 800ff2c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800ff2e:	463b      	mov	r3, r7
 800ff30:	4619      	mov	r1, r3
 800ff32:	4805      	ldr	r0, [pc, #20]	@ (800ff48 <Ble_Tl_Init+0x28>)
 800ff34:	f7fe f982 	bl	800e23c <hci_init>

  return;
 800ff38:	bf00      	nop
}
 800ff3a:	3708      	adds	r7, #8
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	200300d8 	.word	0x200300d8
 800ff44:	08010715 	.word	0x08010715
 800ff48:	080106dd 	.word	0x080106dd

0800ff4c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800ff4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff4e:	b08d      	sub	sp, #52	@ 0x34
 800ff50:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800ff52:	2300      	movs	r3, #0
 800ff54:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ff56:	2392      	movs	r3, #146	@ 0x92
 800ff58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800ff5a:	48a3      	ldr	r0, [pc, #652]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ff5c:	f7fe fe8a 	bl	800ec74 <DbgTraceGetFileName>
 800ff60:	4601      	mov	r1, r0
 800ff62:	f240 23e7 	movw	r3, #743	@ 0x2e7
 800ff66:	4aa1      	ldr	r2, [pc, #644]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ff68:	48a1      	ldr	r0, [pc, #644]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ff6a:	f002 f93d 	bl	80121e8 <iprintf>
 800ff6e:	48a1      	ldr	r0, [pc, #644]	@ (80101f4 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800ff70:	f002 f9aa 	bl	80122c8 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800ff74:	f7fd fe92 	bl	800dc9c <hci_reset>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ff7c:	7dfb      	ldrb	r3, [r7, #23]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d00f      	beq.n	800ffa2 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800ff82:	4899      	ldr	r0, [pc, #612]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ff84:	f7fe fe76 	bl	800ec74 <DbgTraceGetFileName>
 800ff88:	4601      	mov	r1, r0
 800ff8a:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 800ff8e:	4a97      	ldr	r2, [pc, #604]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ff90:	4897      	ldr	r0, [pc, #604]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ff92:	f002 f929 	bl	80121e8 <iprintf>
 800ff96:	7dfb      	ldrb	r3, [r7, #23]
 800ff98:	4619      	mov	r1, r3
 800ff9a:	4897      	ldr	r0, [pc, #604]	@ (80101f8 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800ff9c:	f002 f924 	bl	80121e8 <iprintf>
 800ffa0:	e00c      	b.n	800ffbc <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800ffa2:	4891      	ldr	r0, [pc, #580]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ffa4:	f7fe fe66 	bl	800ec74 <DbgTraceGetFileName>
 800ffa8:	4601      	mov	r1, r0
 800ffaa:	f44f 733d 	mov.w	r3, #756	@ 0x2f4
 800ffae:	4a8f      	ldr	r2, [pc, #572]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ffb0:	488f      	ldr	r0, [pc, #572]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ffb2:	f002 f919 	bl	80121e8 <iprintf>
 800ffb6:	4891      	ldr	r0, [pc, #580]	@ (80101fc <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800ffb8:	f002 f986 	bl	80122c8 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800ffbc:	f000 fad8 	bl	8010570 <BleGetBdAddress>
 800ffc0:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 800ffc2:	693a      	ldr	r2, [r7, #16]
 800ffc4:	2106      	movs	r1, #6
 800ffc6:	2000      	movs	r0, #0
 800ffc8:	f7fd fd28 	bl	800da1c <aci_hal_write_config_data>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ffd0:	7dfb      	ldrb	r3, [r7, #23]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d00f      	beq.n	800fff6 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, result: 0x%x \n", ret);
 800ffd6:	4884      	ldr	r0, [pc, #528]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ffd8:	f7fe fe4c 	bl	800ec74 <DbgTraceGetFileName>
 800ffdc:	4601      	mov	r1, r0
 800ffde:	f240 23fe 	movw	r3, #766	@ 0x2fe
 800ffe2:	4a82      	ldr	r2, [pc, #520]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ffe4:	4882      	ldr	r0, [pc, #520]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ffe6:	f002 f8ff 	bl	80121e8 <iprintf>
 800ffea:	7dfb      	ldrb	r3, [r7, #23]
 800ffec:	4619      	mov	r1, r3
 800ffee:	4884      	ldr	r0, [pc, #528]	@ (8010200 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800fff0:	f002 f8fa 	bl	80121e8 <iprintf>
 800fff4:	e035      	b.n	8010062 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBLIC_ADDRESS_OFFSET\n");
 800fff6:	487c      	ldr	r0, [pc, #496]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800fff8:	f7fe fe3c 	bl	800ec74 <DbgTraceGetFileName>
 800fffc:	4601      	mov	r1, r0
 800fffe:	f240 3302 	movw	r3, #770	@ 0x302
 8010002:	4a7a      	ldr	r2, [pc, #488]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010004:	487a      	ldr	r0, [pc, #488]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010006:	f002 f8ef 	bl	80121e8 <iprintf>
 801000a:	487e      	ldr	r0, [pc, #504]	@ (8010204 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 801000c:	f002 f95c 	bl	80122c8 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8010010:	4875      	ldr	r0, [pc, #468]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010012:	f7fe fe2f 	bl	800ec74 <DbgTraceGetFileName>
 8010016:	4601      	mov	r1, r0
 8010018:	f240 3303 	movw	r3, #771	@ 0x303
 801001c:	4a73      	ldr	r2, [pc, #460]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801001e:	4874      	ldr	r0, [pc, #464]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010020:	f002 f8e2 	bl	80121e8 <iprintf>
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	3305      	adds	r3, #5
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	4618      	mov	r0, r3
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	3304      	adds	r3, #4
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	461c      	mov	r4, r3
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	3303      	adds	r3, #3
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	461d      	mov	r5, r3
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	3302      	adds	r3, #2
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	461a      	mov	r2, r3
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	3301      	adds	r3, #1
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	4619      	mov	r1, r3
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	9302      	str	r3, [sp, #8]
 8010052:	9101      	str	r1, [sp, #4]
 8010054:	9200      	str	r2, [sp, #0]
 8010056:	462b      	mov	r3, r5
 8010058:	4622      	mov	r2, r4
 801005a:	4601      	mov	r1, r0
 801005c:	486a      	ldr	r0, [pc, #424]	@ (8010208 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 801005e:	f002 f8c3 	bl	80121e8 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8010062:	4a6a      	ldr	r2, [pc, #424]	@ (801020c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8010064:	2110      	movs	r1, #16
 8010066:	2018      	movs	r0, #24
 8010068:	f7fd fcd8 	bl	800da1c <aci_hal_write_config_data>
 801006c:	4603      	mov	r3, r0
 801006e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010070:	7dfb      	ldrb	r3, [r7, #23]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d00f      	beq.n	8010096 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8010076:	485c      	ldr	r0, [pc, #368]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010078:	f7fe fdfc 	bl	800ec74 <DbgTraceGetFileName>
 801007c:	4601      	mov	r1, r0
 801007e:	f240 3325 	movw	r3, #805	@ 0x325
 8010082:	4a5a      	ldr	r2, [pc, #360]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010084:	485a      	ldr	r0, [pc, #360]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010086:	f002 f8af 	bl	80121e8 <iprintf>
 801008a:	7dfb      	ldrb	r3, [r7, #23]
 801008c:	4619      	mov	r1, r3
 801008e:	4860      	ldr	r0, [pc, #384]	@ (8010210 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8010090:	f002 f8aa 	bl	80121e8 <iprintf>
 8010094:	e00c      	b.n	80100b0 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8010096:	4854      	ldr	r0, [pc, #336]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010098:	f7fe fdec 	bl	800ec74 <DbgTraceGetFileName>
 801009c:	4601      	mov	r1, r0
 801009e:	f240 3329 	movw	r3, #809	@ 0x329
 80100a2:	4a52      	ldr	r2, [pc, #328]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80100a4:	4852      	ldr	r0, [pc, #328]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80100a6:	f002 f89f 	bl	80121e8 <iprintf>
 80100aa:	485a      	ldr	r0, [pc, #360]	@ (8010214 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 80100ac:	f002 f90c 	bl	80122c8 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80100b0:	4a59      	ldr	r2, [pc, #356]	@ (8010218 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80100b2:	2110      	movs	r1, #16
 80100b4:	2008      	movs	r0, #8
 80100b6:	f7fd fcb1 	bl	800da1c <aci_hal_write_config_data>
 80100ba:	4603      	mov	r3, r0
 80100bc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80100be:	7dfb      	ldrb	r3, [r7, #23]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d00f      	beq.n	80100e4 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 80100c4:	4848      	ldr	r0, [pc, #288]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80100c6:	f7fe fdd5 	bl	800ec74 <DbgTraceGetFileName>
 80100ca:	4601      	mov	r1, r0
 80100cc:	f240 3332 	movw	r3, #818	@ 0x332
 80100d0:	4a46      	ldr	r2, [pc, #280]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80100d2:	4847      	ldr	r0, [pc, #284]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80100d4:	f002 f888 	bl	80121e8 <iprintf>
 80100d8:	7dfb      	ldrb	r3, [r7, #23]
 80100da:	4619      	mov	r1, r3
 80100dc:	484f      	ldr	r0, [pc, #316]	@ (801021c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 80100de:	f002 f883 	bl	80121e8 <iprintf>
 80100e2:	e00c      	b.n	80100fe <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 80100e4:	4840      	ldr	r0, [pc, #256]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80100e6:	f7fe fdc5 	bl	800ec74 <DbgTraceGetFileName>
 80100ea:	4601      	mov	r1, r0
 80100ec:	f240 3336 	movw	r3, #822	@ 0x336
 80100f0:	4a3e      	ldr	r2, [pc, #248]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80100f2:	483f      	ldr	r0, [pc, #252]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80100f4:	f002 f878 	bl	80121e8 <iprintf>
 80100f8:	4849      	ldr	r0, [pc, #292]	@ (8010220 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 80100fa:	f002 f8e5 	bl	80122c8 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80100fe:	2118      	movs	r1, #24
 8010100:	2001      	movs	r0, #1
 8010102:	f7fd fd10 	bl	800db26 <aci_hal_set_tx_power_level>
 8010106:	4603      	mov	r3, r0
 8010108:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801010a:	7dfb      	ldrb	r3, [r7, #23]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d00f      	beq.n	8010130 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8010110:	4835      	ldr	r0, [pc, #212]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010112:	f7fe fdaf 	bl	800ec74 <DbgTraceGetFileName>
 8010116:	4601      	mov	r1, r0
 8010118:	f240 333f 	movw	r3, #831	@ 0x33f
 801011c:	4a33      	ldr	r2, [pc, #204]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801011e:	4834      	ldr	r0, [pc, #208]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010120:	f002 f862 	bl	80121e8 <iprintf>
 8010124:	7dfb      	ldrb	r3, [r7, #23]
 8010126:	4619      	mov	r1, r3
 8010128:	483e      	ldr	r0, [pc, #248]	@ (8010224 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 801012a:	f002 f85d 	bl	80121e8 <iprintf>
 801012e:	e00c      	b.n	801014a <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8010130:	482d      	ldr	r0, [pc, #180]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010132:	f7fe fd9f 	bl	800ec74 <DbgTraceGetFileName>
 8010136:	4601      	mov	r1, r0
 8010138:	f240 3343 	movw	r3, #835	@ 0x343
 801013c:	4a2b      	ldr	r2, [pc, #172]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801013e:	482c      	ldr	r0, [pc, #176]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010140:	f002 f852 	bl	80121e8 <iprintf>
 8010144:	4838      	ldr	r0, [pc, #224]	@ (8010228 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8010146:	f002 f8bf 	bl	80122c8 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 801014a:	f7fd f966 	bl	800d41a <aci_gatt_init>
 801014e:	4603      	mov	r3, r0
 8010150:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010152:	7dfb      	ldrb	r3, [r7, #23]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d00f      	beq.n	8010178 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8010158:	4823      	ldr	r0, [pc, #140]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801015a:	f7fe fd8b 	bl	800ec74 <DbgTraceGetFileName>
 801015e:	4601      	mov	r1, r0
 8010160:	f44f 7353 	mov.w	r3, #844	@ 0x34c
 8010164:	4a21      	ldr	r2, [pc, #132]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010166:	4822      	ldr	r0, [pc, #136]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010168:	f002 f83e 	bl	80121e8 <iprintf>
 801016c:	7dfb      	ldrb	r3, [r7, #23]
 801016e:	4619      	mov	r1, r3
 8010170:	482e      	ldr	r0, [pc, #184]	@ (801022c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8010172:	f002 f839 	bl	80121e8 <iprintf>
 8010176:	e00c      	b.n	8010192 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8010178:	481b      	ldr	r0, [pc, #108]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801017a:	f7fe fd7b 	bl	800ec74 <DbgTraceGetFileName>
 801017e:	4601      	mov	r1, r0
 8010180:	f44f 7354 	mov.w	r3, #848	@ 0x350
 8010184:	4a19      	ldr	r2, [pc, #100]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010186:	481a      	ldr	r0, [pc, #104]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010188:	f002 f82e 	bl	80121e8 <iprintf>
 801018c:	4828      	ldr	r0, [pc, #160]	@ (8010230 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 801018e:	f002 f89b 	bl	80122c8 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8010192:	2300      	movs	r3, #0
 8010194:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8010196:	7bfb      	ldrb	r3, [r7, #15]
 8010198:	f043 0301 	orr.w	r3, r3, #1
 801019c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 801019e:	7bfb      	ldrb	r3, [r7, #15]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d069      	beq.n	8010278 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80101a4:	4b23      	ldr	r3, [pc, #140]	@ (8010234 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 80101a6:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80101a8:	1dba      	adds	r2, r7, #6
 80101aa:	7bf8      	ldrb	r0, [r7, #15]
 80101ac:	1cbb      	adds	r3, r7, #2
 80101ae:	9301      	str	r3, [sp, #4]
 80101b0:	1d3b      	adds	r3, r7, #4
 80101b2:	9300      	str	r3, [sp, #0]
 80101b4:	4613      	mov	r3, r2
 80101b6:	2208      	movs	r2, #8
 80101b8:	2100      	movs	r1, #0
 80101ba:	f7fc ff84 	bl	800d0c6 <aci_gap_init>
 80101be:	4603      	mov	r3, r0
 80101c0:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 80101c2:	7dfb      	ldrb	r3, [r7, #23]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d039      	beq.n	801023c <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 80101c8:	4807      	ldr	r0, [pc, #28]	@ (80101e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80101ca:	f7fe fd53 	bl	800ec74 <DbgTraceGetFileName>
 80101ce:	4601      	mov	r1, r0
 80101d0:	f44f 735c 	mov.w	r3, #880	@ 0x370
 80101d4:	4a05      	ldr	r2, [pc, #20]	@ (80101ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80101d6:	4806      	ldr	r0, [pc, #24]	@ (80101f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80101d8:	f002 f806 	bl	80121e8 <iprintf>
 80101dc:	7dfb      	ldrb	r3, [r7, #23]
 80101de:	4619      	mov	r1, r3
 80101e0:	4815      	ldr	r0, [pc, #84]	@ (8010238 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 80101e2:	f002 f801 	bl	80121e8 <iprintf>
 80101e6:	e036      	b.n	8010256 <Ble_Hci_Gap_Gatt_Init+0x30a>
 80101e8:	08013804 	.word	0x08013804
 80101ec:	08014c94 	.word	0x08014c94
 80101f0:	08013820 	.word	0x08013820
 80101f4:	08013de4 	.word	0x08013de4
 80101f8:	08013e10 	.word	0x08013e10
 80101fc:	08013e40 	.word	0x08013e40
 8010200:	08013e60 	.word	0x08013e60
 8010204:	08013ec4 	.word	0x08013ec4
 8010208:	08013f18 	.word	0x08013f18
 801020c:	08014c4c 	.word	0x08014c4c
 8010210:	08013f54 	.word	0x08013f54
 8010214:	08013fac 	.word	0x08013fac
 8010218:	08014c5c 	.word	0x08014c5c
 801021c:	08013ff4 	.word	0x08013ff4
 8010220:	0801404c 	.word	0x0801404c
 8010224:	08014094 	.word	0x08014094
 8010228:	080140d4 	.word	0x080140d4
 801022c:	08014104 	.word	0x08014104
 8010230:	08014138 	.word	0x08014138
 8010234:	0801415c 	.word	0x0801415c
 8010238:	08014168 	.word	0x08014168
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 801023c:	487e      	ldr	r0, [pc, #504]	@ (8010438 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801023e:	f7fe fd19 	bl	800ec74 <DbgTraceGetFileName>
 8010242:	4601      	mov	r1, r0
 8010244:	f44f 735d 	mov.w	r3, #884	@ 0x374
 8010248:	4a7c      	ldr	r2, [pc, #496]	@ (801043c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801024a:	487d      	ldr	r0, [pc, #500]	@ (8010440 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801024c:	f001 ffcc 	bl	80121e8 <iprintf>
 8010250:	487c      	ldr	r0, [pc, #496]	@ (8010444 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 8010252:	f002 f839 	bl	80122c8 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8010256:	88fc      	ldrh	r4, [r7, #6]
 8010258:	88bd      	ldrh	r5, [r7, #4]
 801025a:	68b8      	ldr	r0, [r7, #8]
 801025c:	f7ef ff90 	bl	8000180 <strlen>
 8010260:	4603      	mov	r3, r0
 8010262:	b2da      	uxtb	r2, r3
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	9300      	str	r3, [sp, #0]
 8010268:	4613      	mov	r3, r2
 801026a:	2200      	movs	r2, #0
 801026c:	4629      	mov	r1, r5
 801026e:	4620      	mov	r0, r4
 8010270:	f7fd fad6 	bl	800d820 <aci_gatt_update_char_value>
 8010274:	4603      	mov	r3, r0
 8010276:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8010278:	88f8      	ldrh	r0, [r7, #6]
 801027a:	8879      	ldrh	r1, [r7, #2]
 801027c:	463b      	mov	r3, r7
 801027e:	9300      	str	r3, [sp, #0]
 8010280:	2302      	movs	r3, #2
 8010282:	2200      	movs	r2, #0
 8010284:	f7fd facc 	bl	800d820 <aci_gatt_update_char_value>
 8010288:	4603      	mov	r3, r0
 801028a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 801028c:	2202      	movs	r2, #2
 801028e:	2102      	movs	r1, #2
 8010290:	2000      	movs	r0, #0
 8010292:	f7fd fd27 	bl	800dce4 <hci_le_set_default_phy>
 8010296:	4603      	mov	r3, r0
 8010298:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801029a:	7dfb      	ldrb	r3, [r7, #23]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d00f      	beq.n	80102c0 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 80102a0:	4865      	ldr	r0, [pc, #404]	@ (8010438 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80102a2:	f7fe fce7 	bl	800ec74 <DbgTraceGetFileName>
 80102a6:	4601      	mov	r1, r0
 80102a8:	f240 3396 	movw	r3, #918	@ 0x396
 80102ac:	4a63      	ldr	r2, [pc, #396]	@ (801043c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80102ae:	4864      	ldr	r0, [pc, #400]	@ (8010440 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80102b0:	f001 ff9a 	bl	80121e8 <iprintf>
 80102b4:	7dfb      	ldrb	r3, [r7, #23]
 80102b6:	4619      	mov	r1, r3
 80102b8:	4863      	ldr	r0, [pc, #396]	@ (8010448 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 80102ba:	f001 ff95 	bl	80121e8 <iprintf>
 80102be:	e00c      	b.n	80102da <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 80102c0:	485d      	ldr	r0, [pc, #372]	@ (8010438 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80102c2:	f7fe fcd7 	bl	800ec74 <DbgTraceGetFileName>
 80102c6:	4601      	mov	r1, r0
 80102c8:	f240 339a 	movw	r3, #922	@ 0x39a
 80102cc:	4a5b      	ldr	r2, [pc, #364]	@ (801043c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80102ce:	485c      	ldr	r0, [pc, #368]	@ (8010440 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80102d0:	f001 ff8a 	bl	80121e8 <iprintf>
 80102d4:	485d      	ldr	r0, [pc, #372]	@ (801044c <Ble_Hci_Gap_Gatt_Init+0x500>)
 80102d6:	f001 fff7 	bl	80122c8 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80102da:	4b5d      	ldr	r3, [pc, #372]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80102dc:	2201      	movs	r2, #1
 80102de:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80102e0:	4b5b      	ldr	r3, [pc, #364]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7fc fd6f 	bl	800cdc8 <aci_gap_set_io_capability>
 80102ea:	4603      	mov	r3, r0
 80102ec:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80102ee:	7dfb      	ldrb	r3, [r7, #23]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d00f      	beq.n	8010314 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 80102f4:	4850      	ldr	r0, [pc, #320]	@ (8010438 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80102f6:	f7fe fcbd 	bl	800ec74 <DbgTraceGetFileName>
 80102fa:	4601      	mov	r1, r0
 80102fc:	f44f 7369 	mov.w	r3, #932	@ 0x3a4
 8010300:	4a4e      	ldr	r2, [pc, #312]	@ (801043c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8010302:	484f      	ldr	r0, [pc, #316]	@ (8010440 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8010304:	f001 ff70 	bl	80121e8 <iprintf>
 8010308:	7dfb      	ldrb	r3, [r7, #23]
 801030a:	4619      	mov	r1, r3
 801030c:	4851      	ldr	r0, [pc, #324]	@ (8010454 <Ble_Hci_Gap_Gatt_Init+0x508>)
 801030e:	f001 ff6b 	bl	80121e8 <iprintf>
 8010312:	e00c      	b.n	801032e <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8010314:	4848      	ldr	r0, [pc, #288]	@ (8010438 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8010316:	f7fe fcad 	bl	800ec74 <DbgTraceGetFileName>
 801031a:	4601      	mov	r1, r0
 801031c:	f44f 736a 	mov.w	r3, #936	@ 0x3a8
 8010320:	4a46      	ldr	r2, [pc, #280]	@ (801043c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8010322:	4847      	ldr	r0, [pc, #284]	@ (8010440 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8010324:	f001 ff60 	bl	80121e8 <iprintf>
 8010328:	484b      	ldr	r0, [pc, #300]	@ (8010458 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 801032a:	f001 ffcd 	bl	80122c8 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 801032e:	4b48      	ldr	r3, [pc, #288]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010330:	2201      	movs	r2, #1
 8010332:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8010334:	4b46      	ldr	r3, [pc, #280]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010336:	2208      	movs	r2, #8
 8010338:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 801033a:	4b45      	ldr	r3, [pc, #276]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801033c:	2210      	movs	r2, #16
 801033e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8010340:	4b43      	ldr	r3, [pc, #268]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010342:	2200      	movs	r2, #0
 8010344:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8010346:	4b42      	ldr	r3, [pc, #264]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010348:	4a44      	ldr	r2, [pc, #272]	@ (801045c <Ble_Hci_Gap_Gatt_Init+0x510>)
 801034a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 801034c:	4b40      	ldr	r3, [pc, #256]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801034e:	2200      	movs	r2, #0
 8010350:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8010352:	4b3f      	ldr	r3, [pc, #252]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010354:	789c      	ldrb	r4, [r3, #2]
 8010356:	4b3e      	ldr	r3, [pc, #248]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010358:	785d      	ldrb	r5, [r3, #1]
 801035a:	4b3d      	ldr	r3, [pc, #244]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801035c:	791b      	ldrb	r3, [r3, #4]
 801035e:	4a3c      	ldr	r2, [pc, #240]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010360:	7952      	ldrb	r2, [r2, #5]
 8010362:	493b      	ldr	r1, [pc, #236]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010364:	78c9      	ldrb	r1, [r1, #3]
 8010366:	483a      	ldr	r0, [pc, #232]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010368:	6880      	ldr	r0, [r0, #8]
 801036a:	2600      	movs	r6, #0
 801036c:	9604      	str	r6, [sp, #16]
 801036e:	9003      	str	r0, [sp, #12]
 8010370:	9102      	str	r1, [sp, #8]
 8010372:	9201      	str	r2, [sp, #4]
 8010374:	9300      	str	r3, [sp, #0]
 8010376:	2300      	movs	r3, #0
 8010378:	2201      	movs	r2, #1
 801037a:	4629      	mov	r1, r5
 801037c:	4620      	mov	r0, r4
 801037e:	f7fc fd77 	bl	800ce70 <aci_gap_set_authentication_requirement>
 8010382:	4603      	mov	r3, r0
 8010384:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8010386:	7dfb      	ldrb	r3, [r7, #23]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d00f      	beq.n	80103ac <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 801038c:	482a      	ldr	r0, [pc, #168]	@ (8010438 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801038e:	f7fe fc71 	bl	800ec74 <DbgTraceGetFileName>
 8010392:	4601      	mov	r1, r0
 8010394:	f240 33c3 	movw	r3, #963	@ 0x3c3
 8010398:	4a28      	ldr	r2, [pc, #160]	@ (801043c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801039a:	4829      	ldr	r0, [pc, #164]	@ (8010440 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801039c:	f001 ff24 	bl	80121e8 <iprintf>
 80103a0:	7dfb      	ldrb	r3, [r7, #23]
 80103a2:	4619      	mov	r1, r3
 80103a4:	482e      	ldr	r0, [pc, #184]	@ (8010460 <Ble_Hci_Gap_Gatt_Init+0x514>)
 80103a6:	f001 ff1f 	bl	80121e8 <iprintf>
 80103aa:	e00c      	b.n	80103c6 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 80103ac:	4822      	ldr	r0, [pc, #136]	@ (8010438 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80103ae:	f7fe fc61 	bl	800ec74 <DbgTraceGetFileName>
 80103b2:	4601      	mov	r1, r0
 80103b4:	f240 33c7 	movw	r3, #967	@ 0x3c7
 80103b8:	4a20      	ldr	r2, [pc, #128]	@ (801043c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80103ba:	4821      	ldr	r0, [pc, #132]	@ (8010440 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80103bc:	f001 ff14 	bl	80121e8 <iprintf>
 80103c0:	4828      	ldr	r0, [pc, #160]	@ (8010464 <Ble_Hci_Gap_Gatt_Init+0x518>)
 80103c2:	f001 ff81 	bl	80122c8 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80103c6:	4b22      	ldr	r3, [pc, #136]	@ (8010450 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80103c8:	789b      	ldrb	r3, [r3, #2]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d023      	beq.n	8010416 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 80103ce:	f7fc ff99 	bl	800d304 <aci_gap_configure_filter_accept_list>
 80103d2:	4603      	mov	r3, r0
 80103d4:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 80103d6:	7dfb      	ldrb	r3, [r7, #23]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d00f      	beq.n	80103fc <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 80103dc:	4816      	ldr	r0, [pc, #88]	@ (8010438 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80103de:	f7fe fc49 	bl	800ec74 <DbgTraceGetFileName>
 80103e2:	4601      	mov	r1, r0
 80103e4:	f240 33d2 	movw	r3, #978	@ 0x3d2
 80103e8:	4a14      	ldr	r2, [pc, #80]	@ (801043c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80103ea:	4815      	ldr	r0, [pc, #84]	@ (8010440 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80103ec:	f001 fefc 	bl	80121e8 <iprintf>
 80103f0:	7dfb      	ldrb	r3, [r7, #23]
 80103f2:	4619      	mov	r1, r3
 80103f4:	481c      	ldr	r0, [pc, #112]	@ (8010468 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 80103f6:	f001 fef7 	bl	80121e8 <iprintf>
 80103fa:	e00c      	b.n	8010416 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 80103fc:	480e      	ldr	r0, [pc, #56]	@ (8010438 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80103fe:	f7fe fc39 	bl	800ec74 <DbgTraceGetFileName>
 8010402:	4601      	mov	r1, r0
 8010404:	f240 33d6 	movw	r3, #982	@ 0x3d6
 8010408:	4a0c      	ldr	r2, [pc, #48]	@ (801043c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801040a:	480d      	ldr	r0, [pc, #52]	@ (8010440 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801040c:	f001 feec 	bl	80121e8 <iprintf>
 8010410:	4816      	ldr	r0, [pc, #88]	@ (801046c <Ble_Hci_Gap_Gatt_Init+0x520>)
 8010412:	f001 ff59 	bl	80122c8 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8010416:	4808      	ldr	r0, [pc, #32]	@ (8010438 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8010418:	f7fe fc2c 	bl	800ec74 <DbgTraceGetFileName>
 801041c:	4601      	mov	r1, r0
 801041e:	f240 33d9 	movw	r3, #985	@ 0x3d9
 8010422:	4a06      	ldr	r2, [pc, #24]	@ (801043c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8010424:	4806      	ldr	r0, [pc, #24]	@ (8010440 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8010426:	f001 fedf 	bl	80121e8 <iprintf>
 801042a:	4811      	ldr	r0, [pc, #68]	@ (8010470 <Ble_Hci_Gap_Gatt_Init+0x524>)
 801042c:	f001 fedc 	bl	80121e8 <iprintf>
}
 8010430:	bf00      	nop
 8010432:	371c      	adds	r7, #28
 8010434:	46bd      	mov	sp, r7
 8010436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010438:	08013804 	.word	0x08013804
 801043c:	08014c94 	.word	0x08014c94
 8010440:	08013820 	.word	0x08013820
 8010444:	08014198 	.word	0x08014198
 8010448:	080141b8 	.word	0x080141b8
 801044c:	080141f4 	.word	0x080141f4
 8010450:	2000057c 	.word	0x2000057c
 8010454:	08014220 	.word	0x08014220
 8010458:	08014260 	.word	0x08014260
 801045c:	0001b207 	.word	0x0001b207
 8010460:	08014290 	.word	0x08014290
 8010464:	080142dc 	.word	0x080142dc
 8010468:	08014318 	.word	0x08014318
 801046c:	08014358 	.word	0x08014358
 8010470:	08014388 	.word	0x08014388

08010474 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b08c      	sub	sp, #48	@ 0x30
 8010478:	af08      	add	r7, sp, #32
 801047a:	4603      	mov	r3, r0
 801047c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801047e:	2392      	movs	r3, #146	@ 0x92
 8010480:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8010482:	4a32      	ldr	r2, [pc, #200]	@ (801054c <Adv_Request+0xd8>)
 8010484:	79fb      	ldrb	r3, [r7, #7]
 8010486:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 801048a:	2300      	movs	r3, #0
 801048c:	9306      	str	r3, [sp, #24]
 801048e:	2300      	movs	r3, #0
 8010490:	9305      	str	r3, [sp, #20]
 8010492:	2300      	movs	r3, #0
 8010494:	9304      	str	r3, [sp, #16]
 8010496:	2300      	movs	r3, #0
 8010498:	9303      	str	r3, [sp, #12]
 801049a:	2300      	movs	r3, #0
 801049c:	9302      	str	r3, [sp, #8]
 801049e:	2300      	movs	r3, #0
 80104a0:	9301      	str	r3, [sp, #4]
 80104a2:	2300      	movs	r3, #0
 80104a4:	9300      	str	r3, [sp, #0]
 80104a6:	2300      	movs	r3, #0
 80104a8:	22a0      	movs	r2, #160	@ 0xa0
 80104aa:	2180      	movs	r1, #128	@ 0x80
 80104ac:	2000      	movs	r0, #0
 80104ae:	f7fc fb91 	bl	800cbd4 <aci_gap_set_discoverable>
 80104b2:	4603      	mov	r3, r0
 80104b4:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 80104b6:	7bfb      	ldrb	r3, [r7, #15]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d00f      	beq.n	80104dc <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 80104bc:	4824      	ldr	r0, [pc, #144]	@ (8010550 <Adv_Request+0xdc>)
 80104be:	f7fe fbd9 	bl	800ec74 <DbgTraceGetFileName>
 80104c2:	4601      	mov	r1, r0
 80104c4:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 80104c8:	4a22      	ldr	r2, [pc, #136]	@ (8010554 <Adv_Request+0xe0>)
 80104ca:	4823      	ldr	r0, [pc, #140]	@ (8010558 <Adv_Request+0xe4>)
 80104cc:	f001 fe8c 	bl	80121e8 <iprintf>
 80104d0:	7bfb      	ldrb	r3, [r7, #15]
 80104d2:	4619      	mov	r1, r3
 80104d4:	4821      	ldr	r0, [pc, #132]	@ (801055c <Adv_Request+0xe8>)
 80104d6:	f001 fe87 	bl	80121e8 <iprintf>
 80104da:	e00c      	b.n	80104f6 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 80104dc:	481c      	ldr	r0, [pc, #112]	@ (8010550 <Adv_Request+0xdc>)
 80104de:	f7fe fbc9 	bl	800ec74 <DbgTraceGetFileName>
 80104e2:	4601      	mov	r1, r0
 80104e4:	f240 33f3 	movw	r3, #1011	@ 0x3f3
 80104e8:	4a1a      	ldr	r2, [pc, #104]	@ (8010554 <Adv_Request+0xe0>)
 80104ea:	481b      	ldr	r0, [pc, #108]	@ (8010558 <Adv_Request+0xe4>)
 80104ec:	f001 fe7c 	bl	80121e8 <iprintf>
 80104f0:	481b      	ldr	r0, [pc, #108]	@ (8010560 <Adv_Request+0xec>)
 80104f2:	f001 fee9 	bl	80122c8 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80104f6:	491b      	ldr	r1, [pc, #108]	@ (8010564 <Adv_Request+0xf0>)
 80104f8:	2013      	movs	r0, #19
 80104fa:	f7fc fe91 	bl	800d220 <aci_gap_update_adv_data>
 80104fe:	4603      	mov	r3, r0
 8010500:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 8010502:	7bfb      	ldrb	r3, [r7, #15]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d00f      	beq.n	8010528 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8010508:	4811      	ldr	r0, [pc, #68]	@ (8010550 <Adv_Request+0xdc>)
 801050a:	f7fe fbb3 	bl	800ec74 <DbgTraceGetFileName>
 801050e:	4601      	mov	r1, r0
 8010510:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8010514:	4a0f      	ldr	r2, [pc, #60]	@ (8010554 <Adv_Request+0xe0>)
 8010516:	4810      	ldr	r0, [pc, #64]	@ (8010558 <Adv_Request+0xe4>)
 8010518:	f001 fe66 	bl	80121e8 <iprintf>
 801051c:	7bfb      	ldrb	r3, [r7, #15]
 801051e:	4619      	mov	r1, r3
 8010520:	4811      	ldr	r0, [pc, #68]	@ (8010568 <Adv_Request+0xf4>)
 8010522:	f001 fe61 	bl	80121e8 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8010526:	e00d      	b.n	8010544 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8010528:	4809      	ldr	r0, [pc, #36]	@ (8010550 <Adv_Request+0xdc>)
 801052a:	f7fe fba3 	bl	800ec74 <DbgTraceGetFileName>
 801052e:	4601      	mov	r1, r0
 8010530:	f240 4302 	movw	r3, #1026	@ 0x402
 8010534:	4a07      	ldr	r2, [pc, #28]	@ (8010554 <Adv_Request+0xe0>)
 8010536:	4808      	ldr	r0, [pc, #32]	@ (8010558 <Adv_Request+0xe4>)
 8010538:	f001 fe56 	bl	80121e8 <iprintf>
 801053c:	480b      	ldr	r0, [pc, #44]	@ (801056c <Adv_Request+0xf8>)
 801053e:	f001 fe53 	bl	80121e8 <iprintf>
  return;
 8010542:	bf00      	nop
}
 8010544:	3710      	adds	r7, #16
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop
 801054c:	2000057c 	.word	0x2000057c
 8010550:	08013804 	.word	0x08013804
 8010554:	08014cac 	.word	0x08014cac
 8010558:	08013820 	.word	0x08013820
 801055c:	080143b4 	.word	0x080143b4
 8010560:	080143ec 	.word	0x080143ec
 8010564:	200000a0 	.word	0x200000a0
 8010568:	08014414 	.word	0x08014414
 801056c:	08014448 	.word	0x08014448

08010570 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b086      	sub	sp, #24
 8010574:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8010576:	f7ff f8f5 	bl	800f764 <LL_FLASH_GetUDN>
 801057a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010582:	d023      	beq.n	80105cc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8010584:	f7ff f906 	bl	800f794 <LL_FLASH_GetSTCompanyID>
 8010588:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 801058a:	f7ff f8f7 	bl	800f77c <LL_FLASH_GetDeviceID>
 801058e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	b2da      	uxtb	r2, r3
 8010594:	4b16      	ldr	r3, [pc, #88]	@ (80105f0 <BleGetBdAddress+0x80>)
 8010596:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	0a1b      	lsrs	r3, r3, #8
 801059c:	b2da      	uxtb	r2, r3
 801059e:	4b14      	ldr	r3, [pc, #80]	@ (80105f0 <BleGetBdAddress+0x80>)
 80105a0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	b2da      	uxtb	r2, r3
 80105a6:	4b12      	ldr	r3, [pc, #72]	@ (80105f0 <BleGetBdAddress+0x80>)
 80105a8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	b2da      	uxtb	r2, r3
 80105ae:	4b10      	ldr	r3, [pc, #64]	@ (80105f0 <BleGetBdAddress+0x80>)
 80105b0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	0a1b      	lsrs	r3, r3, #8
 80105b6:	b2da      	uxtb	r2, r3
 80105b8:	4b0d      	ldr	r3, [pc, #52]	@ (80105f0 <BleGetBdAddress+0x80>)
 80105ba:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	0c1b      	lsrs	r3, r3, #16
 80105c0:	b2da      	uxtb	r2, r3
 80105c2:	4b0b      	ldr	r3, [pc, #44]	@ (80105f0 <BleGetBdAddress+0x80>)
 80105c4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80105c6:	4b0a      	ldr	r3, [pc, #40]	@ (80105f0 <BleGetBdAddress+0x80>)
 80105c8:	617b      	str	r3, [r7, #20]
 80105ca:	e00b      	b.n	80105e4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80105cc:	2000      	movs	r0, #0
 80105ce:	f7fe fc19 	bl	800ee04 <OTP_Read>
 80105d2:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d002      	beq.n	80105e0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	617b      	str	r3, [r7, #20]
 80105de:	e001      	b.n	80105e4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80105e0:	4b04      	ldr	r3, [pc, #16]	@ (80105f4 <BleGetBdAddress+0x84>)
 80105e2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80105e4:	697b      	ldr	r3, [r7, #20]
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3718      	adds	r7, #24
 80105ea:	46bd      	mov	sp, r7
 80105ec:	bd80      	pop	{r7, pc}
 80105ee:	bf00      	nop
 80105f0:	20000574 	.word	0x20000574
 80105f4:	08014c44 	.word	0x08014c44

080105f8 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80105fe:	4b1f      	ldr	r3, [pc, #124]	@ (801067c <Adv_Cancel+0x84>)
 8010600:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010604:	2b05      	cmp	r3, #5
 8010606:	d035      	beq.n	8010674 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010608:	2392      	movs	r3, #146	@ 0x92
 801060a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 801060c:	f7fc fabe 	bl	800cb8c <aci_gap_set_non_discoverable>
 8010610:	4603      	mov	r3, r0
 8010612:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010614:	4b19      	ldr	r3, [pc, #100]	@ (801067c <Adv_Cancel+0x84>)
 8010616:	2200      	movs	r2, #0
 8010618:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 801061c:	79fb      	ldrb	r3, [r7, #7]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00d      	beq.n	801063e <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8010622:	4817      	ldr	r0, [pc, #92]	@ (8010680 <Adv_Cancel+0x88>)
 8010624:	f7fe fb26 	bl	800ec74 <DbgTraceGetFileName>
 8010628:	4601      	mov	r1, r0
 801062a:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 801062e:	4a15      	ldr	r2, [pc, #84]	@ (8010684 <Adv_Cancel+0x8c>)
 8010630:	4815      	ldr	r0, [pc, #84]	@ (8010688 <Adv_Cancel+0x90>)
 8010632:	f001 fdd9 	bl	80121e8 <iprintf>
 8010636:	4815      	ldr	r0, [pc, #84]	@ (801068c <Adv_Cancel+0x94>)
 8010638:	f001 fdd6 	bl	80121e8 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 801063c:	e01a      	b.n	8010674 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 801063e:	4810      	ldr	r0, [pc, #64]	@ (8010680 <Adv_Cancel+0x88>)
 8010640:	f7fe fb18 	bl	800ec74 <DbgTraceGetFileName>
 8010644:	4601      	mov	r1, r0
 8010646:	f240 4354 	movw	r3, #1108	@ 0x454
 801064a:	4a0e      	ldr	r2, [pc, #56]	@ (8010684 <Adv_Cancel+0x8c>)
 801064c:	480e      	ldr	r0, [pc, #56]	@ (8010688 <Adv_Cancel+0x90>)
 801064e:	f001 fdcb 	bl	80121e8 <iprintf>
 8010652:	480f      	ldr	r0, [pc, #60]	@ (8010690 <Adv_Cancel+0x98>)
 8010654:	f001 fdc8 	bl	80121e8 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8010658:	4809      	ldr	r0, [pc, #36]	@ (8010680 <Adv_Cancel+0x88>)
 801065a:	f7fe fb0b 	bl	800ec74 <DbgTraceGetFileName>
 801065e:	4601      	mov	r1, r0
 8010660:	f240 4355 	movw	r3, #1109	@ 0x455
 8010664:	4a07      	ldr	r2, [pc, #28]	@ (8010684 <Adv_Cancel+0x8c>)
 8010666:	4808      	ldr	r0, [pc, #32]	@ (8010688 <Adv_Cancel+0x90>)
 8010668:	f001 fdbe 	bl	80121e8 <iprintf>
 801066c:	4809      	ldr	r0, [pc, #36]	@ (8010694 <Adv_Cancel+0x9c>)
 801066e:	f001 fdbb 	bl	80121e8 <iprintf>
  return;
 8010672:	bf00      	nop
 8010674:	bf00      	nop
}
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}
 801067c:	2000057c 	.word	0x2000057c
 8010680:	08013804 	.word	0x08013804
 8010684:	08014cb8 	.word	0x08014cb8
 8010688:	08013820 	.word	0x08013820
 801068c:	08014470 	.word	0x08014470
 8010690:	08014494 	.word	0x08014494
 8010694:	0801449c 	.word	0x0801449c

08010698 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80106a0:	2100      	movs	r1, #0
 80106a2:	2002      	movs	r0, #2
 80106a4:	f001 fbd4 	bl	8011e50 <UTIL_SEQ_SetTask>

  return;
 80106a8:	bf00      	nop
}
 80106aa:	3708      	adds	r7, #8
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80106b8:	2001      	movs	r0, #1
 80106ba:	f001 fc35 	bl	8011f28 <UTIL_SEQ_SetEvt>

  return;
 80106be:	bf00      	nop
}
 80106c0:	3708      	adds	r7, #8
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}

080106c6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80106c6:	b580      	push	{r7, lr}
 80106c8:	b082      	sub	sp, #8
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80106ce:	2001      	movs	r0, #1
 80106d0:	f001 fc4a 	bl	8011f68 <UTIL_SEQ_WaitEvt>

  return;
 80106d4:	bf00      	nop
}
 80106d6:	3708      	adds	r7, #8
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	3308      	adds	r3, #8
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fd fc5e 	bl	800dfb0 <SVCCTL_UserEvtRx>
 80106f4:	4603      	mov	r3, r0
 80106f6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80106f8:	7afb      	ldrb	r3, [r7, #11]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d003      	beq.n	8010706 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2201      	movs	r2, #1
 8010702:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8010704:	e003      	b.n	801070e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2200      	movs	r2, #0
 801070a:	701a      	strb	r2, [r3, #0]
  return;
 801070c:	bf00      	nop
}
 801070e:	3710      	adds	r7, #16
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	4603      	mov	r3, r0
 801071c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 801071e:	79fb      	ldrb	r3, [r7, #7]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d002      	beq.n	801072a <BLE_StatusNot+0x16>
 8010724:	2b01      	cmp	r3, #1
 8010726:	d006      	beq.n	8010736 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8010728:	e00b      	b.n	8010742 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801072a:	2303      	movs	r3, #3
 801072c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 801072e:	68f8      	ldr	r0, [r7, #12]
 8010730:	f001 fbba 	bl	8011ea8 <UTIL_SEQ_PauseTask>
      break;
 8010734:	e005      	b.n	8010742 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8010736:	2303      	movs	r3, #3
 8010738:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	f001 fbd4 	bl	8011ee8 <UTIL_SEQ_ResumeTask>
      break;
 8010740:	bf00      	nop
  }

  return;
 8010742:	bf00      	nop
}
 8010744:	3710      	adds	r7, #16
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
	...

0801074c <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 801074c:	b480      	push	{r7}
 801074e:	b083      	sub	sp, #12
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	781b      	ldrb	r3, [r3, #0]
 8010758:	2b04      	cmp	r3, #4
 801075a:	d80d      	bhi.n	8010778 <Custom_STM_App_Notification+0x2c>
 801075c:	a201      	add	r2, pc, #4	@ (adr r2, 8010764 <Custom_STM_App_Notification+0x18>)
 801075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010762:	bf00      	nop
 8010764:	08010779 	.word	0x08010779
 8010768:	08010779 	.word	0x08010779
 801076c:	08010779 	.word	0x08010779
 8010770:	08010779 	.word	0x08010779
 8010774:	08010779 	.word	0x08010779

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8010778:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 801077a:	bf00      	nop
}
 801077c:	370c      	adds	r7, #12
 801077e:	46bd      	mov	sp, r7
 8010780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010784:	4770      	bx	lr
 8010786:	bf00      	nop

08010788 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8010788:	b480      	push	{r7}
 801078a:	b083      	sub	sp, #12
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d002      	beq.n	801079e <Custom_APP_Notification+0x16>
 8010798:	2b01      	cmp	r3, #1
 801079a:	d002      	beq.n	80107a2 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 801079c:	e002      	b.n	80107a4 <Custom_APP_Notification+0x1c>
      break;
 801079e:	bf00      	nop
 80107a0:	e000      	b.n	80107a4 <Custom_APP_Notification+0x1c>
      break;
 80107a2:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80107a4:	bf00      	nop
}
 80107a6:	370c      	adds	r7, #12
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr

080107b0 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80107b0:	b480      	push	{r7}
 80107b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80107b4:	bf00      	nop
}
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr
	...

080107c0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b08c      	sub	sp, #48	@ 0x30
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80107c8:	2300      	movs	r3, #0
 80107ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	3301      	adds	r3, #1
 80107d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 80107d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	2bff      	cmp	r3, #255	@ 0xff
 80107da:	f040 808a 	bne.w	80108f2 <Custom_STM_Event_Handler+0x132>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80107de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107e0:	3302      	adds	r3, #2
 80107e2:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 80107e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e6:	881b      	ldrh	r3, [r3, #0]
 80107e8:	b29b      	uxth	r3, r3
 80107ea:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80107ee:	2b1a      	cmp	r3, #26
 80107f0:	d87b      	bhi.n	80108ea <Custom_STM_Event_Handler+0x12a>
 80107f2:	a201      	add	r2, pc, #4	@ (adr r2, 80107f8 <Custom_STM_Event_Handler+0x38>)
 80107f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107f8:	08010865 	.word	0x08010865
 80107fc:	080108eb 	.word	0x080108eb
 8010800:	080108eb 	.word	0x080108eb
 8010804:	080108eb 	.word	0x080108eb
 8010808:	080108eb 	.word	0x080108eb
 801080c:	080108eb 	.word	0x080108eb
 8010810:	080108eb 	.word	0x080108eb
 8010814:	080108eb 	.word	0x080108eb
 8010818:	080108eb 	.word	0x080108eb
 801081c:	080108eb 	.word	0x080108eb
 8010820:	080108eb 	.word	0x080108eb
 8010824:	080108eb 	.word	0x080108eb
 8010828:	080108eb 	.word	0x080108eb
 801082c:	080108eb 	.word	0x080108eb
 8010830:	080108eb 	.word	0x080108eb
 8010834:	080108eb 	.word	0x080108eb
 8010838:	080108eb 	.word	0x080108eb
 801083c:	080108eb 	.word	0x080108eb
 8010840:	080108eb 	.word	0x080108eb
 8010844:	080108eb 	.word	0x080108eb
 8010848:	080108eb 	.word	0x080108eb
 801084c:	080108eb 	.word	0x080108eb
 8010850:	080108eb 	.word	0x080108eb
 8010854:	080108eb 	.word	0x080108eb
 8010858:	080108eb 	.word	0x080108eb
 801085c:	080108eb 	.word	0x080108eb
 8010860:	080108cd 	.word	0x080108cd
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8010864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010866:	3302      	adds	r3, #2
 8010868:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 801086a:	69fb      	ldr	r3, [r7, #28]
 801086c:	885b      	ldrh	r3, [r3, #2]
 801086e:	b29b      	uxth	r3, r3
 8010870:	461a      	mov	r2, r3
 8010872:	4b23      	ldr	r3, [pc, #140]	@ (8010900 <Custom_STM_Event_Handler+0x140>)
 8010874:	889b      	ldrh	r3, [r3, #4]
 8010876:	3302      	adds	r3, #2
 8010878:	429a      	cmp	r2, r3
 801087a:	d119      	bne.n	80108b0 <Custom_STM_Event_Handler+0xf0>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 801087c:	2301      	movs	r3, #1
 801087e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8010882:	69fb      	ldr	r3, [r7, #28]
 8010884:	7a1b      	ldrb	r3, [r3, #8]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d002      	beq.n	8010890 <Custom_STM_Event_Handler+0xd0>
 801088a:	2b01      	cmp	r3, #1
 801088c:	d008      	beq.n	80108a0 <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 801088e:	e01c      	b.n	80108ca <Custom_STM_Event_Handler+0x10a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 8010890:	2303      	movs	r3, #3
 8010892:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010894:	f107 0308 	add.w	r3, r7, #8
 8010898:	4618      	mov	r0, r3
 801089a:	f7ff ff57 	bl	801074c <Custom_STM_App_Notification>
                break;
 801089e:	e014      	b.n	80108ca <Custom_STM_Event_Handler+0x10a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 80108a0:	2302      	movs	r3, #2
 80108a2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80108a4:	f107 0308 	add.w	r3, r7, #8
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7ff ff4f 	bl	801074c <Custom_STM_App_Notification>
                break;
 80108ae:	e00c      	b.n	80108ca <Custom_STM_Event_Handler+0x10a>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80108b0:	69fb      	ldr	r3, [r7, #28]
 80108b2:	885b      	ldrh	r3, [r3, #2]
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	461a      	mov	r2, r3
 80108b8:	4b11      	ldr	r3, [pc, #68]	@ (8010900 <Custom_STM_Event_Handler+0x140>)
 80108ba:	885b      	ldrh	r3, [r3, #2]
 80108bc:	3301      	adds	r3, #1
 80108be:	429a      	cmp	r2, r3
 80108c0:	d115      	bne.n	80108ee <Custom_STM_Event_Handler+0x12e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80108c2:	2301      	movs	r3, #1
 80108c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80108c8:	e011      	b.n	80108ee <Custom_STM_Event_Handler+0x12e>
 80108ca:	e010      	b.n	80108ee <Custom_STM_Event_Handler+0x12e>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80108cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ce:	3302      	adds	r3, #2
 80108d0:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 80108d2:	2304      	movs	r3, #4
 80108d4:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 80108d6:	6a3b      	ldr	r3, [r7, #32]
 80108d8:	881b      	ldrh	r3, [r3, #0]
 80108da:	b29b      	uxth	r3, r3
 80108dc:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 80108de:	f107 0308 	add.w	r3, r7, #8
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7ff ff32 	bl	801074c <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 80108e8:	e002      	b.n	80108f0 <Custom_STM_Event_Handler+0x130>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80108ea:	bf00      	nop
 80108ec:	e002      	b.n	80108f4 <Custom_STM_Event_Handler+0x134>
          break;
 80108ee:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80108f0:	e000      	b.n	80108f4 <Custom_STM_Event_Handler+0x134>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80108f2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80108f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 80108f8:	4618      	mov	r0, r3
 80108fa:	3730      	adds	r7, #48	@ 0x30
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	20000604 	.word	0x20000604

08010904 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b08c      	sub	sp, #48	@ 0x30
 8010908:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801090a:	2392      	movs	r3, #146	@ 0x92
 801090c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 801090e:	487f      	ldr	r0, [pc, #508]	@ (8010b0c <SVCCTL_InitCustomSvc+0x208>)
 8010910:	f7fd fb34 	bl	800df7c <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8010914:	2306      	movs	r3, #6
 8010916:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 8010918:	238f      	movs	r3, #143	@ 0x8f
 801091a:	713b      	strb	r3, [r7, #4]
 801091c:	23e5      	movs	r3, #229	@ 0xe5
 801091e:	717b      	strb	r3, [r7, #5]
 8010920:	23b3      	movs	r3, #179	@ 0xb3
 8010922:	71bb      	strb	r3, [r7, #6]
 8010924:	23d5      	movs	r3, #213	@ 0xd5
 8010926:	71fb      	strb	r3, [r7, #7]
 8010928:	232e      	movs	r3, #46	@ 0x2e
 801092a:	723b      	strb	r3, [r7, #8]
 801092c:	237f      	movs	r3, #127	@ 0x7f
 801092e:	727b      	strb	r3, [r7, #9]
 8010930:	234a      	movs	r3, #74	@ 0x4a
 8010932:	72bb      	strb	r3, [r7, #10]
 8010934:	2398      	movs	r3, #152	@ 0x98
 8010936:	72fb      	strb	r3, [r7, #11]
 8010938:	232a      	movs	r3, #42	@ 0x2a
 801093a:	733b      	strb	r3, [r7, #12]
 801093c:	2348      	movs	r3, #72	@ 0x48
 801093e:	737b      	strb	r3, [r7, #13]
 8010940:	237a      	movs	r3, #122	@ 0x7a
 8010942:	73bb      	strb	r3, [r7, #14]
 8010944:	23cc      	movs	r3, #204	@ 0xcc
 8010946:	73fb      	strb	r3, [r7, #15]
 8010948:	2340      	movs	r3, #64	@ 0x40
 801094a:	743b      	strb	r3, [r7, #16]
 801094c:	23fe      	movs	r3, #254	@ 0xfe
 801094e:	747b      	strb	r3, [r7, #17]
 8010950:	2300      	movs	r3, #0
 8010952:	74bb      	strb	r3, [r7, #18]
 8010954:	2300      	movs	r3, #0
 8010956:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8010958:	7dbb      	ldrb	r3, [r7, #22]
 801095a:	1d39      	adds	r1, r7, #4
 801095c:	4a6c      	ldr	r2, [pc, #432]	@ (8010b10 <SVCCTL_InitCustomSvc+0x20c>)
 801095e:	9200      	str	r2, [sp, #0]
 8010960:	2201      	movs	r2, #1
 8010962:	2002      	movs	r0, #2
 8010964:	f7fc fd7e 	bl	800d464 <aci_gatt_add_service>
 8010968:	4603      	mov	r3, r0
 801096a:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomMy_P2PsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801096c:	7dfb      	ldrb	r3, [r7, #23]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00f      	beq.n	8010992 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: My_P2PS, error code: 0x%x \n\r", ret);
 8010972:	4868      	ldr	r0, [pc, #416]	@ (8010b14 <SVCCTL_InitCustomSvc+0x210>)
 8010974:	f7fe f97e 	bl	800ec74 <DbgTraceGetFileName>
 8010978:	4601      	mov	r1, r0
 801097a:	f240 133f 	movw	r3, #319	@ 0x13f
 801097e:	4a66      	ldr	r2, [pc, #408]	@ (8010b18 <SVCCTL_InitCustomSvc+0x214>)
 8010980:	4866      	ldr	r0, [pc, #408]	@ (8010b1c <SVCCTL_InitCustomSvc+0x218>)
 8010982:	f001 fc31 	bl	80121e8 <iprintf>
 8010986:	7dfb      	ldrb	r3, [r7, #23]
 8010988:	4619      	mov	r1, r3
 801098a:	4865      	ldr	r0, [pc, #404]	@ (8010b20 <SVCCTL_InitCustomSvc+0x21c>)
 801098c:	f001 fc2c 	bl	80121e8 <iprintf>
 8010990:	e00c      	b.n	80109ac <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: My_P2PS \n\r");
 8010992:	4860      	ldr	r0, [pc, #384]	@ (8010b14 <SVCCTL_InitCustomSvc+0x210>)
 8010994:	f7fe f96e 	bl	800ec74 <DbgTraceGetFileName>
 8010998:	4601      	mov	r1, r0
 801099a:	f240 1343 	movw	r3, #323	@ 0x143
 801099e:	4a5e      	ldr	r2, [pc, #376]	@ (8010b18 <SVCCTL_InitCustomSvc+0x214>)
 80109a0:	485e      	ldr	r0, [pc, #376]	@ (8010b1c <SVCCTL_InitCustomSvc+0x218>)
 80109a2:	f001 fc21 	bl	80121e8 <iprintf>
 80109a6:	485f      	ldr	r0, [pc, #380]	@ (8010b24 <SVCCTL_InitCustomSvc+0x220>)
 80109a8:	f001 fc1e 	bl	80121e8 <iprintf>
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 80109ac:	2319      	movs	r3, #25
 80109ae:	713b      	strb	r3, [r7, #4]
 80109b0:	23ed      	movs	r3, #237	@ 0xed
 80109b2:	717b      	strb	r3, [r7, #5]
 80109b4:	2382      	movs	r3, #130	@ 0x82
 80109b6:	71bb      	strb	r3, [r7, #6]
 80109b8:	23ae      	movs	r3, #174	@ 0xae
 80109ba:	71fb      	strb	r3, [r7, #7]
 80109bc:	23ed      	movs	r3, #237	@ 0xed
 80109be:	723b      	strb	r3, [r7, #8]
 80109c0:	2321      	movs	r3, #33	@ 0x21
 80109c2:	727b      	strb	r3, [r7, #9]
 80109c4:	234c      	movs	r3, #76	@ 0x4c
 80109c6:	72bb      	strb	r3, [r7, #10]
 80109c8:	239d      	movs	r3, #157	@ 0x9d
 80109ca:	72fb      	strb	r3, [r7, #11]
 80109cc:	2341      	movs	r3, #65	@ 0x41
 80109ce:	733b      	strb	r3, [r7, #12]
 80109d0:	2345      	movs	r3, #69	@ 0x45
 80109d2:	737b      	strb	r3, [r7, #13]
 80109d4:	2322      	movs	r3, #34	@ 0x22
 80109d6:	73bb      	strb	r3, [r7, #14]
 80109d8:	238e      	movs	r3, #142	@ 0x8e
 80109da:	73fb      	strb	r3, [r7, #15]
 80109dc:	2341      	movs	r3, #65	@ 0x41
 80109de:	743b      	strb	r3, [r7, #16]
 80109e0:	23fe      	movs	r3, #254	@ 0xfe
 80109e2:	747b      	strb	r3, [r7, #17]
 80109e4:	2300      	movs	r3, #0
 80109e6:	74bb      	strb	r3, [r7, #18]
 80109e8:	2300      	movs	r3, #0
 80109ea:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 80109ec:	4b48      	ldr	r3, [pc, #288]	@ (8010b10 <SVCCTL_InitCustomSvc+0x20c>)
 80109ee:	8818      	ldrh	r0, [r3, #0]
 80109f0:	4b4d      	ldr	r3, [pc, #308]	@ (8010b28 <SVCCTL_InitCustomSvc+0x224>)
 80109f2:	881b      	ldrh	r3, [r3, #0]
 80109f4:	1d3a      	adds	r2, r7, #4
 80109f6:	494d      	ldr	r1, [pc, #308]	@ (8010b2c <SVCCTL_InitCustomSvc+0x228>)
 80109f8:	9105      	str	r1, [sp, #20]
 80109fa:	2101      	movs	r1, #1
 80109fc:	9104      	str	r1, [sp, #16]
 80109fe:	2110      	movs	r1, #16
 8010a00:	9103      	str	r1, [sp, #12]
 8010a02:	2101      	movs	r1, #1
 8010a04:	9102      	str	r1, [sp, #8]
 8010a06:	2100      	movs	r1, #0
 8010a08:	9101      	str	r1, [sp, #4]
 8010a0a:	2106      	movs	r1, #6
 8010a0c:	9100      	str	r1, [sp, #0]
 8010a0e:	2102      	movs	r1, #2
 8010a10:	f7fc fdfe 	bl	800d610 <aci_gatt_add_char>
 8010a14:	4603      	mov	r3, r0
 8010a16:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomLed_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8010a18:	7dfb      	ldrb	r3, [r7, #23]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d00f      	beq.n	8010a3e <SVCCTL_InitCustomSvc+0x13a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LED_C, error code: 0x%x \n\r", ret);
 8010a1e:	483d      	ldr	r0, [pc, #244]	@ (8010b14 <SVCCTL_InitCustomSvc+0x210>)
 8010a20:	f7fe f928 	bl	800ec74 <DbgTraceGetFileName>
 8010a24:	4601      	mov	r1, r0
 8010a26:	f240 1355 	movw	r3, #341	@ 0x155
 8010a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8010b18 <SVCCTL_InitCustomSvc+0x214>)
 8010a2c:	483b      	ldr	r0, [pc, #236]	@ (8010b1c <SVCCTL_InitCustomSvc+0x218>)
 8010a2e:	f001 fbdb 	bl	80121e8 <iprintf>
 8010a32:	7dfb      	ldrb	r3, [r7, #23]
 8010a34:	4619      	mov	r1, r3
 8010a36:	483e      	ldr	r0, [pc, #248]	@ (8010b30 <SVCCTL_InitCustomSvc+0x22c>)
 8010a38:	f001 fbd6 	bl	80121e8 <iprintf>
 8010a3c:	e00c      	b.n	8010a58 <SVCCTL_InitCustomSvc+0x154>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LED_C \n\r");
 8010a3e:	4835      	ldr	r0, [pc, #212]	@ (8010b14 <SVCCTL_InitCustomSvc+0x210>)
 8010a40:	f7fe f918 	bl	800ec74 <DbgTraceGetFileName>
 8010a44:	4601      	mov	r1, r0
 8010a46:	f240 1359 	movw	r3, #345	@ 0x159
 8010a4a:	4a33      	ldr	r2, [pc, #204]	@ (8010b18 <SVCCTL_InitCustomSvc+0x214>)
 8010a4c:	4833      	ldr	r0, [pc, #204]	@ (8010b1c <SVCCTL_InitCustomSvc+0x218>)
 8010a4e:	f001 fbcb 	bl	80121e8 <iprintf>
 8010a52:	4838      	ldr	r0, [pc, #224]	@ (8010b34 <SVCCTL_InitCustomSvc+0x230>)
 8010a54:	f001 fbc8 	bl	80121e8 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  My_Switch_Char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 8010a58:	2319      	movs	r3, #25
 8010a5a:	713b      	strb	r3, [r7, #4]
 8010a5c:	23ed      	movs	r3, #237	@ 0xed
 8010a5e:	717b      	strb	r3, [r7, #5]
 8010a60:	2382      	movs	r3, #130	@ 0x82
 8010a62:	71bb      	strb	r3, [r7, #6]
 8010a64:	23ae      	movs	r3, #174	@ 0xae
 8010a66:	71fb      	strb	r3, [r7, #7]
 8010a68:	23ed      	movs	r3, #237	@ 0xed
 8010a6a:	723b      	strb	r3, [r7, #8]
 8010a6c:	2321      	movs	r3, #33	@ 0x21
 8010a6e:	727b      	strb	r3, [r7, #9]
 8010a70:	234c      	movs	r3, #76	@ 0x4c
 8010a72:	72bb      	strb	r3, [r7, #10]
 8010a74:	239d      	movs	r3, #157	@ 0x9d
 8010a76:	72fb      	strb	r3, [r7, #11]
 8010a78:	2341      	movs	r3, #65	@ 0x41
 8010a7a:	733b      	strb	r3, [r7, #12]
 8010a7c:	2345      	movs	r3, #69	@ 0x45
 8010a7e:	737b      	strb	r3, [r7, #13]
 8010a80:	2322      	movs	r3, #34	@ 0x22
 8010a82:	73bb      	strb	r3, [r7, #14]
 8010a84:	238e      	movs	r3, #142	@ 0x8e
 8010a86:	73fb      	strb	r3, [r7, #15]
 8010a88:	2342      	movs	r3, #66	@ 0x42
 8010a8a:	743b      	strb	r3, [r7, #16]
 8010a8c:	23fe      	movs	r3, #254	@ 0xfe
 8010a8e:	747b      	strb	r3, [r7, #17]
 8010a90:	2300      	movs	r3, #0
 8010a92:	74bb      	strb	r3, [r7, #18]
 8010a94:	2300      	movs	r3, #0
 8010a96:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 8010a98:	4b1d      	ldr	r3, [pc, #116]	@ (8010b10 <SVCCTL_InitCustomSvc+0x20c>)
 8010a9a:	8818      	ldrh	r0, [r3, #0]
 8010a9c:	4b26      	ldr	r3, [pc, #152]	@ (8010b38 <SVCCTL_InitCustomSvc+0x234>)
 8010a9e:	881b      	ldrh	r3, [r3, #0]
 8010aa0:	1d3a      	adds	r2, r7, #4
 8010aa2:	4926      	ldr	r1, [pc, #152]	@ (8010b3c <SVCCTL_InitCustomSvc+0x238>)
 8010aa4:	9105      	str	r1, [sp, #20]
 8010aa6:	2101      	movs	r1, #1
 8010aa8:	9104      	str	r1, [sp, #16]
 8010aaa:	2110      	movs	r1, #16
 8010aac:	9103      	str	r1, [sp, #12]
 8010aae:	2101      	movs	r1, #1
 8010ab0:	9102      	str	r1, [sp, #8]
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	9101      	str	r1, [sp, #4]
 8010ab6:	2110      	movs	r1, #16
 8010ab8:	9100      	str	r1, [sp, #0]
 8010aba:	2102      	movs	r1, #2
 8010abc:	f7fc fda8 	bl	800d610 <aci_gatt_add_char>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomSwitch_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8010ac4:	7dfb      	ldrb	r3, [r7, #23]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d00f      	beq.n	8010aea <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : SWITCH_C, error code: 0x%x \n\r", ret);
 8010aca:	4812      	ldr	r0, [pc, #72]	@ (8010b14 <SVCCTL_InitCustomSvc+0x210>)
 8010acc:	f7fe f8d2 	bl	800ec74 <DbgTraceGetFileName>
 8010ad0:	4601      	mov	r1, r0
 8010ad2:	f240 136f 	movw	r3, #367	@ 0x16f
 8010ad6:	4a10      	ldr	r2, [pc, #64]	@ (8010b18 <SVCCTL_InitCustomSvc+0x214>)
 8010ad8:	4810      	ldr	r0, [pc, #64]	@ (8010b1c <SVCCTL_InitCustomSvc+0x218>)
 8010ada:	f001 fb85 	bl	80121e8 <iprintf>
 8010ade:	7dfb      	ldrb	r3, [r7, #23]
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4817      	ldr	r0, [pc, #92]	@ (8010b40 <SVCCTL_InitCustomSvc+0x23c>)
 8010ae4:	f001 fb80 	bl	80121e8 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8010ae8:	e00d      	b.n	8010b06 <SVCCTL_InitCustomSvc+0x202>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : SWITCH_C \n\r");
 8010aea:	480a      	ldr	r0, [pc, #40]	@ (8010b14 <SVCCTL_InitCustomSvc+0x210>)
 8010aec:	f7fe f8c2 	bl	800ec74 <DbgTraceGetFileName>
 8010af0:	4601      	mov	r1, r0
 8010af2:	f240 1373 	movw	r3, #371	@ 0x173
 8010af6:	4a08      	ldr	r2, [pc, #32]	@ (8010b18 <SVCCTL_InitCustomSvc+0x214>)
 8010af8:	4808      	ldr	r0, [pc, #32]	@ (8010b1c <SVCCTL_InitCustomSvc+0x218>)
 8010afa:	f001 fb75 	bl	80121e8 <iprintf>
 8010afe:	4811      	ldr	r0, [pc, #68]	@ (8010b44 <SVCCTL_InitCustomSvc+0x240>)
 8010b00:	f001 fb72 	bl	80121e8 <iprintf>
  return;
 8010b04:	bf00      	nop
}
 8010b06:	3718      	adds	r7, #24
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}
 8010b0c:	080107c1 	.word	0x080107c1
 8010b10:	20000604 	.word	0x20000604
 8010b14:	080144b8 	.word	0x080144b8
 8010b18:	08014cc4 	.word	0x08014cc4
 8010b1c:	080144d8 	.word	0x080144d8
 8010b20:	080144ec 	.word	0x080144ec
 8010b24:	08014534 	.word	0x08014534
 8010b28:	200000b4 	.word	0x200000b4
 8010b2c:	20000606 	.word	0x20000606
 8010b30:	08014568 	.word	0x08014568
 8010b34:	080145ac 	.word	0x080145ac
 8010b38:	200000b6 	.word	0x200000b6
 8010b3c:	20000608 	.word	0x20000608
 8010b40:	080145e0 	.word	0x080145e0
 8010b44:	08014628 	.word	0x08014628

08010b48 <LL_PWR_EnableBootC2>:
{
 8010b48:	b480      	push	{r7}
 8010b4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8010b4c:	4b05      	ldr	r3, [pc, #20]	@ (8010b64 <LL_PWR_EnableBootC2+0x1c>)
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	4a04      	ldr	r2, [pc, #16]	@ (8010b64 <LL_PWR_EnableBootC2+0x1c>)
 8010b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010b56:	60d3      	str	r3, [r2, #12]
}
 8010b58:	bf00      	nop
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b60:	4770      	bx	lr
 8010b62:	bf00      	nop
 8010b64:	58000400 	.word	0x58000400

08010b68 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8010b70:	4b06      	ldr	r3, [pc, #24]	@ (8010b8c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010b72:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8010b76:	4905      	ldr	r1, [pc, #20]	@ (8010b8c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	4313      	orrs	r3, r2
 8010b7c:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8010b80:	bf00      	nop
 8010b82:	370c      	adds	r7, #12
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr
 8010b8c:	58000800 	.word	0x58000800

08010b90 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8010b90:	b480      	push	{r7}
 8010b92:	b083      	sub	sp, #12
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8010b98:	4b05      	ldr	r3, [pc, #20]	@ (8010bb0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010b9a:	6a1a      	ldr	r2, [r3, #32]
 8010b9c:	4904      	ldr	r1, [pc, #16]	@ (8010bb0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	4313      	orrs	r3, r2
 8010ba2:	620b      	str	r3, [r1, #32]
}
 8010ba4:	bf00      	nop
 8010ba6:	370c      	adds	r7, #12
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bae:	4770      	bx	lr
 8010bb0:	58000800 	.word	0x58000800

08010bb4 <LL_AHB3_GRP1_EnableClock>:
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8010bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010bc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010bc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	4313      	orrs	r3, r2
 8010bca:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8010bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010bd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	4013      	ands	r3, r2
 8010bd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
}
 8010bda:	bf00      	nop
 8010bdc:	3714      	adds	r7, #20
 8010bde:	46bd      	mov	sp, r7
 8010be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be4:	4770      	bx	lr

08010be6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8010be6:	b480      	push	{r7}
 8010be8:	b085      	sub	sp, #20
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8010bee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010bf2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8010bf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	4313      	orrs	r3, r2
 8010bfe:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8010c02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010c06:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	4013      	ands	r3, r2
 8010c0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010c10:	68fb      	ldr	r3, [r7, #12]
}
 8010c12:	bf00      	nop
 8010c14:	3714      	adds	r7, #20
 8010c16:	46bd      	mov	sp, r7
 8010c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1c:	4770      	bx	lr

08010c1e <LL_C1_IPCC_EnableIT_TXF>:
{
 8010c1e:	b480      	push	{r7}
 8010c20:	b083      	sub	sp, #12
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	601a      	str	r2, [r3, #0]
}
 8010c32:	bf00      	nop
 8010c34:	370c      	adds	r7, #12
 8010c36:	46bd      	mov	sp, r7
 8010c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3c:	4770      	bx	lr

08010c3e <LL_C1_IPCC_EnableIT_RXO>:
{
 8010c3e:	b480      	push	{r7}
 8010c40:	b083      	sub	sp, #12
 8010c42:	af00      	add	r7, sp, #0
 8010c44:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	f043 0201 	orr.w	r2, r3, #1
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	601a      	str	r2, [r3, #0]
}
 8010c52:	bf00      	nop
 8010c54:	370c      	adds	r7, #12
 8010c56:	46bd      	mov	sp, r7
 8010c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5c:	4770      	bx	lr

08010c5e <LL_C1_IPCC_EnableTransmitChannel>:
{
 8010c5e:	b480      	push	{r7}
 8010c60:	b083      	sub	sp, #12
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	6078      	str	r0, [r7, #4]
 8010c66:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	685a      	ldr	r2, [r3, #4]
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	041b      	lsls	r3, r3, #16
 8010c70:	43db      	mvns	r3, r3
 8010c72:	401a      	ands	r2, r3
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	605a      	str	r2, [r3, #4]
}
 8010c78:	bf00      	nop
 8010c7a:	370c      	adds	r7, #12
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr

08010c84 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8010c84:	b480      	push	{r7}
 8010c86:	b083      	sub	sp, #12
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	685a      	ldr	r2, [r3, #4]
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	041b      	lsls	r3, r3, #16
 8010c96:	431a      	orrs	r2, r3
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	605a      	str	r2, [r3, #4]
}
 8010c9c:	bf00      	nop
 8010c9e:	370c      	adds	r7, #12
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr

08010ca8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	685a      	ldr	r2, [r3, #4]
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	43db      	mvns	r3, r3
 8010cba:	401a      	ands	r2, r3
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	605a      	str	r2, [r3, #4]
}
 8010cc0:	bf00      	nop
 8010cc2:	370c      	adds	r7, #12
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cca:	4770      	bx	lr

08010ccc <LL_C1_IPCC_ClearFlag_CHx>:
{
 8010ccc:	b480      	push	{r7}
 8010cce:	b083      	sub	sp, #12
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
 8010cd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	683a      	ldr	r2, [r7, #0]
 8010cda:	609a      	str	r2, [r3, #8]
}
 8010cdc:	bf00      	nop
 8010cde:	370c      	adds	r7, #12
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr

08010ce8 <LL_C1_IPCC_SetFlag_CHx>:
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b083      	sub	sp, #12
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	041a      	lsls	r2, r3, #16
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	609a      	str	r2, [r3, #8]
}
 8010cfa:	bf00      	nop
 8010cfc:	370c      	adds	r7, #12
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d04:	4770      	bx	lr

08010d06 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8010d06:	b480      	push	{r7}
 8010d08:	b083      	sub	sp, #12
 8010d0a:	af00      	add	r7, sp, #0
 8010d0c:	6078      	str	r0, [r7, #4]
 8010d0e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	68da      	ldr	r2, [r3, #12]
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	4013      	ands	r3, r2
 8010d18:	683a      	ldr	r2, [r7, #0]
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d101      	bne.n	8010d22 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8010d1e:	2301      	movs	r3, #1
 8010d20:	e000      	b.n	8010d24 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8010d22:	2300      	movs	r3, #0
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	370c      	adds	r7, #12
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr

08010d30 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b083      	sub	sp, #12
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	69da      	ldr	r2, [r3, #28]
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	4013      	ands	r3, r2
 8010d42:	683a      	ldr	r2, [r7, #0]
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d101      	bne.n	8010d4c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8010d48:	2301      	movs	r3, #1
 8010d4a:	e000      	b.n	8010d4e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8010d4c:	2300      	movs	r3, #0
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	370c      	adds	r7, #12
 8010d52:	46bd      	mov	sp, r7
 8010d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d58:	4770      	bx	lr
	...

08010d5c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8010d60:	2102      	movs	r1, #2
 8010d62:	4818      	ldr	r0, [pc, #96]	@ (8010dc4 <HW_IPCC_Rx_Handler+0x68>)
 8010d64:	f7ff ffe4 	bl	8010d30 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d008      	beq.n	8010d80 <HW_IPCC_Rx_Handler+0x24>
 8010d6e:	4b15      	ldr	r3, [pc, #84]	@ (8010dc4 <HW_IPCC_Rx_Handler+0x68>)
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	f003 0302 	and.w	r3, r3, #2
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d102      	bne.n	8010d80 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8010d7a:	f000 f925 	bl	8010fc8 <HW_IPCC_SYS_EvtHandler>
 8010d7e:	e01e      	b.n	8010dbe <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8010d80:	2101      	movs	r1, #1
 8010d82:	4810      	ldr	r0, [pc, #64]	@ (8010dc4 <HW_IPCC_Rx_Handler+0x68>)
 8010d84:	f7ff ffd4 	bl	8010d30 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d008      	beq.n	8010da0 <HW_IPCC_Rx_Handler+0x44>
 8010d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8010dc4 <HW_IPCC_Rx_Handler+0x68>)
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	f003 0301 	and.w	r3, r3, #1
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d102      	bne.n	8010da0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8010d9a:	f000 f899 	bl	8010ed0 <HW_IPCC_BLE_EvtHandler>
 8010d9e:	e00e      	b.n	8010dbe <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8010da0:	2108      	movs	r1, #8
 8010da2:	4808      	ldr	r0, [pc, #32]	@ (8010dc4 <HW_IPCC_Rx_Handler+0x68>)
 8010da4:	f7ff ffc4 	bl	8010d30 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010da8:	4603      	mov	r3, r0
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d008      	beq.n	8010dc0 <HW_IPCC_Rx_Handler+0x64>
 8010dae:	4b05      	ldr	r3, [pc, #20]	@ (8010dc4 <HW_IPCC_Rx_Handler+0x68>)
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	f003 0308 	and.w	r3, r3, #8
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d102      	bne.n	8010dc0 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8010dba:	f000 f97d 	bl	80110b8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8010dbe:	bf00      	nop
 8010dc0:	bf00      	nop
}
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	58000c00 	.word	0x58000c00

08010dc8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8010dcc:	2102      	movs	r1, #2
 8010dce:	4818      	ldr	r0, [pc, #96]	@ (8010e30 <HW_IPCC_Tx_Handler+0x68>)
 8010dd0:	f7ff ff99 	bl	8010d06 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d108      	bne.n	8010dec <HW_IPCC_Tx_Handler+0x24>
 8010dda:	4b15      	ldr	r3, [pc, #84]	@ (8010e30 <HW_IPCC_Tx_Handler+0x68>)
 8010ddc:	685b      	ldr	r3, [r3, #4]
 8010dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d102      	bne.n	8010dec <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8010de6:	f000 f8d3 	bl	8010f90 <HW_IPCC_SYS_CmdEvtHandler>
 8010dea:	e01e      	b.n	8010e2a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8010dec:	2108      	movs	r1, #8
 8010dee:	4810      	ldr	r0, [pc, #64]	@ (8010e30 <HW_IPCC_Tx_Handler+0x68>)
 8010df0:	f7ff ff89 	bl	8010d06 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010df4:	4603      	mov	r3, r0
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d108      	bne.n	8010e0c <HW_IPCC_Tx_Handler+0x44>
 8010dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8010e30 <HW_IPCC_Tx_Handler+0x68>)
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d102      	bne.n	8010e0c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8010e06:	f000 f919 	bl	801103c <HW_IPCC_MM_FreeBufHandler>
 8010e0a:	e00e      	b.n	8010e2a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8010e0c:	2120      	movs	r1, #32
 8010e0e:	4808      	ldr	r0, [pc, #32]	@ (8010e30 <HW_IPCC_Tx_Handler+0x68>)
 8010e10:	f7ff ff79 	bl	8010d06 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010e14:	4603      	mov	r3, r0
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d108      	bne.n	8010e2c <HW_IPCC_Tx_Handler+0x64>
 8010e1a:	4b05      	ldr	r3, [pc, #20]	@ (8010e30 <HW_IPCC_Tx_Handler+0x68>)
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d102      	bne.n	8010e2c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8010e26:	f000 f85f 	bl	8010ee8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8010e2a:	bf00      	nop
 8010e2c:	bf00      	nop
}
 8010e2e:	bd80      	pop	{r7, pc}
 8010e30:	58000c00 	.word	0x58000c00

08010e34 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8010e38:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8010e3c:	f7ff fed3 	bl	8010be6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8010e40:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010e44:	f7ff fea4 	bl	8010b90 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8010e48:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010e4c:	f7ff fe8c 	bl	8010b68 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8010e50:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8010e52:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8010e54:	f7ff fe78 	bl	8010b48 <LL_PWR_EnableBootC2>

  return;
 8010e58:	bf00      	nop
}
 8010e5a:	bd80      	pop	{r7, pc}

08010e5c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8010e60:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8010e64:	f7ff fea6 	bl	8010bb4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8010e68:	4806      	ldr	r0, [pc, #24]	@ (8010e84 <HW_IPCC_Init+0x28>)
 8010e6a:	f7ff fee8 	bl	8010c3e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8010e6e:	4805      	ldr	r0, [pc, #20]	@ (8010e84 <HW_IPCC_Init+0x28>)
 8010e70:	f7ff fed5 	bl	8010c1e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8010e74:	202c      	movs	r0, #44	@ 0x2c
 8010e76:	f7f2 fb34 	bl	80034e2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8010e7a:	202d      	movs	r0, #45	@ 0x2d
 8010e7c:	f7f2 fb31 	bl	80034e2 <HAL_NVIC_EnableIRQ>

  return;
 8010e80:	bf00      	nop
}
 8010e82:	bd80      	pop	{r7, pc}
 8010e84:	58000c00 	.word	0x58000c00

08010e88 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b084      	sub	sp, #16
 8010e8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8010e92:	607b      	str	r3, [r7, #4]
  return(result);
 8010e94:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8010e96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e98:	b672      	cpsid	i
}
 8010e9a:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8010e9c:	2101      	movs	r1, #1
 8010e9e:	4806      	ldr	r0, [pc, #24]	@ (8010eb8 <HW_IPCC_BLE_Init+0x30>)
 8010ea0:	f7ff ff02 	bl	8010ca8 <LL_C1_IPCC_EnableReceiveChannel>
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	f383 8810 	msr	PRIMASK, r3
}
 8010eae:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8010eb0:	bf00      	nop
}
 8010eb2:	3710      	adds	r7, #16
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}
 8010eb8:	58000c00 	.word	0x58000c00

08010ebc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8010ec0:	2101      	movs	r1, #1
 8010ec2:	4802      	ldr	r0, [pc, #8]	@ (8010ecc <HW_IPCC_BLE_SendCmd+0x10>)
 8010ec4:	f7ff ff10 	bl	8010ce8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010ec8:	bf00      	nop
}
 8010eca:	bd80      	pop	{r7, pc}
 8010ecc:	58000c00 	.word	0x58000c00

08010ed0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8010ed4:	f7fd fd16 	bl	800e904 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8010ed8:	2101      	movs	r1, #1
 8010eda:	4802      	ldr	r0, [pc, #8]	@ (8010ee4 <HW_IPCC_BLE_EvtHandler+0x14>)
 8010edc:	f7ff fef6 	bl	8010ccc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010ee0:	bf00      	nop
}
 8010ee2:	bd80      	pop	{r7, pc}
 8010ee4:	58000c00 	.word	0x58000c00

08010ee8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b084      	sub	sp, #16
 8010eec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010eee:	f3ef 8310 	mrs	r3, PRIMASK
 8010ef2:	607b      	str	r3, [r7, #4]
  return(result);
 8010ef4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8010ef6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010ef8:	b672      	cpsid	i
}
 8010efa:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8010efc:	2120      	movs	r1, #32
 8010efe:	4807      	ldr	r0, [pc, #28]	@ (8010f1c <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 8010f00:	f7ff fec0 	bl	8010c84 <LL_C1_IPCC_DisableTransmitChannel>
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	f383 8810 	msr	PRIMASK, r3
}
 8010f0e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 8010f10:	f7fd fd28 	bl	800e964 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8010f14:	bf00      	nop
}
 8010f16:	3710      	adds	r7, #16
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	58000c00 	.word	0x58000c00

08010f20 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b084      	sub	sp, #16
 8010f24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f26:	f3ef 8310 	mrs	r3, PRIMASK
 8010f2a:	607b      	str	r3, [r7, #4]
  return(result);
 8010f2c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8010f2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010f30:	b672      	cpsid	i
}
 8010f32:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010f34:	2102      	movs	r1, #2
 8010f36:	4806      	ldr	r0, [pc, #24]	@ (8010f50 <HW_IPCC_SYS_Init+0x30>)
 8010f38:	f7ff feb6 	bl	8010ca8 <LL_C1_IPCC_EnableReceiveChannel>
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	f383 8810 	msr	PRIMASK, r3
}
 8010f46:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8010f48:	bf00      	nop
}
 8010f4a:	3710      	adds	r7, #16
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}
 8010f50:	58000c00 	.word	0x58000c00

08010f54 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b084      	sub	sp, #16
 8010f58:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010f5a:	2102      	movs	r1, #2
 8010f5c:	480b      	ldr	r0, [pc, #44]	@ (8010f8c <HW_IPCC_SYS_SendCmd+0x38>)
 8010f5e:	f7ff fec3 	bl	8010ce8 <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f62:	f3ef 8310 	mrs	r3, PRIMASK
 8010f66:	607b      	str	r3, [r7, #4]
  return(result);
 8010f68:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8010f6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010f6c:	b672      	cpsid	i
}
 8010f6e:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010f70:	2102      	movs	r1, #2
 8010f72:	4806      	ldr	r0, [pc, #24]	@ (8010f8c <HW_IPCC_SYS_SendCmd+0x38>)
 8010f74:	f7ff fe73 	bl	8010c5e <LL_C1_IPCC_EnableTransmitChannel>
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	f383 8810 	msr	PRIMASK, r3
}
 8010f82:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8010f84:	bf00      	nop
}
 8010f86:	3710      	adds	r7, #16
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}
 8010f8c:	58000c00 	.word	0x58000c00

08010f90 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b084      	sub	sp, #16
 8010f94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f96:	f3ef 8310 	mrs	r3, PRIMASK
 8010f9a:	607b      	str	r3, [r7, #4]
  return(result);
 8010f9c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8010f9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010fa0:	b672      	cpsid	i
}
 8010fa2:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010fa4:	2102      	movs	r1, #2
 8010fa6:	4807      	ldr	r0, [pc, #28]	@ (8010fc4 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 8010fa8:	f7ff fe6c 	bl	8010c84 <LL_C1_IPCC_DisableTransmitChannel>
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	f383 8810 	msr	PRIMASK, r3
}
 8010fb6:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 8010fb8:	f7fd fd24 	bl	800ea04 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8010fbc:	bf00      	nop
}
 8010fbe:	3710      	adds	r7, #16
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}
 8010fc4:	58000c00 	.word	0x58000c00

08010fc8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8010fcc:	f7fd fd30 	bl	800ea30 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010fd0:	2102      	movs	r1, #2
 8010fd2:	4802      	ldr	r0, [pc, #8]	@ (8010fdc <HW_IPCC_SYS_EvtHandler+0x14>)
 8010fd4:	f7ff fe7a 	bl	8010ccc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010fd8:	bf00      	nop
}
 8010fda:	bd80      	pop	{r7, pc}
 8010fdc:	58000c00 	.word	0x58000c00

08010fe0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b086      	sub	sp, #24
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8010fe8:	2108      	movs	r1, #8
 8010fea:	4812      	ldr	r0, [pc, #72]	@ (8011034 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8010fec:	f7ff fe8b 	bl	8010d06 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d013      	beq.n	801101e <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 8010ff6:	4a10      	ldr	r2, [pc, #64]	@ (8011038 <HW_IPCC_MM_SendFreeBuf+0x58>)
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8011000:	60fb      	str	r3, [r7, #12]
  return(result);
 8011002:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 8011004:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011006:	b672      	cpsid	i
}
 8011008:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801100a:	2108      	movs	r1, #8
 801100c:	4809      	ldr	r0, [pc, #36]	@ (8011034 <HW_IPCC_MM_SendFreeBuf+0x54>)
 801100e:	f7ff fe26 	bl	8010c5e <LL_C1_IPCC_EnableTransmitChannel>
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	f383 8810 	msr	PRIMASK, r3
}
 801101c:	e005      	b.n	801102a <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011022:	2108      	movs	r1, #8
 8011024:	4803      	ldr	r0, [pc, #12]	@ (8011034 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8011026:	f7ff fe5f 	bl	8010ce8 <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 801102a:	bf00      	nop
}
 801102c:	3718      	adds	r7, #24
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	58000c00 	.word	0x58000c00
 8011038:	2000060c 	.word	0x2000060c

0801103c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b084      	sub	sp, #16
 8011040:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011042:	f3ef 8310 	mrs	r3, PRIMASK
 8011046:	607b      	str	r3, [r7, #4]
  return(result);
 8011048:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 801104a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801104c:	b672      	cpsid	i
}
 801104e:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011050:	2108      	movs	r1, #8
 8011052:	480a      	ldr	r0, [pc, #40]	@ (801107c <HW_IPCC_MM_FreeBufHandler+0x40>)
 8011054:	f7ff fe16 	bl	8010c84 <LL_C1_IPCC_DisableTransmitChannel>
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	f383 8810 	msr	PRIMASK, r3
}
 8011062:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 8011064:	4b06      	ldr	r3, [pc, #24]	@ (8011080 <HW_IPCC_MM_FreeBufHandler+0x44>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801106a:	2108      	movs	r1, #8
 801106c:	4803      	ldr	r0, [pc, #12]	@ (801107c <HW_IPCC_MM_FreeBufHandler+0x40>)
 801106e:	f7ff fe3b 	bl	8010ce8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011072:	bf00      	nop
}
 8011074:	3710      	adds	r7, #16
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	58000c00 	.word	0x58000c00
 8011080:	2000060c 	.word	0x2000060c

08011084 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b084      	sub	sp, #16
 8011088:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801108a:	f3ef 8310 	mrs	r3, PRIMASK
 801108e:	607b      	str	r3, [r7, #4]
  return(result);
 8011090:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8011092:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011094:	b672      	cpsid	i
}
 8011096:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8011098:	2108      	movs	r1, #8
 801109a:	4806      	ldr	r0, [pc, #24]	@ (80110b4 <HW_IPCC_TRACES_Init+0x30>)
 801109c:	f7ff fe04 	bl	8010ca8 <LL_C1_IPCC_EnableReceiveChannel>
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	f383 8810 	msr	PRIMASK, r3
}
 80110aa:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80110ac:	bf00      	nop
}
 80110ae:	3710      	adds	r7, #16
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	58000c00 	.word	0x58000c00

080110b8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80110bc:	f7fd fd60 	bl	800eb80 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80110c0:	2108      	movs	r1, #8
 80110c2:	4802      	ldr	r0, [pc, #8]	@ (80110cc <HW_IPCC_TRACES_EvtHandler+0x14>)
 80110c4:	f7ff fe02 	bl	8010ccc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80110c8:	bf00      	nop
}
 80110ca:	bd80      	pop	{r7, pc}
 80110cc:	58000c00 	.word	0x58000c00

080110d0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80110d4:	2200      	movs	r2, #0
 80110d6:	4912      	ldr	r1, [pc, #72]	@ (8011120 <MX_USB_Device_Init+0x50>)
 80110d8:	4812      	ldr	r0, [pc, #72]	@ (8011124 <MX_USB_Device_Init+0x54>)
 80110da:	f7fa fabd 	bl	800b658 <USBD_Init>
 80110de:	4603      	mov	r3, r0
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d001      	beq.n	80110e8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80110e4:	f7f1 fd34 	bl	8002b50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80110e8:	490f      	ldr	r1, [pc, #60]	@ (8011128 <MX_USB_Device_Init+0x58>)
 80110ea:	480e      	ldr	r0, [pc, #56]	@ (8011124 <MX_USB_Device_Init+0x54>)
 80110ec:	f7fa fae4 	bl	800b6b8 <USBD_RegisterClass>
 80110f0:	4603      	mov	r3, r0
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d001      	beq.n	80110fa <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80110f6:	f7f1 fd2b 	bl	8002b50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80110fa:	490c      	ldr	r1, [pc, #48]	@ (801112c <MX_USB_Device_Init+0x5c>)
 80110fc:	4809      	ldr	r0, [pc, #36]	@ (8011124 <MX_USB_Device_Init+0x54>)
 80110fe:	f7fa f9db 	bl	800b4b8 <USBD_CDC_RegisterInterface>
 8011102:	4603      	mov	r3, r0
 8011104:	2b00      	cmp	r3, #0
 8011106:	d001      	beq.n	801110c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011108:	f7f1 fd22 	bl	8002b50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801110c:	4805      	ldr	r0, [pc, #20]	@ (8011124 <MX_USB_Device_Init+0x54>)
 801110e:	f7fa fb09 	bl	800b724 <USBD_Start>
 8011112:	4603      	mov	r3, r0
 8011114:	2b00      	cmp	r3, #0
 8011116:	d001      	beq.n	801111c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011118:	f7f1 fd1a 	bl	8002b50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801111c:	bf00      	nop
 801111e:	bd80      	pop	{r7, pc}
 8011120:	200000cc 	.word	0x200000cc
 8011124:	20000610 	.word	0x20000610
 8011128:	20000020 	.word	0x20000020
 801112c:	200000b8 	.word	0x200000b8

08011130 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011134:	2200      	movs	r2, #0
 8011136:	4905      	ldr	r1, [pc, #20]	@ (801114c <CDC_Init_FS+0x1c>)
 8011138:	4805      	ldr	r0, [pc, #20]	@ (8011150 <CDC_Init_FS+0x20>)
 801113a:	f7fa f9d7 	bl	800b4ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801113e:	4905      	ldr	r1, [pc, #20]	@ (8011154 <CDC_Init_FS+0x24>)
 8011140:	4803      	ldr	r0, [pc, #12]	@ (8011150 <CDC_Init_FS+0x20>)
 8011142:	f7fa f9f5 	bl	800b530 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011146:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011148:	4618      	mov	r0, r3
 801114a:	bd80      	pop	{r7, pc}
 801114c:	200010ec 	.word	0x200010ec
 8011150:	20000610 	.word	0x20000610
 8011154:	200008ec 	.word	0x200008ec

08011158 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011158:	b480      	push	{r7}
 801115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801115c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801115e:	4618      	mov	r0, r3
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr

08011168 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011168:	b480      	push	{r7}
 801116a:	b083      	sub	sp, #12
 801116c:	af00      	add	r7, sp, #0
 801116e:	4603      	mov	r3, r0
 8011170:	6039      	str	r1, [r7, #0]
 8011172:	71fb      	strb	r3, [r7, #7]
 8011174:	4613      	mov	r3, r2
 8011176:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011178:	79fb      	ldrb	r3, [r7, #7]
 801117a:	2b23      	cmp	r3, #35	@ 0x23
 801117c:	d84a      	bhi.n	8011214 <CDC_Control_FS+0xac>
 801117e:	a201      	add	r2, pc, #4	@ (adr r2, 8011184 <CDC_Control_FS+0x1c>)
 8011180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011184:	08011215 	.word	0x08011215
 8011188:	08011215 	.word	0x08011215
 801118c:	08011215 	.word	0x08011215
 8011190:	08011215 	.word	0x08011215
 8011194:	08011215 	.word	0x08011215
 8011198:	08011215 	.word	0x08011215
 801119c:	08011215 	.word	0x08011215
 80111a0:	08011215 	.word	0x08011215
 80111a4:	08011215 	.word	0x08011215
 80111a8:	08011215 	.word	0x08011215
 80111ac:	08011215 	.word	0x08011215
 80111b0:	08011215 	.word	0x08011215
 80111b4:	08011215 	.word	0x08011215
 80111b8:	08011215 	.word	0x08011215
 80111bc:	08011215 	.word	0x08011215
 80111c0:	08011215 	.word	0x08011215
 80111c4:	08011215 	.word	0x08011215
 80111c8:	08011215 	.word	0x08011215
 80111cc:	08011215 	.word	0x08011215
 80111d0:	08011215 	.word	0x08011215
 80111d4:	08011215 	.word	0x08011215
 80111d8:	08011215 	.word	0x08011215
 80111dc:	08011215 	.word	0x08011215
 80111e0:	08011215 	.word	0x08011215
 80111e4:	08011215 	.word	0x08011215
 80111e8:	08011215 	.word	0x08011215
 80111ec:	08011215 	.word	0x08011215
 80111f0:	08011215 	.word	0x08011215
 80111f4:	08011215 	.word	0x08011215
 80111f8:	08011215 	.word	0x08011215
 80111fc:	08011215 	.word	0x08011215
 8011200:	08011215 	.word	0x08011215
 8011204:	08011215 	.word	0x08011215
 8011208:	08011215 	.word	0x08011215
 801120c:	08011215 	.word	0x08011215
 8011210:	08011215 	.word	0x08011215
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011214:	bf00      	nop
  }

  return (USBD_OK);
 8011216:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011218:	4618      	mov	r0, r3
 801121a:	370c      	adds	r7, #12
 801121c:	46bd      	mov	sp, r7
 801121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011222:	4770      	bx	lr

08011224 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801122e:	6879      	ldr	r1, [r7, #4]
 8011230:	4805      	ldr	r0, [pc, #20]	@ (8011248 <CDC_Receive_FS+0x24>)
 8011232:	f7fa f97d 	bl	800b530 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011236:	4804      	ldr	r0, [pc, #16]	@ (8011248 <CDC_Receive_FS+0x24>)
 8011238:	f7fa f9d8 	bl	800b5ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801123c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801123e:	4618      	mov	r0, r3
 8011240:	3708      	adds	r7, #8
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
 8011246:	bf00      	nop
 8011248:	20000610 	.word	0x20000610

0801124c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b084      	sub	sp, #16
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	460b      	mov	r3, r1
 8011256:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011258:	2300      	movs	r3, #0
 801125a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801125c:	4b0d      	ldr	r3, [pc, #52]	@ (8011294 <CDC_Transmit_FS+0x48>)
 801125e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011262:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801126a:	2b00      	cmp	r3, #0
 801126c:	d001      	beq.n	8011272 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801126e:	2301      	movs	r3, #1
 8011270:	e00b      	b.n	801128a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011272:	887b      	ldrh	r3, [r7, #2]
 8011274:	461a      	mov	r2, r3
 8011276:	6879      	ldr	r1, [r7, #4]
 8011278:	4806      	ldr	r0, [pc, #24]	@ (8011294 <CDC_Transmit_FS+0x48>)
 801127a:	f7fa f937 	bl	800b4ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801127e:	4805      	ldr	r0, [pc, #20]	@ (8011294 <CDC_Transmit_FS+0x48>)
 8011280:	f7fa f974 	bl	800b56c <USBD_CDC_TransmitPacket>
 8011284:	4603      	mov	r3, r0
 8011286:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011288:	7bfb      	ldrb	r3, [r7, #15]
}
 801128a:	4618      	mov	r0, r3
 801128c:	3710      	adds	r7, #16
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}
 8011292:	bf00      	nop
 8011294:	20000610 	.word	0x20000610

08011298 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011298:	b480      	push	{r7}
 801129a:	b087      	sub	sp, #28
 801129c:	af00      	add	r7, sp, #0
 801129e:	60f8      	str	r0, [r7, #12]
 80112a0:	60b9      	str	r1, [r7, #8]
 80112a2:	4613      	mov	r3, r2
 80112a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80112a6:	2300      	movs	r3, #0
 80112a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80112aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	371c      	adds	r7, #28
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr
	...

080112bc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112bc:	b480      	push	{r7}
 80112be:	b083      	sub	sp, #12
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	4603      	mov	r3, r0
 80112c4:	6039      	str	r1, [r7, #0]
 80112c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	2212      	movs	r2, #18
 80112cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80112ce:	4b03      	ldr	r3, [pc, #12]	@ (80112dc <USBD_CDC_DeviceDescriptor+0x20>)
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	370c      	adds	r7, #12
 80112d4:	46bd      	mov	sp, r7
 80112d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112da:	4770      	bx	lr
 80112dc:	200000ec 	.word	0x200000ec

080112e0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112e0:	b480      	push	{r7}
 80112e2:	b083      	sub	sp, #12
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	4603      	mov	r3, r0
 80112e8:	6039      	str	r1, [r7, #0]
 80112ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	2204      	movs	r2, #4
 80112f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80112f2:	4b03      	ldr	r3, [pc, #12]	@ (8011300 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	370c      	adds	r7, #12
 80112f8:	46bd      	mov	sp, r7
 80112fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fe:	4770      	bx	lr
 8011300:	20000100 	.word	0x20000100

08011304 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b082      	sub	sp, #8
 8011308:	af00      	add	r7, sp, #0
 801130a:	4603      	mov	r3, r0
 801130c:	6039      	str	r1, [r7, #0]
 801130e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011310:	79fb      	ldrb	r3, [r7, #7]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d105      	bne.n	8011322 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011316:	683a      	ldr	r2, [r7, #0]
 8011318:	4907      	ldr	r1, [pc, #28]	@ (8011338 <USBD_CDC_ProductStrDescriptor+0x34>)
 801131a:	4808      	ldr	r0, [pc, #32]	@ (801133c <USBD_CDC_ProductStrDescriptor+0x38>)
 801131c:	f7fb fb4a 	bl	800c9b4 <USBD_GetString>
 8011320:	e004      	b.n	801132c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011322:	683a      	ldr	r2, [r7, #0]
 8011324:	4904      	ldr	r1, [pc, #16]	@ (8011338 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011326:	4805      	ldr	r0, [pc, #20]	@ (801133c <USBD_CDC_ProductStrDescriptor+0x38>)
 8011328:	f7fb fb44 	bl	800c9b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801132c:	4b02      	ldr	r3, [pc, #8]	@ (8011338 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801132e:	4618      	mov	r0, r3
 8011330:	3708      	adds	r7, #8
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	200018ec 	.word	0x200018ec
 801133c:	08014a08 	.word	0x08014a08

08011340 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b082      	sub	sp, #8
 8011344:	af00      	add	r7, sp, #0
 8011346:	4603      	mov	r3, r0
 8011348:	6039      	str	r1, [r7, #0]
 801134a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801134c:	683a      	ldr	r2, [r7, #0]
 801134e:	4904      	ldr	r1, [pc, #16]	@ (8011360 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011350:	4804      	ldr	r0, [pc, #16]	@ (8011364 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011352:	f7fb fb2f 	bl	800c9b4 <USBD_GetString>
  return USBD_StrDesc;
 8011356:	4b02      	ldr	r3, [pc, #8]	@ (8011360 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011358:	4618      	mov	r0, r3
 801135a:	3708      	adds	r7, #8
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}
 8011360:	200018ec 	.word	0x200018ec
 8011364:	08014a20 	.word	0x08014a20

08011368 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b082      	sub	sp, #8
 801136c:	af00      	add	r7, sp, #0
 801136e:	4603      	mov	r3, r0
 8011370:	6039      	str	r1, [r7, #0]
 8011372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	221a      	movs	r2, #26
 8011378:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801137a:	f000 f843 	bl	8011404 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801137e:	4b02      	ldr	r3, [pc, #8]	@ (8011388 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011380:	4618      	mov	r0, r3
 8011382:	3708      	adds	r7, #8
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}
 8011388:	20000104 	.word	0x20000104

0801138c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b082      	sub	sp, #8
 8011390:	af00      	add	r7, sp, #0
 8011392:	4603      	mov	r3, r0
 8011394:	6039      	str	r1, [r7, #0]
 8011396:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011398:	79fb      	ldrb	r3, [r7, #7]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d105      	bne.n	80113aa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801139e:	683a      	ldr	r2, [r7, #0]
 80113a0:	4907      	ldr	r1, [pc, #28]	@ (80113c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80113a2:	4808      	ldr	r0, [pc, #32]	@ (80113c4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80113a4:	f7fb fb06 	bl	800c9b4 <USBD_GetString>
 80113a8:	e004      	b.n	80113b4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80113aa:	683a      	ldr	r2, [r7, #0]
 80113ac:	4904      	ldr	r1, [pc, #16]	@ (80113c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80113ae:	4805      	ldr	r0, [pc, #20]	@ (80113c4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80113b0:	f7fb fb00 	bl	800c9b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80113b4:	4b02      	ldr	r3, [pc, #8]	@ (80113c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	3708      	adds	r7, #8
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	bf00      	nop
 80113c0:	200018ec 	.word	0x200018ec
 80113c4:	08014a34 	.word	0x08014a34

080113c8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	4603      	mov	r3, r0
 80113d0:	6039      	str	r1, [r7, #0]
 80113d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80113d4:	79fb      	ldrb	r3, [r7, #7]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d105      	bne.n	80113e6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80113da:	683a      	ldr	r2, [r7, #0]
 80113dc:	4907      	ldr	r1, [pc, #28]	@ (80113fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80113de:	4808      	ldr	r0, [pc, #32]	@ (8011400 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80113e0:	f7fb fae8 	bl	800c9b4 <USBD_GetString>
 80113e4:	e004      	b.n	80113f0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80113e6:	683a      	ldr	r2, [r7, #0]
 80113e8:	4904      	ldr	r1, [pc, #16]	@ (80113fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80113ea:	4805      	ldr	r0, [pc, #20]	@ (8011400 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80113ec:	f7fb fae2 	bl	800c9b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80113f0:	4b02      	ldr	r3, [pc, #8]	@ (80113fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3708      	adds	r7, #8
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}
 80113fa:	bf00      	nop
 80113fc:	200018ec 	.word	0x200018ec
 8011400:	08014a40 	.word	0x08014a40

08011404 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b084      	sub	sp, #16
 8011408:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801140a:	4b0f      	ldr	r3, [pc, #60]	@ (8011448 <Get_SerialNum+0x44>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011410:	4b0e      	ldr	r3, [pc, #56]	@ (801144c <Get_SerialNum+0x48>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011416:	4b0e      	ldr	r3, [pc, #56]	@ (8011450 <Get_SerialNum+0x4c>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801141c:	68fa      	ldr	r2, [r7, #12]
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	4413      	add	r3, r2
 8011422:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d009      	beq.n	801143e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801142a:	2208      	movs	r2, #8
 801142c:	4909      	ldr	r1, [pc, #36]	@ (8011454 <Get_SerialNum+0x50>)
 801142e:	68f8      	ldr	r0, [r7, #12]
 8011430:	f000 f814 	bl	801145c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011434:	2204      	movs	r2, #4
 8011436:	4908      	ldr	r1, [pc, #32]	@ (8011458 <Get_SerialNum+0x54>)
 8011438:	68b8      	ldr	r0, [r7, #8]
 801143a:	f000 f80f 	bl	801145c <IntToUnicode>
  }
}
 801143e:	bf00      	nop
 8011440:	3710      	adds	r7, #16
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
 8011446:	bf00      	nop
 8011448:	1fff7590 	.word	0x1fff7590
 801144c:	1fff7594 	.word	0x1fff7594
 8011450:	1fff7598 	.word	0x1fff7598
 8011454:	20000106 	.word	0x20000106
 8011458:	20000116 	.word	0x20000116

0801145c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801145c:	b480      	push	{r7}
 801145e:	b087      	sub	sp, #28
 8011460:	af00      	add	r7, sp, #0
 8011462:	60f8      	str	r0, [r7, #12]
 8011464:	60b9      	str	r1, [r7, #8]
 8011466:	4613      	mov	r3, r2
 8011468:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801146a:	2300      	movs	r3, #0
 801146c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801146e:	2300      	movs	r3, #0
 8011470:	75fb      	strb	r3, [r7, #23]
 8011472:	e027      	b.n	80114c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	0f1b      	lsrs	r3, r3, #28
 8011478:	2b09      	cmp	r3, #9
 801147a:	d80b      	bhi.n	8011494 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	0f1b      	lsrs	r3, r3, #28
 8011480:	b2da      	uxtb	r2, r3
 8011482:	7dfb      	ldrb	r3, [r7, #23]
 8011484:	005b      	lsls	r3, r3, #1
 8011486:	4619      	mov	r1, r3
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	440b      	add	r3, r1
 801148c:	3230      	adds	r2, #48	@ 0x30
 801148e:	b2d2      	uxtb	r2, r2
 8011490:	701a      	strb	r2, [r3, #0]
 8011492:	e00a      	b.n	80114aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	0f1b      	lsrs	r3, r3, #28
 8011498:	b2da      	uxtb	r2, r3
 801149a:	7dfb      	ldrb	r3, [r7, #23]
 801149c:	005b      	lsls	r3, r3, #1
 801149e:	4619      	mov	r1, r3
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	440b      	add	r3, r1
 80114a4:	3237      	adds	r2, #55	@ 0x37
 80114a6:	b2d2      	uxtb	r2, r2
 80114a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	011b      	lsls	r3, r3, #4
 80114ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80114b0:	7dfb      	ldrb	r3, [r7, #23]
 80114b2:	005b      	lsls	r3, r3, #1
 80114b4:	3301      	adds	r3, #1
 80114b6:	68ba      	ldr	r2, [r7, #8]
 80114b8:	4413      	add	r3, r2
 80114ba:	2200      	movs	r2, #0
 80114bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80114be:	7dfb      	ldrb	r3, [r7, #23]
 80114c0:	3301      	adds	r3, #1
 80114c2:	75fb      	strb	r3, [r7, #23]
 80114c4:	7dfa      	ldrb	r2, [r7, #23]
 80114c6:	79fb      	ldrb	r3, [r7, #7]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d3d3      	bcc.n	8011474 <IntToUnicode+0x18>
  }
}
 80114cc:	bf00      	nop
 80114ce:	bf00      	nop
 80114d0:	371c      	adds	r7, #28
 80114d2:	46bd      	mov	sp, r7
 80114d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d8:	4770      	bx	lr

080114da <LL_AHB2_GRP1_EnableClock>:
{
 80114da:	b480      	push	{r7}
 80114dc:	b085      	sub	sp, #20
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80114e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80114e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80114e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	4313      	orrs	r3, r2
 80114f0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80114f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80114f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	4013      	ands	r3, r2
 80114fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80114fe:	68fb      	ldr	r3, [r7, #12]
}
 8011500:	bf00      	nop
 8011502:	3714      	adds	r7, #20
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr

0801150c <LL_APB1_GRP1_EnableClock>:
{
 801150c:	b480      	push	{r7}
 801150e:	b085      	sub	sp, #20
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011518:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801151a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	4313      	orrs	r3, r2
 8011522:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8011524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011528:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4013      	ands	r3, r2
 801152e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011530:	68fb      	ldr	r3, [r7, #12]
}
 8011532:	bf00      	nop
 8011534:	3714      	adds	r7, #20
 8011536:	46bd      	mov	sp, r7
 8011538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153c:	4770      	bx	lr
	...

08011540 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b09c      	sub	sp, #112	@ 0x70
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011548:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801154c:	2200      	movs	r2, #0
 801154e:	601a      	str	r2, [r3, #0]
 8011550:	605a      	str	r2, [r3, #4]
 8011552:	609a      	str	r2, [r3, #8]
 8011554:	60da      	str	r2, [r3, #12]
 8011556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011558:	f107 030c 	add.w	r3, r7, #12
 801155c:	2250      	movs	r2, #80	@ 0x50
 801155e:	2100      	movs	r1, #0
 8011560:	4618      	mov	r0, r3
 8011562:	f000 ffc7 	bl	80124f4 <memset>
  if(pcdHandle->Instance==USB)
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	4a23      	ldr	r2, [pc, #140]	@ (80115f8 <HAL_PCD_MspInit+0xb8>)
 801156c:	4293      	cmp	r3, r2
 801156e:	d13e      	bne.n	80115ee <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011574:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8011576:	2318      	movs	r3, #24
 8011578:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 801157a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801157e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8011580:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011584:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8011586:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801158a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 801158c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011590:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8011592:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8011596:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011598:	f107 030c 	add.w	r3, r7, #12
 801159c:	4618      	mov	r0, r3
 801159e:	f7f5 fd91 	bl	80070c4 <HAL_RCCEx_PeriphCLKConfig>
 80115a2:	4603      	mov	r3, r0
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d001      	beq.n	80115ac <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80115a8:	f7f1 fad2 	bl	8002b50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80115ac:	2001      	movs	r0, #1
 80115ae:	f7ff ff94 	bl	80114da <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80115b2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80115b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115b8:	2302      	movs	r3, #2
 80115ba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115bc:	2300      	movs	r3, #0
 80115be:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80115c0:	2300      	movs	r3, #0
 80115c2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80115c4:	230a      	movs	r3, #10
 80115c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80115c8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80115cc:	4619      	mov	r1, r3
 80115ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80115d2:	f7f2 f9f1 	bl	80039b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80115d6:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80115da:	f7ff ff97 	bl	801150c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80115de:	2200      	movs	r2, #0
 80115e0:	2100      	movs	r1, #0
 80115e2:	2014      	movs	r0, #20
 80115e4:	f7f1 ff63 	bl	80034ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80115e8:	2014      	movs	r0, #20
 80115ea:	f7f1 ff7a 	bl	80034e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80115ee:	bf00      	nop
 80115f0:	3770      	adds	r7, #112	@ 0x70
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
 80115f6:	bf00      	nop
 80115f8:	40006800 	.word	0x40006800

080115fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b082      	sub	sp, #8
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8011610:	4619      	mov	r1, r3
 8011612:	4610      	mov	r0, r2
 8011614:	f7fa f8d3 	bl	800b7be <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011618:	bf00      	nop
 801161a:	3708      	adds	r7, #8
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b082      	sub	sp, #8
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	460b      	mov	r3, r1
 801162a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8011632:	78fa      	ldrb	r2, [r7, #3]
 8011634:	6879      	ldr	r1, [r7, #4]
 8011636:	4613      	mov	r3, r2
 8011638:	009b      	lsls	r3, r3, #2
 801163a:	4413      	add	r3, r2
 801163c:	00db      	lsls	r3, r3, #3
 801163e:	440b      	add	r3, r1
 8011640:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	78fb      	ldrb	r3, [r7, #3]
 8011648:	4619      	mov	r1, r3
 801164a:	f7fa f90d 	bl	800b868 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801164e:	bf00      	nop
 8011650:	3708      	adds	r7, #8
 8011652:	46bd      	mov	sp, r7
 8011654:	bd80      	pop	{r7, pc}

08011656 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011656:	b580      	push	{r7, lr}
 8011658:	b082      	sub	sp, #8
 801165a:	af00      	add	r7, sp, #0
 801165c:	6078      	str	r0, [r7, #4]
 801165e:	460b      	mov	r3, r1
 8011660:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8011668:	78fa      	ldrb	r2, [r7, #3]
 801166a:	6879      	ldr	r1, [r7, #4]
 801166c:	4613      	mov	r3, r2
 801166e:	009b      	lsls	r3, r3, #2
 8011670:	4413      	add	r3, r2
 8011672:	00db      	lsls	r3, r3, #3
 8011674:	440b      	add	r3, r1
 8011676:	3324      	adds	r3, #36	@ 0x24
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	78fb      	ldrb	r3, [r7, #3]
 801167c:	4619      	mov	r1, r3
 801167e:	f7fa f9a6 	bl	800b9ce <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011682:	bf00      	nop
 8011684:	3708      	adds	r7, #8
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}

0801168a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801168a:	b580      	push	{r7, lr}
 801168c:	b082      	sub	sp, #8
 801168e:	af00      	add	r7, sp, #0
 8011690:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011698:	4618      	mov	r0, r3
 801169a:	f7fa fae0 	bl	800bc5e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801169e:	bf00      	nop
 80116a0:	3708      	adds	r7, #8
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}

080116a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116a6:	b580      	push	{r7, lr}
 80116a8:	b084      	sub	sp, #16
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80116ae:	2301      	movs	r3, #1
 80116b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	795b      	ldrb	r3, [r3, #5]
 80116b6:	2b02      	cmp	r3, #2
 80116b8:	d001      	beq.n	80116be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80116ba:	f7f1 fa49 	bl	8002b50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80116c4:	7bfa      	ldrb	r2, [r7, #15]
 80116c6:	4611      	mov	r1, r2
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7fa fa84 	bl	800bbd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7fa fa2c 	bl	800bb32 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80116da:	bf00      	nop
 80116dc:	3710      	adds	r7, #16
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}
	...

080116e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b082      	sub	sp, #8
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fa fa7f 	bl	800bbf6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	7a5b      	ldrb	r3, [r3, #9]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d005      	beq.n	801170c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011700:	4b04      	ldr	r3, [pc, #16]	@ (8011714 <HAL_PCD_SuspendCallback+0x30>)
 8011702:	691b      	ldr	r3, [r3, #16]
 8011704:	4a03      	ldr	r2, [pc, #12]	@ (8011714 <HAL_PCD_SuspendCallback+0x30>)
 8011706:	f043 0306 	orr.w	r3, r3, #6
 801170a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801170c:	bf00      	nop
 801170e:	3708      	adds	r7, #8
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	e000ed00 	.word	0xe000ed00

08011718 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b082      	sub	sp, #8
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	7a5b      	ldrb	r3, [r3, #9]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d007      	beq.n	8011738 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011728:	4b08      	ldr	r3, [pc, #32]	@ (801174c <HAL_PCD_ResumeCallback+0x34>)
 801172a:	691b      	ldr	r3, [r3, #16]
 801172c:	4a07      	ldr	r2, [pc, #28]	@ (801174c <HAL_PCD_ResumeCallback+0x34>)
 801172e:	f023 0306 	bic.w	r3, r3, #6
 8011732:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011734:	f000 f9fa 	bl	8011b2c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801173e:	4618      	mov	r0, r3
 8011740:	f7fa fa75 	bl	800bc2e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011744:	bf00      	nop
 8011746:	3708      	adds	r7, #8
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	e000ed00 	.word	0xe000ed00

08011750 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b082      	sub	sp, #8
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011758:	4a2c      	ldr	r2, [pc, #176]	@ (801180c <USBD_LL_Init+0xbc>)
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	4a2a      	ldr	r2, [pc, #168]	@ (801180c <USBD_LL_Init+0xbc>)
 8011764:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8011768:	f7f4 f9aa 	bl	8005ac0 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 801176c:	4b27      	ldr	r3, [pc, #156]	@ (801180c <USBD_LL_Init+0xbc>)
 801176e:	4a28      	ldr	r2, [pc, #160]	@ (8011810 <USBD_LL_Init+0xc0>)
 8011770:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011772:	4b26      	ldr	r3, [pc, #152]	@ (801180c <USBD_LL_Init+0xbc>)
 8011774:	2208      	movs	r2, #8
 8011776:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011778:	4b24      	ldr	r3, [pc, #144]	@ (801180c <USBD_LL_Init+0xbc>)
 801177a:	2202      	movs	r2, #2
 801177c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801177e:	4b23      	ldr	r3, [pc, #140]	@ (801180c <USBD_LL_Init+0xbc>)
 8011780:	2202      	movs	r2, #2
 8011782:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011784:	4b21      	ldr	r3, [pc, #132]	@ (801180c <USBD_LL_Init+0xbc>)
 8011786:	2200      	movs	r2, #0
 8011788:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801178a:	4b20      	ldr	r3, [pc, #128]	@ (801180c <USBD_LL_Init+0xbc>)
 801178c:	2200      	movs	r2, #0
 801178e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011790:	4b1e      	ldr	r3, [pc, #120]	@ (801180c <USBD_LL_Init+0xbc>)
 8011792:	2200      	movs	r2, #0
 8011794:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011796:	4b1d      	ldr	r3, [pc, #116]	@ (801180c <USBD_LL_Init+0xbc>)
 8011798:	2200      	movs	r2, #0
 801179a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801179c:	481b      	ldr	r0, [pc, #108]	@ (801180c <USBD_LL_Init+0xbc>)
 801179e:	f7f2 fc6f 	bl	8004080 <HAL_PCD_Init>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d001      	beq.n	80117ac <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80117a8:	f7f1 f9d2 	bl	8002b50 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80117b2:	2318      	movs	r3, #24
 80117b4:	2200      	movs	r2, #0
 80117b6:	2100      	movs	r1, #0
 80117b8:	f7f4 f8f6 	bl	80059a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80117c2:	2358      	movs	r3, #88	@ 0x58
 80117c4:	2200      	movs	r2, #0
 80117c6:	2180      	movs	r1, #128	@ 0x80
 80117c8:	f7f4 f8ee 	bl	80059a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80117d2:	23c0      	movs	r3, #192	@ 0xc0
 80117d4:	2200      	movs	r2, #0
 80117d6:	2181      	movs	r1, #129	@ 0x81
 80117d8:	f7f4 f8e6 	bl	80059a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80117e2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80117e6:	2200      	movs	r2, #0
 80117e8:	2101      	movs	r1, #1
 80117ea:	f7f4 f8dd 	bl	80059a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80117f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80117f8:	2200      	movs	r2, #0
 80117fa:	2182      	movs	r1, #130	@ 0x82
 80117fc:	f7f4 f8d4 	bl	80059a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011800:	2300      	movs	r3, #0
}
 8011802:	4618      	mov	r0, r3
 8011804:	3708      	adds	r7, #8
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}
 801180a:	bf00      	nop
 801180c:	20001aec 	.word	0x20001aec
 8011810:	40006800 	.word	0x40006800

08011814 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801181c:	2300      	movs	r3, #0
 801181e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011820:	2300      	movs	r3, #0
 8011822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801182a:	4618      	mov	r0, r3
 801182c:	f7f2 fcf6 	bl	800421c <HAL_PCD_Start>
 8011830:	4603      	mov	r3, r0
 8011832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011834:	7bfb      	ldrb	r3, [r7, #15]
 8011836:	4618      	mov	r0, r3
 8011838:	f000 f97e 	bl	8011b38 <USBD_Get_USB_Status>
 801183c:	4603      	mov	r3, r0
 801183e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011840:	7bbb      	ldrb	r3, [r7, #14]
}
 8011842:	4618      	mov	r0, r3
 8011844:	3710      	adds	r7, #16
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}

0801184a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801184a:	b580      	push	{r7, lr}
 801184c:	b084      	sub	sp, #16
 801184e:	af00      	add	r7, sp, #0
 8011850:	6078      	str	r0, [r7, #4]
 8011852:	4608      	mov	r0, r1
 8011854:	4611      	mov	r1, r2
 8011856:	461a      	mov	r2, r3
 8011858:	4603      	mov	r3, r0
 801185a:	70fb      	strb	r3, [r7, #3]
 801185c:	460b      	mov	r3, r1
 801185e:	70bb      	strb	r3, [r7, #2]
 8011860:	4613      	mov	r3, r2
 8011862:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011864:	2300      	movs	r3, #0
 8011866:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011868:	2300      	movs	r3, #0
 801186a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011872:	78bb      	ldrb	r3, [r7, #2]
 8011874:	883a      	ldrh	r2, [r7, #0]
 8011876:	78f9      	ldrb	r1, [r7, #3]
 8011878:	f7f2 fe3d 	bl	80044f6 <HAL_PCD_EP_Open>
 801187c:	4603      	mov	r3, r0
 801187e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011880:	7bfb      	ldrb	r3, [r7, #15]
 8011882:	4618      	mov	r0, r3
 8011884:	f000 f958 	bl	8011b38 <USBD_Get_USB_Status>
 8011888:	4603      	mov	r3, r0
 801188a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801188c:	7bbb      	ldrb	r3, [r7, #14]
}
 801188e:	4618      	mov	r0, r3
 8011890:	3710      	adds	r7, #16
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}

08011896 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011896:	b580      	push	{r7, lr}
 8011898:	b084      	sub	sp, #16
 801189a:	af00      	add	r7, sp, #0
 801189c:	6078      	str	r0, [r7, #4]
 801189e:	460b      	mov	r3, r1
 80118a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118a2:	2300      	movs	r3, #0
 80118a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118a6:	2300      	movs	r3, #0
 80118a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80118b0:	78fa      	ldrb	r2, [r7, #3]
 80118b2:	4611      	mov	r1, r2
 80118b4:	4618      	mov	r0, r3
 80118b6:	f7f2 fe7d 	bl	80045b4 <HAL_PCD_EP_Close>
 80118ba:	4603      	mov	r3, r0
 80118bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118be:	7bfb      	ldrb	r3, [r7, #15]
 80118c0:	4618      	mov	r0, r3
 80118c2:	f000 f939 	bl	8011b38 <USBD_Get_USB_Status>
 80118c6:	4603      	mov	r3, r0
 80118c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3710      	adds	r7, #16
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	460b      	mov	r3, r1
 80118de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118e0:	2300      	movs	r3, #0
 80118e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118e4:	2300      	movs	r3, #0
 80118e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80118ee:	78fa      	ldrb	r2, [r7, #3]
 80118f0:	4611      	mov	r1, r2
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7f2 ff26 	bl	8004744 <HAL_PCD_EP_SetStall>
 80118f8:	4603      	mov	r3, r0
 80118fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118fc:	7bfb      	ldrb	r3, [r7, #15]
 80118fe:	4618      	mov	r0, r3
 8011900:	f000 f91a 	bl	8011b38 <USBD_Get_USB_Status>
 8011904:	4603      	mov	r3, r0
 8011906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011908:	7bbb      	ldrb	r3, [r7, #14]
}
 801190a:	4618      	mov	r0, r3
 801190c:	3710      	adds	r7, #16
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}

08011912 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011912:	b580      	push	{r7, lr}
 8011914:	b084      	sub	sp, #16
 8011916:	af00      	add	r7, sp, #0
 8011918:	6078      	str	r0, [r7, #4]
 801191a:	460b      	mov	r3, r1
 801191c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801191e:	2300      	movs	r3, #0
 8011920:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011922:	2300      	movs	r3, #0
 8011924:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801192c:	78fa      	ldrb	r2, [r7, #3]
 801192e:	4611      	mov	r1, r2
 8011930:	4618      	mov	r0, r3
 8011932:	f7f2 ff59 	bl	80047e8 <HAL_PCD_EP_ClrStall>
 8011936:	4603      	mov	r3, r0
 8011938:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801193a:	7bfb      	ldrb	r3, [r7, #15]
 801193c:	4618      	mov	r0, r3
 801193e:	f000 f8fb 	bl	8011b38 <USBD_Get_USB_Status>
 8011942:	4603      	mov	r3, r0
 8011944:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011946:	7bbb      	ldrb	r3, [r7, #14]
}
 8011948:	4618      	mov	r0, r3
 801194a:	3710      	adds	r7, #16
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}

08011950 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011950:	b480      	push	{r7}
 8011952:	b085      	sub	sp, #20
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
 8011958:	460b      	mov	r3, r1
 801195a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011962:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011968:	2b00      	cmp	r3, #0
 801196a:	da0b      	bge.n	8011984 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801196c:	78fb      	ldrb	r3, [r7, #3]
 801196e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011972:	68f9      	ldr	r1, [r7, #12]
 8011974:	4613      	mov	r3, r2
 8011976:	009b      	lsls	r3, r3, #2
 8011978:	4413      	add	r3, r2
 801197a:	00db      	lsls	r3, r3, #3
 801197c:	440b      	add	r3, r1
 801197e:	3312      	adds	r3, #18
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	e00b      	b.n	801199c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011984:	78fb      	ldrb	r3, [r7, #3]
 8011986:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801198a:	68f9      	ldr	r1, [r7, #12]
 801198c:	4613      	mov	r3, r2
 801198e:	009b      	lsls	r3, r3, #2
 8011990:	4413      	add	r3, r2
 8011992:	00db      	lsls	r3, r3, #3
 8011994:	440b      	add	r3, r1
 8011996:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801199a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801199c:	4618      	mov	r0, r3
 801199e:	3714      	adds	r7, #20
 80119a0:	46bd      	mov	sp, r7
 80119a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a6:	4770      	bx	lr

080119a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b084      	sub	sp, #16
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	460b      	mov	r3, r1
 80119b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119b4:	2300      	movs	r3, #0
 80119b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119b8:	2300      	movs	r3, #0
 80119ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80119c2:	78fa      	ldrb	r2, [r7, #3]
 80119c4:	4611      	mov	r1, r2
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7f2 fd71 	bl	80044ae <HAL_PCD_SetAddress>
 80119cc:	4603      	mov	r3, r0
 80119ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119d0:	7bfb      	ldrb	r3, [r7, #15]
 80119d2:	4618      	mov	r0, r3
 80119d4:	f000 f8b0 	bl	8011b38 <USBD_Get_USB_Status>
 80119d8:	4603      	mov	r3, r0
 80119da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80119de:	4618      	mov	r0, r3
 80119e0:	3710      	adds	r7, #16
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}

080119e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80119e6:	b580      	push	{r7, lr}
 80119e8:	b086      	sub	sp, #24
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	60f8      	str	r0, [r7, #12]
 80119ee:	607a      	str	r2, [r7, #4]
 80119f0:	603b      	str	r3, [r7, #0]
 80119f2:	460b      	mov	r3, r1
 80119f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119f6:	2300      	movs	r3, #0
 80119f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119fa:	2300      	movs	r3, #0
 80119fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011a04:	7af9      	ldrb	r1, [r7, #11]
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	687a      	ldr	r2, [r7, #4]
 8011a0a:	f7f2 fe64 	bl	80046d6 <HAL_PCD_EP_Transmit>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a12:	7dfb      	ldrb	r3, [r7, #23]
 8011a14:	4618      	mov	r0, r3
 8011a16:	f000 f88f 	bl	8011b38 <USBD_Get_USB_Status>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011a1e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	3718      	adds	r7, #24
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}

08011a28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b086      	sub	sp, #24
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	60f8      	str	r0, [r7, #12]
 8011a30:	607a      	str	r2, [r7, #4]
 8011a32:	603b      	str	r3, [r7, #0]
 8011a34:	460b      	mov	r3, r1
 8011a36:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011a46:	7af9      	ldrb	r1, [r7, #11]
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	687a      	ldr	r2, [r7, #4]
 8011a4c:	f7f2 fdfa 	bl	8004644 <HAL_PCD_EP_Receive>
 8011a50:	4603      	mov	r3, r0
 8011a52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a54:	7dfb      	ldrb	r3, [r7, #23]
 8011a56:	4618      	mov	r0, r3
 8011a58:	f000 f86e 	bl	8011b38 <USBD_Get_USB_Status>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011a60:	7dbb      	ldrb	r3, [r7, #22]
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3718      	adds	r7, #24
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}

08011a6a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a6a:	b580      	push	{r7, lr}
 8011a6c:	b082      	sub	sp, #8
 8011a6e:	af00      	add	r7, sp, #0
 8011a70:	6078      	str	r0, [r7, #4]
 8011a72:	460b      	mov	r3, r1
 8011a74:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011a7c:	78fa      	ldrb	r2, [r7, #3]
 8011a7e:	4611      	mov	r1, r2
 8011a80:	4618      	mov	r0, r3
 8011a82:	f7f2 fe10 	bl	80046a6 <HAL_PCD_EP_GetRxCount>
 8011a86:	4603      	mov	r3, r0
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	3708      	adds	r7, #8
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}

08011a90 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b082      	sub	sp, #8
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	460b      	mov	r3, r1
 8011a9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011a9c:	78fb      	ldrb	r3, [r7, #3]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d002      	beq.n	8011aa8 <HAL_PCDEx_LPM_Callback+0x18>
 8011aa2:	2b01      	cmp	r3, #1
 8011aa4:	d013      	beq.n	8011ace <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011aa6:	e023      	b.n	8011af0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	7a5b      	ldrb	r3, [r3, #9]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d007      	beq.n	8011ac0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011ab0:	f000 f83c 	bl	8011b2c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ab4:	4b10      	ldr	r3, [pc, #64]	@ (8011af8 <HAL_PCDEx_LPM_Callback+0x68>)
 8011ab6:	691b      	ldr	r3, [r3, #16]
 8011ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8011af8 <HAL_PCDEx_LPM_Callback+0x68>)
 8011aba:	f023 0306 	bic.w	r3, r3, #6
 8011abe:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7fa f8b1 	bl	800bc2e <USBD_LL_Resume>
    break;
 8011acc:	e010      	b.n	8011af0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f7fa f88e 	bl	800bbf6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	7a5b      	ldrb	r3, [r3, #9]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d005      	beq.n	8011aee <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ae2:	4b05      	ldr	r3, [pc, #20]	@ (8011af8 <HAL_PCDEx_LPM_Callback+0x68>)
 8011ae4:	691b      	ldr	r3, [r3, #16]
 8011ae6:	4a04      	ldr	r2, [pc, #16]	@ (8011af8 <HAL_PCDEx_LPM_Callback+0x68>)
 8011ae8:	f043 0306 	orr.w	r3, r3, #6
 8011aec:	6113      	str	r3, [r2, #16]
    break;
 8011aee:	bf00      	nop
}
 8011af0:	bf00      	nop
 8011af2:	3708      	adds	r7, #8
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}
 8011af8:	e000ed00 	.word	0xe000ed00

08011afc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011afc:	b480      	push	{r7}
 8011afe:	b083      	sub	sp, #12
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011b04:	4b03      	ldr	r3, [pc, #12]	@ (8011b14 <USBD_static_malloc+0x18>)
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	370c      	adds	r7, #12
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b10:	4770      	bx	lr
 8011b12:	bf00      	nop
 8011b14:	20001dc8 	.word	0x20001dc8

08011b18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011b18:	b480      	push	{r7}
 8011b1a:	b083      	sub	sp, #12
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011b20:	bf00      	nop
 8011b22:	370c      	adds	r7, #12
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr

08011b2c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011b30:	f7f0 ff62 	bl	80029f8 <SystemClock_Config>
}
 8011b34:	bf00      	nop
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b085      	sub	sp, #20
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	4603      	mov	r3, r0
 8011b40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b42:	2300      	movs	r3, #0
 8011b44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011b46:	79fb      	ldrb	r3, [r7, #7]
 8011b48:	2b03      	cmp	r3, #3
 8011b4a:	d817      	bhi.n	8011b7c <USBD_Get_USB_Status+0x44>
 8011b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8011b54 <USBD_Get_USB_Status+0x1c>)
 8011b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b52:	bf00      	nop
 8011b54:	08011b65 	.word	0x08011b65
 8011b58:	08011b6b 	.word	0x08011b6b
 8011b5c:	08011b71 	.word	0x08011b71
 8011b60:	08011b77 	.word	0x08011b77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011b64:	2300      	movs	r3, #0
 8011b66:	73fb      	strb	r3, [r7, #15]
    break;
 8011b68:	e00b      	b.n	8011b82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011b6a:	2303      	movs	r3, #3
 8011b6c:	73fb      	strb	r3, [r7, #15]
    break;
 8011b6e:	e008      	b.n	8011b82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011b70:	2301      	movs	r3, #1
 8011b72:	73fb      	strb	r3, [r7, #15]
    break;
 8011b74:	e005      	b.n	8011b82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011b76:	2303      	movs	r3, #3
 8011b78:	73fb      	strb	r3, [r7, #15]
    break;
 8011b7a:	e002      	b.n	8011b82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011b7c:	2303      	movs	r3, #3
 8011b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8011b80:	bf00      	nop
  }
  return usb_status;
 8011b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	3714      	adds	r7, #20
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8e:	4770      	bx	lr

08011b90 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8011b90:	b480      	push	{r7}
 8011b92:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011b94:	4b05      	ldr	r3, [pc, #20]	@ (8011bac <UTIL_LPM_Init+0x1c>)
 8011b96:	2200      	movs	r2, #0
 8011b98:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8011b9a:	4b05      	ldr	r3, [pc, #20]	@ (8011bb0 <UTIL_LPM_Init+0x20>)
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011ba0:	bf00      	nop
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba8:	4770      	bx	lr
 8011baa:	bf00      	nop
 8011bac:	20001fe8 	.word	0x20001fe8
 8011bb0:	20001fec 	.word	0x20001fec

08011bb4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b087      	sub	sp, #28
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	460b      	mov	r3, r1
 8011bbe:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8011bc4:	613b      	str	r3, [r7, #16]
  return(result);
 8011bc6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8011bc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011bca:	b672      	cpsid	i
}
 8011bcc:	bf00      	nop
  
  switch(state)
 8011bce:	78fb      	ldrb	r3, [r7, #3]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d008      	beq.n	8011be6 <UTIL_LPM_SetOffMode+0x32>
 8011bd4:	2b01      	cmp	r3, #1
 8011bd6:	d10e      	bne.n	8011bf6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8011bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8011c10 <UTIL_LPM_SetOffMode+0x5c>)
 8011bda:	681a      	ldr	r2, [r3, #0]
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	4313      	orrs	r3, r2
 8011be0:	4a0b      	ldr	r2, [pc, #44]	@ (8011c10 <UTIL_LPM_SetOffMode+0x5c>)
 8011be2:	6013      	str	r3, [r2, #0]
      break;
 8011be4:	e008      	b.n	8011bf8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	43da      	mvns	r2, r3
 8011bea:	4b09      	ldr	r3, [pc, #36]	@ (8011c10 <UTIL_LPM_SetOffMode+0x5c>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	4013      	ands	r3, r2
 8011bf0:	4a07      	ldr	r2, [pc, #28]	@ (8011c10 <UTIL_LPM_SetOffMode+0x5c>)
 8011bf2:	6013      	str	r3, [r2, #0]
      break;
 8011bf4:	e000      	b.n	8011bf8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8011bf6:	bf00      	nop
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	f383 8810 	msr	PRIMASK, r3
}
 8011c02:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011c04:	bf00      	nop
 8011c06:	371c      	adds	r7, #28
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0e:	4770      	bx	lr
 8011c10:	20001fec 	.word	0x20001fec

08011c14 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b090      	sub	sp, #64	@ 0x40
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8011c1c:	4b73      	ldr	r3, [pc, #460]	@ (8011dec <UTIL_SEQ_Run+0x1d8>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8011c22:	4b72      	ldr	r3, [pc, #456]	@ (8011dec <UTIL_SEQ_Run+0x1d8>)
 8011c24:	681a      	ldr	r2, [r3, #0]
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	4013      	ands	r3, r2
 8011c2a:	4a70      	ldr	r2, [pc, #448]	@ (8011dec <UTIL_SEQ_Run+0x1d8>)
 8011c2c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8011c2e:	4b70      	ldr	r3, [pc, #448]	@ (8011df0 <UTIL_SEQ_Run+0x1dc>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8011c34:	4b6f      	ldr	r3, [pc, #444]	@ (8011df4 <UTIL_SEQ_Run+0x1e0>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8011c3a:	4b6f      	ldr	r3, [pc, #444]	@ (8011df8 <UTIL_SEQ_Run+0x1e4>)
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8011c40:	4b6e      	ldr	r3, [pc, #440]	@ (8011dfc <UTIL_SEQ_Run+0x1e8>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011c46:	e08d      	b.n	8011d64 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011c4c:	e002      	b.n	8011c54 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8011c4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c50:	3301      	adds	r3, #1
 8011c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011c54:	4a6a      	ldr	r2, [pc, #424]	@ (8011e00 <UTIL_SEQ_Run+0x1ec>)
 8011c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c58:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c5e:	401a      	ands	r2, r3
 8011c60:	4b62      	ldr	r3, [pc, #392]	@ (8011dec <UTIL_SEQ_Run+0x1d8>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	4013      	ands	r3, r2
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d0f1      	beq.n	8011c4e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8011c6a:	4a65      	ldr	r2, [pc, #404]	@ (8011e00 <UTIL_SEQ_Run+0x1ec>)
 8011c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c6e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c74:	401a      	ands	r2, r3
 8011c76:	4b5d      	ldr	r3, [pc, #372]	@ (8011dec <UTIL_SEQ_Run+0x1d8>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	4013      	ands	r3, r2
 8011c7c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011c7e:	4a60      	ldr	r2, [pc, #384]	@ (8011e00 <UTIL_SEQ_Run+0x1ec>)
 8011c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c82:	00db      	lsls	r3, r3, #3
 8011c84:	4413      	add	r3, r2
 8011c86:	685a      	ldr	r2, [r3, #4]
 8011c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c8a:	4013      	ands	r3, r2
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d106      	bne.n	8011c9e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011c90:	4a5b      	ldr	r2, [pc, #364]	@ (8011e00 <UTIL_SEQ_Run+0x1ec>)
 8011c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c94:	00db      	lsls	r3, r3, #3
 8011c96:	4413      	add	r3, r2
 8011c98:	f04f 32ff 	mov.w	r2, #4294967295
 8011c9c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011c9e:	4a58      	ldr	r2, [pc, #352]	@ (8011e00 <UTIL_SEQ_Run+0x1ec>)
 8011ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ca2:	00db      	lsls	r3, r3, #3
 8011ca4:	4413      	add	r3, r2
 8011ca6:	685a      	ldr	r2, [r3, #4]
 8011ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011caa:	4013      	ands	r3, r2
 8011cac:	4618      	mov	r0, r3
 8011cae:	f000 f9c1 	bl	8012034 <SEQ_BitPosition>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	4b53      	ldr	r3, [pc, #332]	@ (8011e04 <UTIL_SEQ_Run+0x1f0>)
 8011cb8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8011cba:	4a51      	ldr	r2, [pc, #324]	@ (8011e00 <UTIL_SEQ_Run+0x1ec>)
 8011cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cbe:	00db      	lsls	r3, r3, #3
 8011cc0:	4413      	add	r3, r2
 8011cc2:	685a      	ldr	r2, [r3, #4]
 8011cc4:	4b4f      	ldr	r3, [pc, #316]	@ (8011e04 <UTIL_SEQ_Run+0x1f0>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	2101      	movs	r1, #1
 8011cca:	fa01 f303 	lsl.w	r3, r1, r3
 8011cce:	43db      	mvns	r3, r3
 8011cd0:	401a      	ands	r2, r3
 8011cd2:	494b      	ldr	r1, [pc, #300]	@ (8011e00 <UTIL_SEQ_Run+0x1ec>)
 8011cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cd6:	00db      	lsls	r3, r3, #3
 8011cd8:	440b      	add	r3, r1
 8011cda:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8011ce0:	61bb      	str	r3, [r7, #24]
  return(result);
 8011ce2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011ce4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8011ce6:	b672      	cpsid	i
}
 8011ce8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8011cea:	4b46      	ldr	r3, [pc, #280]	@ (8011e04 <UTIL_SEQ_Run+0x1f0>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	2201      	movs	r2, #1
 8011cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8011cf4:	43da      	mvns	r2, r3
 8011cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8011df0 <UTIL_SEQ_Run+0x1dc>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	4013      	ands	r3, r2
 8011cfc:	4a3c      	ldr	r2, [pc, #240]	@ (8011df0 <UTIL_SEQ_Run+0x1dc>)
 8011cfe:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011d00:	2301      	movs	r3, #1
 8011d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011d04:	e013      	b.n	8011d2e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8011d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d08:	3b01      	subs	r3, #1
 8011d0a:	4a3d      	ldr	r2, [pc, #244]	@ (8011e00 <UTIL_SEQ_Run+0x1ec>)
 8011d0c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8011d10:	4b3c      	ldr	r3, [pc, #240]	@ (8011e04 <UTIL_SEQ_Run+0x1f0>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	2201      	movs	r2, #1
 8011d16:	fa02 f303 	lsl.w	r3, r2, r3
 8011d1a:	43da      	mvns	r2, r3
 8011d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d1e:	3b01      	subs	r3, #1
 8011d20:	400a      	ands	r2, r1
 8011d22:	4937      	ldr	r1, [pc, #220]	@ (8011e00 <UTIL_SEQ_Run+0x1ec>)
 8011d24:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d2a:	3b01      	subs	r3, #1
 8011d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d1e8      	bne.n	8011d06 <UTIL_SEQ_Run+0xf2>
 8011d34:	6a3b      	ldr	r3, [r7, #32]
 8011d36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d38:	697b      	ldr	r3, [r7, #20]
 8011d3a:	f383 8810 	msr	PRIMASK, r3
}
 8011d3e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8011d40:	4b30      	ldr	r3, [pc, #192]	@ (8011e04 <UTIL_SEQ_Run+0x1f0>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	4a30      	ldr	r2, [pc, #192]	@ (8011e08 <UTIL_SEQ_Run+0x1f4>)
 8011d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d4a:	4798      	blx	r3

    local_taskset = TaskSet;
 8011d4c:	4b28      	ldr	r3, [pc, #160]	@ (8011df0 <UTIL_SEQ_Run+0x1dc>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8011d52:	4b28      	ldr	r3, [pc, #160]	@ (8011df4 <UTIL_SEQ_Run+0x1e0>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8011d58:	4b27      	ldr	r3, [pc, #156]	@ (8011df8 <UTIL_SEQ_Run+0x1e4>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8011d5e:	4b27      	ldr	r3, [pc, #156]	@ (8011dfc <UTIL_SEQ_Run+0x1e8>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011d64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d68:	401a      	ands	r2, r3
 8011d6a:	4b20      	ldr	r3, [pc, #128]	@ (8011dec <UTIL_SEQ_Run+0x1d8>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4013      	ands	r3, r2
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d005      	beq.n	8011d80 <UTIL_SEQ_Run+0x16c>
 8011d74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d78:	4013      	ands	r3, r2
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	f43f af64 	beq.w	8011c48 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011d80:	4b20      	ldr	r3, [pc, #128]	@ (8011e04 <UTIL_SEQ_Run+0x1f0>)
 8011d82:	f04f 32ff 	mov.w	r2, #4294967295
 8011d86:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011d88:	f000 f946 	bl	8012018 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8011d90:	613b      	str	r3, [r7, #16]
  return(result);
 8011d92:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8011d94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8011d96:	b672      	cpsid	i
}
 8011d98:	bf00      	nop
  local_taskset = TaskSet;
 8011d9a:	4b15      	ldr	r3, [pc, #84]	@ (8011df0 <UTIL_SEQ_Run+0x1dc>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8011da0:	4b14      	ldr	r3, [pc, #80]	@ (8011df4 <UTIL_SEQ_Run+0x1e0>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8011da6:	4b14      	ldr	r3, [pc, #80]	@ (8011df8 <UTIL_SEQ_Run+0x1e4>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8011dac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011db0:	401a      	ands	r2, r3
 8011db2:	4b0e      	ldr	r3, [pc, #56]	@ (8011dec <UTIL_SEQ_Run+0x1d8>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	4013      	ands	r3, r2
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d107      	bne.n	8011dcc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8011dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8011dfc <UTIL_SEQ_Run+0x1e8>)
 8011dbe:	681a      	ldr	r2, [r3, #0]
 8011dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011dc2:	4013      	ands	r3, r2
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d101      	bne.n	8011dcc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8011dc8:	f7ef fcf3 	bl	80017b2 <UTIL_SEQ_Idle>
 8011dcc:	69fb      	ldr	r3, [r7, #28]
 8011dce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	f383 8810 	msr	PRIMASK, r3
}
 8011dd6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8011dd8:	f000 f925 	bl	8012026 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8011ddc:	4a03      	ldr	r2, [pc, #12]	@ (8011dec <UTIL_SEQ_Run+0x1d8>)
 8011dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011de0:	6013      	str	r3, [r2, #0]

  return;
 8011de2:	bf00      	nop
}
 8011de4:	3740      	adds	r7, #64	@ 0x40
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}
 8011dea:	bf00      	nop
 8011dec:	20000124 	.word	0x20000124
 8011df0:	20001ff0 	.word	0x20001ff0
 8011df4:	20001ff4 	.word	0x20001ff4
 8011df8:	20000120 	.word	0x20000120
 8011dfc:	20001ff8 	.word	0x20001ff8
 8011e00:	20002080 	.word	0x20002080
 8011e04:	20001ffc 	.word	0x20001ffc
 8011e08:	20002000 	.word	0x20002000

08011e0c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b088      	sub	sp, #32
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	60f8      	str	r0, [r7, #12]
 8011e14:	60b9      	str	r1, [r7, #8]
 8011e16:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e18:	f3ef 8310 	mrs	r3, PRIMASK
 8011e1c:	617b      	str	r3, [r7, #20]
  return(result);
 8011e1e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8011e20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8011e22:	b672      	cpsid	i
}
 8011e24:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8011e26:	68f8      	ldr	r0, [r7, #12]
 8011e28:	f000 f904 	bl	8012034 <SEQ_BitPosition>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	4619      	mov	r1, r3
 8011e30:	4a06      	ldr	r2, [pc, #24]	@ (8011e4c <UTIL_SEQ_RegTask+0x40>)
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011e38:	69fb      	ldr	r3, [r7, #28]
 8011e3a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e3c:	69bb      	ldr	r3, [r7, #24]
 8011e3e:	f383 8810 	msr	PRIMASK, r3
}
 8011e42:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8011e44:	bf00      	nop
}
 8011e46:	3720      	adds	r7, #32
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	20002000 	.word	0x20002000

08011e50 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8011e50:	b480      	push	{r7}
 8011e52:	b087      	sub	sp, #28
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
 8011e58:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8011e5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e60:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011e62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011e64:	b672      	cpsid	i
}
 8011e66:	bf00      	nop

  TaskSet |= TaskId_bm;
 8011e68:	4b0d      	ldr	r3, [pc, #52]	@ (8011ea0 <UTIL_SEQ_SetTask+0x50>)
 8011e6a:	681a      	ldr	r2, [r3, #0]
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	4313      	orrs	r3, r2
 8011e70:	4a0b      	ldr	r2, [pc, #44]	@ (8011ea0 <UTIL_SEQ_SetTask+0x50>)
 8011e72:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8011e74:	4a0b      	ldr	r2, [pc, #44]	@ (8011ea4 <UTIL_SEQ_SetTask+0x54>)
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	431a      	orrs	r2, r3
 8011e80:	4908      	ldr	r1, [pc, #32]	@ (8011ea4 <UTIL_SEQ_SetTask+0x54>)
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8011e88:	697b      	ldr	r3, [r7, #20]
 8011e8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	f383 8810 	msr	PRIMASK, r3
}
 8011e92:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8011e94:	bf00      	nop
}
 8011e96:	371c      	adds	r7, #28
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9e:	4770      	bx	lr
 8011ea0:	20001ff0 	.word	0x20001ff0
 8011ea4:	20002080 	.word	0x20002080

08011ea8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8011ea8:	b480      	push	{r7}
 8011eaa:	b087      	sub	sp, #28
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8011eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8011eb6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011eb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011eba:	b672      	cpsid	i
}
 8011ebc:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	43da      	mvns	r2, r3
 8011ec2:	4b08      	ldr	r3, [pc, #32]	@ (8011ee4 <UTIL_SEQ_PauseTask+0x3c>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	4013      	ands	r3, r2
 8011ec8:	4a06      	ldr	r2, [pc, #24]	@ (8011ee4 <UTIL_SEQ_PauseTask+0x3c>)
 8011eca:	6013      	str	r3, [r2, #0]
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	f383 8810 	msr	PRIMASK, r3
}
 8011ed6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8011ed8:	bf00      	nop
}
 8011eda:	371c      	adds	r7, #28
 8011edc:	46bd      	mov	sp, r7
 8011ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee2:	4770      	bx	lr
 8011ee4:	20000120 	.word	0x20000120

08011ee8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8011ee8:	b480      	push	{r7}
 8011eea:	b087      	sub	sp, #28
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ef0:	f3ef 8310 	mrs	r3, PRIMASK
 8011ef4:	60fb      	str	r3, [r7, #12]
  return(result);
 8011ef6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011ef8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011efa:	b672      	cpsid	i
}
 8011efc:	bf00      	nop

  TaskMask |= TaskId_bm;
 8011efe:	4b09      	ldr	r3, [pc, #36]	@ (8011f24 <UTIL_SEQ_ResumeTask+0x3c>)
 8011f00:	681a      	ldr	r2, [r3, #0]
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	4313      	orrs	r3, r2
 8011f06:	4a07      	ldr	r2, [pc, #28]	@ (8011f24 <UTIL_SEQ_ResumeTask+0x3c>)
 8011f08:	6013      	str	r3, [r2, #0]
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	f383 8810 	msr	PRIMASK, r3
}
 8011f14:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8011f16:	bf00      	nop
}
 8011f18:	371c      	adds	r7, #28
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f20:	4770      	bx	lr
 8011f22:	bf00      	nop
 8011f24:	20000120 	.word	0x20000120

08011f28 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8011f28:	b480      	push	{r7}
 8011f2a:	b087      	sub	sp, #28
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f30:	f3ef 8310 	mrs	r3, PRIMASK
 8011f34:	60fb      	str	r3, [r7, #12]
  return(result);
 8011f36:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011f38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011f3a:	b672      	cpsid	i
}
 8011f3c:	bf00      	nop

  EvtSet |= EvtId_bm;
 8011f3e:	4b09      	ldr	r3, [pc, #36]	@ (8011f64 <UTIL_SEQ_SetEvt+0x3c>)
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	4313      	orrs	r3, r2
 8011f46:	4a07      	ldr	r2, [pc, #28]	@ (8011f64 <UTIL_SEQ_SetEvt+0x3c>)
 8011f48:	6013      	str	r3, [r2, #0]
 8011f4a:	697b      	ldr	r3, [r7, #20]
 8011f4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	f383 8810 	msr	PRIMASK, r3
}
 8011f54:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8011f56:	bf00      	nop
}
 8011f58:	371c      	adds	r7, #28
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f60:	4770      	bx	lr
 8011f62:	bf00      	nop
 8011f64:	20001ff4 	.word	0x20001ff4

08011f68 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b088      	sub	sp, #32
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8011f70:	4b1f      	ldr	r3, [pc, #124]	@ (8011ff0 <UTIL_SEQ_WaitEvt+0x88>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8011f76:	4b1e      	ldr	r3, [pc, #120]	@ (8011ff0 <UTIL_SEQ_WaitEvt+0x88>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f7e:	d102      	bne.n	8011f86 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8011f80:	2300      	movs	r3, #0
 8011f82:	61fb      	str	r3, [r7, #28]
 8011f84:	e005      	b.n	8011f92 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8011f86:	4b1a      	ldr	r3, [pc, #104]	@ (8011ff0 <UTIL_SEQ_WaitEvt+0x88>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8011f90:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8011f92:	4b18      	ldr	r3, [pc, #96]	@ (8011ff4 <UTIL_SEQ_WaitEvt+0x8c>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8011f98:	4a16      	ldr	r2, [pc, #88]	@ (8011ff4 <UTIL_SEQ_WaitEvt+0x8c>)
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8011f9e:	e003      	b.n	8011fa8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8011fa0:	6879      	ldr	r1, [r7, #4]
 8011fa2:	69f8      	ldr	r0, [r7, #28]
 8011fa4:	f000 f82a 	bl	8011ffc <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8011fa8:	4b13      	ldr	r3, [pc, #76]	@ (8011ff8 <UTIL_SEQ_WaitEvt+0x90>)
 8011faa:	681a      	ldr	r2, [r3, #0]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	4013      	ands	r3, r2
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d0f5      	beq.n	8011fa0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8011fb4:	4a0e      	ldr	r2, [pc, #56]	@ (8011ff0 <UTIL_SEQ_WaitEvt+0x88>)
 8011fb6:	69bb      	ldr	r3, [r7, #24]
 8011fb8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fba:	f3ef 8310 	mrs	r3, PRIMASK
 8011fbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8011fc0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011fc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011fc4:	b672      	cpsid	i
}
 8011fc6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	43da      	mvns	r2, r3
 8011fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8011ff8 <UTIL_SEQ_WaitEvt+0x90>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	4013      	ands	r3, r2
 8011fd2:	4a09      	ldr	r2, [pc, #36]	@ (8011ff8 <UTIL_SEQ_WaitEvt+0x90>)
 8011fd4:	6013      	str	r3, [r2, #0]
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	f383 8810 	msr	PRIMASK, r3
}
 8011fe0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8011fe2:	4a04      	ldr	r2, [pc, #16]	@ (8011ff4 <UTIL_SEQ_WaitEvt+0x8c>)
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	6013      	str	r3, [r2, #0]
  return;
 8011fe8:	bf00      	nop
}
 8011fea:	3720      	adds	r7, #32
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	20001ffc 	.word	0x20001ffc
 8011ff4:	20001ff8 	.word	0x20001ff8
 8011ff8:	20001ff4 	.word	0x20001ff4

08011ffc <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b082      	sub	sp, #8
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
 8012004:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	43db      	mvns	r3, r3
 801200a:	4618      	mov	r0, r3
 801200c:	f7ff fe02 	bl	8011c14 <UTIL_SEQ_Run>
  return;
 8012010:	bf00      	nop
}
 8012012:	3708      	adds	r7, #8
 8012014:	46bd      	mov	sp, r7
 8012016:	bd80      	pop	{r7, pc}

08012018 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8012018:	b480      	push	{r7}
 801201a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801201c:	bf00      	nop
}
 801201e:	46bd      	mov	sp, r7
 8012020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012024:	4770      	bx	lr

08012026 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8012026:	b480      	push	{r7}
 8012028:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801202a:	bf00      	nop
}
 801202c:	46bd      	mov	sp, r7
 801202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012032:	4770      	bx	lr

08012034 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8012034:	b480      	push	{r7}
 8012036:	b085      	sub	sp, #20
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d101      	bne.n	801204a <SEQ_BitPosition+0x16>
    return 32U;
 8012046:	2320      	movs	r3, #32
 8012048:	e003      	b.n	8012052 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	fab3 f383 	clz	r3, r3
 8012050:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8012052:	f1c3 031f 	rsb	r3, r3, #31
 8012056:	b2db      	uxtb	r3, r3
}
 8012058:	4618      	mov	r0, r3
 801205a:	3714      	adds	r7, #20
 801205c:	46bd      	mov	sp, r7
 801205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012062:	4770      	bx	lr

08012064 <std>:
 8012064:	2300      	movs	r3, #0
 8012066:	b510      	push	{r4, lr}
 8012068:	4604      	mov	r4, r0
 801206a:	e9c0 3300 	strd	r3, r3, [r0]
 801206e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012072:	6083      	str	r3, [r0, #8]
 8012074:	8181      	strh	r1, [r0, #12]
 8012076:	6643      	str	r3, [r0, #100]	@ 0x64
 8012078:	81c2      	strh	r2, [r0, #14]
 801207a:	6183      	str	r3, [r0, #24]
 801207c:	4619      	mov	r1, r3
 801207e:	2208      	movs	r2, #8
 8012080:	305c      	adds	r0, #92	@ 0x5c
 8012082:	f000 fa37 	bl	80124f4 <memset>
 8012086:	4b0d      	ldr	r3, [pc, #52]	@ (80120bc <std+0x58>)
 8012088:	6263      	str	r3, [r4, #36]	@ 0x24
 801208a:	4b0d      	ldr	r3, [pc, #52]	@ (80120c0 <std+0x5c>)
 801208c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801208e:	4b0d      	ldr	r3, [pc, #52]	@ (80120c4 <std+0x60>)
 8012090:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012092:	4b0d      	ldr	r3, [pc, #52]	@ (80120c8 <std+0x64>)
 8012094:	6323      	str	r3, [r4, #48]	@ 0x30
 8012096:	4b0d      	ldr	r3, [pc, #52]	@ (80120cc <std+0x68>)
 8012098:	6224      	str	r4, [r4, #32]
 801209a:	429c      	cmp	r4, r3
 801209c:	d006      	beq.n	80120ac <std+0x48>
 801209e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80120a2:	4294      	cmp	r4, r2
 80120a4:	d002      	beq.n	80120ac <std+0x48>
 80120a6:	33d0      	adds	r3, #208	@ 0xd0
 80120a8:	429c      	cmp	r4, r3
 80120aa:	d105      	bne.n	80120b8 <std+0x54>
 80120ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80120b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120b4:	f000 baac 	b.w	8012610 <__retarget_lock_init_recursive>
 80120b8:	bd10      	pop	{r4, pc}
 80120ba:	bf00      	nop
 80120bc:	08012345 	.word	0x08012345
 80120c0:	08012367 	.word	0x08012367
 80120c4:	0801239f 	.word	0x0801239f
 80120c8:	080123c3 	.word	0x080123c3
 80120cc:	20002088 	.word	0x20002088

080120d0 <stdio_exit_handler>:
 80120d0:	4a02      	ldr	r2, [pc, #8]	@ (80120dc <stdio_exit_handler+0xc>)
 80120d2:	4903      	ldr	r1, [pc, #12]	@ (80120e0 <stdio_exit_handler+0x10>)
 80120d4:	4803      	ldr	r0, [pc, #12]	@ (80120e4 <stdio_exit_handler+0x14>)
 80120d6:	f000 b869 	b.w	80121ac <_fwalk_sglue>
 80120da:	bf00      	nop
 80120dc:	20000128 	.word	0x20000128
 80120e0:	08013179 	.word	0x08013179
 80120e4:	20000138 	.word	0x20000138

080120e8 <cleanup_stdio>:
 80120e8:	6841      	ldr	r1, [r0, #4]
 80120ea:	4b0c      	ldr	r3, [pc, #48]	@ (801211c <cleanup_stdio+0x34>)
 80120ec:	4299      	cmp	r1, r3
 80120ee:	b510      	push	{r4, lr}
 80120f0:	4604      	mov	r4, r0
 80120f2:	d001      	beq.n	80120f8 <cleanup_stdio+0x10>
 80120f4:	f001 f840 	bl	8013178 <_fflush_r>
 80120f8:	68a1      	ldr	r1, [r4, #8]
 80120fa:	4b09      	ldr	r3, [pc, #36]	@ (8012120 <cleanup_stdio+0x38>)
 80120fc:	4299      	cmp	r1, r3
 80120fe:	d002      	beq.n	8012106 <cleanup_stdio+0x1e>
 8012100:	4620      	mov	r0, r4
 8012102:	f001 f839 	bl	8013178 <_fflush_r>
 8012106:	68e1      	ldr	r1, [r4, #12]
 8012108:	4b06      	ldr	r3, [pc, #24]	@ (8012124 <cleanup_stdio+0x3c>)
 801210a:	4299      	cmp	r1, r3
 801210c:	d004      	beq.n	8012118 <cleanup_stdio+0x30>
 801210e:	4620      	mov	r0, r4
 8012110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012114:	f001 b830 	b.w	8013178 <_fflush_r>
 8012118:	bd10      	pop	{r4, pc}
 801211a:	bf00      	nop
 801211c:	20002088 	.word	0x20002088
 8012120:	200020f0 	.word	0x200020f0
 8012124:	20002158 	.word	0x20002158

08012128 <global_stdio_init.part.0>:
 8012128:	b510      	push	{r4, lr}
 801212a:	4b0b      	ldr	r3, [pc, #44]	@ (8012158 <global_stdio_init.part.0+0x30>)
 801212c:	4c0b      	ldr	r4, [pc, #44]	@ (801215c <global_stdio_init.part.0+0x34>)
 801212e:	4a0c      	ldr	r2, [pc, #48]	@ (8012160 <global_stdio_init.part.0+0x38>)
 8012130:	601a      	str	r2, [r3, #0]
 8012132:	4620      	mov	r0, r4
 8012134:	2200      	movs	r2, #0
 8012136:	2104      	movs	r1, #4
 8012138:	f7ff ff94 	bl	8012064 <std>
 801213c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012140:	2201      	movs	r2, #1
 8012142:	2109      	movs	r1, #9
 8012144:	f7ff ff8e 	bl	8012064 <std>
 8012148:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801214c:	2202      	movs	r2, #2
 801214e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012152:	2112      	movs	r1, #18
 8012154:	f7ff bf86 	b.w	8012064 <std>
 8012158:	200021c0 	.word	0x200021c0
 801215c:	20002088 	.word	0x20002088
 8012160:	080120d1 	.word	0x080120d1

08012164 <__sfp_lock_acquire>:
 8012164:	4801      	ldr	r0, [pc, #4]	@ (801216c <__sfp_lock_acquire+0x8>)
 8012166:	f000 ba54 	b.w	8012612 <__retarget_lock_acquire_recursive>
 801216a:	bf00      	nop
 801216c:	200021c9 	.word	0x200021c9

08012170 <__sfp_lock_release>:
 8012170:	4801      	ldr	r0, [pc, #4]	@ (8012178 <__sfp_lock_release+0x8>)
 8012172:	f000 ba4f 	b.w	8012614 <__retarget_lock_release_recursive>
 8012176:	bf00      	nop
 8012178:	200021c9 	.word	0x200021c9

0801217c <__sinit>:
 801217c:	b510      	push	{r4, lr}
 801217e:	4604      	mov	r4, r0
 8012180:	f7ff fff0 	bl	8012164 <__sfp_lock_acquire>
 8012184:	6a23      	ldr	r3, [r4, #32]
 8012186:	b11b      	cbz	r3, 8012190 <__sinit+0x14>
 8012188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801218c:	f7ff bff0 	b.w	8012170 <__sfp_lock_release>
 8012190:	4b04      	ldr	r3, [pc, #16]	@ (80121a4 <__sinit+0x28>)
 8012192:	6223      	str	r3, [r4, #32]
 8012194:	4b04      	ldr	r3, [pc, #16]	@ (80121a8 <__sinit+0x2c>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d1f5      	bne.n	8012188 <__sinit+0xc>
 801219c:	f7ff ffc4 	bl	8012128 <global_stdio_init.part.0>
 80121a0:	e7f2      	b.n	8012188 <__sinit+0xc>
 80121a2:	bf00      	nop
 80121a4:	080120e9 	.word	0x080120e9
 80121a8:	200021c0 	.word	0x200021c0

080121ac <_fwalk_sglue>:
 80121ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121b0:	4607      	mov	r7, r0
 80121b2:	4688      	mov	r8, r1
 80121b4:	4614      	mov	r4, r2
 80121b6:	2600      	movs	r6, #0
 80121b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80121bc:	f1b9 0901 	subs.w	r9, r9, #1
 80121c0:	d505      	bpl.n	80121ce <_fwalk_sglue+0x22>
 80121c2:	6824      	ldr	r4, [r4, #0]
 80121c4:	2c00      	cmp	r4, #0
 80121c6:	d1f7      	bne.n	80121b8 <_fwalk_sglue+0xc>
 80121c8:	4630      	mov	r0, r6
 80121ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121ce:	89ab      	ldrh	r3, [r5, #12]
 80121d0:	2b01      	cmp	r3, #1
 80121d2:	d907      	bls.n	80121e4 <_fwalk_sglue+0x38>
 80121d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121d8:	3301      	adds	r3, #1
 80121da:	d003      	beq.n	80121e4 <_fwalk_sglue+0x38>
 80121dc:	4629      	mov	r1, r5
 80121de:	4638      	mov	r0, r7
 80121e0:	47c0      	blx	r8
 80121e2:	4306      	orrs	r6, r0
 80121e4:	3568      	adds	r5, #104	@ 0x68
 80121e6:	e7e9      	b.n	80121bc <_fwalk_sglue+0x10>

080121e8 <iprintf>:
 80121e8:	b40f      	push	{r0, r1, r2, r3}
 80121ea:	b507      	push	{r0, r1, r2, lr}
 80121ec:	4906      	ldr	r1, [pc, #24]	@ (8012208 <iprintf+0x20>)
 80121ee:	ab04      	add	r3, sp, #16
 80121f0:	6808      	ldr	r0, [r1, #0]
 80121f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80121f6:	6881      	ldr	r1, [r0, #8]
 80121f8:	9301      	str	r3, [sp, #4]
 80121fa:	f000 fc95 	bl	8012b28 <_vfiprintf_r>
 80121fe:	b003      	add	sp, #12
 8012200:	f85d eb04 	ldr.w	lr, [sp], #4
 8012204:	b004      	add	sp, #16
 8012206:	4770      	bx	lr
 8012208:	20000134 	.word	0x20000134

0801220c <putchar>:
 801220c:	4b02      	ldr	r3, [pc, #8]	@ (8012218 <putchar+0xc>)
 801220e:	4601      	mov	r1, r0
 8012210:	6818      	ldr	r0, [r3, #0]
 8012212:	6882      	ldr	r2, [r0, #8]
 8012214:	f001 b83a 	b.w	801328c <_putc_r>
 8012218:	20000134 	.word	0x20000134

0801221c <_puts_r>:
 801221c:	6a03      	ldr	r3, [r0, #32]
 801221e:	b570      	push	{r4, r5, r6, lr}
 8012220:	6884      	ldr	r4, [r0, #8]
 8012222:	4605      	mov	r5, r0
 8012224:	460e      	mov	r6, r1
 8012226:	b90b      	cbnz	r3, 801222c <_puts_r+0x10>
 8012228:	f7ff ffa8 	bl	801217c <__sinit>
 801222c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801222e:	07db      	lsls	r3, r3, #31
 8012230:	d405      	bmi.n	801223e <_puts_r+0x22>
 8012232:	89a3      	ldrh	r3, [r4, #12]
 8012234:	0598      	lsls	r0, r3, #22
 8012236:	d402      	bmi.n	801223e <_puts_r+0x22>
 8012238:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801223a:	f000 f9ea 	bl	8012612 <__retarget_lock_acquire_recursive>
 801223e:	89a3      	ldrh	r3, [r4, #12]
 8012240:	0719      	lsls	r1, r3, #28
 8012242:	d502      	bpl.n	801224a <_puts_r+0x2e>
 8012244:	6923      	ldr	r3, [r4, #16]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d135      	bne.n	80122b6 <_puts_r+0x9a>
 801224a:	4621      	mov	r1, r4
 801224c:	4628      	mov	r0, r5
 801224e:	f000 f8fb 	bl	8012448 <__swsetup_r>
 8012252:	b380      	cbz	r0, 80122b6 <_puts_r+0x9a>
 8012254:	f04f 35ff 	mov.w	r5, #4294967295
 8012258:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801225a:	07da      	lsls	r2, r3, #31
 801225c:	d405      	bmi.n	801226a <_puts_r+0x4e>
 801225e:	89a3      	ldrh	r3, [r4, #12]
 8012260:	059b      	lsls	r3, r3, #22
 8012262:	d402      	bmi.n	801226a <_puts_r+0x4e>
 8012264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012266:	f000 f9d5 	bl	8012614 <__retarget_lock_release_recursive>
 801226a:	4628      	mov	r0, r5
 801226c:	bd70      	pop	{r4, r5, r6, pc}
 801226e:	2b00      	cmp	r3, #0
 8012270:	da04      	bge.n	801227c <_puts_r+0x60>
 8012272:	69a2      	ldr	r2, [r4, #24]
 8012274:	429a      	cmp	r2, r3
 8012276:	dc17      	bgt.n	80122a8 <_puts_r+0x8c>
 8012278:	290a      	cmp	r1, #10
 801227a:	d015      	beq.n	80122a8 <_puts_r+0x8c>
 801227c:	6823      	ldr	r3, [r4, #0]
 801227e:	1c5a      	adds	r2, r3, #1
 8012280:	6022      	str	r2, [r4, #0]
 8012282:	7019      	strb	r1, [r3, #0]
 8012284:	68a3      	ldr	r3, [r4, #8]
 8012286:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801228a:	3b01      	subs	r3, #1
 801228c:	60a3      	str	r3, [r4, #8]
 801228e:	2900      	cmp	r1, #0
 8012290:	d1ed      	bne.n	801226e <_puts_r+0x52>
 8012292:	2b00      	cmp	r3, #0
 8012294:	da11      	bge.n	80122ba <_puts_r+0x9e>
 8012296:	4622      	mov	r2, r4
 8012298:	210a      	movs	r1, #10
 801229a:	4628      	mov	r0, r5
 801229c:	f000 f895 	bl	80123ca <__swbuf_r>
 80122a0:	3001      	adds	r0, #1
 80122a2:	d0d7      	beq.n	8012254 <_puts_r+0x38>
 80122a4:	250a      	movs	r5, #10
 80122a6:	e7d7      	b.n	8012258 <_puts_r+0x3c>
 80122a8:	4622      	mov	r2, r4
 80122aa:	4628      	mov	r0, r5
 80122ac:	f000 f88d 	bl	80123ca <__swbuf_r>
 80122b0:	3001      	adds	r0, #1
 80122b2:	d1e7      	bne.n	8012284 <_puts_r+0x68>
 80122b4:	e7ce      	b.n	8012254 <_puts_r+0x38>
 80122b6:	3e01      	subs	r6, #1
 80122b8:	e7e4      	b.n	8012284 <_puts_r+0x68>
 80122ba:	6823      	ldr	r3, [r4, #0]
 80122bc:	1c5a      	adds	r2, r3, #1
 80122be:	6022      	str	r2, [r4, #0]
 80122c0:	220a      	movs	r2, #10
 80122c2:	701a      	strb	r2, [r3, #0]
 80122c4:	e7ee      	b.n	80122a4 <_puts_r+0x88>
	...

080122c8 <puts>:
 80122c8:	4b02      	ldr	r3, [pc, #8]	@ (80122d4 <puts+0xc>)
 80122ca:	4601      	mov	r1, r0
 80122cc:	6818      	ldr	r0, [r3, #0]
 80122ce:	f7ff bfa5 	b.w	801221c <_puts_r>
 80122d2:	bf00      	nop
 80122d4:	20000134 	.word	0x20000134

080122d8 <sniprintf>:
 80122d8:	b40c      	push	{r2, r3}
 80122da:	b530      	push	{r4, r5, lr}
 80122dc:	4b18      	ldr	r3, [pc, #96]	@ (8012340 <sniprintf+0x68>)
 80122de:	1e0c      	subs	r4, r1, #0
 80122e0:	681d      	ldr	r5, [r3, #0]
 80122e2:	b09d      	sub	sp, #116	@ 0x74
 80122e4:	da08      	bge.n	80122f8 <sniprintf+0x20>
 80122e6:	238b      	movs	r3, #139	@ 0x8b
 80122e8:	602b      	str	r3, [r5, #0]
 80122ea:	f04f 30ff 	mov.w	r0, #4294967295
 80122ee:	b01d      	add	sp, #116	@ 0x74
 80122f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80122f4:	b002      	add	sp, #8
 80122f6:	4770      	bx	lr
 80122f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80122fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012300:	f04f 0300 	mov.w	r3, #0
 8012304:	931b      	str	r3, [sp, #108]	@ 0x6c
 8012306:	bf14      	ite	ne
 8012308:	f104 33ff 	addne.w	r3, r4, #4294967295
 801230c:	4623      	moveq	r3, r4
 801230e:	9304      	str	r3, [sp, #16]
 8012310:	9307      	str	r3, [sp, #28]
 8012312:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012316:	9002      	str	r0, [sp, #8]
 8012318:	9006      	str	r0, [sp, #24]
 801231a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801231e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012320:	ab21      	add	r3, sp, #132	@ 0x84
 8012322:	a902      	add	r1, sp, #8
 8012324:	4628      	mov	r0, r5
 8012326:	9301      	str	r3, [sp, #4]
 8012328:	f000 fad8 	bl	80128dc <_svfiprintf_r>
 801232c:	1c43      	adds	r3, r0, #1
 801232e:	bfbc      	itt	lt
 8012330:	238b      	movlt	r3, #139	@ 0x8b
 8012332:	602b      	strlt	r3, [r5, #0]
 8012334:	2c00      	cmp	r4, #0
 8012336:	d0da      	beq.n	80122ee <sniprintf+0x16>
 8012338:	9b02      	ldr	r3, [sp, #8]
 801233a:	2200      	movs	r2, #0
 801233c:	701a      	strb	r2, [r3, #0]
 801233e:	e7d6      	b.n	80122ee <sniprintf+0x16>
 8012340:	20000134 	.word	0x20000134

08012344 <__sread>:
 8012344:	b510      	push	{r4, lr}
 8012346:	460c      	mov	r4, r1
 8012348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801234c:	f000 f912 	bl	8012574 <_read_r>
 8012350:	2800      	cmp	r0, #0
 8012352:	bfab      	itete	ge
 8012354:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012356:	89a3      	ldrhlt	r3, [r4, #12]
 8012358:	181b      	addge	r3, r3, r0
 801235a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801235e:	bfac      	ite	ge
 8012360:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012362:	81a3      	strhlt	r3, [r4, #12]
 8012364:	bd10      	pop	{r4, pc}

08012366 <__swrite>:
 8012366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801236a:	461f      	mov	r7, r3
 801236c:	898b      	ldrh	r3, [r1, #12]
 801236e:	05db      	lsls	r3, r3, #23
 8012370:	4605      	mov	r5, r0
 8012372:	460c      	mov	r4, r1
 8012374:	4616      	mov	r6, r2
 8012376:	d505      	bpl.n	8012384 <__swrite+0x1e>
 8012378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801237c:	2302      	movs	r3, #2
 801237e:	2200      	movs	r2, #0
 8012380:	f000 f8e6 	bl	8012550 <_lseek_r>
 8012384:	89a3      	ldrh	r3, [r4, #12]
 8012386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801238a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801238e:	81a3      	strh	r3, [r4, #12]
 8012390:	4632      	mov	r2, r6
 8012392:	463b      	mov	r3, r7
 8012394:	4628      	mov	r0, r5
 8012396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801239a:	f000 b8fd 	b.w	8012598 <_write_r>

0801239e <__sseek>:
 801239e:	b510      	push	{r4, lr}
 80123a0:	460c      	mov	r4, r1
 80123a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123a6:	f000 f8d3 	bl	8012550 <_lseek_r>
 80123aa:	1c43      	adds	r3, r0, #1
 80123ac:	89a3      	ldrh	r3, [r4, #12]
 80123ae:	bf15      	itete	ne
 80123b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80123b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80123b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80123ba:	81a3      	strheq	r3, [r4, #12]
 80123bc:	bf18      	it	ne
 80123be:	81a3      	strhne	r3, [r4, #12]
 80123c0:	bd10      	pop	{r4, pc}

080123c2 <__sclose>:
 80123c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123c6:	f000 b8b3 	b.w	8012530 <_close_r>

080123ca <__swbuf_r>:
 80123ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123cc:	460e      	mov	r6, r1
 80123ce:	4614      	mov	r4, r2
 80123d0:	4605      	mov	r5, r0
 80123d2:	b118      	cbz	r0, 80123dc <__swbuf_r+0x12>
 80123d4:	6a03      	ldr	r3, [r0, #32]
 80123d6:	b90b      	cbnz	r3, 80123dc <__swbuf_r+0x12>
 80123d8:	f7ff fed0 	bl	801217c <__sinit>
 80123dc:	69a3      	ldr	r3, [r4, #24]
 80123de:	60a3      	str	r3, [r4, #8]
 80123e0:	89a3      	ldrh	r3, [r4, #12]
 80123e2:	071a      	lsls	r2, r3, #28
 80123e4:	d501      	bpl.n	80123ea <__swbuf_r+0x20>
 80123e6:	6923      	ldr	r3, [r4, #16]
 80123e8:	b943      	cbnz	r3, 80123fc <__swbuf_r+0x32>
 80123ea:	4621      	mov	r1, r4
 80123ec:	4628      	mov	r0, r5
 80123ee:	f000 f82b 	bl	8012448 <__swsetup_r>
 80123f2:	b118      	cbz	r0, 80123fc <__swbuf_r+0x32>
 80123f4:	f04f 37ff 	mov.w	r7, #4294967295
 80123f8:	4638      	mov	r0, r7
 80123fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123fc:	6823      	ldr	r3, [r4, #0]
 80123fe:	6922      	ldr	r2, [r4, #16]
 8012400:	1a98      	subs	r0, r3, r2
 8012402:	6963      	ldr	r3, [r4, #20]
 8012404:	b2f6      	uxtb	r6, r6
 8012406:	4283      	cmp	r3, r0
 8012408:	4637      	mov	r7, r6
 801240a:	dc05      	bgt.n	8012418 <__swbuf_r+0x4e>
 801240c:	4621      	mov	r1, r4
 801240e:	4628      	mov	r0, r5
 8012410:	f000 feb2 	bl	8013178 <_fflush_r>
 8012414:	2800      	cmp	r0, #0
 8012416:	d1ed      	bne.n	80123f4 <__swbuf_r+0x2a>
 8012418:	68a3      	ldr	r3, [r4, #8]
 801241a:	3b01      	subs	r3, #1
 801241c:	60a3      	str	r3, [r4, #8]
 801241e:	6823      	ldr	r3, [r4, #0]
 8012420:	1c5a      	adds	r2, r3, #1
 8012422:	6022      	str	r2, [r4, #0]
 8012424:	701e      	strb	r6, [r3, #0]
 8012426:	6962      	ldr	r2, [r4, #20]
 8012428:	1c43      	adds	r3, r0, #1
 801242a:	429a      	cmp	r2, r3
 801242c:	d004      	beq.n	8012438 <__swbuf_r+0x6e>
 801242e:	89a3      	ldrh	r3, [r4, #12]
 8012430:	07db      	lsls	r3, r3, #31
 8012432:	d5e1      	bpl.n	80123f8 <__swbuf_r+0x2e>
 8012434:	2e0a      	cmp	r6, #10
 8012436:	d1df      	bne.n	80123f8 <__swbuf_r+0x2e>
 8012438:	4621      	mov	r1, r4
 801243a:	4628      	mov	r0, r5
 801243c:	f000 fe9c 	bl	8013178 <_fflush_r>
 8012440:	2800      	cmp	r0, #0
 8012442:	d0d9      	beq.n	80123f8 <__swbuf_r+0x2e>
 8012444:	e7d6      	b.n	80123f4 <__swbuf_r+0x2a>
	...

08012448 <__swsetup_r>:
 8012448:	b538      	push	{r3, r4, r5, lr}
 801244a:	4b29      	ldr	r3, [pc, #164]	@ (80124f0 <__swsetup_r+0xa8>)
 801244c:	4605      	mov	r5, r0
 801244e:	6818      	ldr	r0, [r3, #0]
 8012450:	460c      	mov	r4, r1
 8012452:	b118      	cbz	r0, 801245c <__swsetup_r+0x14>
 8012454:	6a03      	ldr	r3, [r0, #32]
 8012456:	b90b      	cbnz	r3, 801245c <__swsetup_r+0x14>
 8012458:	f7ff fe90 	bl	801217c <__sinit>
 801245c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012460:	0719      	lsls	r1, r3, #28
 8012462:	d422      	bmi.n	80124aa <__swsetup_r+0x62>
 8012464:	06da      	lsls	r2, r3, #27
 8012466:	d407      	bmi.n	8012478 <__swsetup_r+0x30>
 8012468:	2209      	movs	r2, #9
 801246a:	602a      	str	r2, [r5, #0]
 801246c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012470:	81a3      	strh	r3, [r4, #12]
 8012472:	f04f 30ff 	mov.w	r0, #4294967295
 8012476:	e033      	b.n	80124e0 <__swsetup_r+0x98>
 8012478:	0758      	lsls	r0, r3, #29
 801247a:	d512      	bpl.n	80124a2 <__swsetup_r+0x5a>
 801247c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801247e:	b141      	cbz	r1, 8012492 <__swsetup_r+0x4a>
 8012480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012484:	4299      	cmp	r1, r3
 8012486:	d002      	beq.n	801248e <__swsetup_r+0x46>
 8012488:	4628      	mov	r0, r5
 801248a:	f000 f8d3 	bl	8012634 <_free_r>
 801248e:	2300      	movs	r3, #0
 8012490:	6363      	str	r3, [r4, #52]	@ 0x34
 8012492:	89a3      	ldrh	r3, [r4, #12]
 8012494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012498:	81a3      	strh	r3, [r4, #12]
 801249a:	2300      	movs	r3, #0
 801249c:	6063      	str	r3, [r4, #4]
 801249e:	6923      	ldr	r3, [r4, #16]
 80124a0:	6023      	str	r3, [r4, #0]
 80124a2:	89a3      	ldrh	r3, [r4, #12]
 80124a4:	f043 0308 	orr.w	r3, r3, #8
 80124a8:	81a3      	strh	r3, [r4, #12]
 80124aa:	6923      	ldr	r3, [r4, #16]
 80124ac:	b94b      	cbnz	r3, 80124c2 <__swsetup_r+0x7a>
 80124ae:	89a3      	ldrh	r3, [r4, #12]
 80124b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80124b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80124b8:	d003      	beq.n	80124c2 <__swsetup_r+0x7a>
 80124ba:	4621      	mov	r1, r4
 80124bc:	4628      	mov	r0, r5
 80124be:	f000 fea9 	bl	8013214 <__smakebuf_r>
 80124c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124c6:	f013 0201 	ands.w	r2, r3, #1
 80124ca:	d00a      	beq.n	80124e2 <__swsetup_r+0x9a>
 80124cc:	2200      	movs	r2, #0
 80124ce:	60a2      	str	r2, [r4, #8]
 80124d0:	6962      	ldr	r2, [r4, #20]
 80124d2:	4252      	negs	r2, r2
 80124d4:	61a2      	str	r2, [r4, #24]
 80124d6:	6922      	ldr	r2, [r4, #16]
 80124d8:	b942      	cbnz	r2, 80124ec <__swsetup_r+0xa4>
 80124da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80124de:	d1c5      	bne.n	801246c <__swsetup_r+0x24>
 80124e0:	bd38      	pop	{r3, r4, r5, pc}
 80124e2:	0799      	lsls	r1, r3, #30
 80124e4:	bf58      	it	pl
 80124e6:	6962      	ldrpl	r2, [r4, #20]
 80124e8:	60a2      	str	r2, [r4, #8]
 80124ea:	e7f4      	b.n	80124d6 <__swsetup_r+0x8e>
 80124ec:	2000      	movs	r0, #0
 80124ee:	e7f7      	b.n	80124e0 <__swsetup_r+0x98>
 80124f0:	20000134 	.word	0x20000134

080124f4 <memset>:
 80124f4:	4402      	add	r2, r0
 80124f6:	4603      	mov	r3, r0
 80124f8:	4293      	cmp	r3, r2
 80124fa:	d100      	bne.n	80124fe <memset+0xa>
 80124fc:	4770      	bx	lr
 80124fe:	f803 1b01 	strb.w	r1, [r3], #1
 8012502:	e7f9      	b.n	80124f8 <memset+0x4>

08012504 <strrchr>:
 8012504:	b538      	push	{r3, r4, r5, lr}
 8012506:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 801250a:	4603      	mov	r3, r0
 801250c:	d10e      	bne.n	801252c <strrchr+0x28>
 801250e:	4621      	mov	r1, r4
 8012510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012514:	f000 bf08 	b.w	8013328 <strchr>
 8012518:	1c43      	adds	r3, r0, #1
 801251a:	4605      	mov	r5, r0
 801251c:	4621      	mov	r1, r4
 801251e:	4618      	mov	r0, r3
 8012520:	f000 ff02 	bl	8013328 <strchr>
 8012524:	2800      	cmp	r0, #0
 8012526:	d1f7      	bne.n	8012518 <strrchr+0x14>
 8012528:	4628      	mov	r0, r5
 801252a:	bd38      	pop	{r3, r4, r5, pc}
 801252c:	2500      	movs	r5, #0
 801252e:	e7f5      	b.n	801251c <strrchr+0x18>

08012530 <_close_r>:
 8012530:	b538      	push	{r3, r4, r5, lr}
 8012532:	4d06      	ldr	r5, [pc, #24]	@ (801254c <_close_r+0x1c>)
 8012534:	2300      	movs	r3, #0
 8012536:	4604      	mov	r4, r0
 8012538:	4608      	mov	r0, r1
 801253a:	602b      	str	r3, [r5, #0]
 801253c:	f7f0 fcf3 	bl	8002f26 <_close>
 8012540:	1c43      	adds	r3, r0, #1
 8012542:	d102      	bne.n	801254a <_close_r+0x1a>
 8012544:	682b      	ldr	r3, [r5, #0]
 8012546:	b103      	cbz	r3, 801254a <_close_r+0x1a>
 8012548:	6023      	str	r3, [r4, #0]
 801254a:	bd38      	pop	{r3, r4, r5, pc}
 801254c:	200021c4 	.word	0x200021c4

08012550 <_lseek_r>:
 8012550:	b538      	push	{r3, r4, r5, lr}
 8012552:	4d07      	ldr	r5, [pc, #28]	@ (8012570 <_lseek_r+0x20>)
 8012554:	4604      	mov	r4, r0
 8012556:	4608      	mov	r0, r1
 8012558:	4611      	mov	r1, r2
 801255a:	2200      	movs	r2, #0
 801255c:	602a      	str	r2, [r5, #0]
 801255e:	461a      	mov	r2, r3
 8012560:	f7f0 fd08 	bl	8002f74 <_lseek>
 8012564:	1c43      	adds	r3, r0, #1
 8012566:	d102      	bne.n	801256e <_lseek_r+0x1e>
 8012568:	682b      	ldr	r3, [r5, #0]
 801256a:	b103      	cbz	r3, 801256e <_lseek_r+0x1e>
 801256c:	6023      	str	r3, [r4, #0]
 801256e:	bd38      	pop	{r3, r4, r5, pc}
 8012570:	200021c4 	.word	0x200021c4

08012574 <_read_r>:
 8012574:	b538      	push	{r3, r4, r5, lr}
 8012576:	4d07      	ldr	r5, [pc, #28]	@ (8012594 <_read_r+0x20>)
 8012578:	4604      	mov	r4, r0
 801257a:	4608      	mov	r0, r1
 801257c:	4611      	mov	r1, r2
 801257e:	2200      	movs	r2, #0
 8012580:	602a      	str	r2, [r5, #0]
 8012582:	461a      	mov	r2, r3
 8012584:	f7f0 fcb2 	bl	8002eec <_read>
 8012588:	1c43      	adds	r3, r0, #1
 801258a:	d102      	bne.n	8012592 <_read_r+0x1e>
 801258c:	682b      	ldr	r3, [r5, #0]
 801258e:	b103      	cbz	r3, 8012592 <_read_r+0x1e>
 8012590:	6023      	str	r3, [r4, #0]
 8012592:	bd38      	pop	{r3, r4, r5, pc}
 8012594:	200021c4 	.word	0x200021c4

08012598 <_write_r>:
 8012598:	b538      	push	{r3, r4, r5, lr}
 801259a:	4d07      	ldr	r5, [pc, #28]	@ (80125b8 <_write_r+0x20>)
 801259c:	4604      	mov	r4, r0
 801259e:	4608      	mov	r0, r1
 80125a0:	4611      	mov	r1, r2
 80125a2:	2200      	movs	r2, #0
 80125a4:	602a      	str	r2, [r5, #0]
 80125a6:	461a      	mov	r2, r3
 80125a8:	f7fc fbc4 	bl	800ed34 <_write>
 80125ac:	1c43      	adds	r3, r0, #1
 80125ae:	d102      	bne.n	80125b6 <_write_r+0x1e>
 80125b0:	682b      	ldr	r3, [r5, #0]
 80125b2:	b103      	cbz	r3, 80125b6 <_write_r+0x1e>
 80125b4:	6023      	str	r3, [r4, #0]
 80125b6:	bd38      	pop	{r3, r4, r5, pc}
 80125b8:	200021c4 	.word	0x200021c4

080125bc <__errno>:
 80125bc:	4b01      	ldr	r3, [pc, #4]	@ (80125c4 <__errno+0x8>)
 80125be:	6818      	ldr	r0, [r3, #0]
 80125c0:	4770      	bx	lr
 80125c2:	bf00      	nop
 80125c4:	20000134 	.word	0x20000134

080125c8 <__libc_init_array>:
 80125c8:	b570      	push	{r4, r5, r6, lr}
 80125ca:	4d0d      	ldr	r5, [pc, #52]	@ (8012600 <__libc_init_array+0x38>)
 80125cc:	4c0d      	ldr	r4, [pc, #52]	@ (8012604 <__libc_init_array+0x3c>)
 80125ce:	1b64      	subs	r4, r4, r5
 80125d0:	10a4      	asrs	r4, r4, #2
 80125d2:	2600      	movs	r6, #0
 80125d4:	42a6      	cmp	r6, r4
 80125d6:	d109      	bne.n	80125ec <__libc_init_array+0x24>
 80125d8:	4d0b      	ldr	r5, [pc, #44]	@ (8012608 <__libc_init_array+0x40>)
 80125da:	4c0c      	ldr	r4, [pc, #48]	@ (801260c <__libc_init_array+0x44>)
 80125dc:	f000 ff1a 	bl	8013414 <_init>
 80125e0:	1b64      	subs	r4, r4, r5
 80125e2:	10a4      	asrs	r4, r4, #2
 80125e4:	2600      	movs	r6, #0
 80125e6:	42a6      	cmp	r6, r4
 80125e8:	d105      	bne.n	80125f6 <__libc_init_array+0x2e>
 80125ea:	bd70      	pop	{r4, r5, r6, pc}
 80125ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80125f0:	4798      	blx	r3
 80125f2:	3601      	adds	r6, #1
 80125f4:	e7ee      	b.n	80125d4 <__libc_init_array+0xc>
 80125f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80125fa:	4798      	blx	r3
 80125fc:	3601      	adds	r6, #1
 80125fe:	e7f2      	b.n	80125e6 <__libc_init_array+0x1e>
 8012600:	08014d14 	.word	0x08014d14
 8012604:	08014d14 	.word	0x08014d14
 8012608:	08014d14 	.word	0x08014d14
 801260c:	08014d18 	.word	0x08014d18

08012610 <__retarget_lock_init_recursive>:
 8012610:	4770      	bx	lr

08012612 <__retarget_lock_acquire_recursive>:
 8012612:	4770      	bx	lr

08012614 <__retarget_lock_release_recursive>:
 8012614:	4770      	bx	lr

08012616 <memcpy>:
 8012616:	440a      	add	r2, r1
 8012618:	4291      	cmp	r1, r2
 801261a:	f100 33ff 	add.w	r3, r0, #4294967295
 801261e:	d100      	bne.n	8012622 <memcpy+0xc>
 8012620:	4770      	bx	lr
 8012622:	b510      	push	{r4, lr}
 8012624:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012628:	f803 4f01 	strb.w	r4, [r3, #1]!
 801262c:	4291      	cmp	r1, r2
 801262e:	d1f9      	bne.n	8012624 <memcpy+0xe>
 8012630:	bd10      	pop	{r4, pc}
	...

08012634 <_free_r>:
 8012634:	b538      	push	{r3, r4, r5, lr}
 8012636:	4605      	mov	r5, r0
 8012638:	2900      	cmp	r1, #0
 801263a:	d041      	beq.n	80126c0 <_free_r+0x8c>
 801263c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012640:	1f0c      	subs	r4, r1, #4
 8012642:	2b00      	cmp	r3, #0
 8012644:	bfb8      	it	lt
 8012646:	18e4      	addlt	r4, r4, r3
 8012648:	f000 f8e0 	bl	801280c <__malloc_lock>
 801264c:	4a1d      	ldr	r2, [pc, #116]	@ (80126c4 <_free_r+0x90>)
 801264e:	6813      	ldr	r3, [r2, #0]
 8012650:	b933      	cbnz	r3, 8012660 <_free_r+0x2c>
 8012652:	6063      	str	r3, [r4, #4]
 8012654:	6014      	str	r4, [r2, #0]
 8012656:	4628      	mov	r0, r5
 8012658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801265c:	f000 b8dc 	b.w	8012818 <__malloc_unlock>
 8012660:	42a3      	cmp	r3, r4
 8012662:	d908      	bls.n	8012676 <_free_r+0x42>
 8012664:	6820      	ldr	r0, [r4, #0]
 8012666:	1821      	adds	r1, r4, r0
 8012668:	428b      	cmp	r3, r1
 801266a:	bf01      	itttt	eq
 801266c:	6819      	ldreq	r1, [r3, #0]
 801266e:	685b      	ldreq	r3, [r3, #4]
 8012670:	1809      	addeq	r1, r1, r0
 8012672:	6021      	streq	r1, [r4, #0]
 8012674:	e7ed      	b.n	8012652 <_free_r+0x1e>
 8012676:	461a      	mov	r2, r3
 8012678:	685b      	ldr	r3, [r3, #4]
 801267a:	b10b      	cbz	r3, 8012680 <_free_r+0x4c>
 801267c:	42a3      	cmp	r3, r4
 801267e:	d9fa      	bls.n	8012676 <_free_r+0x42>
 8012680:	6811      	ldr	r1, [r2, #0]
 8012682:	1850      	adds	r0, r2, r1
 8012684:	42a0      	cmp	r0, r4
 8012686:	d10b      	bne.n	80126a0 <_free_r+0x6c>
 8012688:	6820      	ldr	r0, [r4, #0]
 801268a:	4401      	add	r1, r0
 801268c:	1850      	adds	r0, r2, r1
 801268e:	4283      	cmp	r3, r0
 8012690:	6011      	str	r1, [r2, #0]
 8012692:	d1e0      	bne.n	8012656 <_free_r+0x22>
 8012694:	6818      	ldr	r0, [r3, #0]
 8012696:	685b      	ldr	r3, [r3, #4]
 8012698:	6053      	str	r3, [r2, #4]
 801269a:	4408      	add	r0, r1
 801269c:	6010      	str	r0, [r2, #0]
 801269e:	e7da      	b.n	8012656 <_free_r+0x22>
 80126a0:	d902      	bls.n	80126a8 <_free_r+0x74>
 80126a2:	230c      	movs	r3, #12
 80126a4:	602b      	str	r3, [r5, #0]
 80126a6:	e7d6      	b.n	8012656 <_free_r+0x22>
 80126a8:	6820      	ldr	r0, [r4, #0]
 80126aa:	1821      	adds	r1, r4, r0
 80126ac:	428b      	cmp	r3, r1
 80126ae:	bf04      	itt	eq
 80126b0:	6819      	ldreq	r1, [r3, #0]
 80126b2:	685b      	ldreq	r3, [r3, #4]
 80126b4:	6063      	str	r3, [r4, #4]
 80126b6:	bf04      	itt	eq
 80126b8:	1809      	addeq	r1, r1, r0
 80126ba:	6021      	streq	r1, [r4, #0]
 80126bc:	6054      	str	r4, [r2, #4]
 80126be:	e7ca      	b.n	8012656 <_free_r+0x22>
 80126c0:	bd38      	pop	{r3, r4, r5, pc}
 80126c2:	bf00      	nop
 80126c4:	200021d0 	.word	0x200021d0

080126c8 <sbrk_aligned>:
 80126c8:	b570      	push	{r4, r5, r6, lr}
 80126ca:	4e0f      	ldr	r6, [pc, #60]	@ (8012708 <sbrk_aligned+0x40>)
 80126cc:	460c      	mov	r4, r1
 80126ce:	6831      	ldr	r1, [r6, #0]
 80126d0:	4605      	mov	r5, r0
 80126d2:	b911      	cbnz	r1, 80126da <sbrk_aligned+0x12>
 80126d4:	f000 fe58 	bl	8013388 <_sbrk_r>
 80126d8:	6030      	str	r0, [r6, #0]
 80126da:	4621      	mov	r1, r4
 80126dc:	4628      	mov	r0, r5
 80126de:	f000 fe53 	bl	8013388 <_sbrk_r>
 80126e2:	1c43      	adds	r3, r0, #1
 80126e4:	d103      	bne.n	80126ee <sbrk_aligned+0x26>
 80126e6:	f04f 34ff 	mov.w	r4, #4294967295
 80126ea:	4620      	mov	r0, r4
 80126ec:	bd70      	pop	{r4, r5, r6, pc}
 80126ee:	1cc4      	adds	r4, r0, #3
 80126f0:	f024 0403 	bic.w	r4, r4, #3
 80126f4:	42a0      	cmp	r0, r4
 80126f6:	d0f8      	beq.n	80126ea <sbrk_aligned+0x22>
 80126f8:	1a21      	subs	r1, r4, r0
 80126fa:	4628      	mov	r0, r5
 80126fc:	f000 fe44 	bl	8013388 <_sbrk_r>
 8012700:	3001      	adds	r0, #1
 8012702:	d1f2      	bne.n	80126ea <sbrk_aligned+0x22>
 8012704:	e7ef      	b.n	80126e6 <sbrk_aligned+0x1e>
 8012706:	bf00      	nop
 8012708:	200021cc 	.word	0x200021cc

0801270c <_malloc_r>:
 801270c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012710:	1ccd      	adds	r5, r1, #3
 8012712:	f025 0503 	bic.w	r5, r5, #3
 8012716:	3508      	adds	r5, #8
 8012718:	2d0c      	cmp	r5, #12
 801271a:	bf38      	it	cc
 801271c:	250c      	movcc	r5, #12
 801271e:	2d00      	cmp	r5, #0
 8012720:	4606      	mov	r6, r0
 8012722:	db01      	blt.n	8012728 <_malloc_r+0x1c>
 8012724:	42a9      	cmp	r1, r5
 8012726:	d904      	bls.n	8012732 <_malloc_r+0x26>
 8012728:	230c      	movs	r3, #12
 801272a:	6033      	str	r3, [r6, #0]
 801272c:	2000      	movs	r0, #0
 801272e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012732:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012808 <_malloc_r+0xfc>
 8012736:	f000 f869 	bl	801280c <__malloc_lock>
 801273a:	f8d8 3000 	ldr.w	r3, [r8]
 801273e:	461c      	mov	r4, r3
 8012740:	bb44      	cbnz	r4, 8012794 <_malloc_r+0x88>
 8012742:	4629      	mov	r1, r5
 8012744:	4630      	mov	r0, r6
 8012746:	f7ff ffbf 	bl	80126c8 <sbrk_aligned>
 801274a:	1c43      	adds	r3, r0, #1
 801274c:	4604      	mov	r4, r0
 801274e:	d158      	bne.n	8012802 <_malloc_r+0xf6>
 8012750:	f8d8 4000 	ldr.w	r4, [r8]
 8012754:	4627      	mov	r7, r4
 8012756:	2f00      	cmp	r7, #0
 8012758:	d143      	bne.n	80127e2 <_malloc_r+0xd6>
 801275a:	2c00      	cmp	r4, #0
 801275c:	d04b      	beq.n	80127f6 <_malloc_r+0xea>
 801275e:	6823      	ldr	r3, [r4, #0]
 8012760:	4639      	mov	r1, r7
 8012762:	4630      	mov	r0, r6
 8012764:	eb04 0903 	add.w	r9, r4, r3
 8012768:	f000 fe0e 	bl	8013388 <_sbrk_r>
 801276c:	4581      	cmp	r9, r0
 801276e:	d142      	bne.n	80127f6 <_malloc_r+0xea>
 8012770:	6821      	ldr	r1, [r4, #0]
 8012772:	1a6d      	subs	r5, r5, r1
 8012774:	4629      	mov	r1, r5
 8012776:	4630      	mov	r0, r6
 8012778:	f7ff ffa6 	bl	80126c8 <sbrk_aligned>
 801277c:	3001      	adds	r0, #1
 801277e:	d03a      	beq.n	80127f6 <_malloc_r+0xea>
 8012780:	6823      	ldr	r3, [r4, #0]
 8012782:	442b      	add	r3, r5
 8012784:	6023      	str	r3, [r4, #0]
 8012786:	f8d8 3000 	ldr.w	r3, [r8]
 801278a:	685a      	ldr	r2, [r3, #4]
 801278c:	bb62      	cbnz	r2, 80127e8 <_malloc_r+0xdc>
 801278e:	f8c8 7000 	str.w	r7, [r8]
 8012792:	e00f      	b.n	80127b4 <_malloc_r+0xa8>
 8012794:	6822      	ldr	r2, [r4, #0]
 8012796:	1b52      	subs	r2, r2, r5
 8012798:	d420      	bmi.n	80127dc <_malloc_r+0xd0>
 801279a:	2a0b      	cmp	r2, #11
 801279c:	d917      	bls.n	80127ce <_malloc_r+0xc2>
 801279e:	1961      	adds	r1, r4, r5
 80127a0:	42a3      	cmp	r3, r4
 80127a2:	6025      	str	r5, [r4, #0]
 80127a4:	bf18      	it	ne
 80127a6:	6059      	strne	r1, [r3, #4]
 80127a8:	6863      	ldr	r3, [r4, #4]
 80127aa:	bf08      	it	eq
 80127ac:	f8c8 1000 	streq.w	r1, [r8]
 80127b0:	5162      	str	r2, [r4, r5]
 80127b2:	604b      	str	r3, [r1, #4]
 80127b4:	4630      	mov	r0, r6
 80127b6:	f000 f82f 	bl	8012818 <__malloc_unlock>
 80127ba:	f104 000b 	add.w	r0, r4, #11
 80127be:	1d23      	adds	r3, r4, #4
 80127c0:	f020 0007 	bic.w	r0, r0, #7
 80127c4:	1ac2      	subs	r2, r0, r3
 80127c6:	bf1c      	itt	ne
 80127c8:	1a1b      	subne	r3, r3, r0
 80127ca:	50a3      	strne	r3, [r4, r2]
 80127cc:	e7af      	b.n	801272e <_malloc_r+0x22>
 80127ce:	6862      	ldr	r2, [r4, #4]
 80127d0:	42a3      	cmp	r3, r4
 80127d2:	bf0c      	ite	eq
 80127d4:	f8c8 2000 	streq.w	r2, [r8]
 80127d8:	605a      	strne	r2, [r3, #4]
 80127da:	e7eb      	b.n	80127b4 <_malloc_r+0xa8>
 80127dc:	4623      	mov	r3, r4
 80127de:	6864      	ldr	r4, [r4, #4]
 80127e0:	e7ae      	b.n	8012740 <_malloc_r+0x34>
 80127e2:	463c      	mov	r4, r7
 80127e4:	687f      	ldr	r7, [r7, #4]
 80127e6:	e7b6      	b.n	8012756 <_malloc_r+0x4a>
 80127e8:	461a      	mov	r2, r3
 80127ea:	685b      	ldr	r3, [r3, #4]
 80127ec:	42a3      	cmp	r3, r4
 80127ee:	d1fb      	bne.n	80127e8 <_malloc_r+0xdc>
 80127f0:	2300      	movs	r3, #0
 80127f2:	6053      	str	r3, [r2, #4]
 80127f4:	e7de      	b.n	80127b4 <_malloc_r+0xa8>
 80127f6:	230c      	movs	r3, #12
 80127f8:	6033      	str	r3, [r6, #0]
 80127fa:	4630      	mov	r0, r6
 80127fc:	f000 f80c 	bl	8012818 <__malloc_unlock>
 8012800:	e794      	b.n	801272c <_malloc_r+0x20>
 8012802:	6005      	str	r5, [r0, #0]
 8012804:	e7d6      	b.n	80127b4 <_malloc_r+0xa8>
 8012806:	bf00      	nop
 8012808:	200021d0 	.word	0x200021d0

0801280c <__malloc_lock>:
 801280c:	4801      	ldr	r0, [pc, #4]	@ (8012814 <__malloc_lock+0x8>)
 801280e:	f7ff bf00 	b.w	8012612 <__retarget_lock_acquire_recursive>
 8012812:	bf00      	nop
 8012814:	200021c8 	.word	0x200021c8

08012818 <__malloc_unlock>:
 8012818:	4801      	ldr	r0, [pc, #4]	@ (8012820 <__malloc_unlock+0x8>)
 801281a:	f7ff befb 	b.w	8012614 <__retarget_lock_release_recursive>
 801281e:	bf00      	nop
 8012820:	200021c8 	.word	0x200021c8

08012824 <__ssputs_r>:
 8012824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012828:	688e      	ldr	r6, [r1, #8]
 801282a:	461f      	mov	r7, r3
 801282c:	42be      	cmp	r6, r7
 801282e:	680b      	ldr	r3, [r1, #0]
 8012830:	4682      	mov	sl, r0
 8012832:	460c      	mov	r4, r1
 8012834:	4690      	mov	r8, r2
 8012836:	d82d      	bhi.n	8012894 <__ssputs_r+0x70>
 8012838:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801283c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012840:	d026      	beq.n	8012890 <__ssputs_r+0x6c>
 8012842:	6965      	ldr	r5, [r4, #20]
 8012844:	6909      	ldr	r1, [r1, #16]
 8012846:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801284a:	eba3 0901 	sub.w	r9, r3, r1
 801284e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012852:	1c7b      	adds	r3, r7, #1
 8012854:	444b      	add	r3, r9
 8012856:	106d      	asrs	r5, r5, #1
 8012858:	429d      	cmp	r5, r3
 801285a:	bf38      	it	cc
 801285c:	461d      	movcc	r5, r3
 801285e:	0553      	lsls	r3, r2, #21
 8012860:	d527      	bpl.n	80128b2 <__ssputs_r+0x8e>
 8012862:	4629      	mov	r1, r5
 8012864:	f7ff ff52 	bl	801270c <_malloc_r>
 8012868:	4606      	mov	r6, r0
 801286a:	b360      	cbz	r0, 80128c6 <__ssputs_r+0xa2>
 801286c:	6921      	ldr	r1, [r4, #16]
 801286e:	464a      	mov	r2, r9
 8012870:	f7ff fed1 	bl	8012616 <memcpy>
 8012874:	89a3      	ldrh	r3, [r4, #12]
 8012876:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801287a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801287e:	81a3      	strh	r3, [r4, #12]
 8012880:	6126      	str	r6, [r4, #16]
 8012882:	6165      	str	r5, [r4, #20]
 8012884:	444e      	add	r6, r9
 8012886:	eba5 0509 	sub.w	r5, r5, r9
 801288a:	6026      	str	r6, [r4, #0]
 801288c:	60a5      	str	r5, [r4, #8]
 801288e:	463e      	mov	r6, r7
 8012890:	42be      	cmp	r6, r7
 8012892:	d900      	bls.n	8012896 <__ssputs_r+0x72>
 8012894:	463e      	mov	r6, r7
 8012896:	6820      	ldr	r0, [r4, #0]
 8012898:	4632      	mov	r2, r6
 801289a:	4641      	mov	r1, r8
 801289c:	f000 fd2a 	bl	80132f4 <memmove>
 80128a0:	68a3      	ldr	r3, [r4, #8]
 80128a2:	1b9b      	subs	r3, r3, r6
 80128a4:	60a3      	str	r3, [r4, #8]
 80128a6:	6823      	ldr	r3, [r4, #0]
 80128a8:	4433      	add	r3, r6
 80128aa:	6023      	str	r3, [r4, #0]
 80128ac:	2000      	movs	r0, #0
 80128ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128b2:	462a      	mov	r2, r5
 80128b4:	f000 fd78 	bl	80133a8 <_realloc_r>
 80128b8:	4606      	mov	r6, r0
 80128ba:	2800      	cmp	r0, #0
 80128bc:	d1e0      	bne.n	8012880 <__ssputs_r+0x5c>
 80128be:	6921      	ldr	r1, [r4, #16]
 80128c0:	4650      	mov	r0, sl
 80128c2:	f7ff feb7 	bl	8012634 <_free_r>
 80128c6:	230c      	movs	r3, #12
 80128c8:	f8ca 3000 	str.w	r3, [sl]
 80128cc:	89a3      	ldrh	r3, [r4, #12]
 80128ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80128d2:	81a3      	strh	r3, [r4, #12]
 80128d4:	f04f 30ff 	mov.w	r0, #4294967295
 80128d8:	e7e9      	b.n	80128ae <__ssputs_r+0x8a>
	...

080128dc <_svfiprintf_r>:
 80128dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128e0:	4698      	mov	r8, r3
 80128e2:	898b      	ldrh	r3, [r1, #12]
 80128e4:	061b      	lsls	r3, r3, #24
 80128e6:	b09d      	sub	sp, #116	@ 0x74
 80128e8:	4607      	mov	r7, r0
 80128ea:	460d      	mov	r5, r1
 80128ec:	4614      	mov	r4, r2
 80128ee:	d510      	bpl.n	8012912 <_svfiprintf_r+0x36>
 80128f0:	690b      	ldr	r3, [r1, #16]
 80128f2:	b973      	cbnz	r3, 8012912 <_svfiprintf_r+0x36>
 80128f4:	2140      	movs	r1, #64	@ 0x40
 80128f6:	f7ff ff09 	bl	801270c <_malloc_r>
 80128fa:	6028      	str	r0, [r5, #0]
 80128fc:	6128      	str	r0, [r5, #16]
 80128fe:	b930      	cbnz	r0, 801290e <_svfiprintf_r+0x32>
 8012900:	230c      	movs	r3, #12
 8012902:	603b      	str	r3, [r7, #0]
 8012904:	f04f 30ff 	mov.w	r0, #4294967295
 8012908:	b01d      	add	sp, #116	@ 0x74
 801290a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801290e:	2340      	movs	r3, #64	@ 0x40
 8012910:	616b      	str	r3, [r5, #20]
 8012912:	2300      	movs	r3, #0
 8012914:	9309      	str	r3, [sp, #36]	@ 0x24
 8012916:	2320      	movs	r3, #32
 8012918:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801291c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012920:	2330      	movs	r3, #48	@ 0x30
 8012922:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012ac0 <_svfiprintf_r+0x1e4>
 8012926:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801292a:	f04f 0901 	mov.w	r9, #1
 801292e:	4623      	mov	r3, r4
 8012930:	469a      	mov	sl, r3
 8012932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012936:	b10a      	cbz	r2, 801293c <_svfiprintf_r+0x60>
 8012938:	2a25      	cmp	r2, #37	@ 0x25
 801293a:	d1f9      	bne.n	8012930 <_svfiprintf_r+0x54>
 801293c:	ebba 0b04 	subs.w	fp, sl, r4
 8012940:	d00b      	beq.n	801295a <_svfiprintf_r+0x7e>
 8012942:	465b      	mov	r3, fp
 8012944:	4622      	mov	r2, r4
 8012946:	4629      	mov	r1, r5
 8012948:	4638      	mov	r0, r7
 801294a:	f7ff ff6b 	bl	8012824 <__ssputs_r>
 801294e:	3001      	adds	r0, #1
 8012950:	f000 80a7 	beq.w	8012aa2 <_svfiprintf_r+0x1c6>
 8012954:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012956:	445a      	add	r2, fp
 8012958:	9209      	str	r2, [sp, #36]	@ 0x24
 801295a:	f89a 3000 	ldrb.w	r3, [sl]
 801295e:	2b00      	cmp	r3, #0
 8012960:	f000 809f 	beq.w	8012aa2 <_svfiprintf_r+0x1c6>
 8012964:	2300      	movs	r3, #0
 8012966:	f04f 32ff 	mov.w	r2, #4294967295
 801296a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801296e:	f10a 0a01 	add.w	sl, sl, #1
 8012972:	9304      	str	r3, [sp, #16]
 8012974:	9307      	str	r3, [sp, #28]
 8012976:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801297a:	931a      	str	r3, [sp, #104]	@ 0x68
 801297c:	4654      	mov	r4, sl
 801297e:	2205      	movs	r2, #5
 8012980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012984:	484e      	ldr	r0, [pc, #312]	@ (8012ac0 <_svfiprintf_r+0x1e4>)
 8012986:	f7ed fc03 	bl	8000190 <memchr>
 801298a:	9a04      	ldr	r2, [sp, #16]
 801298c:	b9d8      	cbnz	r0, 80129c6 <_svfiprintf_r+0xea>
 801298e:	06d0      	lsls	r0, r2, #27
 8012990:	bf44      	itt	mi
 8012992:	2320      	movmi	r3, #32
 8012994:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012998:	0711      	lsls	r1, r2, #28
 801299a:	bf44      	itt	mi
 801299c:	232b      	movmi	r3, #43	@ 0x2b
 801299e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80129a2:	f89a 3000 	ldrb.w	r3, [sl]
 80129a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80129a8:	d015      	beq.n	80129d6 <_svfiprintf_r+0xfa>
 80129aa:	9a07      	ldr	r2, [sp, #28]
 80129ac:	4654      	mov	r4, sl
 80129ae:	2000      	movs	r0, #0
 80129b0:	f04f 0c0a 	mov.w	ip, #10
 80129b4:	4621      	mov	r1, r4
 80129b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80129ba:	3b30      	subs	r3, #48	@ 0x30
 80129bc:	2b09      	cmp	r3, #9
 80129be:	d94b      	bls.n	8012a58 <_svfiprintf_r+0x17c>
 80129c0:	b1b0      	cbz	r0, 80129f0 <_svfiprintf_r+0x114>
 80129c2:	9207      	str	r2, [sp, #28]
 80129c4:	e014      	b.n	80129f0 <_svfiprintf_r+0x114>
 80129c6:	eba0 0308 	sub.w	r3, r0, r8
 80129ca:	fa09 f303 	lsl.w	r3, r9, r3
 80129ce:	4313      	orrs	r3, r2
 80129d0:	9304      	str	r3, [sp, #16]
 80129d2:	46a2      	mov	sl, r4
 80129d4:	e7d2      	b.n	801297c <_svfiprintf_r+0xa0>
 80129d6:	9b03      	ldr	r3, [sp, #12]
 80129d8:	1d19      	adds	r1, r3, #4
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	9103      	str	r1, [sp, #12]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	bfbb      	ittet	lt
 80129e2:	425b      	neglt	r3, r3
 80129e4:	f042 0202 	orrlt.w	r2, r2, #2
 80129e8:	9307      	strge	r3, [sp, #28]
 80129ea:	9307      	strlt	r3, [sp, #28]
 80129ec:	bfb8      	it	lt
 80129ee:	9204      	strlt	r2, [sp, #16]
 80129f0:	7823      	ldrb	r3, [r4, #0]
 80129f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80129f4:	d10a      	bne.n	8012a0c <_svfiprintf_r+0x130>
 80129f6:	7863      	ldrb	r3, [r4, #1]
 80129f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80129fa:	d132      	bne.n	8012a62 <_svfiprintf_r+0x186>
 80129fc:	9b03      	ldr	r3, [sp, #12]
 80129fe:	1d1a      	adds	r2, r3, #4
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	9203      	str	r2, [sp, #12]
 8012a04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012a08:	3402      	adds	r4, #2
 8012a0a:	9305      	str	r3, [sp, #20]
 8012a0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012ad0 <_svfiprintf_r+0x1f4>
 8012a10:	7821      	ldrb	r1, [r4, #0]
 8012a12:	2203      	movs	r2, #3
 8012a14:	4650      	mov	r0, sl
 8012a16:	f7ed fbbb 	bl	8000190 <memchr>
 8012a1a:	b138      	cbz	r0, 8012a2c <_svfiprintf_r+0x150>
 8012a1c:	9b04      	ldr	r3, [sp, #16]
 8012a1e:	eba0 000a 	sub.w	r0, r0, sl
 8012a22:	2240      	movs	r2, #64	@ 0x40
 8012a24:	4082      	lsls	r2, r0
 8012a26:	4313      	orrs	r3, r2
 8012a28:	3401      	adds	r4, #1
 8012a2a:	9304      	str	r3, [sp, #16]
 8012a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a30:	4824      	ldr	r0, [pc, #144]	@ (8012ac4 <_svfiprintf_r+0x1e8>)
 8012a32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012a36:	2206      	movs	r2, #6
 8012a38:	f7ed fbaa 	bl	8000190 <memchr>
 8012a3c:	2800      	cmp	r0, #0
 8012a3e:	d036      	beq.n	8012aae <_svfiprintf_r+0x1d2>
 8012a40:	4b21      	ldr	r3, [pc, #132]	@ (8012ac8 <_svfiprintf_r+0x1ec>)
 8012a42:	bb1b      	cbnz	r3, 8012a8c <_svfiprintf_r+0x1b0>
 8012a44:	9b03      	ldr	r3, [sp, #12]
 8012a46:	3307      	adds	r3, #7
 8012a48:	f023 0307 	bic.w	r3, r3, #7
 8012a4c:	3308      	adds	r3, #8
 8012a4e:	9303      	str	r3, [sp, #12]
 8012a50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a52:	4433      	add	r3, r6
 8012a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a56:	e76a      	b.n	801292e <_svfiprintf_r+0x52>
 8012a58:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a5c:	460c      	mov	r4, r1
 8012a5e:	2001      	movs	r0, #1
 8012a60:	e7a8      	b.n	80129b4 <_svfiprintf_r+0xd8>
 8012a62:	2300      	movs	r3, #0
 8012a64:	3401      	adds	r4, #1
 8012a66:	9305      	str	r3, [sp, #20]
 8012a68:	4619      	mov	r1, r3
 8012a6a:	f04f 0c0a 	mov.w	ip, #10
 8012a6e:	4620      	mov	r0, r4
 8012a70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a74:	3a30      	subs	r2, #48	@ 0x30
 8012a76:	2a09      	cmp	r2, #9
 8012a78:	d903      	bls.n	8012a82 <_svfiprintf_r+0x1a6>
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d0c6      	beq.n	8012a0c <_svfiprintf_r+0x130>
 8012a7e:	9105      	str	r1, [sp, #20]
 8012a80:	e7c4      	b.n	8012a0c <_svfiprintf_r+0x130>
 8012a82:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a86:	4604      	mov	r4, r0
 8012a88:	2301      	movs	r3, #1
 8012a8a:	e7f0      	b.n	8012a6e <_svfiprintf_r+0x192>
 8012a8c:	ab03      	add	r3, sp, #12
 8012a8e:	9300      	str	r3, [sp, #0]
 8012a90:	462a      	mov	r2, r5
 8012a92:	4b0e      	ldr	r3, [pc, #56]	@ (8012acc <_svfiprintf_r+0x1f0>)
 8012a94:	a904      	add	r1, sp, #16
 8012a96:	4638      	mov	r0, r7
 8012a98:	f3af 8000 	nop.w
 8012a9c:	1c42      	adds	r2, r0, #1
 8012a9e:	4606      	mov	r6, r0
 8012aa0:	d1d6      	bne.n	8012a50 <_svfiprintf_r+0x174>
 8012aa2:	89ab      	ldrh	r3, [r5, #12]
 8012aa4:	065b      	lsls	r3, r3, #25
 8012aa6:	f53f af2d 	bmi.w	8012904 <_svfiprintf_r+0x28>
 8012aaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012aac:	e72c      	b.n	8012908 <_svfiprintf_r+0x2c>
 8012aae:	ab03      	add	r3, sp, #12
 8012ab0:	9300      	str	r3, [sp, #0]
 8012ab2:	462a      	mov	r2, r5
 8012ab4:	4b05      	ldr	r3, [pc, #20]	@ (8012acc <_svfiprintf_r+0x1f0>)
 8012ab6:	a904      	add	r1, sp, #16
 8012ab8:	4638      	mov	r0, r7
 8012aba:	f000 f9bb 	bl	8012e34 <_printf_i>
 8012abe:	e7ed      	b.n	8012a9c <_svfiprintf_r+0x1c0>
 8012ac0:	08014cd9 	.word	0x08014cd9
 8012ac4:	08014ce3 	.word	0x08014ce3
 8012ac8:	00000000 	.word	0x00000000
 8012acc:	08012825 	.word	0x08012825
 8012ad0:	08014cdf 	.word	0x08014cdf

08012ad4 <__sfputc_r>:
 8012ad4:	6893      	ldr	r3, [r2, #8]
 8012ad6:	3b01      	subs	r3, #1
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	b410      	push	{r4}
 8012adc:	6093      	str	r3, [r2, #8]
 8012ade:	da08      	bge.n	8012af2 <__sfputc_r+0x1e>
 8012ae0:	6994      	ldr	r4, [r2, #24]
 8012ae2:	42a3      	cmp	r3, r4
 8012ae4:	db01      	blt.n	8012aea <__sfputc_r+0x16>
 8012ae6:	290a      	cmp	r1, #10
 8012ae8:	d103      	bne.n	8012af2 <__sfputc_r+0x1e>
 8012aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012aee:	f7ff bc6c 	b.w	80123ca <__swbuf_r>
 8012af2:	6813      	ldr	r3, [r2, #0]
 8012af4:	1c58      	adds	r0, r3, #1
 8012af6:	6010      	str	r0, [r2, #0]
 8012af8:	7019      	strb	r1, [r3, #0]
 8012afa:	4608      	mov	r0, r1
 8012afc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b00:	4770      	bx	lr

08012b02 <__sfputs_r>:
 8012b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b04:	4606      	mov	r6, r0
 8012b06:	460f      	mov	r7, r1
 8012b08:	4614      	mov	r4, r2
 8012b0a:	18d5      	adds	r5, r2, r3
 8012b0c:	42ac      	cmp	r4, r5
 8012b0e:	d101      	bne.n	8012b14 <__sfputs_r+0x12>
 8012b10:	2000      	movs	r0, #0
 8012b12:	e007      	b.n	8012b24 <__sfputs_r+0x22>
 8012b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b18:	463a      	mov	r2, r7
 8012b1a:	4630      	mov	r0, r6
 8012b1c:	f7ff ffda 	bl	8012ad4 <__sfputc_r>
 8012b20:	1c43      	adds	r3, r0, #1
 8012b22:	d1f3      	bne.n	8012b0c <__sfputs_r+0xa>
 8012b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012b28 <_vfiprintf_r>:
 8012b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b2c:	460d      	mov	r5, r1
 8012b2e:	b09d      	sub	sp, #116	@ 0x74
 8012b30:	4614      	mov	r4, r2
 8012b32:	4698      	mov	r8, r3
 8012b34:	4606      	mov	r6, r0
 8012b36:	b118      	cbz	r0, 8012b40 <_vfiprintf_r+0x18>
 8012b38:	6a03      	ldr	r3, [r0, #32]
 8012b3a:	b90b      	cbnz	r3, 8012b40 <_vfiprintf_r+0x18>
 8012b3c:	f7ff fb1e 	bl	801217c <__sinit>
 8012b40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b42:	07d9      	lsls	r1, r3, #31
 8012b44:	d405      	bmi.n	8012b52 <_vfiprintf_r+0x2a>
 8012b46:	89ab      	ldrh	r3, [r5, #12]
 8012b48:	059a      	lsls	r2, r3, #22
 8012b4a:	d402      	bmi.n	8012b52 <_vfiprintf_r+0x2a>
 8012b4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b4e:	f7ff fd60 	bl	8012612 <__retarget_lock_acquire_recursive>
 8012b52:	89ab      	ldrh	r3, [r5, #12]
 8012b54:	071b      	lsls	r3, r3, #28
 8012b56:	d501      	bpl.n	8012b5c <_vfiprintf_r+0x34>
 8012b58:	692b      	ldr	r3, [r5, #16]
 8012b5a:	b99b      	cbnz	r3, 8012b84 <_vfiprintf_r+0x5c>
 8012b5c:	4629      	mov	r1, r5
 8012b5e:	4630      	mov	r0, r6
 8012b60:	f7ff fc72 	bl	8012448 <__swsetup_r>
 8012b64:	b170      	cbz	r0, 8012b84 <_vfiprintf_r+0x5c>
 8012b66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b68:	07dc      	lsls	r4, r3, #31
 8012b6a:	d504      	bpl.n	8012b76 <_vfiprintf_r+0x4e>
 8012b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b70:	b01d      	add	sp, #116	@ 0x74
 8012b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b76:	89ab      	ldrh	r3, [r5, #12]
 8012b78:	0598      	lsls	r0, r3, #22
 8012b7a:	d4f7      	bmi.n	8012b6c <_vfiprintf_r+0x44>
 8012b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b7e:	f7ff fd49 	bl	8012614 <__retarget_lock_release_recursive>
 8012b82:	e7f3      	b.n	8012b6c <_vfiprintf_r+0x44>
 8012b84:	2300      	movs	r3, #0
 8012b86:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b88:	2320      	movs	r3, #32
 8012b8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b92:	2330      	movs	r3, #48	@ 0x30
 8012b94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012d44 <_vfiprintf_r+0x21c>
 8012b98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012b9c:	f04f 0901 	mov.w	r9, #1
 8012ba0:	4623      	mov	r3, r4
 8012ba2:	469a      	mov	sl, r3
 8012ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ba8:	b10a      	cbz	r2, 8012bae <_vfiprintf_r+0x86>
 8012baa:	2a25      	cmp	r2, #37	@ 0x25
 8012bac:	d1f9      	bne.n	8012ba2 <_vfiprintf_r+0x7a>
 8012bae:	ebba 0b04 	subs.w	fp, sl, r4
 8012bb2:	d00b      	beq.n	8012bcc <_vfiprintf_r+0xa4>
 8012bb4:	465b      	mov	r3, fp
 8012bb6:	4622      	mov	r2, r4
 8012bb8:	4629      	mov	r1, r5
 8012bba:	4630      	mov	r0, r6
 8012bbc:	f7ff ffa1 	bl	8012b02 <__sfputs_r>
 8012bc0:	3001      	adds	r0, #1
 8012bc2:	f000 80a7 	beq.w	8012d14 <_vfiprintf_r+0x1ec>
 8012bc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012bc8:	445a      	add	r2, fp
 8012bca:	9209      	str	r2, [sp, #36]	@ 0x24
 8012bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	f000 809f 	beq.w	8012d14 <_vfiprintf_r+0x1ec>
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8012bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012be0:	f10a 0a01 	add.w	sl, sl, #1
 8012be4:	9304      	str	r3, [sp, #16]
 8012be6:	9307      	str	r3, [sp, #28]
 8012be8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012bec:	931a      	str	r3, [sp, #104]	@ 0x68
 8012bee:	4654      	mov	r4, sl
 8012bf0:	2205      	movs	r2, #5
 8012bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bf6:	4853      	ldr	r0, [pc, #332]	@ (8012d44 <_vfiprintf_r+0x21c>)
 8012bf8:	f7ed faca 	bl	8000190 <memchr>
 8012bfc:	9a04      	ldr	r2, [sp, #16]
 8012bfe:	b9d8      	cbnz	r0, 8012c38 <_vfiprintf_r+0x110>
 8012c00:	06d1      	lsls	r1, r2, #27
 8012c02:	bf44      	itt	mi
 8012c04:	2320      	movmi	r3, #32
 8012c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c0a:	0713      	lsls	r3, r2, #28
 8012c0c:	bf44      	itt	mi
 8012c0e:	232b      	movmi	r3, #43	@ 0x2b
 8012c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c14:	f89a 3000 	ldrb.w	r3, [sl]
 8012c18:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c1a:	d015      	beq.n	8012c48 <_vfiprintf_r+0x120>
 8012c1c:	9a07      	ldr	r2, [sp, #28]
 8012c1e:	4654      	mov	r4, sl
 8012c20:	2000      	movs	r0, #0
 8012c22:	f04f 0c0a 	mov.w	ip, #10
 8012c26:	4621      	mov	r1, r4
 8012c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c2c:	3b30      	subs	r3, #48	@ 0x30
 8012c2e:	2b09      	cmp	r3, #9
 8012c30:	d94b      	bls.n	8012cca <_vfiprintf_r+0x1a2>
 8012c32:	b1b0      	cbz	r0, 8012c62 <_vfiprintf_r+0x13a>
 8012c34:	9207      	str	r2, [sp, #28]
 8012c36:	e014      	b.n	8012c62 <_vfiprintf_r+0x13a>
 8012c38:	eba0 0308 	sub.w	r3, r0, r8
 8012c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8012c40:	4313      	orrs	r3, r2
 8012c42:	9304      	str	r3, [sp, #16]
 8012c44:	46a2      	mov	sl, r4
 8012c46:	e7d2      	b.n	8012bee <_vfiprintf_r+0xc6>
 8012c48:	9b03      	ldr	r3, [sp, #12]
 8012c4a:	1d19      	adds	r1, r3, #4
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	9103      	str	r1, [sp, #12]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	bfbb      	ittet	lt
 8012c54:	425b      	neglt	r3, r3
 8012c56:	f042 0202 	orrlt.w	r2, r2, #2
 8012c5a:	9307      	strge	r3, [sp, #28]
 8012c5c:	9307      	strlt	r3, [sp, #28]
 8012c5e:	bfb8      	it	lt
 8012c60:	9204      	strlt	r2, [sp, #16]
 8012c62:	7823      	ldrb	r3, [r4, #0]
 8012c64:	2b2e      	cmp	r3, #46	@ 0x2e
 8012c66:	d10a      	bne.n	8012c7e <_vfiprintf_r+0x156>
 8012c68:	7863      	ldrb	r3, [r4, #1]
 8012c6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c6c:	d132      	bne.n	8012cd4 <_vfiprintf_r+0x1ac>
 8012c6e:	9b03      	ldr	r3, [sp, #12]
 8012c70:	1d1a      	adds	r2, r3, #4
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	9203      	str	r2, [sp, #12]
 8012c76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012c7a:	3402      	adds	r4, #2
 8012c7c:	9305      	str	r3, [sp, #20]
 8012c7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012d54 <_vfiprintf_r+0x22c>
 8012c82:	7821      	ldrb	r1, [r4, #0]
 8012c84:	2203      	movs	r2, #3
 8012c86:	4650      	mov	r0, sl
 8012c88:	f7ed fa82 	bl	8000190 <memchr>
 8012c8c:	b138      	cbz	r0, 8012c9e <_vfiprintf_r+0x176>
 8012c8e:	9b04      	ldr	r3, [sp, #16]
 8012c90:	eba0 000a 	sub.w	r0, r0, sl
 8012c94:	2240      	movs	r2, #64	@ 0x40
 8012c96:	4082      	lsls	r2, r0
 8012c98:	4313      	orrs	r3, r2
 8012c9a:	3401      	adds	r4, #1
 8012c9c:	9304      	str	r3, [sp, #16]
 8012c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ca2:	4829      	ldr	r0, [pc, #164]	@ (8012d48 <_vfiprintf_r+0x220>)
 8012ca4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012ca8:	2206      	movs	r2, #6
 8012caa:	f7ed fa71 	bl	8000190 <memchr>
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	d03f      	beq.n	8012d32 <_vfiprintf_r+0x20a>
 8012cb2:	4b26      	ldr	r3, [pc, #152]	@ (8012d4c <_vfiprintf_r+0x224>)
 8012cb4:	bb1b      	cbnz	r3, 8012cfe <_vfiprintf_r+0x1d6>
 8012cb6:	9b03      	ldr	r3, [sp, #12]
 8012cb8:	3307      	adds	r3, #7
 8012cba:	f023 0307 	bic.w	r3, r3, #7
 8012cbe:	3308      	adds	r3, #8
 8012cc0:	9303      	str	r3, [sp, #12]
 8012cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cc4:	443b      	add	r3, r7
 8012cc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012cc8:	e76a      	b.n	8012ba0 <_vfiprintf_r+0x78>
 8012cca:	fb0c 3202 	mla	r2, ip, r2, r3
 8012cce:	460c      	mov	r4, r1
 8012cd0:	2001      	movs	r0, #1
 8012cd2:	e7a8      	b.n	8012c26 <_vfiprintf_r+0xfe>
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	3401      	adds	r4, #1
 8012cd8:	9305      	str	r3, [sp, #20]
 8012cda:	4619      	mov	r1, r3
 8012cdc:	f04f 0c0a 	mov.w	ip, #10
 8012ce0:	4620      	mov	r0, r4
 8012ce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ce6:	3a30      	subs	r2, #48	@ 0x30
 8012ce8:	2a09      	cmp	r2, #9
 8012cea:	d903      	bls.n	8012cf4 <_vfiprintf_r+0x1cc>
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d0c6      	beq.n	8012c7e <_vfiprintf_r+0x156>
 8012cf0:	9105      	str	r1, [sp, #20]
 8012cf2:	e7c4      	b.n	8012c7e <_vfiprintf_r+0x156>
 8012cf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cf8:	4604      	mov	r4, r0
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	e7f0      	b.n	8012ce0 <_vfiprintf_r+0x1b8>
 8012cfe:	ab03      	add	r3, sp, #12
 8012d00:	9300      	str	r3, [sp, #0]
 8012d02:	462a      	mov	r2, r5
 8012d04:	4b12      	ldr	r3, [pc, #72]	@ (8012d50 <_vfiprintf_r+0x228>)
 8012d06:	a904      	add	r1, sp, #16
 8012d08:	4630      	mov	r0, r6
 8012d0a:	f3af 8000 	nop.w
 8012d0e:	4607      	mov	r7, r0
 8012d10:	1c78      	adds	r0, r7, #1
 8012d12:	d1d6      	bne.n	8012cc2 <_vfiprintf_r+0x19a>
 8012d14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d16:	07d9      	lsls	r1, r3, #31
 8012d18:	d405      	bmi.n	8012d26 <_vfiprintf_r+0x1fe>
 8012d1a:	89ab      	ldrh	r3, [r5, #12]
 8012d1c:	059a      	lsls	r2, r3, #22
 8012d1e:	d402      	bmi.n	8012d26 <_vfiprintf_r+0x1fe>
 8012d20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d22:	f7ff fc77 	bl	8012614 <__retarget_lock_release_recursive>
 8012d26:	89ab      	ldrh	r3, [r5, #12]
 8012d28:	065b      	lsls	r3, r3, #25
 8012d2a:	f53f af1f 	bmi.w	8012b6c <_vfiprintf_r+0x44>
 8012d2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012d30:	e71e      	b.n	8012b70 <_vfiprintf_r+0x48>
 8012d32:	ab03      	add	r3, sp, #12
 8012d34:	9300      	str	r3, [sp, #0]
 8012d36:	462a      	mov	r2, r5
 8012d38:	4b05      	ldr	r3, [pc, #20]	@ (8012d50 <_vfiprintf_r+0x228>)
 8012d3a:	a904      	add	r1, sp, #16
 8012d3c:	4630      	mov	r0, r6
 8012d3e:	f000 f879 	bl	8012e34 <_printf_i>
 8012d42:	e7e4      	b.n	8012d0e <_vfiprintf_r+0x1e6>
 8012d44:	08014cd9 	.word	0x08014cd9
 8012d48:	08014ce3 	.word	0x08014ce3
 8012d4c:	00000000 	.word	0x00000000
 8012d50:	08012b03 	.word	0x08012b03
 8012d54:	08014cdf 	.word	0x08014cdf

08012d58 <_printf_common>:
 8012d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d5c:	4616      	mov	r6, r2
 8012d5e:	4698      	mov	r8, r3
 8012d60:	688a      	ldr	r2, [r1, #8]
 8012d62:	690b      	ldr	r3, [r1, #16]
 8012d64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012d68:	4293      	cmp	r3, r2
 8012d6a:	bfb8      	it	lt
 8012d6c:	4613      	movlt	r3, r2
 8012d6e:	6033      	str	r3, [r6, #0]
 8012d70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012d74:	4607      	mov	r7, r0
 8012d76:	460c      	mov	r4, r1
 8012d78:	b10a      	cbz	r2, 8012d7e <_printf_common+0x26>
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	6033      	str	r3, [r6, #0]
 8012d7e:	6823      	ldr	r3, [r4, #0]
 8012d80:	0699      	lsls	r1, r3, #26
 8012d82:	bf42      	ittt	mi
 8012d84:	6833      	ldrmi	r3, [r6, #0]
 8012d86:	3302      	addmi	r3, #2
 8012d88:	6033      	strmi	r3, [r6, #0]
 8012d8a:	6825      	ldr	r5, [r4, #0]
 8012d8c:	f015 0506 	ands.w	r5, r5, #6
 8012d90:	d106      	bne.n	8012da0 <_printf_common+0x48>
 8012d92:	f104 0a19 	add.w	sl, r4, #25
 8012d96:	68e3      	ldr	r3, [r4, #12]
 8012d98:	6832      	ldr	r2, [r6, #0]
 8012d9a:	1a9b      	subs	r3, r3, r2
 8012d9c:	42ab      	cmp	r3, r5
 8012d9e:	dc26      	bgt.n	8012dee <_printf_common+0x96>
 8012da0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012da4:	6822      	ldr	r2, [r4, #0]
 8012da6:	3b00      	subs	r3, #0
 8012da8:	bf18      	it	ne
 8012daa:	2301      	movne	r3, #1
 8012dac:	0692      	lsls	r2, r2, #26
 8012dae:	d42b      	bmi.n	8012e08 <_printf_common+0xb0>
 8012db0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012db4:	4641      	mov	r1, r8
 8012db6:	4638      	mov	r0, r7
 8012db8:	47c8      	blx	r9
 8012dba:	3001      	adds	r0, #1
 8012dbc:	d01e      	beq.n	8012dfc <_printf_common+0xa4>
 8012dbe:	6823      	ldr	r3, [r4, #0]
 8012dc0:	6922      	ldr	r2, [r4, #16]
 8012dc2:	f003 0306 	and.w	r3, r3, #6
 8012dc6:	2b04      	cmp	r3, #4
 8012dc8:	bf02      	ittt	eq
 8012dca:	68e5      	ldreq	r5, [r4, #12]
 8012dcc:	6833      	ldreq	r3, [r6, #0]
 8012dce:	1aed      	subeq	r5, r5, r3
 8012dd0:	68a3      	ldr	r3, [r4, #8]
 8012dd2:	bf0c      	ite	eq
 8012dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012dd8:	2500      	movne	r5, #0
 8012dda:	4293      	cmp	r3, r2
 8012ddc:	bfc4      	itt	gt
 8012dde:	1a9b      	subgt	r3, r3, r2
 8012de0:	18ed      	addgt	r5, r5, r3
 8012de2:	2600      	movs	r6, #0
 8012de4:	341a      	adds	r4, #26
 8012de6:	42b5      	cmp	r5, r6
 8012de8:	d11a      	bne.n	8012e20 <_printf_common+0xc8>
 8012dea:	2000      	movs	r0, #0
 8012dec:	e008      	b.n	8012e00 <_printf_common+0xa8>
 8012dee:	2301      	movs	r3, #1
 8012df0:	4652      	mov	r2, sl
 8012df2:	4641      	mov	r1, r8
 8012df4:	4638      	mov	r0, r7
 8012df6:	47c8      	blx	r9
 8012df8:	3001      	adds	r0, #1
 8012dfa:	d103      	bne.n	8012e04 <_printf_common+0xac>
 8012dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8012e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e04:	3501      	adds	r5, #1
 8012e06:	e7c6      	b.n	8012d96 <_printf_common+0x3e>
 8012e08:	18e1      	adds	r1, r4, r3
 8012e0a:	1c5a      	adds	r2, r3, #1
 8012e0c:	2030      	movs	r0, #48	@ 0x30
 8012e0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012e12:	4422      	add	r2, r4
 8012e14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012e18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012e1c:	3302      	adds	r3, #2
 8012e1e:	e7c7      	b.n	8012db0 <_printf_common+0x58>
 8012e20:	2301      	movs	r3, #1
 8012e22:	4622      	mov	r2, r4
 8012e24:	4641      	mov	r1, r8
 8012e26:	4638      	mov	r0, r7
 8012e28:	47c8      	blx	r9
 8012e2a:	3001      	adds	r0, #1
 8012e2c:	d0e6      	beq.n	8012dfc <_printf_common+0xa4>
 8012e2e:	3601      	adds	r6, #1
 8012e30:	e7d9      	b.n	8012de6 <_printf_common+0x8e>
	...

08012e34 <_printf_i>:
 8012e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e38:	7e0f      	ldrb	r7, [r1, #24]
 8012e3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012e3c:	2f78      	cmp	r7, #120	@ 0x78
 8012e3e:	4691      	mov	r9, r2
 8012e40:	4680      	mov	r8, r0
 8012e42:	460c      	mov	r4, r1
 8012e44:	469a      	mov	sl, r3
 8012e46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012e4a:	d807      	bhi.n	8012e5c <_printf_i+0x28>
 8012e4c:	2f62      	cmp	r7, #98	@ 0x62
 8012e4e:	d80a      	bhi.n	8012e66 <_printf_i+0x32>
 8012e50:	2f00      	cmp	r7, #0
 8012e52:	f000 80d1 	beq.w	8012ff8 <_printf_i+0x1c4>
 8012e56:	2f58      	cmp	r7, #88	@ 0x58
 8012e58:	f000 80b8 	beq.w	8012fcc <_printf_i+0x198>
 8012e5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012e60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012e64:	e03a      	b.n	8012edc <_printf_i+0xa8>
 8012e66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012e6a:	2b15      	cmp	r3, #21
 8012e6c:	d8f6      	bhi.n	8012e5c <_printf_i+0x28>
 8012e6e:	a101      	add	r1, pc, #4	@ (adr r1, 8012e74 <_printf_i+0x40>)
 8012e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012e74:	08012ecd 	.word	0x08012ecd
 8012e78:	08012ee1 	.word	0x08012ee1
 8012e7c:	08012e5d 	.word	0x08012e5d
 8012e80:	08012e5d 	.word	0x08012e5d
 8012e84:	08012e5d 	.word	0x08012e5d
 8012e88:	08012e5d 	.word	0x08012e5d
 8012e8c:	08012ee1 	.word	0x08012ee1
 8012e90:	08012e5d 	.word	0x08012e5d
 8012e94:	08012e5d 	.word	0x08012e5d
 8012e98:	08012e5d 	.word	0x08012e5d
 8012e9c:	08012e5d 	.word	0x08012e5d
 8012ea0:	08012fdf 	.word	0x08012fdf
 8012ea4:	08012f0b 	.word	0x08012f0b
 8012ea8:	08012f99 	.word	0x08012f99
 8012eac:	08012e5d 	.word	0x08012e5d
 8012eb0:	08012e5d 	.word	0x08012e5d
 8012eb4:	08013001 	.word	0x08013001
 8012eb8:	08012e5d 	.word	0x08012e5d
 8012ebc:	08012f0b 	.word	0x08012f0b
 8012ec0:	08012e5d 	.word	0x08012e5d
 8012ec4:	08012e5d 	.word	0x08012e5d
 8012ec8:	08012fa1 	.word	0x08012fa1
 8012ecc:	6833      	ldr	r3, [r6, #0]
 8012ece:	1d1a      	adds	r2, r3, #4
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	6032      	str	r2, [r6, #0]
 8012ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012ed8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012edc:	2301      	movs	r3, #1
 8012ede:	e09c      	b.n	801301a <_printf_i+0x1e6>
 8012ee0:	6833      	ldr	r3, [r6, #0]
 8012ee2:	6820      	ldr	r0, [r4, #0]
 8012ee4:	1d19      	adds	r1, r3, #4
 8012ee6:	6031      	str	r1, [r6, #0]
 8012ee8:	0606      	lsls	r6, r0, #24
 8012eea:	d501      	bpl.n	8012ef0 <_printf_i+0xbc>
 8012eec:	681d      	ldr	r5, [r3, #0]
 8012eee:	e003      	b.n	8012ef8 <_printf_i+0xc4>
 8012ef0:	0645      	lsls	r5, r0, #25
 8012ef2:	d5fb      	bpl.n	8012eec <_printf_i+0xb8>
 8012ef4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012ef8:	2d00      	cmp	r5, #0
 8012efa:	da03      	bge.n	8012f04 <_printf_i+0xd0>
 8012efc:	232d      	movs	r3, #45	@ 0x2d
 8012efe:	426d      	negs	r5, r5
 8012f00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012f04:	4858      	ldr	r0, [pc, #352]	@ (8013068 <_printf_i+0x234>)
 8012f06:	230a      	movs	r3, #10
 8012f08:	e011      	b.n	8012f2e <_printf_i+0xfa>
 8012f0a:	6821      	ldr	r1, [r4, #0]
 8012f0c:	6833      	ldr	r3, [r6, #0]
 8012f0e:	0608      	lsls	r0, r1, #24
 8012f10:	f853 5b04 	ldr.w	r5, [r3], #4
 8012f14:	d402      	bmi.n	8012f1c <_printf_i+0xe8>
 8012f16:	0649      	lsls	r1, r1, #25
 8012f18:	bf48      	it	mi
 8012f1a:	b2ad      	uxthmi	r5, r5
 8012f1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8012f1e:	4852      	ldr	r0, [pc, #328]	@ (8013068 <_printf_i+0x234>)
 8012f20:	6033      	str	r3, [r6, #0]
 8012f22:	bf14      	ite	ne
 8012f24:	230a      	movne	r3, #10
 8012f26:	2308      	moveq	r3, #8
 8012f28:	2100      	movs	r1, #0
 8012f2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012f2e:	6866      	ldr	r6, [r4, #4]
 8012f30:	60a6      	str	r6, [r4, #8]
 8012f32:	2e00      	cmp	r6, #0
 8012f34:	db05      	blt.n	8012f42 <_printf_i+0x10e>
 8012f36:	6821      	ldr	r1, [r4, #0]
 8012f38:	432e      	orrs	r6, r5
 8012f3a:	f021 0104 	bic.w	r1, r1, #4
 8012f3e:	6021      	str	r1, [r4, #0]
 8012f40:	d04b      	beq.n	8012fda <_printf_i+0x1a6>
 8012f42:	4616      	mov	r6, r2
 8012f44:	fbb5 f1f3 	udiv	r1, r5, r3
 8012f48:	fb03 5711 	mls	r7, r3, r1, r5
 8012f4c:	5dc7      	ldrb	r7, [r0, r7]
 8012f4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012f52:	462f      	mov	r7, r5
 8012f54:	42bb      	cmp	r3, r7
 8012f56:	460d      	mov	r5, r1
 8012f58:	d9f4      	bls.n	8012f44 <_printf_i+0x110>
 8012f5a:	2b08      	cmp	r3, #8
 8012f5c:	d10b      	bne.n	8012f76 <_printf_i+0x142>
 8012f5e:	6823      	ldr	r3, [r4, #0]
 8012f60:	07df      	lsls	r7, r3, #31
 8012f62:	d508      	bpl.n	8012f76 <_printf_i+0x142>
 8012f64:	6923      	ldr	r3, [r4, #16]
 8012f66:	6861      	ldr	r1, [r4, #4]
 8012f68:	4299      	cmp	r1, r3
 8012f6a:	bfde      	ittt	le
 8012f6c:	2330      	movle	r3, #48	@ 0x30
 8012f6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012f72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012f76:	1b92      	subs	r2, r2, r6
 8012f78:	6122      	str	r2, [r4, #16]
 8012f7a:	f8cd a000 	str.w	sl, [sp]
 8012f7e:	464b      	mov	r3, r9
 8012f80:	aa03      	add	r2, sp, #12
 8012f82:	4621      	mov	r1, r4
 8012f84:	4640      	mov	r0, r8
 8012f86:	f7ff fee7 	bl	8012d58 <_printf_common>
 8012f8a:	3001      	adds	r0, #1
 8012f8c:	d14a      	bne.n	8013024 <_printf_i+0x1f0>
 8012f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8012f92:	b004      	add	sp, #16
 8012f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f98:	6823      	ldr	r3, [r4, #0]
 8012f9a:	f043 0320 	orr.w	r3, r3, #32
 8012f9e:	6023      	str	r3, [r4, #0]
 8012fa0:	4832      	ldr	r0, [pc, #200]	@ (801306c <_printf_i+0x238>)
 8012fa2:	2778      	movs	r7, #120	@ 0x78
 8012fa4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012fa8:	6823      	ldr	r3, [r4, #0]
 8012faa:	6831      	ldr	r1, [r6, #0]
 8012fac:	061f      	lsls	r7, r3, #24
 8012fae:	f851 5b04 	ldr.w	r5, [r1], #4
 8012fb2:	d402      	bmi.n	8012fba <_printf_i+0x186>
 8012fb4:	065f      	lsls	r7, r3, #25
 8012fb6:	bf48      	it	mi
 8012fb8:	b2ad      	uxthmi	r5, r5
 8012fba:	6031      	str	r1, [r6, #0]
 8012fbc:	07d9      	lsls	r1, r3, #31
 8012fbe:	bf44      	itt	mi
 8012fc0:	f043 0320 	orrmi.w	r3, r3, #32
 8012fc4:	6023      	strmi	r3, [r4, #0]
 8012fc6:	b11d      	cbz	r5, 8012fd0 <_printf_i+0x19c>
 8012fc8:	2310      	movs	r3, #16
 8012fca:	e7ad      	b.n	8012f28 <_printf_i+0xf4>
 8012fcc:	4826      	ldr	r0, [pc, #152]	@ (8013068 <_printf_i+0x234>)
 8012fce:	e7e9      	b.n	8012fa4 <_printf_i+0x170>
 8012fd0:	6823      	ldr	r3, [r4, #0]
 8012fd2:	f023 0320 	bic.w	r3, r3, #32
 8012fd6:	6023      	str	r3, [r4, #0]
 8012fd8:	e7f6      	b.n	8012fc8 <_printf_i+0x194>
 8012fda:	4616      	mov	r6, r2
 8012fdc:	e7bd      	b.n	8012f5a <_printf_i+0x126>
 8012fde:	6833      	ldr	r3, [r6, #0]
 8012fe0:	6825      	ldr	r5, [r4, #0]
 8012fe2:	6961      	ldr	r1, [r4, #20]
 8012fe4:	1d18      	adds	r0, r3, #4
 8012fe6:	6030      	str	r0, [r6, #0]
 8012fe8:	062e      	lsls	r6, r5, #24
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	d501      	bpl.n	8012ff2 <_printf_i+0x1be>
 8012fee:	6019      	str	r1, [r3, #0]
 8012ff0:	e002      	b.n	8012ff8 <_printf_i+0x1c4>
 8012ff2:	0668      	lsls	r0, r5, #25
 8012ff4:	d5fb      	bpl.n	8012fee <_printf_i+0x1ba>
 8012ff6:	8019      	strh	r1, [r3, #0]
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	6123      	str	r3, [r4, #16]
 8012ffc:	4616      	mov	r6, r2
 8012ffe:	e7bc      	b.n	8012f7a <_printf_i+0x146>
 8013000:	6833      	ldr	r3, [r6, #0]
 8013002:	1d1a      	adds	r2, r3, #4
 8013004:	6032      	str	r2, [r6, #0]
 8013006:	681e      	ldr	r6, [r3, #0]
 8013008:	6862      	ldr	r2, [r4, #4]
 801300a:	2100      	movs	r1, #0
 801300c:	4630      	mov	r0, r6
 801300e:	f7ed f8bf 	bl	8000190 <memchr>
 8013012:	b108      	cbz	r0, 8013018 <_printf_i+0x1e4>
 8013014:	1b80      	subs	r0, r0, r6
 8013016:	6060      	str	r0, [r4, #4]
 8013018:	6863      	ldr	r3, [r4, #4]
 801301a:	6123      	str	r3, [r4, #16]
 801301c:	2300      	movs	r3, #0
 801301e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013022:	e7aa      	b.n	8012f7a <_printf_i+0x146>
 8013024:	6923      	ldr	r3, [r4, #16]
 8013026:	4632      	mov	r2, r6
 8013028:	4649      	mov	r1, r9
 801302a:	4640      	mov	r0, r8
 801302c:	47d0      	blx	sl
 801302e:	3001      	adds	r0, #1
 8013030:	d0ad      	beq.n	8012f8e <_printf_i+0x15a>
 8013032:	6823      	ldr	r3, [r4, #0]
 8013034:	079b      	lsls	r3, r3, #30
 8013036:	d413      	bmi.n	8013060 <_printf_i+0x22c>
 8013038:	68e0      	ldr	r0, [r4, #12]
 801303a:	9b03      	ldr	r3, [sp, #12]
 801303c:	4298      	cmp	r0, r3
 801303e:	bfb8      	it	lt
 8013040:	4618      	movlt	r0, r3
 8013042:	e7a6      	b.n	8012f92 <_printf_i+0x15e>
 8013044:	2301      	movs	r3, #1
 8013046:	4632      	mov	r2, r6
 8013048:	4649      	mov	r1, r9
 801304a:	4640      	mov	r0, r8
 801304c:	47d0      	blx	sl
 801304e:	3001      	adds	r0, #1
 8013050:	d09d      	beq.n	8012f8e <_printf_i+0x15a>
 8013052:	3501      	adds	r5, #1
 8013054:	68e3      	ldr	r3, [r4, #12]
 8013056:	9903      	ldr	r1, [sp, #12]
 8013058:	1a5b      	subs	r3, r3, r1
 801305a:	42ab      	cmp	r3, r5
 801305c:	dcf2      	bgt.n	8013044 <_printf_i+0x210>
 801305e:	e7eb      	b.n	8013038 <_printf_i+0x204>
 8013060:	2500      	movs	r5, #0
 8013062:	f104 0619 	add.w	r6, r4, #25
 8013066:	e7f5      	b.n	8013054 <_printf_i+0x220>
 8013068:	08014cea 	.word	0x08014cea
 801306c:	08014cfb 	.word	0x08014cfb

08013070 <__sflush_r>:
 8013070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013078:	0716      	lsls	r6, r2, #28
 801307a:	4605      	mov	r5, r0
 801307c:	460c      	mov	r4, r1
 801307e:	d454      	bmi.n	801312a <__sflush_r+0xba>
 8013080:	684b      	ldr	r3, [r1, #4]
 8013082:	2b00      	cmp	r3, #0
 8013084:	dc02      	bgt.n	801308c <__sflush_r+0x1c>
 8013086:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013088:	2b00      	cmp	r3, #0
 801308a:	dd48      	ble.n	801311e <__sflush_r+0xae>
 801308c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801308e:	2e00      	cmp	r6, #0
 8013090:	d045      	beq.n	801311e <__sflush_r+0xae>
 8013092:	2300      	movs	r3, #0
 8013094:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013098:	682f      	ldr	r7, [r5, #0]
 801309a:	6a21      	ldr	r1, [r4, #32]
 801309c:	602b      	str	r3, [r5, #0]
 801309e:	d030      	beq.n	8013102 <__sflush_r+0x92>
 80130a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80130a2:	89a3      	ldrh	r3, [r4, #12]
 80130a4:	0759      	lsls	r1, r3, #29
 80130a6:	d505      	bpl.n	80130b4 <__sflush_r+0x44>
 80130a8:	6863      	ldr	r3, [r4, #4]
 80130aa:	1ad2      	subs	r2, r2, r3
 80130ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80130ae:	b10b      	cbz	r3, 80130b4 <__sflush_r+0x44>
 80130b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80130b2:	1ad2      	subs	r2, r2, r3
 80130b4:	2300      	movs	r3, #0
 80130b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80130b8:	6a21      	ldr	r1, [r4, #32]
 80130ba:	4628      	mov	r0, r5
 80130bc:	47b0      	blx	r6
 80130be:	1c43      	adds	r3, r0, #1
 80130c0:	89a3      	ldrh	r3, [r4, #12]
 80130c2:	d106      	bne.n	80130d2 <__sflush_r+0x62>
 80130c4:	6829      	ldr	r1, [r5, #0]
 80130c6:	291d      	cmp	r1, #29
 80130c8:	d82b      	bhi.n	8013122 <__sflush_r+0xb2>
 80130ca:	4a2a      	ldr	r2, [pc, #168]	@ (8013174 <__sflush_r+0x104>)
 80130cc:	40ca      	lsrs	r2, r1
 80130ce:	07d6      	lsls	r6, r2, #31
 80130d0:	d527      	bpl.n	8013122 <__sflush_r+0xb2>
 80130d2:	2200      	movs	r2, #0
 80130d4:	6062      	str	r2, [r4, #4]
 80130d6:	04d9      	lsls	r1, r3, #19
 80130d8:	6922      	ldr	r2, [r4, #16]
 80130da:	6022      	str	r2, [r4, #0]
 80130dc:	d504      	bpl.n	80130e8 <__sflush_r+0x78>
 80130de:	1c42      	adds	r2, r0, #1
 80130e0:	d101      	bne.n	80130e6 <__sflush_r+0x76>
 80130e2:	682b      	ldr	r3, [r5, #0]
 80130e4:	b903      	cbnz	r3, 80130e8 <__sflush_r+0x78>
 80130e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80130e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80130ea:	602f      	str	r7, [r5, #0]
 80130ec:	b1b9      	cbz	r1, 801311e <__sflush_r+0xae>
 80130ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80130f2:	4299      	cmp	r1, r3
 80130f4:	d002      	beq.n	80130fc <__sflush_r+0x8c>
 80130f6:	4628      	mov	r0, r5
 80130f8:	f7ff fa9c 	bl	8012634 <_free_r>
 80130fc:	2300      	movs	r3, #0
 80130fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8013100:	e00d      	b.n	801311e <__sflush_r+0xae>
 8013102:	2301      	movs	r3, #1
 8013104:	4628      	mov	r0, r5
 8013106:	47b0      	blx	r6
 8013108:	4602      	mov	r2, r0
 801310a:	1c50      	adds	r0, r2, #1
 801310c:	d1c9      	bne.n	80130a2 <__sflush_r+0x32>
 801310e:	682b      	ldr	r3, [r5, #0]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d0c6      	beq.n	80130a2 <__sflush_r+0x32>
 8013114:	2b1d      	cmp	r3, #29
 8013116:	d001      	beq.n	801311c <__sflush_r+0xac>
 8013118:	2b16      	cmp	r3, #22
 801311a:	d11e      	bne.n	801315a <__sflush_r+0xea>
 801311c:	602f      	str	r7, [r5, #0]
 801311e:	2000      	movs	r0, #0
 8013120:	e022      	b.n	8013168 <__sflush_r+0xf8>
 8013122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013126:	b21b      	sxth	r3, r3
 8013128:	e01b      	b.n	8013162 <__sflush_r+0xf2>
 801312a:	690f      	ldr	r7, [r1, #16]
 801312c:	2f00      	cmp	r7, #0
 801312e:	d0f6      	beq.n	801311e <__sflush_r+0xae>
 8013130:	0793      	lsls	r3, r2, #30
 8013132:	680e      	ldr	r6, [r1, #0]
 8013134:	bf08      	it	eq
 8013136:	694b      	ldreq	r3, [r1, #20]
 8013138:	600f      	str	r7, [r1, #0]
 801313a:	bf18      	it	ne
 801313c:	2300      	movne	r3, #0
 801313e:	eba6 0807 	sub.w	r8, r6, r7
 8013142:	608b      	str	r3, [r1, #8]
 8013144:	f1b8 0f00 	cmp.w	r8, #0
 8013148:	dde9      	ble.n	801311e <__sflush_r+0xae>
 801314a:	6a21      	ldr	r1, [r4, #32]
 801314c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801314e:	4643      	mov	r3, r8
 8013150:	463a      	mov	r2, r7
 8013152:	4628      	mov	r0, r5
 8013154:	47b0      	blx	r6
 8013156:	2800      	cmp	r0, #0
 8013158:	dc08      	bgt.n	801316c <__sflush_r+0xfc>
 801315a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801315e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013162:	81a3      	strh	r3, [r4, #12]
 8013164:	f04f 30ff 	mov.w	r0, #4294967295
 8013168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801316c:	4407      	add	r7, r0
 801316e:	eba8 0800 	sub.w	r8, r8, r0
 8013172:	e7e7      	b.n	8013144 <__sflush_r+0xd4>
 8013174:	20400001 	.word	0x20400001

08013178 <_fflush_r>:
 8013178:	b538      	push	{r3, r4, r5, lr}
 801317a:	690b      	ldr	r3, [r1, #16]
 801317c:	4605      	mov	r5, r0
 801317e:	460c      	mov	r4, r1
 8013180:	b913      	cbnz	r3, 8013188 <_fflush_r+0x10>
 8013182:	2500      	movs	r5, #0
 8013184:	4628      	mov	r0, r5
 8013186:	bd38      	pop	{r3, r4, r5, pc}
 8013188:	b118      	cbz	r0, 8013192 <_fflush_r+0x1a>
 801318a:	6a03      	ldr	r3, [r0, #32]
 801318c:	b90b      	cbnz	r3, 8013192 <_fflush_r+0x1a>
 801318e:	f7fe fff5 	bl	801217c <__sinit>
 8013192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d0f3      	beq.n	8013182 <_fflush_r+0xa>
 801319a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801319c:	07d0      	lsls	r0, r2, #31
 801319e:	d404      	bmi.n	80131aa <_fflush_r+0x32>
 80131a0:	0599      	lsls	r1, r3, #22
 80131a2:	d402      	bmi.n	80131aa <_fflush_r+0x32>
 80131a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80131a6:	f7ff fa34 	bl	8012612 <__retarget_lock_acquire_recursive>
 80131aa:	4628      	mov	r0, r5
 80131ac:	4621      	mov	r1, r4
 80131ae:	f7ff ff5f 	bl	8013070 <__sflush_r>
 80131b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80131b4:	07da      	lsls	r2, r3, #31
 80131b6:	4605      	mov	r5, r0
 80131b8:	d4e4      	bmi.n	8013184 <_fflush_r+0xc>
 80131ba:	89a3      	ldrh	r3, [r4, #12]
 80131bc:	059b      	lsls	r3, r3, #22
 80131be:	d4e1      	bmi.n	8013184 <_fflush_r+0xc>
 80131c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80131c2:	f7ff fa27 	bl	8012614 <__retarget_lock_release_recursive>
 80131c6:	e7dd      	b.n	8013184 <_fflush_r+0xc>

080131c8 <__swhatbuf_r>:
 80131c8:	b570      	push	{r4, r5, r6, lr}
 80131ca:	460c      	mov	r4, r1
 80131cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131d0:	2900      	cmp	r1, #0
 80131d2:	b096      	sub	sp, #88	@ 0x58
 80131d4:	4615      	mov	r5, r2
 80131d6:	461e      	mov	r6, r3
 80131d8:	da0d      	bge.n	80131f6 <__swhatbuf_r+0x2e>
 80131da:	89a3      	ldrh	r3, [r4, #12]
 80131dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80131e0:	f04f 0100 	mov.w	r1, #0
 80131e4:	bf14      	ite	ne
 80131e6:	2340      	movne	r3, #64	@ 0x40
 80131e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80131ec:	2000      	movs	r0, #0
 80131ee:	6031      	str	r1, [r6, #0]
 80131f0:	602b      	str	r3, [r5, #0]
 80131f2:	b016      	add	sp, #88	@ 0x58
 80131f4:	bd70      	pop	{r4, r5, r6, pc}
 80131f6:	466a      	mov	r2, sp
 80131f8:	f000 f8a4 	bl	8013344 <_fstat_r>
 80131fc:	2800      	cmp	r0, #0
 80131fe:	dbec      	blt.n	80131da <__swhatbuf_r+0x12>
 8013200:	9901      	ldr	r1, [sp, #4]
 8013202:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013206:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801320a:	4259      	negs	r1, r3
 801320c:	4159      	adcs	r1, r3
 801320e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013212:	e7eb      	b.n	80131ec <__swhatbuf_r+0x24>

08013214 <__smakebuf_r>:
 8013214:	898b      	ldrh	r3, [r1, #12]
 8013216:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013218:	079d      	lsls	r5, r3, #30
 801321a:	4606      	mov	r6, r0
 801321c:	460c      	mov	r4, r1
 801321e:	d507      	bpl.n	8013230 <__smakebuf_r+0x1c>
 8013220:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013224:	6023      	str	r3, [r4, #0]
 8013226:	6123      	str	r3, [r4, #16]
 8013228:	2301      	movs	r3, #1
 801322a:	6163      	str	r3, [r4, #20]
 801322c:	b003      	add	sp, #12
 801322e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013230:	ab01      	add	r3, sp, #4
 8013232:	466a      	mov	r2, sp
 8013234:	f7ff ffc8 	bl	80131c8 <__swhatbuf_r>
 8013238:	9f00      	ldr	r7, [sp, #0]
 801323a:	4605      	mov	r5, r0
 801323c:	4639      	mov	r1, r7
 801323e:	4630      	mov	r0, r6
 8013240:	f7ff fa64 	bl	801270c <_malloc_r>
 8013244:	b948      	cbnz	r0, 801325a <__smakebuf_r+0x46>
 8013246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801324a:	059a      	lsls	r2, r3, #22
 801324c:	d4ee      	bmi.n	801322c <__smakebuf_r+0x18>
 801324e:	f023 0303 	bic.w	r3, r3, #3
 8013252:	f043 0302 	orr.w	r3, r3, #2
 8013256:	81a3      	strh	r3, [r4, #12]
 8013258:	e7e2      	b.n	8013220 <__smakebuf_r+0xc>
 801325a:	89a3      	ldrh	r3, [r4, #12]
 801325c:	6020      	str	r0, [r4, #0]
 801325e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013262:	81a3      	strh	r3, [r4, #12]
 8013264:	9b01      	ldr	r3, [sp, #4]
 8013266:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801326a:	b15b      	cbz	r3, 8013284 <__smakebuf_r+0x70>
 801326c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013270:	4630      	mov	r0, r6
 8013272:	f000 f879 	bl	8013368 <_isatty_r>
 8013276:	b128      	cbz	r0, 8013284 <__smakebuf_r+0x70>
 8013278:	89a3      	ldrh	r3, [r4, #12]
 801327a:	f023 0303 	bic.w	r3, r3, #3
 801327e:	f043 0301 	orr.w	r3, r3, #1
 8013282:	81a3      	strh	r3, [r4, #12]
 8013284:	89a3      	ldrh	r3, [r4, #12]
 8013286:	431d      	orrs	r5, r3
 8013288:	81a5      	strh	r5, [r4, #12]
 801328a:	e7cf      	b.n	801322c <__smakebuf_r+0x18>

0801328c <_putc_r>:
 801328c:	b570      	push	{r4, r5, r6, lr}
 801328e:	460d      	mov	r5, r1
 8013290:	4614      	mov	r4, r2
 8013292:	4606      	mov	r6, r0
 8013294:	b118      	cbz	r0, 801329e <_putc_r+0x12>
 8013296:	6a03      	ldr	r3, [r0, #32]
 8013298:	b90b      	cbnz	r3, 801329e <_putc_r+0x12>
 801329a:	f7fe ff6f 	bl	801217c <__sinit>
 801329e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80132a0:	07d8      	lsls	r0, r3, #31
 80132a2:	d405      	bmi.n	80132b0 <_putc_r+0x24>
 80132a4:	89a3      	ldrh	r3, [r4, #12]
 80132a6:	0599      	lsls	r1, r3, #22
 80132a8:	d402      	bmi.n	80132b0 <_putc_r+0x24>
 80132aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80132ac:	f7ff f9b1 	bl	8012612 <__retarget_lock_acquire_recursive>
 80132b0:	68a3      	ldr	r3, [r4, #8]
 80132b2:	3b01      	subs	r3, #1
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	60a3      	str	r3, [r4, #8]
 80132b8:	da05      	bge.n	80132c6 <_putc_r+0x3a>
 80132ba:	69a2      	ldr	r2, [r4, #24]
 80132bc:	4293      	cmp	r3, r2
 80132be:	db12      	blt.n	80132e6 <_putc_r+0x5a>
 80132c0:	b2eb      	uxtb	r3, r5
 80132c2:	2b0a      	cmp	r3, #10
 80132c4:	d00f      	beq.n	80132e6 <_putc_r+0x5a>
 80132c6:	6823      	ldr	r3, [r4, #0]
 80132c8:	1c5a      	adds	r2, r3, #1
 80132ca:	6022      	str	r2, [r4, #0]
 80132cc:	701d      	strb	r5, [r3, #0]
 80132ce:	b2ed      	uxtb	r5, r5
 80132d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80132d2:	07da      	lsls	r2, r3, #31
 80132d4:	d405      	bmi.n	80132e2 <_putc_r+0x56>
 80132d6:	89a3      	ldrh	r3, [r4, #12]
 80132d8:	059b      	lsls	r3, r3, #22
 80132da:	d402      	bmi.n	80132e2 <_putc_r+0x56>
 80132dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80132de:	f7ff f999 	bl	8012614 <__retarget_lock_release_recursive>
 80132e2:	4628      	mov	r0, r5
 80132e4:	bd70      	pop	{r4, r5, r6, pc}
 80132e6:	4629      	mov	r1, r5
 80132e8:	4622      	mov	r2, r4
 80132ea:	4630      	mov	r0, r6
 80132ec:	f7ff f86d 	bl	80123ca <__swbuf_r>
 80132f0:	4605      	mov	r5, r0
 80132f2:	e7ed      	b.n	80132d0 <_putc_r+0x44>

080132f4 <memmove>:
 80132f4:	4288      	cmp	r0, r1
 80132f6:	b510      	push	{r4, lr}
 80132f8:	eb01 0402 	add.w	r4, r1, r2
 80132fc:	d902      	bls.n	8013304 <memmove+0x10>
 80132fe:	4284      	cmp	r4, r0
 8013300:	4623      	mov	r3, r4
 8013302:	d807      	bhi.n	8013314 <memmove+0x20>
 8013304:	1e43      	subs	r3, r0, #1
 8013306:	42a1      	cmp	r1, r4
 8013308:	d008      	beq.n	801331c <memmove+0x28>
 801330a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801330e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013312:	e7f8      	b.n	8013306 <memmove+0x12>
 8013314:	4402      	add	r2, r0
 8013316:	4601      	mov	r1, r0
 8013318:	428a      	cmp	r2, r1
 801331a:	d100      	bne.n	801331e <memmove+0x2a>
 801331c:	bd10      	pop	{r4, pc}
 801331e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013326:	e7f7      	b.n	8013318 <memmove+0x24>

08013328 <strchr>:
 8013328:	b2c9      	uxtb	r1, r1
 801332a:	4603      	mov	r3, r0
 801332c:	4618      	mov	r0, r3
 801332e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013332:	b112      	cbz	r2, 801333a <strchr+0x12>
 8013334:	428a      	cmp	r2, r1
 8013336:	d1f9      	bne.n	801332c <strchr+0x4>
 8013338:	4770      	bx	lr
 801333a:	2900      	cmp	r1, #0
 801333c:	bf18      	it	ne
 801333e:	2000      	movne	r0, #0
 8013340:	4770      	bx	lr
	...

08013344 <_fstat_r>:
 8013344:	b538      	push	{r3, r4, r5, lr}
 8013346:	4d07      	ldr	r5, [pc, #28]	@ (8013364 <_fstat_r+0x20>)
 8013348:	2300      	movs	r3, #0
 801334a:	4604      	mov	r4, r0
 801334c:	4608      	mov	r0, r1
 801334e:	4611      	mov	r1, r2
 8013350:	602b      	str	r3, [r5, #0]
 8013352:	f7ef fdf4 	bl	8002f3e <_fstat>
 8013356:	1c43      	adds	r3, r0, #1
 8013358:	d102      	bne.n	8013360 <_fstat_r+0x1c>
 801335a:	682b      	ldr	r3, [r5, #0]
 801335c:	b103      	cbz	r3, 8013360 <_fstat_r+0x1c>
 801335e:	6023      	str	r3, [r4, #0]
 8013360:	bd38      	pop	{r3, r4, r5, pc}
 8013362:	bf00      	nop
 8013364:	200021c4 	.word	0x200021c4

08013368 <_isatty_r>:
 8013368:	b538      	push	{r3, r4, r5, lr}
 801336a:	4d06      	ldr	r5, [pc, #24]	@ (8013384 <_isatty_r+0x1c>)
 801336c:	2300      	movs	r3, #0
 801336e:	4604      	mov	r4, r0
 8013370:	4608      	mov	r0, r1
 8013372:	602b      	str	r3, [r5, #0]
 8013374:	f7ef fdf3 	bl	8002f5e <_isatty>
 8013378:	1c43      	adds	r3, r0, #1
 801337a:	d102      	bne.n	8013382 <_isatty_r+0x1a>
 801337c:	682b      	ldr	r3, [r5, #0]
 801337e:	b103      	cbz	r3, 8013382 <_isatty_r+0x1a>
 8013380:	6023      	str	r3, [r4, #0]
 8013382:	bd38      	pop	{r3, r4, r5, pc}
 8013384:	200021c4 	.word	0x200021c4

08013388 <_sbrk_r>:
 8013388:	b538      	push	{r3, r4, r5, lr}
 801338a:	4d06      	ldr	r5, [pc, #24]	@ (80133a4 <_sbrk_r+0x1c>)
 801338c:	2300      	movs	r3, #0
 801338e:	4604      	mov	r4, r0
 8013390:	4608      	mov	r0, r1
 8013392:	602b      	str	r3, [r5, #0]
 8013394:	f7ef fdfc 	bl	8002f90 <_sbrk>
 8013398:	1c43      	adds	r3, r0, #1
 801339a:	d102      	bne.n	80133a2 <_sbrk_r+0x1a>
 801339c:	682b      	ldr	r3, [r5, #0]
 801339e:	b103      	cbz	r3, 80133a2 <_sbrk_r+0x1a>
 80133a0:	6023      	str	r3, [r4, #0]
 80133a2:	bd38      	pop	{r3, r4, r5, pc}
 80133a4:	200021c4 	.word	0x200021c4

080133a8 <_realloc_r>:
 80133a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133ac:	4607      	mov	r7, r0
 80133ae:	4614      	mov	r4, r2
 80133b0:	460d      	mov	r5, r1
 80133b2:	b921      	cbnz	r1, 80133be <_realloc_r+0x16>
 80133b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133b8:	4611      	mov	r1, r2
 80133ba:	f7ff b9a7 	b.w	801270c <_malloc_r>
 80133be:	b92a      	cbnz	r2, 80133cc <_realloc_r+0x24>
 80133c0:	f7ff f938 	bl	8012634 <_free_r>
 80133c4:	4625      	mov	r5, r4
 80133c6:	4628      	mov	r0, r5
 80133c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133cc:	f000 f81a 	bl	8013404 <_malloc_usable_size_r>
 80133d0:	4284      	cmp	r4, r0
 80133d2:	4606      	mov	r6, r0
 80133d4:	d802      	bhi.n	80133dc <_realloc_r+0x34>
 80133d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80133da:	d8f4      	bhi.n	80133c6 <_realloc_r+0x1e>
 80133dc:	4621      	mov	r1, r4
 80133de:	4638      	mov	r0, r7
 80133e0:	f7ff f994 	bl	801270c <_malloc_r>
 80133e4:	4680      	mov	r8, r0
 80133e6:	b908      	cbnz	r0, 80133ec <_realloc_r+0x44>
 80133e8:	4645      	mov	r5, r8
 80133ea:	e7ec      	b.n	80133c6 <_realloc_r+0x1e>
 80133ec:	42b4      	cmp	r4, r6
 80133ee:	4622      	mov	r2, r4
 80133f0:	4629      	mov	r1, r5
 80133f2:	bf28      	it	cs
 80133f4:	4632      	movcs	r2, r6
 80133f6:	f7ff f90e 	bl	8012616 <memcpy>
 80133fa:	4629      	mov	r1, r5
 80133fc:	4638      	mov	r0, r7
 80133fe:	f7ff f919 	bl	8012634 <_free_r>
 8013402:	e7f1      	b.n	80133e8 <_realloc_r+0x40>

08013404 <_malloc_usable_size_r>:
 8013404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013408:	1f18      	subs	r0, r3, #4
 801340a:	2b00      	cmp	r3, #0
 801340c:	bfbc      	itt	lt
 801340e:	580b      	ldrlt	r3, [r1, r0]
 8013410:	18c0      	addlt	r0, r0, r3
 8013412:	4770      	bx	lr

08013414 <_init>:
 8013414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013416:	bf00      	nop
 8013418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801341a:	bc08      	pop	{r3}
 801341c:	469e      	mov	lr, r3
 801341e:	4770      	bx	lr

08013420 <_fini>:
 8013420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013422:	bf00      	nop
 8013424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013426:	bc08      	pop	{r3}
 8013428:	469e      	mov	lr, r3
 801342a:	4770      	bx	lr
