
DeltaTPlus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000127a4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018bc  080128e4  080128e4  000138e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080141a0  080141a0  000151a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080141a8  080141a8  000151a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080141ac  080141ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000017c  20000008  080141b0  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000184  0801432c  00016184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001bc  08014361  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002004  200001d0  08014372  000161d0  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200021d4  08014372  000161d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00017000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00017000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08014372  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0003e868  00000000  00000000  00016a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000093b4  00000000  00000000  000552ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003550  00000000  00000000  0005e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000289f  00000000  00000000  00061c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00015566  00000000  00000000  000644a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00046d94  00000000  00000000  00079a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00103745  00000000  00000000  000c07a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001c3ee6  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000e59c  00000000  00000000  001c3f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006e  00000000  00000000  001d24c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d0 	.word	0x200001d0
 800015c:	00000000 	.word	0x00000000
 8000160:	080128cc 	.word	0x080128cc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d4 	.word	0x200001d4
 800017c:	080128cc 	.word	0x080128cc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80009cc:	b5b0      	push	{r4, r5, r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80009d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a00 <APPD_EnableCPU2+0x34>)
 80009d4:	1d3c      	adds	r4, r7, #4
 80009d6:	461d      	mov	r5, r3
 80009d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009e0:	c403      	stmia	r4!, {r0, r1}
 80009e2:	8022      	strh	r2, [r4, #0]
 80009e4:	3402      	adds	r4, #2
 80009e6:	0c13      	lsrs	r3, r2, #16
 80009e8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80009ea:	f00d fd17 	bl	800e41c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4618      	mov	r0, r3
 80009f2:	f00c ffa8 	bl	800d946 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80009f6:	bf00      	nop
}
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bdb0      	pop	{r4, r5, r7, pc}
 80009fe:	bf00      	nop
 8000a00:	080128e4 	.word	0x080128e4

08000a04 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	607a      	str	r2, [r7, #4]
 8000a10:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000a12:	897a      	ldrh	r2, [r7, #10]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	68f9      	ldr	r1, [r7, #12]
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 fb39 	bl	8002090 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000a1e:	bf00      	nop
}
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <LL_C2_PWR_SetPowerMode+0x28>)
 8000a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000a36:	f023 0207 	bic.w	r2, r3, #7
 8000a3a:	4905      	ldr	r1, [pc, #20]	@ (8000a50 <LL_C2_PWR_SetPowerMode+0x28>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	58000400 	.word	0x58000400

08000a54 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <LL_EXTI_EnableIT_32_63+0x24>)
 8000a5e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000a62:	4905      	ldr	r1, [pc, #20]	@ (8000a78 <LL_EXTI_EnableIT_32_63+0x24>)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	58000800 	.word	0x58000800

08000a7c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000a8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000a96:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	cafecafe 	.word	0xcafecafe

08000ab8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000aca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	608b      	str	r3, [r1, #8]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000aec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000b0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000b38:	d101      	bne.n	8000b3e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000b4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000b5e:	d101      	bne.n	8000b64 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000b78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000b7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000b8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4013      	ands	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b94:	68fb      	ldr	r3, [r7, #12]
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <LL_DBGMCU_GetDeviceID+0x18>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e0042000 	.word	0xe0042000

08000bc0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000bc4:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <LL_DBGMCU_GetRevisionID+0x18>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	0c1b      	lsrs	r3, r3, #16
 8000bca:	b29b      	uxth	r3, r3
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e0042000 	.word	0xe0042000

08000bdc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	041b      	lsls	r3, r3, #16
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	605a      	str	r2, [r3, #4]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	431a      	orrs	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	605a      	str	r2, [r3, #4]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	695a      	ldr	r2, [r3, #20]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	041b      	lsls	r3, r3, #16
 8000c34:	431a      	orrs	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	615a      	str	r2, [r3, #20]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	695a      	ldr	r2, [r3, #20]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	431a      	orrs	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	615a      	str	r2, [r3, #20]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	609a      	str	r2, [r3, #8]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	619a      	str	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <LL_LPM_EnableSleep+0x1c>)
 8000ca6:	691b      	ldr	r3, [r3, #16]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <LL_LPM_EnableSleep+0x1c>)
 8000caa:	f023 0304 	bic.w	r3, r3, #4
 8000cae:	6113      	str	r3, [r2, #16]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	22ff      	movs	r2, #255	@ 0xff
 8000ccc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	22ca      	movs	r2, #202	@ 0xca
 8000ce6:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2253      	movs	r2, #83	@ 0x53
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	f023 0207 	bic.w	r2, r3, #7
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	609a      	str	r2, [r3, #8]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <MX_APPE_Config+0x18>)
 8000d26:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d2a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000d2c:	f000 f824 	bl	8000d78 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000d30:	f000 f864 	bl	8000dfc <Config_HSE>

  return;
 8000d34:	bf00      	nop
}
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	58004000 	.word	0x58004000

08000d3c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000d40:	f000 f870 	bl	8000e24 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000d44:	f000 f888 	bl	8000e58 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000d48:	4903      	ldr	r1, [pc, #12]	@ (8000d58 <MX_APPE_Init+0x1c>)
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 ffae 	bl	8001cac <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000d50:	f000 f890 	bl	8000e74 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000d54:	bf00      	nop
}
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000320 	.word	0x20000320

08000d5c <Init_Smps>:

void Init_Smps(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000d60:	bf00      	nop
}
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <Init_Exti>:

void Init_Exti(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000d6e:	2050      	movs	r0, #80	@ 0x50
 8000d70:	f7ff fe70 	bl	8000a54 <LL_EXTI_EnableIT_32_63>

  return;
 8000d74:	bf00      	nop
}
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000d7c:	f000 f804 	bl	8000d88 <Reset_BackupDomain>

  Reset_IPCC();
 8000d80:	f000 f81a 	bl	8000db8 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000d84:	bf00      	nop
}
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000d8c:	f7ff feca 	bl	8000b24 <LL_RCC_IsActiveFlag_PINRST>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00d      	beq.n	8000db2 <Reset_BackupDomain+0x2a>
 8000d96:	f7ff fed8 	bl	8000b4a <LL_RCC_IsActiveFlag_SFTRST>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d108      	bne.n	8000db2 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000da0:	f004 fd2e 	bl	8005800 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000da4:	f004 fd2c 	bl	8005800 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000da8:	f7ff fe9a 	bl	8000ae0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000dac:	f7ff fea9 	bl	8000b02 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
}
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000dbc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000dc0:	f7ff fed6 	bl	8000b70 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000dc4:	213f      	movs	r1, #63	@ 0x3f
 8000dc6:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <Reset_IPCC+0x40>)
 8000dc8:	f7ff ff4e 	bl	8000c68 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000dcc:	213f      	movs	r1, #63	@ 0x3f
 8000dce:	480a      	ldr	r0, [pc, #40]	@ (8000df8 <Reset_IPCC+0x40>)
 8000dd0:	f7ff ff58 	bl	8000c84 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000dd4:	213f      	movs	r1, #63	@ 0x3f
 8000dd6:	4808      	ldr	r0, [pc, #32]	@ (8000df8 <Reset_IPCC+0x40>)
 8000dd8:	f7ff ff00 	bl	8000bdc <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000ddc:	213f      	movs	r1, #63	@ 0x3f
 8000dde:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <Reset_IPCC+0x40>)
 8000de0:	f7ff ff1f 	bl	8000c22 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000de4:	213f      	movs	r1, #63	@ 0x3f
 8000de6:	4804      	ldr	r0, [pc, #16]	@ (8000df8 <Reset_IPCC+0x40>)
 8000de8:	f7ff ff0a 	bl	8000c00 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000dec:	213f      	movs	r1, #63	@ 0x3f
 8000dee:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <Reset_IPCC+0x40>)
 8000df0:	f7ff ff29 	bl	8000c46 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000df4:	bf00      	nop
}
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	58000c00 	.word	0x58000c00

08000dfc <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f00d fc5e 	bl	800e6c4 <OTP_Read>
 8000e08:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d005      	beq.n	8000e1c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	799b      	ldrb	r3, [r3, #6]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fe31 	bl	8000a7c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
}
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <System_Init>:

static void System_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  Init_Smps();
 8000e28:	f7ff ff98 	bl	8000d5c <Init_Smps>

  Init_Exti();
 8000e2c:	f7ff ff9d 	bl	8000d6a <Init_Exti>

  Init_Rtc();
 8000e30:	f000 f802 	bl	8000e38 <Init_Rtc>

  return;
 8000e34:	bf00      	nop
}
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <Init_Rtc+0x1c>)
 8000e3e:	f7ff ff4c 	bl	8000cda <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000e42:	2100      	movs	r1, #0
 8000e44:	4803      	ldr	r0, [pc, #12]	@ (8000e54 <Init_Rtc+0x1c>)
 8000e46:	f7ff ff58 	bl	8000cfa <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000e4a:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <Init_Rtc+0x1c>)
 8000e4c:	f7ff ff38 	bl	8000cc0 <LL_RTC_EnableWriteProtection>

  return;
 8000e50:	bf00      	nop
}
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40002800 	.word	0x40002800

08000e58 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000e5c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000e60:	f7ff fe2a 	bl	8000ab8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000e64:	f010 face 	bl	8011404 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000e68:	2004      	movs	r0, #4
 8000e6a:	f7ff fddd 	bl	8000a28 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000e6e:	bf00      	nop
}
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000e7a:	f00d f919 	bl	800e0b0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000e7e:	4a11      	ldr	r2, [pc, #68]	@ (8000ec4 <appe_Tl_Init+0x50>)
 8000e80:	2100      	movs	r1, #0
 8000e82:	2004      	movs	r0, #4
 8000e84:	f010 fbfc 	bl	8011680 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <appe_Tl_Init+0x54>)
 8000e8a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <appe_Tl_Init+0x58>)
 8000e8e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000e90:	463b      	mov	r3, r7
 8000e92:	4619      	mov	r1, r3
 8000e94:	480e      	ldr	r0, [pc, #56]	@ (8000ed0 <appe_Tl_Init+0x5c>)
 8000e96:	f00c ffcd 	bl	800de34 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <appe_Tl_Init+0x60>)
 8000e9c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <appe_Tl_Init+0x64>)
 8000ea0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <appe_Tl_Init+0x68>)
 8000ea4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000ea6:	f240 533c 	movw	r3, #1340	@ 0x53c
 8000eaa:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f00d fa3f 	bl	800e334 <TL_MM_Init>

  TL_Enable();
 8000eb6:	f00d f8f5 	bl	800e0a4 <TL_Enable>

  return;
 8000eba:	bf00      	nop
}
 8000ebc:	3720      	adds	r7, #32
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	0800de6d 	.word	0x0800de6d
 8000ec8:	20030734 	.word	0x20030734
 8000ecc:	08000ee1 	.word	0x08000ee1
 8000ed0:	08000ef9 	.word	0x08000ef9
 8000ed4:	2003094c 	.word	0x2003094c
 8000ed8:	20030840 	.word	0x20030840
 8000edc:	200301f8 	.word	0x200301f8

08000ee0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000eea:	bf00      	nop
}
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	330b      	adds	r3, #11
 8000f06:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000f12:	2b07      	cmp	r3, #7
 8000f14:	f200 80d0 	bhi.w	80010b8 <APPE_SysUserEvtRx+0x1c0>
 8000f18:	a201      	add	r2, pc, #4	@ (adr r2, 8000f20 <APPE_SysUserEvtRx+0x28>)
 8000f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1e:	bf00      	nop
 8000f20:	08000f41 	.word	0x08000f41
 8000f24:	08000fd3 	.word	0x08000fd3
 8000f28:	08000ff5 	.word	0x08000ff5
 8000f2c:	080010b9 	.word	0x080010b9
 8000f30:	08001039 	.word	0x08001039
 8000f34:	0800105d 	.word	0x0800105d
 8000f38:	08001079 	.word	0x08001079
 8000f3c:	0800109d 	.word	0x0800109d
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00c fd2b 	bl	800d9a0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000f4a:	485e      	ldr	r0, [pc, #376]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 8000f4c:	f00d faf2 	bl	800e534 <DbgTraceGetFileName>
 8000f50:	4601      	mov	r1, r0
 8000f52:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 8000f56:	4a5c      	ldr	r2, [pc, #368]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8000f58:	485c      	ldr	r0, [pc, #368]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8000f5a:	f010 fd7f 	bl	8011a5c <iprintf>
 8000f5e:	7b3b      	ldrb	r3, [r7, #12]
 8000f60:	4619      	mov	r1, r3
 8000f62:	7b7b      	ldrb	r3, [r7, #13]
 8000f64:	461a      	mov	r2, r3
 8000f66:	7bbb      	ldrb	r3, [r7, #14]
 8000f68:	4859      	ldr	r0, [pc, #356]	@ (80010d0 <APPE_SysUserEvtRx+0x1d8>)
 8000f6a:	f010 fd77 	bl	8011a5c <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000f6e:	4855      	ldr	r0, [pc, #340]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 8000f70:	f00d fae0 	bl	800e534 <DbgTraceGetFileName>
 8000f74:	4601      	mov	r1, r0
 8000f76:	f240 136b 	movw	r3, #363	@ 0x16b
 8000f7a:	4a53      	ldr	r2, [pc, #332]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8000f7c:	4853      	ldr	r0, [pc, #332]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8000f7e:	f010 fd6d 	bl	8011a5c <iprintf>
 8000f82:	7c3b      	ldrb	r3, [r7, #16]
 8000f84:	4619      	mov	r1, r3
 8000f86:	4853      	ldr	r0, [pc, #332]	@ (80010d4 <APPE_SysUserEvtRx+0x1dc>)
 8000f88:	f010 fd68 	bl	8011a5c <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000f8c:	484d      	ldr	r0, [pc, #308]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 8000f8e:	f00d fad1 	bl	800e534 <DbgTraceGetFileName>
 8000f92:	4601      	mov	r1, r0
 8000f94:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8000f98:	4a4b      	ldr	r2, [pc, #300]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8000f9a:	484c      	ldr	r0, [pc, #304]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8000f9c:	f010 fd5e 	bl	8011a5c <iprintf>
 8000fa0:	7dbb      	ldrb	r3, [r7, #22]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	7e3b      	ldrb	r3, [r7, #24]
 8000faa:	484b      	ldr	r0, [pc, #300]	@ (80010d8 <APPE_SysUserEvtRx+0x1e0>)
 8000fac:	f010 fd56 	bl	8011a5c <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8000fb0:	4844      	ldr	r0, [pc, #272]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 8000fb2:	f00d fabf 	bl	800e534 <DbgTraceGetFileName>
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8000fbc:	4a42      	ldr	r2, [pc, #264]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8000fbe:	4843      	ldr	r0, [pc, #268]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8000fc0:	f010 fd4c 	bl	8011a5c <iprintf>
 8000fc4:	4845      	ldr	r0, [pc, #276]	@ (80010dc <APPE_SysUserEvtRx+0x1e4>)
 8000fc6:	f010 fd49 	bl	8011a5c <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f8e0 	bl	8001190 <APPE_SysEvtReadyProcessing>
    break;
 8000fd0:	e073      	b.n	80010ba <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8000fd2:	483c      	ldr	r0, [pc, #240]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 8000fd4:	f00d faae 	bl	800e534 <DbgTraceGetFileName>
 8000fd8:	4601      	mov	r1, r0
 8000fda:	f240 1373 	movw	r3, #371	@ 0x173
 8000fde:	4a3a      	ldr	r2, [pc, #232]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8000fe0:	483a      	ldr	r0, [pc, #232]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8000fe2:	f010 fd3b 	bl	8011a5c <iprintf>
 8000fe6:	483e      	ldr	r0, [pc, #248]	@ (80010e0 <APPE_SysUserEvtRx+0x1e8>)
 8000fe8:	f010 fd38 	bl	8011a5c <iprintf>
    APPE_SysEvtError(pPayload);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f885 	bl	80010fc <APPE_SysEvtError>
    break;
 8000ff2:	e062      	b.n	80010ba <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8000ff4:	4833      	ldr	r0, [pc, #204]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 8000ff6:	f00d fa9d 	bl	800e534 <DbgTraceGetFileName>
 8000ffa:	4601      	mov	r1, r0
 8000ffc:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8001000:	4a31      	ldr	r2, [pc, #196]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8001002:	4832      	ldr	r0, [pc, #200]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8001004:	f010 fd2a 	bl	8011a5c <iprintf>
 8001008:	4836      	ldr	r0, [pc, #216]	@ (80010e4 <APPE_SysUserEvtRx+0x1ec>)
 800100a:	f010 fd97 	bl	8011b3c <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800100e:	482d      	ldr	r0, [pc, #180]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 8001010:	f00d fa90 	bl	800e534 <DbgTraceGetFileName>
 8001014:	4601      	mov	r1, r0
 8001016:	f240 1379 	movw	r3, #377	@ 0x179
 800101a:	4a2b      	ldr	r2, [pc, #172]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 800101c:	482b      	ldr	r0, [pc, #172]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 800101e:	f010 fd1d 	bl	8011a5c <iprintf>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3302      	adds	r3, #2
 8001026:	6819      	ldr	r1, [r3, #0]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	3302      	adds	r3, #2
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	461a      	mov	r2, r3
 8001030:	482d      	ldr	r0, [pc, #180]	@ (80010e8 <APPE_SysUserEvtRx+0x1f0>)
 8001032:	f010 fd13 	bl	8011a5c <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001036:	e040      	b.n	80010ba <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001038:	4822      	ldr	r0, [pc, #136]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 800103a:	f00d fa7b 	bl	800e534 <DbgTraceGetFileName>
 800103e:	4601      	mov	r1, r0
 8001040:	f240 137f 	movw	r3, #383	@ 0x17f
 8001044:	4a20      	ldr	r2, [pc, #128]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8001046:	4821      	ldr	r0, [pc, #132]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8001048:	f010 fd08 	bl	8011a5c <iprintf>
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	3302      	adds	r3, #2
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4619      	mov	r1, r3
 8001054:	4825      	ldr	r0, [pc, #148]	@ (80010ec <APPE_SysUserEvtRx+0x1f4>)
 8001056:	f010 fd01 	bl	8011a5c <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 800105a:	e02e      	b.n	80010ba <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800105c:	4819      	ldr	r0, [pc, #100]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 800105e:	f00d fa69 	bl	800e534 <DbgTraceGetFileName>
 8001062:	4601      	mov	r1, r0
 8001064:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8001068:	4a17      	ldr	r2, [pc, #92]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 800106a:	4818      	ldr	r0, [pc, #96]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 800106c:	f010 fcf6 	bl	8011a5c <iprintf>
 8001070:	481f      	ldr	r0, [pc, #124]	@ (80010f0 <APPE_SysUserEvtRx+0x1f8>)
 8001072:	f010 fcf3 	bl	8011a5c <iprintf>
    break;
 8001076:	e020      	b.n	80010ba <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001078:	4812      	ldr	r0, [pc, #72]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 800107a:	f00d fa5b 	bl	800e534 <DbgTraceGetFileName>
 800107e:	4601      	mov	r1, r0
 8001080:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 8001084:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 8001086:	4811      	ldr	r0, [pc, #68]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 8001088:	f010 fce8 	bl	8011a5c <iprintf>
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	3302      	adds	r3, #2
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4619      	mov	r1, r3
 8001094:	4817      	ldr	r0, [pc, #92]	@ (80010f4 <APPE_SysUserEvtRx+0x1fc>)
 8001096:	f010 fce1 	bl	8011a5c <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 800109a:	e00e      	b.n	80010ba <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 800109c:	4809      	ldr	r0, [pc, #36]	@ (80010c4 <APPE_SysUserEvtRx+0x1cc>)
 800109e:	f00d fa49 	bl	800e534 <DbgTraceGetFileName>
 80010a2:	4601      	mov	r1, r0
 80010a4:	f240 138d 	movw	r3, #397	@ 0x18d
 80010a8:	4a07      	ldr	r2, [pc, #28]	@ (80010c8 <APPE_SysUserEvtRx+0x1d0>)
 80010aa:	4808      	ldr	r0, [pc, #32]	@ (80010cc <APPE_SysUserEvtRx+0x1d4>)
 80010ac:	f010 fcd6 	bl	8011a5c <iprintf>
 80010b0:	4811      	ldr	r0, [pc, #68]	@ (80010f8 <APPE_SysUserEvtRx+0x200>)
 80010b2:	f010 fcd3 	bl	8011a5c <iprintf>
    break;
 80010b6:	e000      	b.n	80010ba <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80010b8:	bf00      	nop
  }

  return;
 80010ba:	bf00      	nop
}
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	08012900 	.word	0x08012900
 80010c8:	08014014 	.word	0x08014014
 80010cc:	08012918 	.word	0x08012918
 80010d0:	0801292c 	.word	0x0801292c
 80010d4:	08012950 	.word	0x08012950
 80010d8:	0801296c 	.word	0x0801296c
 80010dc:	08012984 	.word	0x08012984
 80010e0:	080129a4 	.word	0x080129a4
 80010e4:	080129c8 	.word	0x080129c8
 80010e8:	08012a18 	.word	0x08012a18
 80010ec:	08012a40 	.word	0x08012a40
 80010f0:	08012a7c 	.word	0x08012a7c
 80010f4:	08012aa0 	.word	0x08012aa0
 80010f8:	08012adc 	.word	0x08012adc

080010fc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	330b      	adds	r3, #11
 800110a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3302      	adds	r3, #2
 8001110:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001112:	4819      	ldr	r0, [pc, #100]	@ (8001178 <APPE_SysEvtError+0x7c>)
 8001114:	f00d fa0e 	bl	800e534 <DbgTraceGetFileName>
 8001118:	4601      	mov	r1, r0
 800111a:	f240 13a5 	movw	r3, #421	@ 0x1a5
 800111e:	4a17      	ldr	r2, [pc, #92]	@ (800117c <APPE_SysEvtError+0x80>)
 8001120:	4817      	ldr	r0, [pc, #92]	@ (8001180 <APPE_SysEvtError+0x84>)
 8001122:	f010 fc9b 	bl	8011a5c <iprintf>
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4619      	mov	r1, r3
 800112c:	4815      	ldr	r0, [pc, #84]	@ (8001184 <APPE_SysEvtError+0x88>)
 800112e:	f010 fc95 	bl	8011a5c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10d      	bne.n	8001156 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800113a:	480f      	ldr	r0, [pc, #60]	@ (8001178 <APPE_SysEvtError+0x7c>)
 800113c:	f00d f9fa 	bl	800e534 <DbgTraceGetFileName>
 8001140:	4601      	mov	r1, r0
 8001142:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8001146:	4a0d      	ldr	r2, [pc, #52]	@ (800117c <APPE_SysEvtError+0x80>)
 8001148:	480d      	ldr	r0, [pc, #52]	@ (8001180 <APPE_SysEvtError+0x84>)
 800114a:	f010 fc87 	bl	8011a5c <iprintf>
 800114e:	480e      	ldr	r0, [pc, #56]	@ (8001188 <APPE_SysEvtError+0x8c>)
 8001150:	f010 fcf4 	bl	8011b3c <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001154:	e00d      	b.n	8001172 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001156:	4808      	ldr	r0, [pc, #32]	@ (8001178 <APPE_SysEvtError+0x7c>)
 8001158:	f00d f9ec 	bl	800e534 <DbgTraceGetFileName>
 800115c:	4601      	mov	r1, r0
 800115e:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8001162:	4a06      	ldr	r2, [pc, #24]	@ (800117c <APPE_SysEvtError+0x80>)
 8001164:	4806      	ldr	r0, [pc, #24]	@ (8001180 <APPE_SysEvtError+0x84>)
 8001166:	f010 fc79 	bl	8011a5c <iprintf>
 800116a:	4808      	ldr	r0, [pc, #32]	@ (800118c <APPE_SysEvtError+0x90>)
 800116c:	f010 fce6 	bl	8011b3c <puts>
  return;
 8001170:	bf00      	nop
}
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	08012900 	.word	0x08012900
 800117c:	08014028 	.word	0x08014028
 8001180:	08012918 	.word	0x08012918
 8001184:	08012b00 	.word	0x08012b00
 8001188:	08012b30 	.word	0x08012b30
 800118c:	08012b6c 	.word	0x08012b6c

08001190 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	330b      	adds	r3, #11
 80011b4:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3302      	adds	r3, #2
 80011ba:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d146      	bne.n	8001252 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80011c4:	4836      	ldr	r0, [pc, #216]	@ (80012a0 <APPE_SysEvtReadyProcessing+0x110>)
 80011c6:	f00d f9b5 	bl	800e534 <DbgTraceGetFileName>
 80011ca:	4601      	mov	r1, r0
 80011cc:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 80011d0:	4a34      	ldr	r2, [pc, #208]	@ (80012a4 <APPE_SysEvtReadyProcessing+0x114>)
 80011d2:	4835      	ldr	r0, [pc, #212]	@ (80012a8 <APPE_SysEvtReadyProcessing+0x118>)
 80011d4:	f010 fc42 	bl	8011a5c <iprintf>
 80011d8:	4834      	ldr	r0, [pc, #208]	@ (80012ac <APPE_SysEvtReadyProcessing+0x11c>)
 80011da:	f010 fcaf 	bl	8011b3c <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80011de:	f7ff fbf5 	bl	80009cc <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80011e2:	230f      	movs	r3, #15
 80011e4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80011e6:	237f      	movs	r3, #127	@ 0x7f
 80011e8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80011ea:	f7ff fce9 	bl	8000bc0 <LL_DBGMCU_GetRevisionID>
 80011ee:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80011f0:	482b      	ldr	r0, [pc, #172]	@ (80012a0 <APPE_SysEvtReadyProcessing+0x110>)
 80011f2:	f00d f99f 	bl	800e534 <DbgTraceGetFileName>
 80011f6:	4601      	mov	r1, r0
 80011f8:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 80011fc:	4a29      	ldr	r2, [pc, #164]	@ (80012a4 <APPE_SysEvtReadyProcessing+0x114>)
 80011fe:	482a      	ldr	r0, [pc, #168]	@ (80012a8 <APPE_SysEvtReadyProcessing+0x118>)
 8001200:	f010 fc2c 	bl	8011a5c <iprintf>
 8001204:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001206:	482a      	ldr	r0, [pc, #168]	@ (80012b0 <APPE_SysEvtReadyProcessing+0x120>)
 8001208:	f010 fc28 	bl	8011a5c <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 800120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120e:	b29b      	uxth	r3, r3
 8001210:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001212:	f7ff fcc7 	bl	8000ba4 <LL_DBGMCU_GetDeviceID>
 8001216:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001218:	4821      	ldr	r0, [pc, #132]	@ (80012a0 <APPE_SysEvtReadyProcessing+0x110>)
 800121a:	f00d f98b 	bl	800e534 <DbgTraceGetFileName>
 800121e:	4601      	mov	r1, r0
 8001220:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8001224:	4a1f      	ldr	r2, [pc, #124]	@ (80012a4 <APPE_SysEvtReadyProcessing+0x114>)
 8001226:	4820      	ldr	r0, [pc, #128]	@ (80012a8 <APPE_SysEvtReadyProcessing+0x118>)
 8001228:	f010 fc18 	bl	8011a5c <iprintf>
 800122c:	6a39      	ldr	r1, [r7, #32]
 800122e:	4821      	ldr	r0, [pc, #132]	@ (80012b4 <APPE_SysEvtReadyProcessing+0x124>)
 8001230:	f010 fc14 	bl	8011a5c <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	b29b      	uxth	r3, r3
 8001238:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	4618      	mov	r0, r3
 8001240:	f00c fb98 	bl	800d974 <SHCI_C2_Config>

    APP_BLE_Init();
 8001244:	f00d ff12 	bl	800f06c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001248:	2100      	movs	r1, #0
 800124a:	2001      	movs	r0, #1
 800124c:	f010 f8ec 	bl	8011428 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001250:	e022      	b.n	8001298 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d110      	bne.n	800127c <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800125a:	4811      	ldr	r0, [pc, #68]	@ (80012a0 <APPE_SysEvtReadyProcessing+0x110>)
 800125c:	f00d f96a 	bl	800e534 <DbgTraceGetFileName>
 8001260:	4601      	mov	r1, r0
 8001262:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 8001266:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <APPE_SysEvtReadyProcessing+0x114>)
 8001268:	480f      	ldr	r0, [pc, #60]	@ (80012a8 <APPE_SysEvtReadyProcessing+0x118>)
 800126a:	f010 fbf7 	bl	8011a5c <iprintf>
 800126e:	4812      	ldr	r0, [pc, #72]	@ (80012b8 <APPE_SysEvtReadyProcessing+0x128>)
 8001270:	f010 fbf4 	bl	8011a5c <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
  return;
 800127a:	e00d      	b.n	8001298 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 800127c:	4808      	ldr	r0, [pc, #32]	@ (80012a0 <APPE_SysEvtReadyProcessing+0x110>)
 800127e:	f00d f959 	bl	800e534 <DbgTraceGetFileName>
 8001282:	4601      	mov	r1, r0
 8001284:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8001288:	4a06      	ldr	r2, [pc, #24]	@ (80012a4 <APPE_SysEvtReadyProcessing+0x114>)
 800128a:	4807      	ldr	r0, [pc, #28]	@ (80012a8 <APPE_SysEvtReadyProcessing+0x118>)
 800128c:	f010 fbe6 	bl	8011a5c <iprintf>
 8001290:	480a      	ldr	r0, [pc, #40]	@ (80012bc <APPE_SysEvtReadyProcessing+0x12c>)
 8001292:	f010 fbe3 	bl	8011a5c <iprintf>
  return;
 8001296:	bf00      	nop
}
 8001298:	3728      	adds	r7, #40	@ 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08012900 	.word	0x08012900
 80012a4:	0801403c 	.word	0x0801403c
 80012a8:	08012918 	.word	0x08012918
 80012ac:	08012ba4 	.word	0x08012ba4
 80012b0:	08012bc0 	.word	0x08012bc0
 80012b4:	08012be4 	.word	0x08012be4
 80012b8:	08012c04 	.word	0x08012c04
 80012bc:	08012c38 	.word	0x08012c38

080012c0 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f001 fe50 	bl	8002f6c <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d00a      	beq.n	80012f0 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80012da:	f001 fe5f 	bl	8002f9c <HAL_GetTickFreq>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e8:	e002      	b.n	80012f0 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80012ea:	f7ff fcd9 	bl	8000ca0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80012ee:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80012f0:	f001 fe3c 	bl	8002f6c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d8f4      	bhi.n	80012ea <HAL_Delay+0x2a>
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800130e:	f04f 30ff 	mov.w	r0, #4294967295
 8001312:	f010 f8b9 	bl	8011488 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}

0800131a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800131e:	bf00      	nop
}
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001330:	2100      	movs	r1, #0
 8001332:	2004      	movs	r0, #4
 8001334:	f010 f9c6 	bl	80116c4 <UTIL_SEQ_SetTask>
  return;
 8001338:	bf00      	nop
}
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001348:	2002      	movs	r0, #2
 800134a:	f010 fa27 	bl	801179c <UTIL_SEQ_SetEvt>
  return;
 800134e:	bf00      	nop
}
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800135e:	2002      	movs	r0, #2
 8001360:	f010 fa3c 	bl	80117dc <UTIL_SEQ_WaitEvt>
  return;
 8001364:	bf00      	nop
}
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <LL_AHB1_GRP1_EnableClock>:
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001374:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001378:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800137a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4313      	orrs	r3, r2
 8001382:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001388:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001390:	68fb      	ldr	r3, [r7, #12]
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013a2:	2004      	movs	r0, #4
 80013a4:	f7ff ffe2 	bl	800136c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a8:	2001      	movs	r0, #1
 80013aa:	f7ff ffdf 	bl	800136c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	210f      	movs	r1, #15
 80013b2:	200b      	movs	r0, #11
 80013b4:	f001 ff39 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b8:	200b      	movs	r0, #11
 80013ba:	f001 ff50 	bl	800325e <HAL_NVIC_EnableIRQ>

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <LL_AHB2_GRP1_EnableClock>:
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4013      	ands	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	2004      	movs	r0, #4
 800140a:	f7ff ffda 	bl	80013c2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2002      	movs	r0, #2
 8001410:	f7ff ffd7 	bl	80013c2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff ffd4 	bl	80013c2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800141a:	2200      	movs	r2, #0
 800141c:	f240 111f 	movw	r1, #287	@ 0x11f
 8001420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001424:	f002 faf6 	bl	8003a14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001428:	f240 131f 	movw	r3, #287	@ 0x11f
 800142c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001442:	f002 f977 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP1_DRDY_Pin PA10 */
  GPIO_InitStruct.Pin = TEMP1_DRDY_Pin|GPIO_PIN_10;
 8001446:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800144a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145c:	f002 f96a 	bl	8003734 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001460:	2304      	movs	r3, #4
 8001462:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	4803      	ldr	r0, [pc, #12]	@ (8001480 <MX_GPIO_Init+0x8c>)
 8001472:	f002 f95f 	bl	8003734 <HAL_GPIO_Init>

}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	48000400 	.word	0x48000400

08001484 <LL_EXTI_EnableIT_0_31>:
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <LL_EXTI_EnableIT_0_31+0x24>)
 800148e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001492:	4905      	ldr	r1, [pc, #20]	@ (80014a8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4313      	orrs	r3, r2
 8001498:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	58000800 	.word	0x58000800

080014ac <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80014b4:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4904      	ldr	r1, [pc, #16]	@ (80014cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]

}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	58000800 	.word	0x58000800

080014d0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014d6:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <ReadRtcSsrValue+0x3c>)
 80014d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014da:	b29b      	uxth	r3, r3
 80014dc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014de:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <ReadRtcSsrValue+0x3c>)
 80014e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80014e6:	e005      	b.n	80014f4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014ec:	4b07      	ldr	r3, [pc, #28]	@ (800150c <ReadRtcSsrValue+0x3c>)
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d1f5      	bne.n	80014e8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80014fc:	683b      	ldr	r3, [r7, #0]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40002800 	.word	0x40002800

08001510 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	460a      	mov	r2, r1
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	4613      	mov	r3, r2
 800151e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001520:	79ba      	ldrb	r2, [r7, #6]
 8001522:	491d      	ldr	r1, [pc, #116]	@ (8001598 <LinkTimerAfter+0x88>)
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	3315      	adds	r3, #21
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	2b06      	cmp	r3, #6
 8001538:	d009      	beq.n	800154e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	4916      	ldr	r1, [pc, #88]	@ (8001598 <LinkTimerAfter+0x88>)
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	440b      	add	r3, r1
 8001548:	3314      	adds	r3, #20
 800154a:	79fa      	ldrb	r2, [r7, #7]
 800154c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800154e:	79fa      	ldrb	r2, [r7, #7]
 8001550:	4911      	ldr	r1, [pc, #68]	@ (8001598 <LinkTimerAfter+0x88>)
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	3315      	adds	r3, #21
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001562:	79fa      	ldrb	r2, [r7, #7]
 8001564:	490c      	ldr	r1, [pc, #48]	@ (8001598 <LinkTimerAfter+0x88>)
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	3314      	adds	r3, #20
 8001572:	79ba      	ldrb	r2, [r7, #6]
 8001574:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001576:	79ba      	ldrb	r2, [r7, #6]
 8001578:	4907      	ldr	r1, [pc, #28]	@ (8001598 <LinkTimerAfter+0x88>)
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	3315      	adds	r3, #21
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	701a      	strb	r2, [r3, #0]

  return;
 800158a:	bf00      	nop
}
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200001ec 	.word	0x200001ec

0800159c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	460a      	mov	r2, r1
 80015a6:	71fb      	strb	r3, [r7, #7]
 80015a8:	4613      	mov	r3, r2
 80015aa:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80015ac:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <LinkTimerBefore+0xb8>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	79ba      	ldrb	r2, [r7, #6]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d032      	beq.n	800161e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80015b8:	79ba      	ldrb	r2, [r7, #6]
 80015ba:	4927      	ldr	r1, [pc, #156]	@ (8001658 <LinkTimerBefore+0xbc>)
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	440b      	add	r3, r1
 80015c6:	3314      	adds	r3, #20
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	4922      	ldr	r1, [pc, #136]	@ (8001658 <LinkTimerBefore+0xbc>)
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	3315      	adds	r3, #21
 80015dc:	79fa      	ldrb	r2, [r7, #7]
 80015de:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80015e0:	79fa      	ldrb	r2, [r7, #7]
 80015e2:	491d      	ldr	r1, [pc, #116]	@ (8001658 <LinkTimerBefore+0xbc>)
 80015e4:	4613      	mov	r3, r2
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	3315      	adds	r3, #21
 80015f0:	79ba      	ldrb	r2, [r7, #6]
 80015f2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80015f4:	79fa      	ldrb	r2, [r7, #7]
 80015f6:	4918      	ldr	r1, [pc, #96]	@ (8001658 <LinkTimerBefore+0xbc>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	3314      	adds	r3, #20
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001608:	79ba      	ldrb	r2, [r7, #6]
 800160a:	4913      	ldr	r1, [pc, #76]	@ (8001658 <LinkTimerBefore+0xbc>)
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	3314      	adds	r3, #20
 8001618:	79fa      	ldrb	r2, [r7, #7]
 800161a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800161c:	e014      	b.n	8001648 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800161e:	79fa      	ldrb	r2, [r7, #7]
 8001620:	490d      	ldr	r1, [pc, #52]	@ (8001658 <LinkTimerBefore+0xbc>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	3315      	adds	r3, #21
 800162e:	79ba      	ldrb	r2, [r7, #6]
 8001630:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001632:	79ba      	ldrb	r2, [r7, #6]
 8001634:	4908      	ldr	r1, [pc, #32]	@ (8001658 <LinkTimerBefore+0xbc>)
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	3314      	adds	r3, #20
 8001642:	79fa      	ldrb	r2, [r7, #7]
 8001644:	701a      	strb	r2, [r3, #0]
  return;
 8001646:	bf00      	nop
}
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	2000027c 	.word	0x2000027c
 8001658:	200001ec 	.word	0x200001ec

0800165c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001666:	4b4e      	ldr	r3, [pc, #312]	@ (80017a0 <linkTimer+0x144>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b06      	cmp	r3, #6
 800166e:	d118      	bne.n	80016a2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001670:	4b4b      	ldr	r3, [pc, #300]	@ (80017a0 <linkTimer+0x144>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b4b      	ldr	r3, [pc, #300]	@ (80017a4 <linkTimer+0x148>)
 8001678:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800167a:	4a49      	ldr	r2, [pc, #292]	@ (80017a0 <linkTimer+0x144>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001680:	79fa      	ldrb	r2, [r7, #7]
 8001682:	4949      	ldr	r1, [pc, #292]	@ (80017a8 <linkTimer+0x14c>)
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	440b      	add	r3, r1
 800168e:	3315      	adds	r3, #21
 8001690:	2206      	movs	r2, #6
 8001692:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001694:	4b45      	ldr	r3, [pc, #276]	@ (80017ac <linkTimer+0x150>)
 8001696:	f04f 32ff 	mov.w	r2, #4294967295
 800169a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	81fb      	strh	r3, [r7, #14]
 80016a0:	e078      	b.n	8001794 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80016a2:	f000 f909 	bl	80018b8 <ReturnTimeElapsed>
 80016a6:	4603      	mov	r3, r0
 80016a8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80016aa:	79fa      	ldrb	r2, [r7, #7]
 80016ac:	493e      	ldr	r1, [pc, #248]	@ (80017a8 <linkTimer+0x14c>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	3308      	adds	r3, #8
 80016ba:	6819      	ldr	r1, [r3, #0]
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	79fa      	ldrb	r2, [r7, #7]
 80016c0:	4419      	add	r1, r3
 80016c2:	4839      	ldr	r0, [pc, #228]	@ (80017a8 <linkTimer+0x14c>)
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4403      	add	r3, r0
 80016ce:	3308      	adds	r3, #8
 80016d0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80016d2:	79fa      	ldrb	r2, [r7, #7]
 80016d4:	4934      	ldr	r1, [pc, #208]	@ (80017a8 <linkTimer+0x14c>)
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	3308      	adds	r3, #8
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80016e6:	4b2e      	ldr	r3, [pc, #184]	@ (80017a0 <linkTimer+0x144>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4619      	mov	r1, r3
 80016ee:	4a2e      	ldr	r2, [pc, #184]	@ (80017a8 <linkTimer+0x14c>)
 80016f0:	460b      	mov	r3, r1
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	440b      	add	r3, r1
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	4413      	add	r3, r2
 80016fa:	3308      	adds	r3, #8
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	429a      	cmp	r2, r3
 8001702:	d337      	bcc.n	8001774 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001704:	4b26      	ldr	r3, [pc, #152]	@ (80017a0 <linkTimer+0x144>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800170a:	7b7a      	ldrb	r2, [r7, #13]
 800170c:	4926      	ldr	r1, [pc, #152]	@ (80017a8 <linkTimer+0x14c>)
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	440b      	add	r3, r1
 8001718:	3315      	adds	r3, #21
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800171e:	e013      	b.n	8001748 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001720:	7b7a      	ldrb	r2, [r7, #13]
 8001722:	4921      	ldr	r1, [pc, #132]	@ (80017a8 <linkTimer+0x14c>)
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	3315      	adds	r3, #21
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001734:	7b7a      	ldrb	r2, [r7, #13]
 8001736:	491c      	ldr	r1, [pc, #112]	@ (80017a8 <linkTimer+0x14c>)
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	3315      	adds	r3, #21
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001748:	7b3b      	ldrb	r3, [r7, #12]
 800174a:	2b06      	cmp	r3, #6
 800174c:	d00b      	beq.n	8001766 <linkTimer+0x10a>
 800174e:	7b3a      	ldrb	r2, [r7, #12]
 8001750:	4915      	ldr	r1, [pc, #84]	@ (80017a8 <linkTimer+0x14c>)
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	3308      	adds	r3, #8
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	429a      	cmp	r2, r3
 8001764:	d2dc      	bcs.n	8001720 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001766:	7b7a      	ldrb	r2, [r7, #13]
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fecf 	bl	8001510 <LinkTimerAfter>
 8001772:	e00f      	b.n	8001794 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001774:	4b0a      	ldr	r3, [pc, #40]	@ (80017a0 <linkTimer+0x144>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff0c 	bl	800159c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <linkTimer+0x144>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <linkTimer+0x148>)
 800178c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800178e:	4a04      	ldr	r2, [pc, #16]	@ (80017a0 <linkTimer+0x144>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001794:	89fb      	ldrh	r3, [r7, #14]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2000027c 	.word	0x2000027c
 80017a4:	2000027d 	.word	0x2000027d
 80017a8:	200001ec 	.word	0x200001ec
 80017ac:	20000280 	.word	0x20000280

080017b0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	460a      	mov	r2, r1
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	4613      	mov	r3, r2
 80017be:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80017c0:	4b39      	ldr	r3, [pc, #228]	@ (80018a8 <UnlinkTimer+0xf8>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	79fa      	ldrb	r2, [r7, #7]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d111      	bne.n	80017f0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80017cc:	4b36      	ldr	r3, [pc, #216]	@ (80018a8 <UnlinkTimer+0xf8>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b36      	ldr	r3, [pc, #216]	@ (80018ac <UnlinkTimer+0xfc>)
 80017d4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80017d6:	79fa      	ldrb	r2, [r7, #7]
 80017d8:	4935      	ldr	r1, [pc, #212]	@ (80018b0 <UnlinkTimer+0x100>)
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	3315      	adds	r3, #21
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b2f      	ldr	r3, [pc, #188]	@ (80018a8 <UnlinkTimer+0xf8>)
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	e03e      	b.n	800186e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80017f0:	79fa      	ldrb	r2, [r7, #7]
 80017f2:	492f      	ldr	r1, [pc, #188]	@ (80018b0 <UnlinkTimer+0x100>)
 80017f4:	4613      	mov	r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	440b      	add	r3, r1
 80017fe:	3314      	adds	r3, #20
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001804:	79fa      	ldrb	r2, [r7, #7]
 8001806:	492a      	ldr	r1, [pc, #168]	@ (80018b0 <UnlinkTimer+0x100>)
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	3315      	adds	r3, #21
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001818:	79f9      	ldrb	r1, [r7, #7]
 800181a:	7bfa      	ldrb	r2, [r7, #15]
 800181c:	4824      	ldr	r0, [pc, #144]	@ (80018b0 <UnlinkTimer+0x100>)
 800181e:	460b      	mov	r3, r1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	440b      	add	r3, r1
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4403      	add	r3, r0
 8001828:	3315      	adds	r3, #21
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b2d8      	uxtb	r0, r3
 800182e:	4920      	ldr	r1, [pc, #128]	@ (80018b0 <UnlinkTimer+0x100>)
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	440b      	add	r3, r1
 800183a:	3315      	adds	r3, #21
 800183c:	4602      	mov	r2, r0
 800183e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001840:	7bbb      	ldrb	r3, [r7, #14]
 8001842:	2b06      	cmp	r3, #6
 8001844:	d013      	beq.n	800186e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001846:	79f9      	ldrb	r1, [r7, #7]
 8001848:	7bba      	ldrb	r2, [r7, #14]
 800184a:	4819      	ldr	r0, [pc, #100]	@ (80018b0 <UnlinkTimer+0x100>)
 800184c:	460b      	mov	r3, r1
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	440b      	add	r3, r1
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	4403      	add	r3, r0
 8001856:	3314      	adds	r3, #20
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b2d8      	uxtb	r0, r3
 800185c:	4914      	ldr	r1, [pc, #80]	@ (80018b0 <UnlinkTimer+0x100>)
 800185e:	4613      	mov	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	3314      	adds	r3, #20
 800186a:	4602      	mov	r2, r0
 800186c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	490f      	ldr	r1, [pc, #60]	@ (80018b0 <UnlinkTimer+0x100>)
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	330c      	adds	r3, #12
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <UnlinkTimer+0xf8>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b06      	cmp	r3, #6
 800188a:	d107      	bne.n	800189c <UnlinkTimer+0xec>
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d104      	bne.n	800189c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <UnlinkTimer+0x104>)
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	601a      	str	r2, [r3, #0]
  }

  return;
 800189a:	bf00      	nop
 800189c:	bf00      	nop
}
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	2000027c 	.word	0x2000027c
 80018ac:	2000027d 	.word	0x2000027d
 80018b0:	200001ec 	.word	0x200001ec
 80018b4:	20000280 	.word	0x20000280

080018b8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80018be:	4b1a      	ldr	r3, [pc, #104]	@ (8001928 <ReturnTimeElapsed+0x70>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c6:	d026      	beq.n	8001916 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80018c8:	f7ff fe02 	bl	80014d0 <ReadRtcSsrValue>
 80018cc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80018ce:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <ReturnTimeElapsed+0x70>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d805      	bhi.n	80018e4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80018d8:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <ReturnTimeElapsed+0x70>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	e00a      	b.n	80018fa <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <ReturnTimeElapsed+0x74>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80018f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <ReturnTimeElapsed+0x70>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80018fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <ReturnTimeElapsed+0x78>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001908:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <ReturnTimeElapsed+0x7c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	40d3      	lsrs	r3, r2
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	e001      	b.n	800191a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	b29b      	uxth	r3, r3
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000280 	.word	0x20000280
 800192c:	20000288 	.word	0x20000288
 8001930:	20000286 	.word	0x20000286
 8001934:	20000285 	.word	0x20000285

08001938 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d108      	bne.n	800195a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001948:	f7ff fdc2 	bl	80014d0 <ReadRtcSsrValue>
 800194c:	4603      	mov	r3, r0
 800194e:	4a21      	ldr	r2, [pc, #132]	@ (80019d4 <RestartWakeupCounter+0x9c>)
 8001950:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001952:	2003      	movs	r0, #3
 8001954:	f001 fcab 	bl	80032ae <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001958:	e039      	b.n	80019ce <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d803      	bhi.n	8001968 <RestartWakeupCounter+0x30>
 8001960:	4b1d      	ldr	r3, [pc, #116]	@ (80019d8 <RestartWakeupCounter+0xa0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d002      	beq.n	800196e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	3b01      	subs	r3, #1
 800196c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800196e:	bf00      	nop
 8001970:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <RestartWakeupCounter+0xa4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f8      	beq.n	8001970 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <RestartWakeupCounter+0xa4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <RestartWakeupCounter+0xa4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800198e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001990:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <RestartWakeupCounter+0xa8>)
 8001992:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001996:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001998:	2003      	movs	r0, #3
 800199a:	f001 fc96 	bl	80032ca <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800199e:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <RestartWakeupCounter+0xac>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	0c1b      	lsrs	r3, r3, #16
 80019a4:	041b      	lsls	r3, r3, #16
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	490e      	ldr	r1, [pc, #56]	@ (80019e4 <RestartWakeupCounter+0xac>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80019ae:	f7ff fd8f 	bl	80014d0 <ReadRtcSsrValue>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a07      	ldr	r2, [pc, #28]	@ (80019d4 <RestartWakeupCounter+0x9c>)
 80019b6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <RestartWakeupCounter+0xa4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <RestartWakeupCounter+0xa4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019c6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80019c8:	f3af 8000 	nop.w
  return ;
 80019cc:	bf00      	nop
}
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000280 	.word	0x20000280
 80019d8:	20000285 	.word	0x20000285
 80019dc:	20000320 	.word	0x20000320
 80019e0:	58000800 	.word	0x58000800
 80019e4:	40002800 	.word	0x40002800

080019e8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80019ee:	4b45      	ldr	r3, [pc, #276]	@ (8001b04 <RescheduleTimerList+0x11c>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019fa:	d107      	bne.n	8001a0c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80019fc:	bf00      	nop
 80019fe:	4b42      	ldr	r3, [pc, #264]	@ (8001b08 <RescheduleTimerList+0x120>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f8      	bne.n	80019fe <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001a0c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b08 <RescheduleTimerList+0x120>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	4b3d      	ldr	r3, [pc, #244]	@ (8001b08 <RescheduleTimerList+0x120>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a1a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8001b0c <RescheduleTimerList+0x124>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	493a      	ldr	r1, [pc, #232]	@ (8001b10 <RescheduleTimerList+0x128>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	3308      	adds	r3, #8
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001a36:	f7ff ff3f 	bl	80018b8 <ReturnTimeElapsed>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d205      	bcs.n	8001a52 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a4a:	4b32      	ldr	r3, [pc, #200]	@ (8001b14 <RescheduleTimerList+0x12c>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	e04d      	b.n	8001aee <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	4a30      	ldr	r2, [pc, #192]	@ (8001b18 <RescheduleTimerList+0x130>)
 8001a56:	8812      	ldrh	r2, [r2, #0]
 8001a58:	b292      	uxth	r2, r2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d906      	bls.n	8001a72 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001a64:	4b2c      	ldr	r3, [pc, #176]	@ (8001b18 <RescheduleTimerList+0x130>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b14 <RescheduleTimerList+0x12c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e03d      	b.n	8001aee <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a7c:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <RescheduleTimerList+0x12c>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a82:	e034      	b.n	8001aee <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	4922      	ldr	r1, [pc, #136]	@ (8001b10 <RescheduleTimerList+0x128>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	3308      	adds	r3, #8
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d20a      	bcs.n	8001ab2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	491c      	ldr	r1, [pc, #112]	@ (8001b10 <RescheduleTimerList+0x128>)
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3308      	adds	r3, #8
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e013      	b.n	8001ada <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	4916      	ldr	r1, [pc, #88]	@ (8001b10 <RescheduleTimerList+0x128>)
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	440b      	add	r3, r1
 8001ac0:	3308      	adds	r3, #8
 8001ac2:	6819      	ldr	r1, [r3, #0]
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	1ac9      	subs	r1, r1, r3
 8001aca:	4811      	ldr	r0, [pc, #68]	@ (8001b10 <RescheduleTimerList+0x128>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4403      	add	r3, r0
 8001ad6:	3308      	adds	r3, #8
 8001ad8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	490c      	ldr	r1, [pc, #48]	@ (8001b10 <RescheduleTimerList+0x128>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3315      	adds	r3, #21
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	2b06      	cmp	r3, #6
 8001af2:	d1c7      	bne.n	8001a84 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001af4:	89bb      	ldrh	r3, [r7, #12]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff1e 	bl	8001938 <RestartWakeupCounter>

  return ;
 8001afc:	bf00      	nop
}
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40002800 	.word	0x40002800
 8001b08:	20000320 	.word	0x20000320
 8001b0c:	2000027c 	.word	0x2000027c
 8001b10:	200001ec 	.word	0x200001ec
 8001b14:	20000284 	.word	0x20000284
 8001b18:	2000028a 	.word	0x2000028a

08001b1c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	@ 0x28
 8001b20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b22:	f3ef 8310 	mrs	r3, PRIMASK
 8001b26:	617b      	str	r3, [r7, #20]
  return(result);
 8001b28:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b30:	4b59      	ldr	r3, [pc, #356]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	22ca      	movs	r2, #202	@ 0xca
 8001b36:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b38:	4b57      	ldr	r3, [pc, #348]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2253      	movs	r2, #83	@ 0x53
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001b40:	4b55      	ldr	r3, [pc, #340]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	4b54      	ldr	r3, [pc, #336]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b4e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001b50:	4b52      	ldr	r3, [pc, #328]	@ (8001c9c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001b58:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b5c:	4950      	ldr	r1, [pc, #320]	@ (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	440b      	add	r3, r1
 8001b68:	330c      	adds	r3, #12
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d16e      	bne.n	8001c50 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001b72:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b76:	494a      	ldr	r1, [pc, #296]	@ (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001b86:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001b8a:	4945      	ldr	r1, [pc, #276]	@ (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	3310      	adds	r3, #16
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001b9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ca4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d04c      	beq.n	8001c40 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001ba6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001baa:	493d      	ldr	r1, [pc, #244]	@ (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	330d      	adds	r3, #13
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d124      	bne.n	8001c0a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fdf2 	bl	80017b0 <UnlinkTimer>
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bce:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f383 8810 	msr	PRIMASK, r3
}
 8001bd6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001bd8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001bdc:	4930      	ldr	r1, [pc, #192]	@ (8001ca0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	3304      	adds	r3, #4
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f9b8 	bl	8001f68 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bf8:	4b27      	ldr	r3, [pc, #156]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	22ca      	movs	r2, #202	@ 0xca
 8001bfe:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c00:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2253      	movs	r2, #83	@ 0x53
 8001c06:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c08:	e012      	b.n	8001c30 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f383 8810 	msr	PRIMASK, r3
}
 8001c14:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001c16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f920 	bl	8001e60 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c20:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	22ca      	movs	r2, #202	@ 0xca
 8001c26:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c28:	4b1b      	ldr	r3, [pc, #108]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2253      	movs	r2, #83	@ 0x53
 8001c2e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001c30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	4619      	mov	r1, r3
 8001c38:	69b8      	ldr	r0, [r7, #24]
 8001c3a:	f000 fa1b 	bl	8002074 <HW_TS_RTC_Int_AppNot>
 8001c3e:	e022      	b.n	8001c86 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001c40:	f7ff fed2 	bl	80019e8 <RescheduleTimerList>
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f383 8810 	msr	PRIMASK, r3
}
 8001c4e:	e01a      	b.n	8001c86 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c50:	bf00      	nop
 8001c52:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f8      	beq.n	8001c52 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c60:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001c70:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001c74:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f383 8810 	msr	PRIMASK, r3
}
 8001c84:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c86:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	22ff      	movs	r2, #255	@ 0xff
 8001c8c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8001c8e:	bf00      	nop
}
 8001c90:	3728      	adds	r7, #40	@ 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000320 	.word	0x20000320
 8001c9c:	2000027c 	.word	0x2000027c
 8001ca0:	200001ec 	.word	0x200001ec
 8001ca4:	20000284 	.word	0x20000284
 8001ca8:	58000800 	.word	0x58000800

08001cac <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001cb8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e34 <HW_TS_Init+0x188>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	22ca      	movs	r2, #202	@ 0xca
 8001cbe:	625a      	str	r2, [r3, #36]	@ 0x24
 8001cc0:	4b5c      	ldr	r3, [pc, #368]	@ (8001e34 <HW_TS_Init+0x188>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2253      	movs	r2, #83	@ 0x53
 8001cc6:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001cc8:	4b5b      	ldr	r3, [pc, #364]	@ (8001e38 <HW_TS_Init+0x18c>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4a5a      	ldr	r2, [pc, #360]	@ (8001e38 <HW_TS_Init+0x18c>)
 8001cce:	f043 0320 	orr.w	r3, r3, #32
 8001cd2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001cd4:	4b58      	ldr	r3, [pc, #352]	@ (8001e38 <HW_TS_Init+0x18c>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	f1c3 0304 	rsb	r3, r3, #4
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4b55      	ldr	r3, [pc, #340]	@ (8001e3c <HW_TS_Init+0x190>)
 8001ce8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001cea:	4b53      	ldr	r3, [pc, #332]	@ (8001e38 <HW_TS_Init+0x18c>)
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001cf2:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001cf6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	fa92 f2a2 	rbit	r2, r2
 8001cfe:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	2a00      	cmp	r2, #0
 8001d08:	d101      	bne.n	8001d0e <HW_TS_Init+0x62>
  {
    return 32U;
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	e003      	b.n	8001d16 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	fab2 f282 	clz	r2, r2
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	40d3      	lsrs	r3, r2
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b48      	ldr	r3, [pc, #288]	@ (8001e40 <HW_TS_Init+0x194>)
 8001d20:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001d22:	4b45      	ldr	r3, [pc, #276]	@ (8001e38 <HW_TS_Init+0x18c>)
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b44      	ldr	r3, [pc, #272]	@ (8001e44 <HW_TS_Init+0x198>)
 8001d34:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001d36:	4b43      	ldr	r3, [pc, #268]	@ (8001e44 <HW_TS_Init+0x198>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	4a40      	ldr	r2, [pc, #256]	@ (8001e40 <HW_TS_Init+0x194>)
 8001d3e:	7812      	ldrb	r2, [r2, #0]
 8001d40:	fb02 f303 	mul.w	r3, r2, r3
 8001d44:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d48:	4a3c      	ldr	r2, [pc, #240]	@ (8001e3c <HW_TS_Init+0x190>)
 8001d4a:	7812      	ldrb	r2, [r2, #0]
 8001d4c:	40d3      	lsrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d904      	bls.n	8001d64 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e48 <HW_TS_Init+0x19c>)
 8001d5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d60:	801a      	strh	r2, [r3, #0]
 8001d62:	e003      	b.n	8001d6c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	4b37      	ldr	r3, [pc, #220]	@ (8001e48 <HW_TS_Init+0x19c>)
 8001d6a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d6c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001d70:	f7ff fb9c 	bl	80014ac <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d74:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001d78:	f7ff fb84 	bl	8001484 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d13d      	bne.n	8001dfe <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d82:	4b32      	ldr	r3, [pc, #200]	@ (8001e4c <HW_TS_Init+0x1a0>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d88:	4b31      	ldr	r3, [pc, #196]	@ (8001e50 <HW_TS_Init+0x1a4>)
 8001d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	77fb      	strb	r3, [r7, #31]
 8001d94:	e00c      	b.n	8001db0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001d96:	7ffa      	ldrb	r2, [r7, #31]
 8001d98:	492e      	ldr	r1, [pc, #184]	@ (8001e54 <HW_TS_Init+0x1a8>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	330c      	adds	r3, #12
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001daa:	7ffb      	ldrb	r3, [r7, #31]
 8001dac:	3301      	adds	r3, #1
 8001dae:	77fb      	strb	r3, [r7, #31]
 8001db0:	7ffb      	ldrb	r3, [r7, #31]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d9ef      	bls.n	8001d96 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001db6:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <HW_TS_Init+0x1ac>)
 8001db8:	2206      	movs	r2, #6
 8001dba:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e34 <HW_TS_Init+0x188>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <HW_TS_Init+0x188>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dca:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001dcc:	4b19      	ldr	r3, [pc, #100]	@ (8001e34 <HW_TS_Init+0x188>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b17      	ldr	r3, [pc, #92]	@ (8001e34 <HW_TS_Init+0x188>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001ddc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001dde:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <HW_TS_Init+0x1b0>)
 8001de0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001de4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001de6:	2003      	movs	r0, #3
 8001de8:	f001 fa6f 	bl	80032ca <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001dec:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <HW_TS_Init+0x188>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <HW_TS_Init+0x188>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	e009      	b.n	8001e12 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <HW_TS_Init+0x188>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f001 fa4e 	bl	80032ae <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <HW_TS_Init+0x188>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	22ff      	movs	r2, #255	@ 0xff
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2103      	movs	r1, #3
 8001e1e:	2003      	movs	r0, #3
 8001e20:	f001 fa03 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e24:	2003      	movs	r0, #3
 8001e26:	f001 fa1a 	bl	800325e <HAL_NVIC_EnableIRQ>

  return;
 8001e2a:	bf00      	nop
}
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000320 	.word	0x20000320
 8001e38:	40002800 	.word	0x40002800
 8001e3c:	20000285 	.word	0x20000285
 8001e40:	20000286 	.word	0x20000286
 8001e44:	20000288 	.word	0x20000288
 8001e48:	2000028a 	.word	0x2000028a
 8001e4c:	20000284 	.word	0x20000284
 8001e50:	20000280 	.word	0x20000280
 8001e54:	200001ec 	.word	0x200001ec
 8001e58:	2000027c 	.word	0x2000027c
 8001e5c:	58000800 	.word	0x58000800

08001e60 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e70:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e74:	b672      	cpsid	i
}
 8001e76:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f001 f9fe 	bl	800327a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e7e:	4b34      	ldr	r3, [pc, #208]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	22ca      	movs	r2, #202	@ 0xca
 8001e84:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e86:	4b32      	ldr	r3, [pc, #200]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2253      	movs	r2, #83	@ 0x53
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001e8e:	79fa      	ldrb	r2, [r7, #7]
 8001e90:	4930      	ldr	r1, [pc, #192]	@ (8001f54 <HW_TS_Stop+0xf4>)
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d142      	bne.n	8001f2c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fc80 	bl	80017b0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001eb0:	4b29      	ldr	r3, [pc, #164]	@ (8001f58 <HW_TS_Stop+0xf8>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	2b06      	cmp	r3, #6
 8001eba:	d12f      	bne.n	8001f1c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ebc:	4b27      	ldr	r3, [pc, #156]	@ (8001f5c <HW_TS_Stop+0xfc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ec8:	d107      	bne.n	8001eda <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001eca:	bf00      	nop
 8001ecc:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f8      	bne.n	8001ecc <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001eda:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001eea:	bf00      	nop
 8001eec:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f8      	beq.n	8001eec <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001f0a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f0c:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <HW_TS_Stop+0x100>)
 8001f0e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001f12:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f14:	2003      	movs	r0, #3
 8001f16:	f001 f9d8 	bl	80032ca <HAL_NVIC_ClearPendingIRQ>
 8001f1a:	e007      	b.n	8001f2c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <HW_TS_Stop+0x104>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	7cfa      	ldrb	r2, [r7, #19]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001f28:	f7ff fd5e 	bl	80019e8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f2c:	4b08      	ldr	r3, [pc, #32]	@ (8001f50 <HW_TS_Stop+0xf0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	22ff      	movs	r2, #255	@ 0xff
 8001f32:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f34:	2003      	movs	r0, #3
 8001f36:	f001 f992 	bl	800325e <HAL_NVIC_EnableIRQ>
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f383 8810 	msr	PRIMASK, r3
}
 8001f44:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001f46:	bf00      	nop
}
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000320 	.word	0x20000320
 8001f54:	200001ec 	.word	0x200001ec
 8001f58:	2000027c 	.word	0x2000027c
 8001f5c:	40002800 	.word	0x40002800
 8001f60:	58000800 	.word	0x58000800
 8001f64:	2000027d 	.word	0x2000027d

08001f68 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001f74:	79fa      	ldrb	r2, [r7, #7]
 8001f76:	493b      	ldr	r1, [pc, #236]	@ (8002064 <HW_TS_Start+0xfc>)
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	330c      	adds	r3, #12
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d103      	bne.n	8001f94 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff66 	bl	8001e60 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f94:	f3ef 8310 	mrs	r3, PRIMASK
 8001f98:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f9e:	b672      	cpsid	i
}
 8001fa0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001fa2:	2003      	movs	r0, #3
 8001fa4:	f001 f969 	bl	800327a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	@ (8002068 <HW_TS_Start+0x100>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	22ca      	movs	r2, #202	@ 0xca
 8001fae:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002068 <HW_TS_Start+0x100>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2253      	movs	r2, #83	@ 0x53
 8001fb6:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001fb8:	79fa      	ldrb	r2, [r7, #7]
 8001fba:	492a      	ldr	r1, [pc, #168]	@ (8002064 <HW_TS_Start+0xfc>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	330c      	adds	r3, #12
 8001fc8:	2202      	movs	r2, #2
 8001fca:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001fcc:	79fa      	ldrb	r2, [r7, #7]
 8001fce:	4925      	ldr	r1, [pc, #148]	@ (8002064 <HW_TS_Start+0xfc>)
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3308      	adds	r3, #8
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001fe0:	79fa      	ldrb	r2, [r7, #7]
 8001fe2:	4920      	ldr	r1, [pc, #128]	@ (8002064 <HW_TS_Start+0xfc>)
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	3304      	adds	r3, #4
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fb30 	bl	800165c <linkTimer>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002000:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <HW_TS_Start+0x104>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002006:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <HW_TS_Start+0x108>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	7c7a      	ldrb	r2, [r7, #17]
 800200e:	429a      	cmp	r2, r3
 8002010:	d002      	beq.n	8002018 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002012:	f7ff fce9 	bl	80019e8 <RescheduleTimerList>
 8002016:	e013      	b.n	8002040 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002018:	79fa      	ldrb	r2, [r7, #7]
 800201a:	4912      	ldr	r1, [pc, #72]	@ (8002064 <HW_TS_Start+0xfc>)
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	3308      	adds	r3, #8
 8002028:	6819      	ldr	r1, [r3, #0]
 800202a:	8a7b      	ldrh	r3, [r7, #18]
 800202c:	79fa      	ldrb	r2, [r7, #7]
 800202e:	1ac9      	subs	r1, r1, r3
 8002030:	480c      	ldr	r0, [pc, #48]	@ (8002064 <HW_TS_Start+0xfc>)
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4403      	add	r3, r0
 800203c:	3308      	adds	r3, #8
 800203e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002040:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <HW_TS_Start+0x100>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	22ff      	movs	r2, #255	@ 0xff
 8002046:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002048:	2003      	movs	r0, #3
 800204a:	f001 f908 	bl	800325e <HAL_NVIC_EnableIRQ>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f383 8810 	msr	PRIMASK, r3
}
 8002058:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800205a:	bf00      	nop
}
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200001ec 	.word	0x200001ec
 8002068:	20000320 	.word	0x20000320
 800206c:	2000027c 	.word	0x2000027c
 8002070:	2000027d 	.word	0x2000027d

08002074 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	460b      	mov	r3, r1
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4798      	blx	r3

  return;
 8002086:	bf00      	nop
}
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	4603      	mov	r3, r0
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	4613      	mov	r3, r2
 80020a0:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80020a6:	2300      	movs	r3, #0
 80020a8:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10e      	bne.n	80020ce <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80020b0:	4a17      	ldr	r2, [pc, #92]	@ (8002110 <HW_UART_Transmit_DMA+0x80>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80020b6:	4b17      	ldr	r3, [pc, #92]	@ (8002114 <HW_UART_Transmit_DMA+0x84>)
 80020b8:	4a17      	ldr	r2, [pc, #92]	@ (8002118 <HW_UART_Transmit_DMA+0x88>)
 80020ba:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80020bc:	89bb      	ldrh	r3, [r7, #12]
 80020be:	461a      	mov	r2, r3
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	4814      	ldr	r0, [pc, #80]	@ (8002114 <HW_UART_Transmit_DMA+0x84>)
 80020c4:	f005 fea2 	bl	8007e0c <HAL_UART_Transmit_DMA>
 80020c8:	4603      	mov	r3, r0
 80020ca:	75fb      	strb	r3, [r7, #23]
            break;
 80020cc:	e000      	b.n	80020d0 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80020ce:	bf00      	nop
    }

    switch (hal_status)
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d816      	bhi.n	8002104 <HW_UART_Transmit_DMA+0x74>
 80020d6:	a201      	add	r2, pc, #4	@ (adr r2, 80020dc <HW_UART_Transmit_DMA+0x4c>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020f3 	.word	0x080020f3
 80020e4:	080020f9 	.word	0x080020f9
 80020e8:	080020ff 	.word	0x080020ff
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80020ec:	2300      	movs	r3, #0
 80020ee:	75bb      	strb	r3, [r7, #22]
            break;
 80020f0:	e009      	b.n	8002106 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75bb      	strb	r3, [r7, #22]
            break;
 80020f6:	e006      	b.n	8002106 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80020f8:	2302      	movs	r3, #2
 80020fa:	75bb      	strb	r3, [r7, #22]
            break;
 80020fc:	e003      	b.n	8002106 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80020fe:	2303      	movs	r3, #3
 8002100:	75bb      	strb	r3, [r7, #22]
            break;
 8002102:	e000      	b.n	8002106 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002104:	bf00      	nop
    }

    return hw_status;
 8002106:	7dbb      	ldrb	r3, [r7, #22]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000028c 	.word	0x2000028c
 8002114:	200003ac 	.word	0x200003ac
 8002118:	40013800 	.word	0x40013800

0800211c <LL_AHB2_GRP1_EnableClock>:
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002128:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800212a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4313      	orrs	r3, r2
 8002132:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002138:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4013      	ands	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002140:	68fb      	ldr	r3, [r7, #12]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800214e:	b480      	push	{r7}
 8002150:	b085      	sub	sp, #20
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800215a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800215c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4313      	orrs	r3, r2
 8002164:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4013      	ands	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002184:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <MX_I2C1_Init+0x74>)
 8002186:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <MX_I2C1_Init+0x78>)
 8002188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800218a:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <MX_I2C1_Init+0x74>)
 800218c:	4a1b      	ldr	r2, [pc, #108]	@ (80021fc <MX_I2C1_Init+0x7c>)
 800218e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002190:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <MX_I2C1_Init+0x74>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002196:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <MX_I2C1_Init+0x74>)
 8002198:	2201      	movs	r2, #1
 800219a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800219c:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <MX_I2C1_Init+0x74>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021a2:	4b14      	ldr	r3, [pc, #80]	@ (80021f4 <MX_I2C1_Init+0x74>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021a8:	4b12      	ldr	r3, [pc, #72]	@ (80021f4 <MX_I2C1_Init+0x74>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021ae:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <MX_I2C1_Init+0x74>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	@ (80021f4 <MX_I2C1_Init+0x74>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021ba:	480e      	ldr	r0, [pc, #56]	@ (80021f4 <MX_I2C1_Init+0x74>)
 80021bc:	f001 fc66 	bl	8003a8c <HAL_I2C_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021c6:	f000 f9ab 	bl	8002520 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021ca:	2100      	movs	r1, #0
 80021cc:	4809      	ldr	r0, [pc, #36]	@ (80021f4 <MX_I2C1_Init+0x74>)
 80021ce:	f001 fcf8 	bl	8003bc2 <HAL_I2CEx_ConfigAnalogFilter>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021d8:	f000 f9a2 	bl	8002520 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021dc:	2100      	movs	r1, #0
 80021de:	4805      	ldr	r0, [pc, #20]	@ (80021f4 <MX_I2C1_Init+0x74>)
 80021e0:	f001 fd3a 	bl	8003c58 <HAL_I2CEx_ConfigDigitalFilter>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021ea:	f000 f999 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000290 	.word	0x20000290
 80021f8:	40005400 	.word	0x40005400
 80021fc:	00b07cb4 	.word	0x00b07cb4

08002200 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b09c      	sub	sp, #112	@ 0x70
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002218:	f107 030c 	add.w	r3, r7, #12
 800221c:	2250      	movs	r2, #80	@ 0x50
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f00f fd6b 	bl	8011cfc <memset>
  if(i2cHandle->Instance==I2C1)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a17      	ldr	r2, [pc, #92]	@ (8002288 <HAL_I2C_MspInit+0x88>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d126      	bne.n	800227e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002230:	2304      	movs	r3, #4
 8002232:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002234:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002238:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	4618      	mov	r0, r3
 8002240:	f004 fdfe 	bl	8006e40 <HAL_RCCEx_PeriphCLKConfig>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800224a:	f000 f969 	bl	8002520 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2002      	movs	r0, #2
 8002250:	f7ff ff64 	bl	800211c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002254:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002258:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800225a:	2312      	movs	r3, #18
 800225c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002266:	2304      	movs	r3, #4
 8002268:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800226e:	4619      	mov	r1, r3
 8002270:	4806      	ldr	r0, [pc, #24]	@ (800228c <HAL_I2C_MspInit+0x8c>)
 8002272:	f001 fa5f 	bl	8003734 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002276:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800227a:	f7ff ff68 	bl	800214e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800227e:	bf00      	nop
 8002280:	3770      	adds	r7, #112	@ 0x70
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40005400 	.word	0x40005400
 800228c:	48000400 	.word	0x48000400

08002290 <LL_AHB3_GRP1_EnableClock>:
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800229c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800229e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80022a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4013      	ands	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022b4:	68fb      	ldr	r3, [r7, #12]
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80022c8:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <MX_IPCC_Init+0x20>)
 80022ca:	4a07      	ldr	r2, [pc, #28]	@ (80022e8 <MX_IPCC_Init+0x24>)
 80022cc:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80022ce:	4805      	ldr	r0, [pc, #20]	@ (80022e4 <MX_IPCC_Init+0x20>)
 80022d0:	f001 fd0e 	bl	8003cf0 <HAL_IPCC_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80022da:	f000 f921 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200002e4 	.word	0x200002e4
 80022e8:	58000c00 	.word	0x58000c00

080022ec <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002330 <HAL_IPCC_MspInit+0x44>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d113      	bne.n	8002326 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80022fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002302:	f7ff ffc5 	bl	8002290 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	202c      	movs	r0, #44	@ 0x2c
 800230c:	f000 ff8d 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002310:	202c      	movs	r0, #44	@ 0x2c
 8002312:	f000 ffa4 	bl	800325e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	202d      	movs	r0, #45	@ 0x2d
 800231c:	f000 ff85 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002320:	202d      	movs	r0, #45	@ 0x2d
 8002322:	f000 ff9c 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	58000c00 	.word	0x58000c00

08002334 <LL_RCC_LSE_SetDriveCapability>:
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800233c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002344:	f023 0218 	bic.w	r2, r3, #24
 8002348:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(const HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_RLR_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	3220      	adds	r2, #32
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	4a05      	ldr	r2, [pc, #20]	@ (800238c <LL_HSEM_1StepLock+0x2c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d001      	beq.n	800237e <LL_HSEM_1StepLock+0x1e>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <LL_HSEM_1StepLock+0x20>
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	80000400 	.word	0x80000400

08002390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b090      	sub	sp, #64	@ 0x40
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002396:	f000 fd7b 	bl	8002e90 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800239a:	f7fe fcc1 	bl	8000d20 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800239e:	f000 f823 	bl	80023e8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80023a2:	f000 f897 	bl	80024d4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80023a6:	f7ff ff8d 	bl	80022c4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023aa:	f7ff f823 	bl	80013f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80023ae:	f7fe fff6 	bl	800139e <MX_DMA_Init>
  MX_I2C1_Init();
 80023b2:	f7ff fee5 	bl	8002180 <MX_I2C1_Init>
  MX_RTC_Init();
 80023b6:	f000 f8eb 	bl	8002590 <MX_RTC_Init>
  MX_SPI1_Init();
 80023ba:	f000 fb59 	bl	8002a70 <MX_SPI1_Init>
  MX_USB_Device_Init();
 80023be:	f00e fae7 	bl	8010990 <MX_USB_Device_Init>
  MX_RF_Init();
 80023c2:	f000 f8b3 	bl	800252c <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80023c6:	2201      	movs	r2, #1
 80023c8:	2101      	movs	r1, #1
 80023ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ce:	f001 fb21 	bl	8003a14 <HAL_GPIO_WritePin>
  //snprintf(buff, sizeof(buff), "Hello world\r\n");
  //CDC_Transmit_FS((uint8_t*)buff, strlen(buff));
  //LCD_BasicCommTest(); // Just wake up display


  LCD_Init();
 80023d2:	f000 f98d 	bl	80026f0 <LCD_Init>
  LCD_FillScreen(LCD_COLOR_RED);
 80023d6:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80023da:	f000 fad9 	bl	8002990 <LCD_FillScreen>
  //LCD_FillRect(50, 50, 100, 100, LCD_COLOR_RED);
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80023de:	f7fe fcad 	bl	8000d3c <MX_APPE_Init>
  while (1)
  {
	  //CDC_Transmit_FS((uint8_t*)buff, strlen(buff));
	  //HAL_Delay(500);
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80023e2:	f7fe ff92 	bl	800130a <MX_APPE_Process>
 80023e6:	e7fc      	b.n	80023e2 <main+0x52>

080023e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b09a      	sub	sp, #104	@ 0x68
 80023ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ee:	f107 0320 	add.w	r3, r7, #32
 80023f2:	2248      	movs	r2, #72	@ 0x48
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f00f fc80 	bl	8011cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	60da      	str	r2, [r3, #12]
 8002408:	611a      	str	r2, [r3, #16]
 800240a:	615a      	str	r2, [r3, #20]
 800240c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800241c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f023 0303 	bic.w	r3, r3, #3
 8002428:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002432:	f003 f9e5 	bl	8005800 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8002436:	2010      	movs	r0, #16
 8002438:	f7ff ff7c 	bl	8002334 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800243c:	4b24      	ldr	r3, [pc, #144]	@ (80024d0 <SystemClock_Config+0xe8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002444:	4a22      	ldr	r2, [pc, #136]	@ (80024d0 <SystemClock_Config+0xe8>)
 8002446:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <SystemClock_Config+0xe8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002458:	2327      	movs	r3, #39	@ 0x27
 800245a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800245c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002460:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002462:	2301      	movs	r3, #1
 8002464:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002466:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800246a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800246c:	2301      	movs	r3, #1
 800246e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002470:	2340      	movs	r3, #64	@ 0x40
 8002472:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002474:	2300      	movs	r3, #0
 8002476:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002478:	2360      	movs	r3, #96	@ 0x60
 800247a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800247c:	2300      	movs	r3, #0
 800247e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002480:	f107 0320 	add.w	r3, r7, #32
 8002484:	4618      	mov	r0, r3
 8002486:	f003 fd47 	bl	8005f18 <HAL_RCC_OscConfig>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002490:	f000 f846 	bl	8002520 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002494:	236f      	movs	r3, #111	@ 0x6f
 8002496:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002498:	2302      	movs	r3, #2
 800249a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2101      	movs	r1, #1
 80024b4:	4618      	mov	r0, r3
 80024b6:	f004 f8a3 	bl	8006600 <HAL_RCC_ClockConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80024c0:	f000 f82e 	bl	8002520 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80024c4:	f004 fe32 	bl	800712c <HAL_RCCEx_EnableMSIPLLMode>
}
 80024c8:	bf00      	nop
 80024ca:	3768      	adds	r7, #104	@ 0x68
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	58000400 	.word	0x58000400

080024d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b094      	sub	sp, #80	@ 0x50
 80024d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024da:	463b      	mov	r3, r7
 80024dc:	2250      	movs	r2, #80	@ 0x50
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f00f fc0b 	bl	8011cfc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80024e6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80024ea:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80024ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024f0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80024f2:	2302      	movs	r3, #2
 80024f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80024f6:	2310      	movs	r3, #16
 80024f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024fa:	463b      	mov	r3, r7
 80024fc:	4618      	mov	r0, r3
 80024fe:	f004 fc9f 	bl	8006e40 <HAL_RCCEx_PeriphCLKConfig>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002508:	f000 f80a 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock(HSEM, 5); // this here to keep across regens
 800250c:	2105      	movs	r1, #5
 800250e:	4803      	ldr	r0, [pc, #12]	@ (800251c <PeriphCommonClock_Config+0x48>)
 8002510:	f7ff ff26 	bl	8002360 <LL_HSEM_1StepLock>
  /* USER CODE END Smps */
}
 8002514:	bf00      	nop
 8002516:	3750      	adds	r7, #80	@ 0x50
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	58001400 	.word	0x58001400

08002520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002524:	b672      	cpsid	i
}
 8002526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <Error_Handler+0x8>

0800252c <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <LL_RCC_EnableRTC>:
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800253e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002546:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800254a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800254e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_APB1_GRP1_EnableClock>:
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002568:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800256a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4313      	orrs	r3, r2
 8002572:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002578:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002580:	68fb      	ldr	r3, [r7, #12]
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002594:	4b16      	ldr	r3, [pc, #88]	@ (80025f0 <MX_RTC_Init+0x60>)
 8002596:	4a17      	ldr	r2, [pc, #92]	@ (80025f4 <MX_RTC_Init+0x64>)
 8002598:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800259a:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <MX_RTC_Init+0x60>)
 800259c:	2200      	movs	r2, #0
 800259e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80025a0:	4b13      	ldr	r3, [pc, #76]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025a2:	220f      	movs	r2, #15
 80025a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80025a6:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025a8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80025ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025ae:	4b10      	ldr	r3, [pc, #64]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025b4:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80025ba:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025bc:	2200      	movs	r2, #0
 80025be:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80025c0:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025c6:	480a      	ldr	r0, [pc, #40]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025c8:	f004 fec7 	bl	800735a <HAL_RTC_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80025d2:	f7ff ffa5 	bl	8002520 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	4805      	ldr	r0, [pc, #20]	@ (80025f0 <MX_RTC_Init+0x60>)
 80025dc:	f004 ffcc 	bl	8007578 <HAL_RTCEx_SetWakeUpTimer_IT>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80025e6:	f7ff ff9b 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000320 	.word	0x20000320
 80025f4:	40002800 	.word	0x40002800

080025f8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b096      	sub	sp, #88	@ 0x58
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	2250      	movs	r2, #80	@ 0x50
 8002606:	2100      	movs	r1, #0
 8002608:	4618      	mov	r0, r3
 800260a:	f00f fb77 	bl	8011cfc <memset>
  if(rtcHandle->Instance==RTC)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a12      	ldr	r2, [pc, #72]	@ (800265c <HAL_RTC_MspInit+0x64>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d11d      	bne.n	8002654 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002618:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800261c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800261e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002622:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002624:	f107 0308 	add.w	r3, r7, #8
 8002628:	4618      	mov	r0, r3
 800262a:	f004 fc09 	bl	8006e40 <HAL_RCCEx_PeriphCLKConfig>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002634:	f7ff ff74 	bl	8002520 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002638:	f7ff ff7f 	bl	800253a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800263c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002640:	f7ff ff8c 	bl	800255c <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	2003      	movs	r0, #3
 800264a:	f000 fdee 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800264e:	2003      	movs	r0, #3
 8002650:	f000 fe05 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002654:	bf00      	nop
 8002656:	3758      	adds	r7, #88	@ 0x58
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40002800 	.word	0x40002800

08002660 <LCD_WriteCommand>:
/**
 * @brief Write command to LCD
 * @param cmd: Command byte to send
 */
void LCD_WriteCommand(uint8_t cmd)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW();
 800266a:	2200      	movs	r2, #0
 800266c:	2108      	movs	r1, #8
 800266e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002672:	f001 f9cf 	bl	8003a14 <HAL_GPIO_WritePin>
    LCD_DC_LOW();  // Command mode (RS=0 in original)
 8002676:	2200      	movs	r2, #0
 8002678:	2104      	movs	r1, #4
 800267a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800267e:	f001 f9c9 	bl	8003a14 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 8002682:	1df9      	adds	r1, r7, #7
 8002684:	f04f 33ff 	mov.w	r3, #4294967295
 8002688:	2201      	movs	r2, #1
 800268a:	4806      	ldr	r0, [pc, #24]	@ (80026a4 <LCD_WriteCommand+0x44>)
 800268c:	f005 f8e3 	bl	8007856 <HAL_SPI_Transmit>
    LCD_CS_HIGH();
 8002690:	2201      	movs	r2, #1
 8002692:	2108      	movs	r1, #8
 8002694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002698:	f001 f9bc 	bl	8003a14 <HAL_GPIO_WritePin>
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000344 	.word	0x20000344

080026a8 <LCD_WriteData>:
/**
 * @brief Write data to LCD
 * @param data: Data byte to send
 */
void LCD_WriteData(uint8_t data)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW();
 80026b2:	2200      	movs	r2, #0
 80026b4:	2108      	movs	r1, #8
 80026b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026ba:	f001 f9ab 	bl	8003a14 <HAL_GPIO_WritePin>
    LCD_DC_HIGH(); // Data mode (RS=1 in original)
 80026be:	2201      	movs	r2, #1
 80026c0:	2104      	movs	r1, #4
 80026c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026c6:	f001 f9a5 	bl	8003a14 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80026ca:	1df9      	adds	r1, r7, #7
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295
 80026d0:	2201      	movs	r2, #1
 80026d2:	4806      	ldr	r0, [pc, #24]	@ (80026ec <LCD_WriteData+0x44>)
 80026d4:	f005 f8bf 	bl	8007856 <HAL_SPI_Transmit>
    LCD_CS_HIGH();
 80026d8:	2201      	movs	r2, #1
 80026da:	2108      	movs	r1, #8
 80026dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026e0:	f001 f998 	bl	8003a14 <HAL_GPIO_WritePin>
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20000344 	.word	0x20000344

080026f0 <LCD_Init>:

/**
 * @brief Initialize ST7789V LCD
 */
void LCD_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
    // Ensure CS is high initially
    LCD_CS_HIGH();
 80026f4:	2201      	movs	r2, #1
 80026f6:	2108      	movs	r1, #8
 80026f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026fc:	f001 f98a 	bl	8003a14 <HAL_GPIO_WritePin>

    // Hardware reset sequence - ST7789V needs longer reset
    LCD_RST_HIGH();
 8002700:	2201      	movs	r2, #1
 8002702:	2102      	movs	r1, #2
 8002704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002708:	f001 f984 	bl	8003a14 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800270c:	200a      	movs	r0, #10
 800270e:	f7fe fdd7 	bl	80012c0 <HAL_Delay>
    LCD_RST_LOW();
 8002712:	2200      	movs	r2, #0
 8002714:	2102      	movs	r1, #2
 8002716:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800271a:	f001 f97b 	bl	8003a14 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800271e:	2032      	movs	r0, #50	@ 0x32
 8002720:	f7fe fdce 	bl	80012c0 <HAL_Delay>
    LCD_RST_HIGH();
 8002724:	2201      	movs	r2, #1
 8002726:	2102      	movs	r1, #2
 8002728:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800272c:	f001 f972 	bl	8003a14 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 8002730:	2078      	movs	r0, #120	@ 0x78
 8002732:	f7fe fdc5 	bl	80012c0 <HAL_Delay>

    // Software reset for ST7789V
    LCD_WriteCommand(0x01); // Software Reset
 8002736:	2001      	movs	r0, #1
 8002738:	f7ff ff92 	bl	8002660 <LCD_WriteCommand>
    HAL_Delay(150);
 800273c:	2096      	movs	r0, #150	@ 0x96
 800273e:	f7fe fdbf 	bl	80012c0 <HAL_Delay>

    // Sleep out first
    LCD_WriteCommand(0x11); // Sleep Out
 8002742:	2011      	movs	r0, #17
 8002744:	f7ff ff8c 	bl	8002660 <LCD_WriteCommand>
    HAL_Delay(120);
 8002748:	2078      	movs	r0, #120	@ 0x78
 800274a:	f7fe fdb9 	bl	80012c0 <HAL_Delay>

    // ST7789V specific initialization
    LCD_WriteCommand(0x36); // Memory Access Control
 800274e:	2036      	movs	r0, #54	@ 0x36
 8002750:	f7ff ff86 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x00);    // Normal orientation
 8002754:	2000      	movs	r0, #0
 8002756:	f7ff ffa7 	bl	80026a8 <LCD_WriteData>

    LCD_WriteCommand(0x3A); // Pixel Format Set
 800275a:	203a      	movs	r0, #58	@ 0x3a
 800275c:	f7ff ff80 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x05);    // 16-bit RGB565
 8002760:	2005      	movs	r0, #5
 8002762:	f7ff ffa1 	bl	80026a8 <LCD_WriteData>

    // ST7789V Porch Setting
    LCD_WriteCommand(0xB2);
 8002766:	20b2      	movs	r0, #178	@ 0xb2
 8002768:	f7ff ff7a 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x0C);
 800276c:	200c      	movs	r0, #12
 800276e:	f7ff ff9b 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x0C);
 8002772:	200c      	movs	r0, #12
 8002774:	f7ff ff98 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x00);
 8002778:	2000      	movs	r0, #0
 800277a:	f7ff ff95 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x33);
 800277e:	2033      	movs	r0, #51	@ 0x33
 8002780:	f7ff ff92 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x33);
 8002784:	2033      	movs	r0, #51	@ 0x33
 8002786:	f7ff ff8f 	bl	80026a8 <LCD_WriteData>

    // ST7789V Gate Control
    LCD_WriteCommand(0xB7);
 800278a:	20b7      	movs	r0, #183	@ 0xb7
 800278c:	f7ff ff68 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x35);
 8002790:	2035      	movs	r0, #53	@ 0x35
 8002792:	f7ff ff89 	bl	80026a8 <LCD_WriteData>

    // ST7789V VCOM Setting
    LCD_WriteCommand(0xBB);
 8002796:	20bb      	movs	r0, #187	@ 0xbb
 8002798:	f7ff ff62 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x19);
 800279c:	2019      	movs	r0, #25
 800279e:	f7ff ff83 	bl	80026a8 <LCD_WriteData>

    // ST7789V LCM Control
    LCD_WriteCommand(0xC0);
 80027a2:	20c0      	movs	r0, #192	@ 0xc0
 80027a4:	f7ff ff5c 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x2C);
 80027a8:	202c      	movs	r0, #44	@ 0x2c
 80027aa:	f7ff ff7d 	bl	80026a8 <LCD_WriteData>

    // ST7789V VDV and VRH Command Enable
    LCD_WriteCommand(0xC2);
 80027ae:	20c2      	movs	r0, #194	@ 0xc2
 80027b0:	f7ff ff56 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x01);
 80027b4:	2001      	movs	r0, #1
 80027b6:	f7ff ff77 	bl	80026a8 <LCD_WriteData>

    // ST7789V VRH Set
    LCD_WriteCommand(0xC3);
 80027ba:	20c3      	movs	r0, #195	@ 0xc3
 80027bc:	f7ff ff50 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x12);
 80027c0:	2012      	movs	r0, #18
 80027c2:	f7ff ff71 	bl	80026a8 <LCD_WriteData>

    // ST7789V VDV Set
    LCD_WriteCommand(0xC4);
 80027c6:	20c4      	movs	r0, #196	@ 0xc4
 80027c8:	f7ff ff4a 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x20);
 80027cc:	2020      	movs	r0, #32
 80027ce:	f7ff ff6b 	bl	80026a8 <LCD_WriteData>

    // ST7789V Frame Rate Control
    LCD_WriteCommand(0xC6);
 80027d2:	20c6      	movs	r0, #198	@ 0xc6
 80027d4:	f7ff ff44 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x0F);
 80027d8:	200f      	movs	r0, #15
 80027da:	f7ff ff65 	bl	80026a8 <LCD_WriteData>

    // ST7789V Power Control 1
    LCD_WriteCommand(0xD0);
 80027de:	20d0      	movs	r0, #208	@ 0xd0
 80027e0:	f7ff ff3e 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0xA4);
 80027e4:	20a4      	movs	r0, #164	@ 0xa4
 80027e6:	f7ff ff5f 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0xA1);
 80027ea:	20a1      	movs	r0, #161	@ 0xa1
 80027ec:	f7ff ff5c 	bl	80026a8 <LCD_WriteData>

    // ST7789V Positive Voltage Gamma Control
    LCD_WriteCommand(0xE0);
 80027f0:	20e0      	movs	r0, #224	@ 0xe0
 80027f2:	f7ff ff35 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0xD0);
 80027f6:	20d0      	movs	r0, #208	@ 0xd0
 80027f8:	f7ff ff56 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x04);
 80027fc:	2004      	movs	r0, #4
 80027fe:	f7ff ff53 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x0D);
 8002802:	200d      	movs	r0, #13
 8002804:	f7ff ff50 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x11);
 8002808:	2011      	movs	r0, #17
 800280a:	f7ff ff4d 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x13);
 800280e:	2013      	movs	r0, #19
 8002810:	f7ff ff4a 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x2B);
 8002814:	202b      	movs	r0, #43	@ 0x2b
 8002816:	f7ff ff47 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x3F);
 800281a:	203f      	movs	r0, #63	@ 0x3f
 800281c:	f7ff ff44 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x54);
 8002820:	2054      	movs	r0, #84	@ 0x54
 8002822:	f7ff ff41 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x4C);
 8002826:	204c      	movs	r0, #76	@ 0x4c
 8002828:	f7ff ff3e 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x18);
 800282c:	2018      	movs	r0, #24
 800282e:	f7ff ff3b 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x0D);
 8002832:	200d      	movs	r0, #13
 8002834:	f7ff ff38 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x0B);
 8002838:	200b      	movs	r0, #11
 800283a:	f7ff ff35 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x1F);
 800283e:	201f      	movs	r0, #31
 8002840:	f7ff ff32 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x23);
 8002844:	2023      	movs	r0, #35	@ 0x23
 8002846:	f7ff ff2f 	bl	80026a8 <LCD_WriteData>

    // ST7789V Negative Voltage Gamma Control
    LCD_WriteCommand(0xE1);
 800284a:	20e1      	movs	r0, #225	@ 0xe1
 800284c:	f7ff ff08 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0xD0);
 8002850:	20d0      	movs	r0, #208	@ 0xd0
 8002852:	f7ff ff29 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x04);
 8002856:	2004      	movs	r0, #4
 8002858:	f7ff ff26 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x0C);
 800285c:	200c      	movs	r0, #12
 800285e:	f7ff ff23 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x11);
 8002862:	2011      	movs	r0, #17
 8002864:	f7ff ff20 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x13);
 8002868:	2013      	movs	r0, #19
 800286a:	f7ff ff1d 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x2C);
 800286e:	202c      	movs	r0, #44	@ 0x2c
 8002870:	f7ff ff1a 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x3F);
 8002874:	203f      	movs	r0, #63	@ 0x3f
 8002876:	f7ff ff17 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x44);
 800287a:	2044      	movs	r0, #68	@ 0x44
 800287c:	f7ff ff14 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x51);
 8002880:	2051      	movs	r0, #81	@ 0x51
 8002882:	f7ff ff11 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x2F);
 8002886:	202f      	movs	r0, #47	@ 0x2f
 8002888:	f7ff ff0e 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x1F);
 800288c:	201f      	movs	r0, #31
 800288e:	f7ff ff0b 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x1F);
 8002892:	201f      	movs	r0, #31
 8002894:	f7ff ff08 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x20);
 8002898:	2020      	movs	r0, #32
 800289a:	f7ff ff05 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x23);
 800289e:	2023      	movs	r0, #35	@ 0x23
 80028a0:	f7ff ff02 	bl	80026a8 <LCD_WriteData>

    // ST7789V Display Inversion - try both ON and OFF
    LCD_WriteCommand(0x21); // Display Inversion On
 80028a4:	2021      	movs	r0, #33	@ 0x21
 80028a6:	f7ff fedb 	bl	8002660 <LCD_WriteCommand>
    // LCD_WriteCommand(0x20); // Use this instead if colors are inverted

    // Set display area - ST7789V might have offset
    LCD_WriteCommand(0x2A); // Column Address Set
 80028aa:	202a      	movs	r0, #42	@ 0x2a
 80028ac:	f7ff fed8 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x00);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7ff fef9 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7ff fef6 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x00);
 80028bc:	2000      	movs	r0, #0
 80028be:	f7ff fef3 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0xEF); // 239
 80028c2:	20ef      	movs	r0, #239	@ 0xef
 80028c4:	f7ff fef0 	bl	80026a8 <LCD_WriteData>

    LCD_WriteCommand(0x2B); // Row Address Set
 80028c8:	202b      	movs	r0, #43	@ 0x2b
 80028ca:	f7ff fec9 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(0x00);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7ff feea 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x00);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7ff fee7 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x01);
 80028da:	2001      	movs	r0, #1
 80028dc:	f7ff fee4 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(0x3F); // 319
 80028e0:	203f      	movs	r0, #63	@ 0x3f
 80028e2:	f7ff fee1 	bl	80026a8 <LCD_WriteData>

    // Final commands
    LCD_WriteCommand(0x29); // Display On
 80028e6:	2029      	movs	r0, #41	@ 0x29
 80028e8:	f7ff feba 	bl	8002660 <LCD_WriteCommand>
    HAL_Delay(50);
 80028ec:	2032      	movs	r0, #50	@ 0x32
 80028ee:	f7fe fce7 	bl	80012c0 <HAL_Delay>
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <LCD_SetWindow>:
 * @param y0: Start row
 * @param x1: End column
 * @param y1: End row
 */
void LCD_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80028f6:	b590      	push	{r4, r7, lr}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4604      	mov	r4, r0
 80028fe:	4608      	mov	r0, r1
 8002900:	4611      	mov	r1, r2
 8002902:	461a      	mov	r2, r3
 8002904:	4623      	mov	r3, r4
 8002906:	80fb      	strh	r3, [r7, #6]
 8002908:	4603      	mov	r3, r0
 800290a:	80bb      	strh	r3, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	807b      	strh	r3, [r7, #2]
 8002910:	4613      	mov	r3, r2
 8002912:	803b      	strh	r3, [r7, #0]
    LCD_WriteCommand(0x2A); // Column Address Set
 8002914:	202a      	movs	r0, #42	@ 0x2a
 8002916:	f7ff fea3 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(x0 >> 8);
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	b29b      	uxth	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fec0 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(x0 & 0xFF);
 8002928:	88fb      	ldrh	r3, [r7, #6]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff febb 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(x1 >> 8);
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	b29b      	uxth	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff feb4 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(x1 & 0xFF);
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff feaf 	bl	80026a8 <LCD_WriteData>

    LCD_WriteCommand(0x2B); // Row Address Set
 800294a:	202b      	movs	r0, #43	@ 0x2b
 800294c:	f7ff fe88 	bl	8002660 <LCD_WriteCommand>
    LCD_WriteData(y0 >> 8);
 8002950:	88bb      	ldrh	r3, [r7, #4]
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	b29b      	uxth	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fea5 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(y0 & 0xFF);
 800295e:	88bb      	ldrh	r3, [r7, #4]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fea0 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(y1 >> 8);
 8002968:	883b      	ldrh	r3, [r7, #0]
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	b29b      	uxth	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fe99 	bl	80026a8 <LCD_WriteData>
    LCD_WriteData(y1 & 0xFF);
 8002976:	883b      	ldrh	r3, [r7, #0]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff fe94 	bl	80026a8 <LCD_WriteData>

    LCD_WriteCommand(0x2C); // Memory Write
 8002980:	202c      	movs	r0, #44	@ 0x2c
 8002982:	f7ff fe6d 	bl	8002660 <LCD_WriteCommand>
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bd90      	pop	{r4, r7, pc}
	...

08002990 <LCD_FillScreen>:
/**
 * @brief Fill entire screen with a color
 * @param color: 16-bit RGB565 color
 */
void LCD_FillScreen(uint16_t color)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	80fb      	strh	r3, [r7, #6]
    LCD_SetWindow(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 800299a:	f240 133f 	movw	r3, #319	@ 0x13f
 800299e:	22ef      	movs	r2, #239	@ 0xef
 80029a0:	2100      	movs	r1, #0
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7ff ffa7 	bl	80028f6 <LCD_SetWindow>

    uint8_t color_bytes[2] = {color >> 8, color & 0xFF};
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	723b      	strb	r3, [r7, #8]
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	727b      	strb	r3, [r7, #9]

    LCD_CS_LOW();
 80029b8:	2200      	movs	r2, #0
 80029ba:	2108      	movs	r1, #8
 80029bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029c0:	f001 f828 	bl	8003a14 <HAL_GPIO_WritePin>
    LCD_DC_HIGH(); // Data mode
 80029c4:	2201      	movs	r2, #1
 80029c6:	2104      	movs	r1, #4
 80029c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029cc:	f001 f822 	bl	8003a14 <HAL_GPIO_WritePin>

    for(uint32_t i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	e00a      	b.n	80029ec <LCD_FillScreen+0x5c>
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 80029d6:	f107 0108 	add.w	r1, r7, #8
 80029da:	f04f 33ff 	mov.w	r3, #4294967295
 80029de:	2202      	movs	r2, #2
 80029e0:	4809      	ldr	r0, [pc, #36]	@ (8002a08 <LCD_FillScreen+0x78>)
 80029e2:	f004 ff38 	bl	8007856 <HAL_SPI_Transmit>
    for(uint32_t i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3301      	adds	r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80029f2:	d3f0      	bcc.n	80029d6 <LCD_FillScreen+0x46>
    }

    LCD_CS_HIGH();
 80029f4:	2201      	movs	r2, #1
 80029f6:	2108      	movs	r1, #8
 80029f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029fc:	f001 f80a 	bl	8003a14 <HAL_GPIO_WritePin>
}
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000344 	.word	0x20000344

08002a0c <LL_AHB2_GRP1_EnableClock>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a30:	68fb      	ldr	r3, [r7, #12]
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a5a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a62:	68fb      	ldr	r3, [r7, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002a76:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae8 <MX_SPI1_Init+0x78>)
 8002a78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002a7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a82:	4b18      	ldr	r3, [pc, #96]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a88:	4b16      	ldr	r3, [pc, #88]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002a8a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002a8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a90:	4b14      	ldr	r3, [pc, #80]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a96:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a9c:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002a9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aa2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002aa6:	2238      	movs	r2, #56	@ 0x38
 8002aa8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002abc:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002abe:	2207      	movs	r2, #7
 8002ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ac2:	4b08      	ldr	r3, [pc, #32]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ac8:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002aca:	2208      	movs	r2, #8
 8002acc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ace:	4805      	ldr	r0, [pc, #20]	@ (8002ae4 <MX_SPI1_Init+0x74>)
 8002ad0:	f004 fe1e 	bl	8007710 <HAL_SPI_Init>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002ada:	f7ff fd21 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000344 	.word	0x20000344
 8002ae8:	40013000 	.word	0x40013000

08002aec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 030c 	add.w	r3, r7, #12
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0f      	ldr	r2, [pc, #60]	@ (8002b48 <HAL_SPI_MspInit+0x5c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d117      	bne.n	8002b3e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b0e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002b12:	f7ff ff94 	bl	8002a3e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	2001      	movs	r0, #1
 8002b18:	f7ff ff78 	bl	8002a0c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b1c:	23e0      	movs	r3, #224	@ 0xe0
 8002b1e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b20:	2302      	movs	r3, #2
 8002b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b2c:	2305      	movs	r3, #5
 8002b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b30:	f107 030c 	add.w	r3, r7, #12
 8002b34:	4619      	mov	r1, r3
 8002b36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b3a:	f000 fdfb 	bl	8003734 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002b3e:	bf00      	nop
 8002b40:	3720      	adds	r7, #32
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40013000 	.word	0x40013000

08002b4c <LL_AHB3_GRP1_EnableClock>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b70:	68fb      	ldr	r3, [r7, #12]
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002b82:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002b86:	f7ff ffe1 	bl	8002b4c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	202e      	movs	r0, #46	@ 0x2e
 8002b90:	f000 fb4b 	bl	800322a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002b94:	202e      	movs	r0, #46	@ 0x2e
 8002b96:	f000 fb62 	bl	800325e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ba2:	bf00      	nop
 8002ba4:	e7fd      	b.n	8002ba2 <NMI_Handler+0x4>

08002ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002baa:	bf00      	nop
 8002bac:	e7fd      	b.n	8002baa <HardFault_Handler+0x4>

08002bae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb2:	bf00      	nop
 8002bb4:	e7fd      	b.n	8002bb2 <MemManage_Handler+0x4>

08002bb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bba:	bf00      	nop
 8002bbc:	e7fd      	b.n	8002bba <BusFault_Handler+0x4>

08002bbe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc2:	bf00      	nop
 8002bc4:	e7fd      	b.n	8002bc2 <UsageFault_Handler+0x4>

08002bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf4:	f000 f9a6 	bl	8002f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002c00:	f7fe ff8c 	bl	8001b1c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002c0c:	4802      	ldr	r0, [pc, #8]	@ (8002c18 <DMA1_Channel1_IRQHandler+0x10>)
 8002c0e:	f000 fca3 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000478 	.word	0x20000478

08002c1c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002c20:	4802      	ldr	r0, [pc, #8]	@ (8002c2c <USB_LP_IRQHandler+0x10>)
 8002c22:	f001 f9db 	bl	8003fdc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20001aec 	.word	0x20001aec

08002c30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c34:	4802      	ldr	r0, [pc, #8]	@ (8002c40 <USART1_IRQHandler+0x10>)
 8002c36:	f005 f969 	bl	8007f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200003ac 	.word	0x200003ac

08002c44 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002c48:	f00d fce8 	bl	801061c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002c54:	f00d fd18 	bl	8010688 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002c60:	f000 fef0 	bl	8003a44 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e00a      	b.n	8002c90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c7a:	f3af 8000 	nop.w
 8002c7e:	4601      	mov	r1, r0
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	60ba      	str	r2, [r7, #8]
 8002c86:	b2ca      	uxtb	r2, r1
 8002c88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	dbf0      	blt.n	8002c7a <_read+0x12>
  }

  return len;
 8002c98:	687b      	ldr	r3, [r7, #4]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cca:	605a      	str	r2, [r3, #4]
  return 0;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <_isatty>:

int _isatty(int file)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ce2:	2301      	movs	r3, #1
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d14:	4a14      	ldr	r2, [pc, #80]	@ (8002d68 <_sbrk+0x5c>)
 8002d16:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <_sbrk+0x60>)
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d20:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d28:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <_sbrk+0x64>)
 8002d2a:	4a12      	ldr	r2, [pc, #72]	@ (8002d74 <_sbrk+0x68>)
 8002d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d2e:	4b10      	ldr	r3, [pc, #64]	@ (8002d70 <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d207      	bcs.n	8002d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d3c:	f00f f842 	bl	8011dc4 <__errno>
 8002d40:	4603      	mov	r3, r0
 8002d42:	220c      	movs	r2, #12
 8002d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4a:	e009      	b.n	8002d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d4c:	4b08      	ldr	r3, [pc, #32]	@ (8002d70 <_sbrk+0x64>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d52:	4b07      	ldr	r3, [pc, #28]	@ (8002d70 <_sbrk+0x64>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a05      	ldr	r2, [pc, #20]	@ (8002d70 <_sbrk+0x64>)
 8002d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20030000 	.word	0x20030000
 8002d6c:	00000800 	.word	0x00000800
 8002d70:	200003a8 	.word	0x200003a8
 8002d74:	200021d8 	.word	0x200021d8

08002d78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002d7c:	4b24      	ldr	r3, [pc, #144]	@ (8002e10 <SystemInit+0x98>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d82:	4a23      	ldr	r2, [pc, #140]	@ (8002e10 <SystemInit+0x98>)
 8002d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002da4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002db0:	4b18      	ldr	r3, [pc, #96]	@ (8002e14 <SystemInit+0x9c>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dc2:	f023 0305 	bic.w	r3, r3, #5
 8002dc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dd2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002dde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002de2:	4a0d      	ldr	r2, [pc, #52]	@ (8002e18 <SystemInit+0xa0>)
 8002de4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dea:	4a0b      	ldr	r2, [pc, #44]	@ (8002e18 <SystemInit+0xa0>)
 8002dec:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002dee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002df8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dfc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e02:	2200      	movs	r2, #0
 8002e04:	619a      	str	r2, [r3, #24]
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000ed00 	.word	0xe000ed00
 8002e14:	faf6fefb 	.word	0xfaf6fefb
 8002e18:	22041000 	.word	0x22041000

08002e1c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002e1c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e1e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e20:	3304      	adds	r3, #4

08002e22 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e22:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e24:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002e26:	d3f9      	bcc.n	8002e1c <CopyDataInit>
  bx lr
 8002e28:	4770      	bx	lr

08002e2a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002e2a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002e2c:	3004      	adds	r0, #4

08002e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002e2e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002e30:	d3fb      	bcc.n	8002e2a <FillZerobss>
  bx lr
 8002e32:	4770      	bx	lr

08002e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e34:	480c      	ldr	r0, [pc, #48]	@ (8002e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e36:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e38:	f7ff ff9e 	bl	8002d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002e3c:	480b      	ldr	r0, [pc, #44]	@ (8002e6c <LoopForever+0x6>)
 8002e3e:	490c      	ldr	r1, [pc, #48]	@ (8002e70 <LoopForever+0xa>)
 8002e40:	4a0c      	ldr	r2, [pc, #48]	@ (8002e74 <LoopForever+0xe>)
 8002e42:	2300      	movs	r3, #0
 8002e44:	f7ff ffed 	bl	8002e22 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002e48:	480b      	ldr	r0, [pc, #44]	@ (8002e78 <LoopForever+0x12>)
 8002e4a:	490c      	ldr	r1, [pc, #48]	@ (8002e7c <LoopForever+0x16>)
 8002e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8002e80 <LoopForever+0x1a>)
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f7ff ffe7 	bl	8002e22 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002e54:	480b      	ldr	r0, [pc, #44]	@ (8002e84 <LoopForever+0x1e>)
 8002e56:	490c      	ldr	r1, [pc, #48]	@ (8002e88 <LoopForever+0x22>)
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f7ff ffe8 	bl	8002e2e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e5e:	f00e ffb7 	bl	8011dd0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002e62:	f7ff fa95 	bl	8002390 <main>

08002e66 <LoopForever>:

LoopForever:
  b LoopForever
 8002e66:	e7fe      	b.n	8002e66 <LoopForever>
  ldr   r0, =_estack
 8002e68:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002e6c:	20000008 	.word	0x20000008
 8002e70:	20000184 	.word	0x20000184
 8002e74:	080141b0 	.word	0x080141b0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002e78:	200301e4 	.word	0x200301e4
 8002e7c:	20030a67 	.word	0x20030a67
 8002e80:	08014372 	.word	0x08014372
  INIT_BSS _sbss, _ebss
 8002e84:	200001d0 	.word	0x200001d0
 8002e88:	200021d4 	.word	0x200021d4

08002e8c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e8c:	e7fe      	b.n	8002e8c <ADC1_IRQHandler>
	...

08002e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <HAL_Init+0x3c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a0b      	ldr	r2, [pc, #44]	@ (8002ecc <HAL_Init+0x3c>)
 8002ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea6:	2003      	movs	r0, #3
 8002ea8:	f000 f9b4 	bl	8003214 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eac:	200f      	movs	r0, #15
 8002eae:	f000 f80f 	bl	8002ed0 <HAL_InitTick>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	71fb      	strb	r3, [r7, #7]
 8002ebc:	e001      	b.n	8002ec2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ebe:	f7ff fe5e 	bl	8002b7e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	58004000 	.word	0x58004000

08002ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002edc:	4b17      	ldr	r3, [pc, #92]	@ (8002f3c <HAL_InitTick+0x6c>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d024      	beq.n	8002f2e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ee4:	f003 fd38 	bl	8006958 <HAL_RCC_GetHCLKFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <HAL_InitTick+0x6c>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ef4:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 f9ca 	bl	8003296 <HAL_SYSTICK_Config>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10f      	bne.n	8002f28 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b0f      	cmp	r3, #15
 8002f0c:	d809      	bhi.n	8002f22 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	f04f 30ff 	mov.w	r0, #4294967295
 8002f16:	f000 f988 	bl	800322a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f1a:	4a09      	ldr	r2, [pc, #36]	@ (8002f40 <HAL_InitTick+0x70>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	e007      	b.n	8002f32 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	e004      	b.n	8002f32 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
 8002f2c:	e001      	b.n	8002f32 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000010 	.word	0x20000010
 8002f40:	2000000c 	.word	0x2000000c

08002f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f48:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <HAL_IncTick+0x20>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <HAL_IncTick+0x24>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4413      	add	r3, r2
 8002f54:	4a04      	ldr	r2, [pc, #16]	@ (8002f68 <HAL_IncTick+0x24>)
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000010 	.word	0x20000010
 8002f68:	200004d8 	.word	0x200004d8

08002f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f70:	4b03      	ldr	r3, [pc, #12]	@ (8002f80 <HAL_GetTick+0x14>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	200004d8 	.word	0x200004d8

08002f84 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002f88:	4b03      	ldr	r3, [pc, #12]	@ (8002f98 <HAL_GetTickPrio+0x14>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	2000000c 	.word	0x2000000c

08002f9c <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	@ (8002fb0 <HAL_GetTickFreq+0x14>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000010 	.word	0x20000010

08002fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe6:	4a04      	ldr	r2, [pc, #16]	@ (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	60d3      	str	r3, [r2, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003000:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <__NVIC_GetPriorityGrouping+0x18>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	f003 0307 	and.w	r3, r3, #7
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	2b00      	cmp	r3, #0
 8003028:	db0b      	blt.n	8003042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	4907      	ldr	r1, [pc, #28]	@ (8003050 <__NVIC_EnableIRQ+0x38>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2001      	movs	r0, #1
 800303a:	fa00 f202 	lsl.w	r2, r0, r2
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e100 	.word	0xe000e100

08003054 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db12      	blt.n	800308c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	490a      	ldr	r1, [pc, #40]	@ (8003098 <__NVIC_DisableIRQ+0x44>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	3320      	adds	r3, #32
 800307c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003080:	f3bf 8f4f 	dsb	sy
}
 8003084:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003086:	f3bf 8f6f 	isb	sy
}
 800308a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000e100 	.word	0xe000e100

0800309c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	db0c      	blt.n	80030c8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	4907      	ldr	r1, [pc, #28]	@ (80030d4 <__NVIC_SetPendingIRQ+0x38>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2001      	movs	r0, #1
 80030be:	fa00 f202 	lsl.w	r2, r0, r2
 80030c2:	3340      	adds	r3, #64	@ 0x40
 80030c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100

080030d8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	db0c      	blt.n	8003104 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	4907      	ldr	r1, [pc, #28]	@ (8003110 <__NVIC_ClearPendingIRQ+0x38>)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2001      	movs	r0, #1
 80030fa:	fa00 f202 	lsl.w	r2, r0, r2
 80030fe:	3360      	adds	r3, #96	@ 0x60
 8003100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000e100 	.word	0xe000e100

08003114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	6039      	str	r1, [r7, #0]
 800311e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	2b00      	cmp	r3, #0
 8003126:	db0a      	blt.n	800313e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	b2da      	uxtb	r2, r3
 800312c:	490c      	ldr	r1, [pc, #48]	@ (8003160 <__NVIC_SetPriority+0x4c>)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	440b      	add	r3, r1
 8003138:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800313c:	e00a      	b.n	8003154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4908      	ldr	r1, [pc, #32]	@ (8003164 <__NVIC_SetPriority+0x50>)
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	3b04      	subs	r3, #4
 800314c:	0112      	lsls	r2, r2, #4
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	440b      	add	r3, r1
 8003152:	761a      	strb	r2, [r3, #24]
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000e100 	.word	0xe000e100
 8003164:	e000ed00 	.word	0xe000ed00

08003168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003168:	b480      	push	{r7}
 800316a:	b089      	sub	sp, #36	@ 0x24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f1c3 0307 	rsb	r3, r3, #7
 8003182:	2b04      	cmp	r3, #4
 8003184:	bf28      	it	cs
 8003186:	2304      	movcs	r3, #4
 8003188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3304      	adds	r3, #4
 800318e:	2b06      	cmp	r3, #6
 8003190:	d902      	bls.n	8003198 <NVIC_EncodePriority+0x30>
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3b03      	subs	r3, #3
 8003196:	e000      	b.n	800319a <NVIC_EncodePriority+0x32>
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800319c:	f04f 32ff 	mov.w	r2, #4294967295
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	401a      	ands	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b0:	f04f 31ff 	mov.w	r1, #4294967295
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ba:	43d9      	mvns	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	4313      	orrs	r3, r2
         );
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3724      	adds	r7, #36	@ 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3b01      	subs	r3, #1
 80031dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031e0:	d301      	bcc.n	80031e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e2:	2301      	movs	r3, #1
 80031e4:	e00f      	b.n	8003206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003210 <SysTick_Config+0x40>)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ee:	210f      	movs	r1, #15
 80031f0:	f04f 30ff 	mov.w	r0, #4294967295
 80031f4:	f7ff ff8e 	bl	8003114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f8:	4b05      	ldr	r3, [pc, #20]	@ (8003210 <SysTick_Config+0x40>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fe:	4b04      	ldr	r3, [pc, #16]	@ (8003210 <SysTick_Config+0x40>)
 8003200:	2207      	movs	r2, #7
 8003202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	e000e010 	.word	0xe000e010

08003214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fec9 	bl	8002fb4 <__NVIC_SetPriorityGrouping>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003238:	f7ff fee0 	bl	8002ffc <__NVIC_GetPriorityGrouping>
 800323c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	6978      	ldr	r0, [r7, #20]
 8003244:	f7ff ff90 	bl	8003168 <NVIC_EncodePriority>
 8003248:	4602      	mov	r2, r0
 800324a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff5f 	bl	8003114 <__NVIC_SetPriority>
}
 8003256:	bf00      	nop
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fed3 	bl	8003018 <__NVIC_EnableIRQ>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fee3 	bl	8003054 <__NVIC_DisableIRQ>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ff96 	bl	80031d0 <SysTick_Config>
 80032a4:	4603      	mov	r3, r0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4603      	mov	r3, r0
 80032b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff feed 	bl	800309c <__NVIC_SetPendingIRQ>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	4603      	mov	r3, r0
 80032d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80032d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fefd 	bl	80030d8 <__NVIC_ClearPendingIRQ>
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b086      	sub	sp, #24
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_DMA_Start_IT+0x20>
 8003302:	2302      	movs	r3, #2
 8003304:	e066      	b.n	80033d4 <HAL_DMA_Start_IT+0xee>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	d155      	bne.n	80033c6 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2202      	movs	r2, #2
 800331e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f9b9 	bl	80036b6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 020e 	orr.w	r2, r2, #14
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	e00f      	b.n	800337e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0204 	bic.w	r2, r2, #4
 800336c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 020a 	orr.w	r2, r2, #10
 800337c:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003396:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800339a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d007      	beq.n	80033b4 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033b2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e005      	b.n	80033d2 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
 80033d0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e04f      	b.n	800348e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d008      	beq.n	800340c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2204      	movs	r2, #4
 80033fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e040      	b.n	800348e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 020e 	bic.w	r2, r2, #14
 800341a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003426:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800342a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003440:	f003 021c 	and.w	r2, r3, #28
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	2101      	movs	r1, #1
 800344a:	fa01 f202 	lsl.w	r2, r1, r2
 800344e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003458:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00c      	beq.n	800347c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003470:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800347a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d005      	beq.n	80034be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2204      	movs	r2, #4
 80034b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e047      	b.n	800354e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 020e 	bic.w	r2, r2, #14
 80034cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f2:	f003 021c 	and.w	r2, r3, #28
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	2101      	movs	r1, #1
 80034fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003500:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800350a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00c      	beq.n	800352e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003522:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800352c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	4798      	blx	r3
    }
  }
  return status;
 800354e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003574:	f003 031c 	and.w	r3, r3, #28
 8003578:	2204      	movs	r2, #4
 800357a:	409a      	lsls	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d026      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x7a>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	d021      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d107      	bne.n	80035ac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0204 	bic.w	r2, r2, #4
 80035aa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b0:	f003 021c 	and.w	r2, r3, #28
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b8:	2104      	movs	r1, #4
 80035ba:	fa01 f202 	lsl.w	r2, r1, r2
 80035be:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d071      	beq.n	80036ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035d0:	e06c      	b.n	80036ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d6:	f003 031c 	and.w	r3, r3, #28
 80035da:	2202      	movs	r2, #2
 80035dc:	409a      	lsls	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d02e      	beq.n	8003644 <HAL_DMA_IRQHandler+0xec>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d029      	beq.n	8003644 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 020a 	bic.w	r2, r2, #10
 800360c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361a:	f003 021c 	and.w	r2, r3, #28
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	2102      	movs	r1, #2
 8003624:	fa01 f202 	lsl.w	r2, r1, r2
 8003628:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d038      	beq.n	80036ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003642:	e033      	b.n	80036ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003648:	f003 031c 	and.w	r3, r3, #28
 800364c:	2208      	movs	r2, #8
 800364e:	409a      	lsls	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d02a      	beq.n	80036ae <HAL_DMA_IRQHandler+0x156>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f003 0308 	and.w	r3, r3, #8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d025      	beq.n	80036ae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 020e 	bic.w	r2, r2, #14
 8003670:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	f003 021c 	and.w	r2, r3, #28
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	2101      	movs	r1, #1
 8003680:	fa01 f202 	lsl.w	r2, r1, r2
 8003684:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d004      	beq.n	80036ae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
}
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
 80036c2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036cc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036de:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e4:	f003 021c 	and.w	r2, r3, #28
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	2101      	movs	r1, #1
 80036ee:	fa01 f202 	lsl.w	r2, r1, r2
 80036f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b10      	cmp	r3, #16
 8003702:	d108      	bne.n	8003716 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003714:	e007      	b.n	8003726 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	60da      	str	r2, [r3, #12]
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003742:	e14c      	b.n	80039de <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	2101      	movs	r1, #1
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	4013      	ands	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 813e 	beq.w	80039d8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d005      	beq.n	8003774 <HAL_GPIO_Init+0x40>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d130      	bne.n	80037d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	2203      	movs	r2, #3
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037aa:	2201      	movs	r2, #1
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	091b      	lsrs	r3, r3, #4
 80037c0:	f003 0201 	and.w	r2, r3, #1
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d017      	beq.n	8003812 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	2203      	movs	r2, #3
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43db      	mvns	r3, r3
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4013      	ands	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d123      	bne.n	8003866 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	08da      	lsrs	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3208      	adds	r2, #8
 8003826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800382a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	220f      	movs	r2, #15
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4013      	ands	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	08da      	lsrs	r2, r3, #3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3208      	adds	r2, #8
 8003860:	6939      	ldr	r1, [r7, #16]
 8003862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	2203      	movs	r2, #3
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4013      	ands	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 0203 	and.w	r2, r3, #3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8098 	beq.w	80039d8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80038a8:	4a54      	ldr	r2, [pc, #336]	@ (80039fc <HAL_GPIO_Init+0x2c8>)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	089b      	lsrs	r3, r3, #2
 80038ae:	3302      	adds	r3, #2
 80038b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	220f      	movs	r2, #15
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80038d2:	d019      	beq.n	8003908 <HAL_GPIO_Init+0x1d4>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003a00 <HAL_GPIO_Init+0x2cc>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d013      	beq.n	8003904 <HAL_GPIO_Init+0x1d0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a49      	ldr	r2, [pc, #292]	@ (8003a04 <HAL_GPIO_Init+0x2d0>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d00d      	beq.n	8003900 <HAL_GPIO_Init+0x1cc>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a48      	ldr	r2, [pc, #288]	@ (8003a08 <HAL_GPIO_Init+0x2d4>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d007      	beq.n	80038fc <HAL_GPIO_Init+0x1c8>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a47      	ldr	r2, [pc, #284]	@ (8003a0c <HAL_GPIO_Init+0x2d8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d101      	bne.n	80038f8 <HAL_GPIO_Init+0x1c4>
 80038f4:	2304      	movs	r3, #4
 80038f6:	e008      	b.n	800390a <HAL_GPIO_Init+0x1d6>
 80038f8:	2307      	movs	r3, #7
 80038fa:	e006      	b.n	800390a <HAL_GPIO_Init+0x1d6>
 80038fc:	2303      	movs	r3, #3
 80038fe:	e004      	b.n	800390a <HAL_GPIO_Init+0x1d6>
 8003900:	2302      	movs	r3, #2
 8003902:	e002      	b.n	800390a <HAL_GPIO_Init+0x1d6>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <HAL_GPIO_Init+0x1d6>
 8003908:	2300      	movs	r3, #0
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	f002 0203 	and.w	r2, r2, #3
 8003910:	0092      	lsls	r2, r2, #2
 8003912:	4093      	lsls	r3, r2
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800391a:	4938      	ldr	r1, [pc, #224]	@ (80039fc <HAL_GPIO_Init+0x2c8>)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	3302      	adds	r3, #2
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003928:	4b39      	ldr	r3, [pc, #228]	@ (8003a10 <HAL_GPIO_Init+0x2dc>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	43db      	mvns	r3, r3
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4013      	ands	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800394c:	4a30      	ldr	r2, [pc, #192]	@ (8003a10 <HAL_GPIO_Init+0x2dc>)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003952:	4b2f      	ldr	r3, [pc, #188]	@ (8003a10 <HAL_GPIO_Init+0x2dc>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	43db      	mvns	r3, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4013      	ands	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003976:	4a26      	ldr	r2, [pc, #152]	@ (8003a10 <HAL_GPIO_Init+0x2dc>)
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800397c:	4b24      	ldr	r3, [pc, #144]	@ (8003a10 <HAL_GPIO_Init+0x2dc>)
 800397e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	43db      	mvns	r3, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003a10 <HAL_GPIO_Init+0x2dc>)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80039aa:	4b19      	ldr	r3, [pc, #100]	@ (8003a10 <HAL_GPIO_Init+0x2dc>)
 80039ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003a10 <HAL_GPIO_Init+0x2dc>)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3301      	adds	r3, #1
 80039dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f47f aeab 	bne.w	8003744 <HAL_GPIO_Init+0x10>
  }
}
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40010000 	.word	0x40010000
 8003a00:	48000400 	.word	0x48000400
 8003a04:	48000800 	.word	0x48000800
 8003a08:	48000c00 	.word	0x48000c00
 8003a0c:	48001000 	.word	0x48001000
 8003a10:	58000800 	.word	0x58000800

08003a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	807b      	strh	r3, [r7, #2]
 8003a20:	4613      	mov	r3, r2
 8003a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a24:	787b      	ldrb	r3, [r7, #1]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a2a:	887a      	ldrh	r2, [r7, #2]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a30:	e002      	b.n	8003a38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a74 <HAL_HSEM_IRQHandler+0x30>)
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003a50:	4b08      	ldr	r3, [pc, #32]	@ (8003a74 <HAL_HSEM_IRQHandler+0x30>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	4906      	ldr	r1, [pc, #24]	@ (8003a74 <HAL_HSEM_IRQHandler+0x30>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003a5e:	4a05      	ldr	r2, [pc, #20]	@ (8003a74 <HAL_HSEM_IRQHandler+0x30>)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f807 	bl	8003a78 <HAL_HSEM_FreeCallback>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	58001500 	.word	0x58001500

08003a78 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e08d      	b.n	8003bba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fe fba4 	bl	8002200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2224      	movs	r2, #36	@ 0x24
 8003abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0201 	bic.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003adc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d107      	bne.n	8003b06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	e006      	b.n	8003b14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d108      	bne.n	8003b2e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	e007      	b.n	8003b3e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69d9      	ldr	r1, [r3, #28]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1a      	ldr	r2, [r3, #32]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d138      	bne.n	8003c4a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003be2:	2302      	movs	r3, #2
 8003be4:	e032      	b.n	8003c4c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2224      	movs	r2, #36	@ 0x24
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0201 	bic.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c14:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6819      	ldr	r1, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e000      	b.n	8003c4c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c4a:	2302      	movs	r3, #2
  }
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b20      	cmp	r3, #32
 8003c6c:	d139      	bne.n	8003ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e033      	b.n	8003ce4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2224      	movs	r2, #36	@ 0x24
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003caa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0201 	orr.w	r2, r2, #1
 8003ccc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e000      	b.n	8003ce4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
  }
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01e      	beq.n	8003d40 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003d02:	4b13      	ldr	r3, [pc, #76]	@ (8003d50 <HAL_IPCC_Init+0x60>)
 8003d04:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d102      	bne.n	8003d18 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fe faea 	bl	80022ec <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003d18:	68b8      	ldr	r0, [r7, #8]
 8003d1a:	f000 f85b 	bl	8003dd4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f82c 	bl	8003d88 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8003d3e:	e001      	b.n	8003d44 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	58000c00 	.word	0x58000c00

08003d54 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	e00f      	b.n	8003db6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	4a0b      	ldr	r2, [pc, #44]	@ (8003dcc <IPCC_SetDefaultCallbacks+0x44>)
 8003da0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3306      	adds	r3, #6
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	4a08      	ldr	r2, [pc, #32]	@ (8003dd0 <IPCC_SetDefaultCallbacks+0x48>)
 8003dae:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3301      	adds	r3, #1
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b05      	cmp	r3, #5
 8003dba:	d9ec      	bls.n	8003d96 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	08003d55 	.word	0x08003d55
 8003dd0:	08003d6f 	.word	0x08003d6f

08003dd4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8003de8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	223f      	movs	r2, #63	@ 0x3f
 8003dee:	609a      	str	r2, [r3, #8]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e0c0      	b.n	8003f90 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f00c ffc6 	bl	8010db4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f004 fd5d 	bl	80088f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	73fb      	strb	r3, [r7, #15]
 8003e3e:	e03e      	b.n	8003ebe <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e40:	7bfa      	ldrb	r2, [r7, #15]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	440b      	add	r3, r1
 8003e4e:	3311      	adds	r3, #17
 8003e50:	2201      	movs	r2, #1
 8003e52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e54:	7bfa      	ldrb	r2, [r7, #15]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	440b      	add	r3, r1
 8003e62:	3310      	adds	r3, #16
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	3313      	adds	r3, #19
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e7c:	7bfa      	ldrb	r2, [r7, #15]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	440b      	add	r3, r1
 8003e8a:	3320      	adds	r3, #32
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	440b      	add	r3, r1
 8003e9e:	3324      	adds	r3, #36	@ 0x24
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	440b      	add	r3, r1
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	73fb      	strb	r3, [r7, #15]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	791b      	ldrb	r3, [r3, #4]
 8003ec2:	7bfa      	ldrb	r2, [r7, #15]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d3bb      	bcc.n	8003e40 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	73fb      	strb	r3, [r7, #15]
 8003ecc:	e044      	b.n	8003f58 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ece:	7bfa      	ldrb	r2, [r7, #15]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	440b      	add	r3, r1
 8003edc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	440b      	add	r3, r1
 8003ef2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ef6:	7bfa      	ldrb	r2, [r7, #15]
 8003ef8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	440b      	add	r3, r1
 8003f08:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f10:	7bfa      	ldrb	r2, [r7, #15]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	440b      	add	r3, r1
 8003f1e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f26:	7bfa      	ldrb	r2, [r7, #15]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	440b      	add	r3, r1
 8003f34:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f3c:	7bfa      	ldrb	r2, [r7, #15]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	440b      	add	r3, r1
 8003f4a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	3301      	adds	r3, #1
 8003f56:	73fb      	strb	r3, [r7, #15]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	791b      	ldrb	r3, [r3, #4]
 8003f5c:	7bfa      	ldrb	r2, [r7, #15]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d3b5      	bcc.n	8003ece <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003f6e:	f004 fcdc 	bl	800892a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	7a9b      	ldrb	r3, [r3, #10]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d102      	bne.n	8003f8e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f001 fc0e 	bl	80057aa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_PCD_Start+0x16>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e012      	b.n	8003fd4 <HAL_PCD_Start+0x3c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 fc83 	bl	80088c6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f006 fa61 	bl	800a48c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f006 fa66 	bl	800a4ba <USB_ReadInterrupts>
 8003fee:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fb06 	bl	800460c <PCD_EP_ISR_Handler>

    return;
 8004000:	e110      	b.n	8004224 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004014:	b29a      	uxth	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800401e:	b292      	uxth	r2, r2
 8004020:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f00c ff78 	bl	8010f1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800402a:	2100      	movs	r1, #0
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f8fc 	bl	800422a <HAL_PCD_SetAddress>

    return;
 8004032:	e0f7      	b.n	8004224 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00c      	beq.n	8004058 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004046:	b29a      	uxth	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004050:	b292      	uxth	r2, r2
 8004052:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004056:	e0e5      	b.n	8004224 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00c      	beq.n	800407c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800406a:	b29a      	uxth	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004074:	b292      	uxth	r2, r2
 8004076:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800407a:	e0d3      	b.n	8004224 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d034      	beq.n	80040f0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800408e:	b29a      	uxth	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f022 0204 	bic.w	r2, r2, #4
 8004098:	b292      	uxth	r2, r2
 800409a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0208 	bic.w	r2, r2, #8
 80040b0:	b292      	uxth	r2, r2
 80040b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d107      	bne.n	80040d0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040c8:	2100      	movs	r1, #0
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f00d f91a 	bl	8011304 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f00c ff5b 	bl	8010f8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80040de:	b29a      	uxth	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040e8:	b292      	uxth	r2, r2
 80040ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80040ee:	e099      	b.n	8004224 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d027      	beq.n	800414a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004102:	b29a      	uxth	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0208 	orr.w	r2, r2, #8
 800410c:	b292      	uxth	r2, r2
 800410e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800411a:	b29a      	uxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004124:	b292      	uxth	r2, r2
 8004126:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004132:	b29a      	uxth	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0204 	orr.w	r2, r2, #4
 800413c:	b292      	uxth	r2, r2
 800413e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f00c ff08 	bl	8010f58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004148:	e06c      	b.n	8004224 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004150:	2b00      	cmp	r3, #0
 8004152:	d040      	beq.n	80041d6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800415c:	b29a      	uxth	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004166:	b292      	uxth	r2, r2
 8004168:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d12b      	bne.n	80041ce <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0204 	orr.w	r2, r2, #4
 8004188:	b292      	uxth	r2, r2
 800418a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0208 	orr.w	r2, r2, #8
 80041a0:	b292      	uxth	r2, r2
 80041a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	089b      	lsrs	r3, r3, #2
 80041ba:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80041c4:	2101      	movs	r1, #1
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f00d f89c 	bl	8011304 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80041cc:	e02a      	b.n	8004224 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f00c fec2 	bl	8010f58 <HAL_PCD_SuspendCallback>
    return;
 80041d4:	e026      	b.n	8004224 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00f      	beq.n	8004200 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80041f2:	b292      	uxth	r2, r2
 80041f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f00c fe80 	bl	8010efe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80041fe:	e011      	b.n	8004224 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00c      	beq.n	8004224 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004212:	b29a      	uxth	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800421c:	b292      	uxth	r2, r2
 800421e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004222:	bf00      	nop
  }
}
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	460b      	mov	r3, r1
 8004234:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_PCD_SetAddress+0x1a>
 8004240:	2302      	movs	r3, #2
 8004242:	e012      	b.n	800426a <HAL_PCD_SetAddress+0x40>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	4611      	mov	r1, r2
 800425a:	4618      	mov	r0, r3
 800425c:	f006 f902 	bl	800a464 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	4608      	mov	r0, r1
 800427c:	4611      	mov	r1, r2
 800427e:	461a      	mov	r2, r3
 8004280:	4603      	mov	r3, r0
 8004282:	70fb      	strb	r3, [r7, #3]
 8004284:	460b      	mov	r3, r1
 8004286:	803b      	strh	r3, [r7, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004294:	2b00      	cmp	r3, #0
 8004296:	da0e      	bge.n	80042b6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	f003 0207 	and.w	r2, r3, #7
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	3310      	adds	r3, #16
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	4413      	add	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	705a      	strb	r2, [r3, #1]
 80042b4:	e00e      	b.n	80042d4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	f003 0207 	and.w	r2, r3, #7
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4413      	add	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80042e0:	883b      	ldrh	r3, [r7, #0]
 80042e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	78ba      	ldrb	r2, [r7, #2]
 80042ee:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042f0:	78bb      	ldrb	r3, [r7, #2]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d102      	bne.n	80042fc <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_PCD_EP_Open+0x98>
 8004306:	2302      	movs	r3, #2
 8004308:	e00e      	b.n	8004328 <HAL_PCD_EP_Open+0xb6>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68f9      	ldr	r1, [r7, #12]
 8004318:	4618      	mov	r0, r3
 800431a:	f004 fb25 	bl	8008968 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004326:	7afb      	ldrb	r3, [r7, #11]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800433c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004340:	2b00      	cmp	r3, #0
 8004342:	da0e      	bge.n	8004362 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	f003 0207 	and.w	r2, r3, #7
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	3310      	adds	r3, #16
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	705a      	strb	r2, [r3, #1]
 8004360:	e00e      	b.n	8004380 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	f003 0207 	and.w	r2, r3, #7
 8004368:	4613      	mov	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	4413      	add	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	b2da      	uxtb	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_PCD_EP_Close+0x6a>
 8004396:	2302      	movs	r3, #2
 8004398:	e00e      	b.n	80043b8 <HAL_PCD_EP_Close+0x88>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68f9      	ldr	r1, [r7, #12]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f004 ffc5 	bl	8009338 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	460b      	mov	r3, r1
 80043ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043d0:	7afb      	ldrb	r3, [r7, #11]
 80043d2:	f003 0207 	and.w	r2, r3, #7
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2200      	movs	r2, #0
 80043f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2200      	movs	r2, #0
 80043fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004400:	7afb      	ldrb	r3, [r7, #11]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	b2da      	uxtb	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6979      	ldr	r1, [r7, #20]
 8004412:	4618      	mov	r0, r3
 8004414:	f005 f97d 	bl	8009712 <USB_EPStartXfer>

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	f003 0207 	and.w	r2, r3, #7
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	440b      	add	r3, r1
 8004440:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004444:	681b      	ldr	r3, [r3, #0]
}
 8004446:	4618      	mov	r0, r3
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b086      	sub	sp, #24
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
 800445e:	460b      	mov	r3, r1
 8004460:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004462:	7afb      	ldrb	r3, [r7, #11]
 8004464:	f003 0207 	and.w	r2, r3, #7
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	3310      	adds	r3, #16
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2201      	movs	r2, #1
 800449c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800449e:	7afb      	ldrb	r3, [r7, #11]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6979      	ldr	r1, [r7, #20]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f005 f92e 	bl	8009712 <USB_EPStartXfer>

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	7912      	ldrb	r2, [r2, #4]
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e03e      	b.n	800455c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	da0e      	bge.n	8004504 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	f003 0207 	and.w	r2, r3, #7
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	3310      	adds	r3, #16
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	705a      	strb	r2, [r3, #1]
 8004502:	e00c      	b.n	800451e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	4413      	add	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004524:	78fb      	ldrb	r3, [r7, #3]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	b2da      	uxtb	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_PCD_EP_SetStall+0x7e>
 800453a:	2302      	movs	r3, #2
 800453c:	e00e      	b.n	800455c <HAL_PCD_EP_SetStall+0x9c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68f9      	ldr	r1, [r7, #12]
 800454c:	4618      	mov	r0, r3
 800454e:	f005 fe8f 	bl	800a270 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	7912      	ldrb	r2, [r2, #4]
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e040      	b.n	8004604 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004586:	2b00      	cmp	r3, #0
 8004588:	da0e      	bge.n	80045a8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800458a:	78fb      	ldrb	r3, [r7, #3]
 800458c:	f003 0207 	and.w	r2, r3, #7
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	3310      	adds	r3, #16
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	4413      	add	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	705a      	strb	r2, [r3, #1]
 80045a6:	e00e      	b.n	80045c6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	f003 0207 	and.w	r2, r3, #7
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045cc:	78fb      	ldrb	r3, [r7, #3]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <HAL_PCD_EP_ClrStall+0x82>
 80045e2:	2302      	movs	r3, #2
 80045e4:	e00e      	b.n	8004604 <HAL_PCD_EP_ClrStall+0xa0>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68f9      	ldr	r1, [r7, #12]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f005 fe8c 	bl	800a312 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b092      	sub	sp, #72	@ 0x48
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004614:	e333      	b.n	8004c7e <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800461e:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004620:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004622:	b2db      	uxtb	r3, r3
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800462c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004630:	2b00      	cmp	r3, #0
 8004632:	f040 8108 	bne.w	8004846 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004636:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b00      	cmp	r3, #0
 800463e:	d14c      	bne.n	80046da <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800464c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004650:	813b      	strh	r3, [r7, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	893b      	ldrh	r3, [r7, #8]
 8004658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800465c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004660:	b29b      	uxth	r3, r3
 8004662:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3310      	adds	r3, #16
 8004668:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004672:	b29b      	uxth	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	4413      	add	r3, r2
 8004684:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800468e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004690:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004694:	695a      	ldr	r2, [r3, #20]
 8004696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	441a      	add	r2, r3
 800469c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800469e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80046a0:	2100      	movs	r1, #0
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f00c fc11 	bl	8010eca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	7b1b      	ldrb	r3, [r3, #12]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 82e5 	beq.w	8004c7e <PCD_EP_ISR_Handler+0x672>
 80046b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f040 82e0 	bne.w	8004c7e <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	7b1b      	ldrb	r3, [r3, #12]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	731a      	strb	r2, [r3, #12]
 80046d8:	e2d1      	b.n	8004c7e <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80046e0:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80046ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80046ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d032      	beq.n	800475a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	4413      	add	r3, r2
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	4413      	add	r3, r2
 800470e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800471a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004728:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800472a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800472c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800472e:	b29b      	uxth	r3, r3
 8004730:	f005 ff16 	bl	800a560 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29a      	uxth	r2, r3
 800473c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004740:	4013      	ands	r3, r2
 8004742:	817b      	strh	r3, [r7, #10]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	897a      	ldrh	r2, [r7, #10]
 800474a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800474e:	b292      	uxth	r2, r2
 8004750:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f00c fb8c 	bl	8010e70 <HAL_PCD_SetupStageCallback>
 8004758:	e291      	b.n	8004c7e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800475a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800475e:	2b00      	cmp	r3, #0
 8004760:	f280 828d 	bge.w	8004c7e <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29a      	uxth	r2, r3
 800476c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004770:	4013      	ands	r3, r2
 8004772:	81fb      	strh	r3, [r7, #14]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	89fa      	ldrh	r2, [r7, #14]
 800477a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800477e:	b292      	uxth	r2, r2
 8004780:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800478a:	b29b      	uxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	4413      	add	r3, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	4413      	add	r3, r2
 800479c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047a8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80047aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d019      	beq.n	80047e6 <PCD_EP_ISR_Handler+0x1da>
 80047b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d015      	beq.n	80047e6 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047c0:	6959      	ldr	r1, [r3, #20]
 80047c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047c4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80047c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047c8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f005 fec8 	bl	800a560 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80047d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047d2:	695a      	ldr	r2, [r3, #20]
 80047d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	441a      	add	r2, r3
 80047da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047dc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80047de:	2100      	movs	r1, #0
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f00c fb57 	bl	8010e94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80047ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80047f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f040 8242 	bne.w	8004c7e <PCD_EP_ISR_Handler+0x672>
 80047fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80047fc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004800:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004804:	f000 823b 	beq.w	8004c7e <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	b29b      	uxth	r3, r3
 8004810:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004818:	81bb      	strh	r3, [r7, #12]
 800481a:	89bb      	ldrh	r3, [r7, #12]
 800481c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004820:	81bb      	strh	r3, [r7, #12]
 8004822:	89bb      	ldrh	r3, [r7, #12]
 8004824:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004828:	81bb      	strh	r3, [r7, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	89bb      	ldrh	r3, [r7, #12]
 8004830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004838:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800483c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004840:	b29b      	uxth	r3, r3
 8004842:	8013      	strh	r3, [r2, #0]
 8004844:	e21b      	b.n	8004c7e <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004858:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800485c:	2b00      	cmp	r3, #0
 800485e:	f280 80f1 	bge.w	8004a44 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	461a      	mov	r2, r3
 8004868:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	b29a      	uxth	r2, r3
 8004874:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004878:	4013      	ands	r3, r2
 800487a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800488c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004890:	b292      	uxth	r2, r2
 8004892:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004894:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	4413      	add	r3, r2
 80048a8:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80048aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048ac:	7b1b      	ldrb	r3, [r3, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d123      	bne.n	80048fa <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	4413      	add	r3, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	4413      	add	r3, r2
 80048cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 80048da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 808b 	beq.w	80049fa <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048ea:	6959      	ldr	r1, [r3, #20]
 80048ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048ee:	88da      	ldrh	r2, [r3, #6]
 80048f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80048f4:	f005 fe34 	bl	800a560 <USB_ReadPMA>
 80048f8:	e07f      	b.n	80049fa <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80048fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048fc:	78db      	ldrb	r3, [r3, #3]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d109      	bne.n	8004916 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004902:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004904:	461a      	mov	r2, r3
 8004906:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f9c6 	bl	8004c9a <HAL_PCD_EP_DB_Receive>
 800490e:	4603      	mov	r3, r0
 8004910:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004914:	e071      	b.n	80049fa <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800492c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004930:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	441a      	add	r2, r3
 8004940:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004942:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800494a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800494e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d022      	beq.n	80049b6 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004978:	b29b      	uxth	r3, r3
 800497a:	461a      	mov	r2, r3
 800497c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	4413      	add	r3, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	4413      	add	r3, r2
 800498a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004994:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8004998:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800499c:	2b00      	cmp	r3, #0
 800499e:	d02c      	beq.n	80049fa <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049a6:	6959      	ldr	r1, [r3, #20]
 80049a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049aa:	891a      	ldrh	r2, [r3, #8]
 80049ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80049b0:	f005 fdd6 	bl	800a560 <USB_ReadPMA>
 80049b4:	e021      	b.n	80049fa <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049be:	b29b      	uxth	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	4413      	add	r3, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	4413      	add	r3, r2
 80049d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80049de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ec:	6959      	ldr	r1, [r3, #20]
 80049ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049f0:	895a      	ldrh	r2, [r3, #10]
 80049f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80049f6:	f005 fdb3 	bl	800a560 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80049fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a02:	441a      	add	r2, r3
 8004a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a06:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a0a:	695a      	ldr	r2, [r3, #20]
 8004a0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004a10:	441a      	add	r2, r3
 8004a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a14:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004a16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <PCD_EP_ISR_Handler+0x41e>
 8004a1e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8004a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d206      	bcs.n	8004a38 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004a2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f00c fa2f 	bl	8010e94 <HAL_PCD_DataOutStageCallback>
 8004a36:	e005      	b.n	8004a44 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f004 fe67 	bl	8009712 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004a44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 8117 	beq.w	8004c7e <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8004a50:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	3310      	adds	r3, #16
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4413      	add	r3, r2
 8004a62:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	441a      	add	r2, r3
 8004a8e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004a9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a9e:	78db      	ldrb	r3, [r3, #3]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	f040 80a1 	bne.w	8004be8 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8004aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004aac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aae:	7b1b      	ldrb	r3, [r3, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 8092 	beq.w	8004bda <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004ab6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d046      	beq.n	8004b4e <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ac2:	785b      	ldrb	r3, [r3, #1]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d126      	bne.n	8004b16 <PCD_EP_ISR_Handler+0x50a>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	4413      	add	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	00da      	lsls	r2, r3, #3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	801a      	strh	r2, [r3, #0]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	801a      	strh	r2, [r3, #0]
 8004b14:	e061      	b.n	8004bda <PCD_EP_ISR_Handler+0x5ce>
 8004b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b18:	785b      	ldrb	r3, [r3, #1]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d15d      	bne.n	8004bda <PCD_EP_ISR_Handler+0x5ce>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	61fb      	str	r3, [r7, #28]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	00da      	lsls	r2, r3, #3
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b44:	61bb      	str	r3, [r7, #24]
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	801a      	strh	r2, [r3, #0]
 8004b4c:	e045      	b.n	8004bda <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d126      	bne.n	8004baa <PCD_EP_ISR_Handler+0x59e>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	4413      	add	r3, r2
 8004b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	00da      	lsls	r2, r3, #3
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b82:	623b      	str	r3, [r7, #32]
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	801a      	strh	r2, [r3, #0]
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	801a      	strh	r2, [r3, #0]
 8004ba8:	e017      	b.n	8004bda <PCD_EP_ISR_Handler+0x5ce>
 8004baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bac:	785b      	ldrb	r3, [r3, #1]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d113      	bne.n	8004bda <PCD_EP_ISR_Handler+0x5ce>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc0:	4413      	add	r3, r2
 8004bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	00da      	lsls	r2, r3, #3
 8004bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bcc:	4413      	add	r3, r2
 8004bce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f00c f972 	bl	8010eca <HAL_PCD_DataInStageCallback>
 8004be6:	e04a      	b.n	8004c7e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004be8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d13f      	bne.n	8004c72 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4413      	add	r3, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c16:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8004c18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c1a:	699a      	ldr	r2, [r3, #24]
 8004c1c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d906      	bls.n	8004c30 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8004c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004c28:	1ad2      	subs	r2, r2, r3
 8004c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c2c:	619a      	str	r2, [r3, #24]
 8004c2e:	e002      	b.n	8004c36 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c32:	2200      	movs	r2, #0
 8004c34:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	4619      	mov	r1, r3
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f00c f940 	bl	8010eca <HAL_PCD_DataInStageCallback>
 8004c4a:	e018      	b.n	8004c7e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004c4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004c52:	441a      	add	r2, r3
 8004c54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c56:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004c58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c5a:	69da      	ldr	r2, [r3, #28]
 8004c5c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004c5e:	441a      	add	r2, r3
 8004c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c62:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f004 fd51 	bl	8009712 <USB_EPStartXfer>
 8004c70:	e005      	b.n	8004c7e <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004c72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c74:	461a      	mov	r2, r3
 8004c76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f917 	bl	8004eac <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	b21b      	sxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f6ff acc3 	blt.w	8004616 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3748      	adds	r7, #72	@ 0x48
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b088      	sub	sp, #32
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ca8:	88fb      	ldrh	r3, [r7, #6]
 8004caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d07c      	beq.n	8004dac <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cd6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	699a      	ldr	r2, [r3, #24]
 8004cdc:	8b7b      	ldrh	r3, [r7, #26]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d306      	bcc.n	8004cf0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	8b7b      	ldrh	r3, [r7, #26]
 8004ce8:	1ad2      	subs	r2, r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	619a      	str	r2, [r3, #24]
 8004cee:	e002      	b.n	8004cf6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d123      	bne.n	8004d46 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d18:	833b      	strh	r3, [r7, #24]
 8004d1a:	8b3b      	ldrh	r3, [r7, #24]
 8004d1c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d20:	833b      	strh	r3, [r7, #24]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	441a      	add	r2, r3
 8004d30:	8b3b      	ldrh	r3, [r7, #24]
 8004d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d46:	88fb      	ldrh	r3, [r7, #6]
 8004d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01f      	beq.n	8004d90 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d6a:	82fb      	strh	r3, [r7, #22]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	441a      	add	r2, r3
 8004d7a:	8afb      	ldrh	r3, [r7, #22]
 8004d7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004d90:	8b7b      	ldrh	r3, [r7, #26]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8085 	beq.w	8004ea2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	6959      	ldr	r1, [r3, #20]
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	891a      	ldrh	r2, [r3, #8]
 8004da4:	8b7b      	ldrh	r3, [r7, #26]
 8004da6:	f005 fbdb 	bl	800a560 <USB_ReadPMA>
 8004daa:	e07a      	b.n	8004ea2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dd0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	8b7b      	ldrh	r3, [r7, #26]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d306      	bcc.n	8004dea <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	699a      	ldr	r2, [r3, #24]
 8004de0:	8b7b      	ldrh	r3, [r7, #26]
 8004de2:	1ad2      	subs	r2, r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	619a      	str	r2, [r3, #24]
 8004de8:	e002      	b.n	8004df0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2200      	movs	r2, #0
 8004dee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d123      	bne.n	8004e40 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e12:	83fb      	strh	r3, [r7, #30]
 8004e14:	8bfb      	ldrh	r3, [r7, #30]
 8004e16:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004e1a:	83fb      	strh	r3, [r7, #30]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	441a      	add	r2, r3
 8004e2a:	8bfb      	ldrh	r3, [r7, #30]
 8004e2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d11f      	bne.n	8004e8a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e64:	83bb      	strh	r3, [r7, #28]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	441a      	add	r2, r3
 8004e74:	8bbb      	ldrh	r3, [r7, #28]
 8004e76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e82:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e8a:	8b7b      	ldrh	r3, [r7, #26]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	6959      	ldr	r1, [r3, #20]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	895a      	ldrh	r2, [r3, #10]
 8004e9c:	8b7b      	ldrh	r3, [r7, #26]
 8004e9e:	f005 fb5f 	bl	800a560 <USB_ReadPMA>
    }
  }

  return count;
 8004ea2:	8b7b      	ldrh	r3, [r7, #26]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b0a6      	sub	sp, #152	@ 0x98
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004eba:	88fb      	ldrh	r3, [r7, #6]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 81f7 	beq.w	80052b4 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	4413      	add	r3, r2
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eea:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	699a      	ldr	r2, [r3, #24]
 8004ef2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d907      	bls.n	8004f0a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	699a      	ldr	r2, [r3, #24]
 8004efe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8004f02:	1ad2      	subs	r2, r2, r3
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	619a      	str	r2, [r3, #24]
 8004f08:	e002      	b.n	8004f10 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f040 80e1 	bne.w	80050dc <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d126      	bne.n	8004f70 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	461a      	mov	r2, r3
 8004f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f36:	4413      	add	r3, r2
 8004f38:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	00da      	lsls	r2, r3, #3
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	4413      	add	r3, r2
 8004f44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f58:	801a      	strh	r2, [r3, #0]
 8004f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6c:	801a      	strh	r2, [r3, #0]
 8004f6e:	e01a      	b.n	8004fa6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	785b      	ldrb	r3, [r3, #1]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d116      	bne.n	8004fa6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8c:	4413      	add	r3, r2
 8004f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	00da      	lsls	r2, r3, #3
 8004f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f98:	4413      	add	r3, r2
 8004f9a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d126      	bne.n	8005002 <HAL_PCD_EP_DB_Transmit+0x156>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	623b      	str	r3, [r7, #32]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	4413      	add	r3, r2
 8004fca:	623b      	str	r3, [r7, #32]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	00da      	lsls	r2, r3, #3
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004fda:	61fb      	str	r3, [r7, #28]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	801a      	strh	r2, [r3, #0]
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	801a      	strh	r2, [r3, #0]
 8005000:	e017      	b.n	8005032 <HAL_PCD_EP_DB_Transmit+0x186>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	785b      	ldrb	r3, [r3, #1]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d113      	bne.n	8005032 <HAL_PCD_EP_DB_Transmit+0x186>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005012:	b29b      	uxth	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005018:	4413      	add	r3, r2
 800501a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	00da      	lsls	r2, r3, #3
 8005022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005024:	4413      	add	r3, r2
 8005026:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800502a:	627b      	str	r3, [r7, #36]	@ 0x24
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	2200      	movs	r2, #0
 8005030:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	78db      	ldrb	r3, [r3, #3]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d123      	bne.n	8005082 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005054:	837b      	strh	r3, [r7, #26]
 8005056:	8b7b      	ldrh	r3, [r7, #26]
 8005058:	f083 0320 	eor.w	r3, r3, #32
 800505c:	837b      	strh	r3, [r7, #26]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	8b7b      	ldrh	r3, [r7, #26]
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800507a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	4619      	mov	r1, r3
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f00b ff1e 	bl	8010eca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01f      	beq.n	80050d8 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b2:	833b      	strh	r3, [r7, #24]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	441a      	add	r2, r3
 80050c2:	8b3b      	ldrh	r3, [r7, #24]
 80050c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	e31f      	b.n	800571c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80050dc:	88fb      	ldrh	r3, [r7, #6]
 80050de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d021      	beq.n	800512a <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005100:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	441a      	add	r2, r3
 8005112:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005116:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800511a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800511e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005126:	b29b      	uxth	r3, r3
 8005128:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005130:	2b01      	cmp	r3, #1
 8005132:	f040 82ca 	bne.w	80056ca <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800513e:	441a      	add	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800514c:	441a      	add	r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	6a1a      	ldr	r2, [r3, #32]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	429a      	cmp	r2, r3
 800515c:	d309      	bcc.n	8005172 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6a1a      	ldr	r2, [r3, #32]
 8005168:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800516a:	1ad2      	subs	r2, r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	621a      	str	r2, [r3, #32]
 8005170:	e015      	b.n	800519e <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d107      	bne.n	800518a <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800517a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800517e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005188:	e009      	b.n	800519e <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2200      	movs	r2, #0
 800519c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d15f      	bne.n	8005266 <HAL_PCD_EP_DB_Transmit+0x3ba>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ba:	4413      	add	r3, r2
 80051bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	00da      	lsls	r2, r3, #3
 80051c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c6:	4413      	add	r3, r2
 80051c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80051cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d8:	b29a      	uxth	r2, r3
 80051da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <HAL_PCD_EP_DB_Transmit+0x34e>
 80051e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	e051      	b.n	800529e <HAL_PCD_EP_DB_Transmit+0x3f2>
 80051fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80051fe:	d816      	bhi.n	800522e <HAL_PCD_EP_DB_Transmit+0x382>
 8005200:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005202:	085b      	lsrs	r3, r3, #1
 8005204:	653b      	str	r3, [r7, #80]	@ 0x50
 8005206:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <HAL_PCD_EP_DB_Transmit+0x36a>
 8005210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005212:	3301      	adds	r3, #1
 8005214:	653b      	str	r3, [r7, #80]	@ 0x50
 8005216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29a      	uxth	r2, r3
 800521c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800521e:	b29b      	uxth	r3, r3
 8005220:	029b      	lsls	r3, r3, #10
 8005222:	b29b      	uxth	r3, r3
 8005224:	4313      	orrs	r3, r2
 8005226:	b29a      	uxth	r2, r3
 8005228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800522a:	801a      	strh	r2, [r3, #0]
 800522c:	e037      	b.n	800529e <HAL_PCD_EP_DB_Transmit+0x3f2>
 800522e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	653b      	str	r3, [r7, #80]	@ 0x50
 8005234:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <HAL_PCD_EP_DB_Transmit+0x398>
 800523e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005240:	3b01      	subs	r3, #1
 8005242:	653b      	str	r3, [r7, #80]	@ 0x50
 8005244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005246:	881b      	ldrh	r3, [r3, #0]
 8005248:	b29a      	uxth	r2, r3
 800524a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800524c:	b29b      	uxth	r3, r3
 800524e:	029b      	lsls	r3, r3, #10
 8005250:	b29b      	uxth	r3, r3
 8005252:	4313      	orrs	r3, r2
 8005254:	b29b      	uxth	r3, r3
 8005256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800525e:	b29a      	uxth	r2, r3
 8005260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005262:	801a      	strh	r2, [r3, #0]
 8005264:	e01b      	b.n	800529e <HAL_PCD_EP_DB_Transmit+0x3f2>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	785b      	ldrb	r3, [r3, #1]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d117      	bne.n	800529e <HAL_PCD_EP_DB_Transmit+0x3f2>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800527c:	b29b      	uxth	r3, r3
 800527e:	461a      	mov	r2, r3
 8005280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005282:	4413      	add	r3, r2
 8005284:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	00da      	lsls	r2, r3, #3
 800528c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800528e:	4413      	add	r3, r2
 8005290:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005294:	647b      	str	r3, [r7, #68]	@ 0x44
 8005296:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005298:	b29a      	uxth	r2, r3
 800529a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800529c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6959      	ldr	r1, [r3, #20]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	891a      	ldrh	r2, [r3, #8]
 80052aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f005 f914 	bl	800a4da <USB_WritePMA>
 80052b2:	e20a      	b.n	80056ca <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052bc:	b29b      	uxth	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	4413      	add	r3, r2
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	4413      	add	r3, r2
 80052ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052d8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	699a      	ldr	r2, [r3, #24]
 80052e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d307      	bcc.n	80052f8 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	699a      	ldr	r2, [r3, #24]
 80052ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80052f0:	1ad2      	subs	r2, r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	619a      	str	r2, [r3, #24]
 80052f6:	e002      	b.n	80052fe <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2200      	movs	r2, #0
 80052fc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	2b00      	cmp	r3, #0
 8005304:	f040 80f6 	bne.w	80054f4 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	785b      	ldrb	r3, [r3, #1]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d126      	bne.n	800535e <HAL_PCD_EP_DB_Transmit+0x4b2>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	677b      	str	r3, [r7, #116]	@ 0x74
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800531e:	b29b      	uxth	r3, r3
 8005320:	461a      	mov	r2, r3
 8005322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005324:	4413      	add	r3, r2
 8005326:	677b      	str	r3, [r7, #116]	@ 0x74
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	00da      	lsls	r2, r3, #3
 800532e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005330:	4413      	add	r3, r2
 8005332:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005336:	673b      	str	r3, [r7, #112]	@ 0x70
 8005338:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005342:	b29a      	uxth	r2, r3
 8005344:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	b29b      	uxth	r3, r3
 800534e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005356:	b29a      	uxth	r2, r3
 8005358:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800535a:	801a      	strh	r2, [r3, #0]
 800535c:	e01a      	b.n	8005394 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	785b      	ldrb	r3, [r3, #1]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d116      	bne.n	8005394 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005374:	b29b      	uxth	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800537a:	4413      	add	r3, r2
 800537c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	00da      	lsls	r2, r3, #3
 8005384:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005386:	4413      	add	r3, r2
 8005388:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800538c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800538e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005390:	2200      	movs	r2, #0
 8005392:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d12f      	bne.n	8005404 <HAL_PCD_EP_DB_Transmit+0x558>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053bc:	4413      	add	r3, r2
 80053be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	00da      	lsls	r2, r3, #3
 80053c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053cc:	4413      	add	r3, r2
 80053ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80053d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053e8:	801a      	strh	r2, [r3, #0]
 80053ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005400:	801a      	strh	r2, [r3, #0]
 8005402:	e01c      	b.n	800543e <HAL_PCD_EP_DB_Transmit+0x592>
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d118      	bne.n	800543e <HAL_PCD_EP_DB_Transmit+0x592>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005414:	b29b      	uxth	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800541c:	4413      	add	r3, r2
 800541e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	00da      	lsls	r2, r3, #3
 8005428:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800542c:	4413      	add	r3, r2
 800542e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005432:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005436:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800543a:	2200      	movs	r2, #0
 800543c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	78db      	ldrb	r3, [r3, #3]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d127      	bne.n	8005496 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	461a      	mov	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	881b      	ldrh	r3, [r3, #0]
 8005456:	b29b      	uxth	r3, r3
 8005458:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800545c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005460:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005464:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005468:	f083 0320 	eor.w	r3, r3, #32
 800546c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	461a      	mov	r2, r3
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800548a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800548e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005492:	b29b      	uxth	r3, r3
 8005494:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	4619      	mov	r1, r3
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f00b fd14 	bl	8010eca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80054a2:	88fb      	ldrh	r3, [r7, #6]
 80054a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d121      	bne.n	80054f0 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	441a      	add	r2, r3
 80054d8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80054dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80054e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80054e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	e113      	b.n	800571c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80054f4:	88fb      	ldrh	r3, [r7, #6]
 80054f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d121      	bne.n	8005542 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005514:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005518:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	441a      	add	r2, r3
 800552a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800552e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005532:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005536:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800553a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800553e:	b29b      	uxth	r3, r3
 8005540:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005548:	2b01      	cmp	r3, #1
 800554a:	f040 80be 	bne.w	80056ca <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005556:	441a      	add	r2, r3
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005564:	441a      	add	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	6a1a      	ldr	r2, [r3, #32]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	429a      	cmp	r2, r3
 8005574:	d309      	bcc.n	800558a <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	6a1a      	ldr	r2, [r3, #32]
 8005580:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005582:	1ad2      	subs	r2, r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	621a      	str	r2, [r3, #32]
 8005588:	e015      	b.n	80055b6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d107      	bne.n	80055a2 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8005592:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005596:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80055a0:	e009      	b.n	80055b6 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	2200      	movs	r2, #0
 80055ac:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d15f      	bne.n	8005684 <HAL_PCD_EP_DB_Transmit+0x7d8>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055d8:	4413      	add	r3, r2
 80055da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	00da      	lsls	r2, r3, #3
 80055e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055e4:	4413      	add	r3, r2
 80055e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80055ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80055ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055ee:	881b      	ldrh	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055fa:	801a      	strh	r2, [r3, #0]
 80055fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10a      	bne.n	8005618 <HAL_PCD_EP_DB_Transmit+0x76c>
 8005602:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	b29b      	uxth	r3, r3
 8005608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800560c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005610:	b29a      	uxth	r2, r3
 8005612:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005614:	801a      	strh	r2, [r3, #0]
 8005616:	e04e      	b.n	80056b6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005618:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800561a:	2b3e      	cmp	r3, #62	@ 0x3e
 800561c:	d816      	bhi.n	800564c <HAL_PCD_EP_DB_Transmit+0x7a0>
 800561e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005620:	085b      	lsrs	r3, r3, #1
 8005622:	663b      	str	r3, [r7, #96]	@ 0x60
 8005624:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_PCD_EP_DB_Transmit+0x788>
 800562e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005630:	3301      	adds	r3, #1
 8005632:	663b      	str	r3, [r7, #96]	@ 0x60
 8005634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29a      	uxth	r2, r3
 800563a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800563c:	b29b      	uxth	r3, r3
 800563e:	029b      	lsls	r3, r3, #10
 8005640:	b29b      	uxth	r3, r3
 8005642:	4313      	orrs	r3, r2
 8005644:	b29a      	uxth	r2, r3
 8005646:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005648:	801a      	strh	r2, [r3, #0]
 800564a:	e034      	b.n	80056b6 <HAL_PCD_EP_DB_Transmit+0x80a>
 800564c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	663b      	str	r3, [r7, #96]	@ 0x60
 8005652:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005654:	f003 031f 	and.w	r3, r3, #31
 8005658:	2b00      	cmp	r3, #0
 800565a:	d102      	bne.n	8005662 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800565c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800565e:	3b01      	subs	r3, #1
 8005660:	663b      	str	r3, [r7, #96]	@ 0x60
 8005662:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29a      	uxth	r2, r3
 8005668:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800566a:	b29b      	uxth	r3, r3
 800566c:	029b      	lsls	r3, r3, #10
 800566e:	b29b      	uxth	r3, r3
 8005670:	4313      	orrs	r3, r2
 8005672:	b29b      	uxth	r3, r3
 8005674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567c:	b29a      	uxth	r2, r3
 800567e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005680:	801a      	strh	r2, [r3, #0]
 8005682:	e018      	b.n	80056b6 <HAL_PCD_EP_DB_Transmit+0x80a>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d114      	bne.n	80056b6 <HAL_PCD_EP_DB_Transmit+0x80a>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005694:	b29b      	uxth	r3, r3
 8005696:	461a      	mov	r2, r3
 8005698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800569a:	4413      	add	r3, r2
 800569c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	00da      	lsls	r2, r3, #3
 80056a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056a6:	4413      	add	r3, r2
 80056a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056b4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6959      	ldr	r1, [r3, #20]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	895a      	ldrh	r2, [r3, #10]
 80056c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	f004 ff08 	bl	800a4da <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056e4:	82fb      	strh	r3, [r7, #22]
 80056e6:	8afb      	ldrh	r3, [r7, #22]
 80056e8:	f083 0310 	eor.w	r3, r3, #16
 80056ec:	82fb      	strh	r3, [r7, #22]
 80056ee:	8afb      	ldrh	r3, [r7, #22]
 80056f0:	f083 0320 	eor.w	r3, r3, #32
 80056f4:	82fb      	strh	r3, [r7, #22]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	441a      	add	r2, r3
 8005704:	8afb      	ldrh	r3, [r7, #22]
 8005706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800570a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800570e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005716:	b29b      	uxth	r3, r3
 8005718:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3798      	adds	r7, #152	@ 0x98
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	607b      	str	r3, [r7, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	817b      	strh	r3, [r7, #10]
 8005732:	4613      	mov	r3, r2
 8005734:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005736:	897b      	ldrh	r3, [r7, #10]
 8005738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005742:	897b      	ldrh	r3, [r7, #10]
 8005744:	f003 0207 	and.w	r2, r3, #7
 8005748:	4613      	mov	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4413      	add	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	3310      	adds	r3, #16
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4413      	add	r3, r2
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	e009      	b.n	800576e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800575a:	897a      	ldrh	r2, [r7, #10]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4413      	add	r3, r2
 800576c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800576e:	893b      	ldrh	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d107      	bne.n	8005784 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2200      	movs	r2, #0
 8005778:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	b29a      	uxth	r2, r3
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	80da      	strh	r2, [r3, #6]
 8005782:	e00b      	b.n	800579c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2201      	movs	r2, #1
 8005788:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	b29a      	uxth	r2, r3
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	0c1b      	lsrs	r3, r3, #16
 8005796:	b29a      	uxth	r2, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	f043 0302 	orr.w	r3, r3, #2
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
	...

08005800 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005804:	4b05      	ldr	r3, [pc, #20]	@ (800581c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a04      	ldr	r2, [pc, #16]	@ (800581c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800580a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800580e:	6013      	str	r3, [r2, #0]
}
 8005810:	bf00      	nop
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	58000400 	.word	0x58000400

08005820 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005824:	4b04      	ldr	r3, [pc, #16]	@ (8005838 <HAL_PWREx_GetVoltageRange+0x18>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800582c:	4618      	mov	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	58000400 	.word	0x58000400

0800583c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005840:	4b05      	ldr	r3, [pc, #20]	@ (8005858 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4a04      	ldr	r2, [pc, #16]	@ (8005858 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005846:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800584a:	6053      	str	r3, [r2, #4]
}
 800584c:	bf00      	nop
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	58000400 	.word	0x58000400

0800585c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800586a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800586e:	d101      	bne.n	8005874 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <LL_RCC_HSE_Enable>:
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800588e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005892:	6013      	str	r3, [r2, #0]
}
 8005894:	bf00      	nop
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <LL_RCC_HSE_Disable>:
{
 800589e:	b480      	push	{r7}
 80058a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80058a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058b0:	6013      	str	r3, [r2, #0]
}
 80058b2:	bf00      	nop
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <LL_RCC_HSE_IsReady>:
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80058c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058ce:	d101      	bne.n	80058d4 <LL_RCC_HSE_IsReady+0x18>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <LL_RCC_HSE_IsReady+0x1a>
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <LL_RCC_HSI_Enable>:
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80058e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058f2:	6013      	str	r3, [r2, #0]
}
 80058f4:	bf00      	nop
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <LL_RCC_HSI_Disable>:
{
 80058fe:	b480      	push	{r7}
 8005900:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800590c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005910:	6013      	str	r3, [r2, #0]
}
 8005912:	bf00      	nop
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <LL_RCC_HSI_IsReady>:
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800592a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800592e:	d101      	bne.n	8005934 <LL_RCC_HSI_IsReady+0x18>
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <LL_RCC_HSI_IsReady+0x1a>
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	061b      	lsls	r3, r3, #24
 8005956:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800595a:	4313      	orrs	r3, r2
 800595c:	604b      	str	r3, [r1, #4]
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <LL_RCC_HSI48_Enable>:
{
 800596a:	b480      	push	{r7}
 800596c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800596e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005972:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005976:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800597a:	f043 0301 	orr.w	r3, r3, #1
 800597e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005982:	bf00      	nop
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <LL_RCC_HSI48_Disable>:
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005994:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005998:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800599c:	f023 0301 	bic.w	r3, r3, #1
 80059a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80059a4:	bf00      	nop
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <LL_RCC_HSI48_IsReady>:
{
 80059ae:	b480      	push	{r7}
 80059b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80059b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d101      	bne.n	80059c6 <LL_RCC_HSI48_IsReady+0x18>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <LL_RCC_HSI48_IsReady+0x1a>
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <LL_RCC_LSE_Enable>:
{
 80059d2:	b480      	push	{r7}
 80059d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80059d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80059ea:	bf00      	nop
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <LL_RCC_LSE_Disable>:
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80059f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005a0c:	bf00      	nop
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <LL_RCC_LSE_EnableBypass>:
{
 8005a16:	b480      	push	{r7}
 8005a18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005a1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a26:	f043 0304 	orr.w	r3, r3, #4
 8005a2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005a2e:	bf00      	nop
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <LL_RCC_LSE_DisableBypass>:
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a48:	f023 0304 	bic.w	r3, r3, #4
 8005a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005a50:	bf00      	nop
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <LL_RCC_LSE_IsReady>:
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005a5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d101      	bne.n	8005a72 <LL_RCC_LSE_IsReady+0x18>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <LL_RCC_LSE_IsReady+0x1a>
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <LL_RCC_LSI1_Enable>:
{
 8005a7e:	b480      	push	{r7}
 8005a80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005a82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005a96:	bf00      	nop
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <LL_RCC_LSI1_Disable>:
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005aac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ab0:	f023 0301 	bic.w	r3, r3, #1
 8005ab4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005ab8:	bf00      	nop
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <LL_RCC_LSI1_IsReady>:
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d101      	bne.n	8005ada <LL_RCC_LSI1_IsReady+0x18>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <LL_RCC_LSI1_IsReady+0x1a>
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <LL_RCC_LSI2_Enable>:
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005aea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005af2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005af6:	f043 0304 	orr.w	r3, r3, #4
 8005afa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005afe:	bf00      	nop
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <LL_RCC_LSI2_Disable>:
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b18:	f023 0304 	bic.w	r3, r3, #4
 8005b1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005b20:	bf00      	nop
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <LL_RCC_LSI2_IsReady>:
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d101      	bne.n	8005b42 <LL_RCC_LSI2_IsReady+0x18>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <LL_RCC_LSI2_IsReady+0x1a>
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <LL_RCC_LSI2_SetTrimming>:
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b5e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <LL_RCC_MSI_Enable>:
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005b80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	6013      	str	r3, [r2, #0]
}
 8005b90:	bf00      	nop
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <LL_RCC_MSI_Disable>:
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ba8:	f023 0301 	bic.w	r3, r3, #1
 8005bac:	6013      	str	r3, [r2, #0]
}
 8005bae:	bf00      	nop
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <LL_RCC_MSI_IsReady>:
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d101      	bne.n	8005bce <LL_RCC_MSI_IsReady+0x16>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e000      	b.n	8005bd0 <LL_RCC_MSI_IsReady+0x18>
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <LL_RCC_MSI_SetRange>:
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <LL_RCC_MSI_GetRange>:
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c12:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2bb0      	cmp	r3, #176	@ 0xb0
 8005c18:	d901      	bls.n	8005c1e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005c1a:	23b0      	movs	r3, #176	@ 0xb0
 8005c1c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005c1e:	687b      	ldr	r3, [r7, #4]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <LL_RCC_MSI_SetCalibTrimming>:
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005c34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c46:	4313      	orrs	r3, r2
 8005c48:	604b      	str	r3, [r1, #4]
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <LL_RCC_SetSysClkSource>:
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005c5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f023 0203 	bic.w	r2, r3, #3
 8005c68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	608b      	str	r3, [r1, #8]
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <LL_RCC_GetSysClkSource>:
{
 8005c7e:	b480      	push	{r7}
 8005c80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 030c 	and.w	r3, r3, #12
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <LL_RCC_SetAHBPrescaler>:
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ca8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	608b      	str	r3, [r1, #8]
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <LL_C2_RCC_SetAHBPrescaler>:
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005cce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <LL_RCC_SetAHB4Prescaler>:
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cf6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005cfa:	f023 020f 	bic.w	r2, r3, #15
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	091b      	lsrs	r3, r3, #4
 8005d02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <LL_RCC_SetAPB1Prescaler>:
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005d20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	608b      	str	r3, [r1, #8]
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <LL_RCC_SetAPB2Prescaler>:
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	608b      	str	r3, [r1, #8]
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <LL_RCC_GetAHBPrescaler>:
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <LL_RCC_GetAHB4Prescaler>:
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d88:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <LL_RCC_PLL_Enable>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005daa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dae:	6013      	str	r3, [r2, #0]
}
 8005db0:	bf00      	nop
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <LL_RCC_PLL_Disable>:
{
 8005dba:	b480      	push	{r7}
 8005dbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005dbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005dc8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dcc:	6013      	str	r3, [r2, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <LL_RCC_PLL_IsReady>:
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005de6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005dea:	d101      	bne.n	8005df0 <LL_RCC_PLL_IsReady+0x18>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <LL_RCC_PLL_IsReady+0x1a>
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <LL_RCC_PLL_GetN>:
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	0a1b      	lsrs	r3, r3, #8
 8005e08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <LL_RCC_PLL_GetR>:
{
 8005e16:	b480      	push	{r7}
 8005e18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005e1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <LL_RCC_PLL_GetDivider>:
{
 8005e2e:	b480      	push	{r7}
 8005e30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <LL_RCC_PLL_GetMainSource>:
{
 8005e46:	b480      	push	{r7}
 8005e48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f003 0303 	and.w	r3, r3, #3
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <LL_RCC_IsActiveFlag_HPRE>:
{
 8005e5e:	b480      	push	{r7}
 8005e60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e70:	d101      	bne.n	8005e76 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005e82:	b480      	push	{r7}
 8005e84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e96:	d101      	bne.n	8005e9c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e000      	b.n	8005e9e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ebc:	d101      	bne.n	8005ec2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005ece:	b480      	push	{r7}
 8005ed0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005ed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005edc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ee0:	d101      	bne.n	8005ee6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e000      	b.n	8005ee8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f04:	d101      	bne.n	8005f0a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e000      	b.n	8005f0c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
	...

08005f18 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f18:	b590      	push	{r4, r7, lr}
 8005f1a:	b08d      	sub	sp, #52	@ 0x34
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e363      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 808d 	beq.w	8006052 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f38:	f7ff fea1 	bl	8005c7e <LL_RCC_GetSysClkSource>
 8005f3c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f3e:	f7ff ff82 	bl	8005e46 <LL_RCC_PLL_GetMainSource>
 8005f42:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_RCC_OscConfig+0x3e>
 8005f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4c:	2b0c      	cmp	r3, #12
 8005f4e:	d147      	bne.n	8005fe0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d144      	bne.n	8005fe0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e347      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005f66:	f7ff fe4c 	bl	8005c02 <LL_RCC_MSI_GetRange>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	429c      	cmp	r4, r3
 8005f6e:	d914      	bls.n	8005f9a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 fd03 	bl	8006980 <RCC_SetFlashLatencyFromMSIRange>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e336      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff fe26 	bl	8005bda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7ff fe4a 	bl	8005c2c <LL_RCC_MSI_SetCalibTrimming>
 8005f98:	e013      	b.n	8005fc2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fe1b 	bl	8005bda <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff fe3f 	bl	8005c2c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fce4 	bl	8006980 <RCC_SetFlashLatencyFromMSIRange>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e317      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005fc2:	f000 fcc9 	bl	8006958 <HAL_RCC_GetHCLKFreq>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	4aa4      	ldr	r2, [pc, #656]	@ (800625c <HAL_RCC_OscConfig+0x344>)
 8005fca:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005fcc:	4ba4      	ldr	r3, [pc, #656]	@ (8006260 <HAL_RCC_OscConfig+0x348>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fc ff7d 	bl	8002ed0 <HAL_InitTick>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d039      	beq.n	8006050 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e308      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01e      	beq.n	8006026 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005fe8:	f7ff fdc8 	bl	8005b7c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005fec:	f7fc ffbe 	bl	8002f6c <HAL_GetTick>
 8005ff0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ff4:	f7fc ffba 	bl	8002f6c <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e2f5      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006006:	f7ff fdd7 	bl	8005bb8 <LL_RCC_MSI_IsReady>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0f1      	beq.n	8005ff4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff fde0 	bl	8005bda <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff fe04 	bl	8005c2c <LL_RCC_MSI_SetCalibTrimming>
 8006024:	e015      	b.n	8006052 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006026:	f7ff fdb8 	bl	8005b9a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800602a:	f7fc ff9f 	bl	8002f6c <HAL_GetTick>
 800602e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006030:	e008      	b.n	8006044 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006032:	f7fc ff9b 	bl	8002f6c <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e2d6      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006044:	f7ff fdb8 	bl	8005bb8 <LL_RCC_MSI_IsReady>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1f1      	bne.n	8006032 <HAL_RCC_OscConfig+0x11a>
 800604e:	e000      	b.n	8006052 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006050:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d047      	beq.n	80060ee <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800605e:	f7ff fe0e 	bl	8005c7e <LL_RCC_GetSysClkSource>
 8006062:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006064:	f7ff feef 	bl	8005e46 <LL_RCC_PLL_GetMainSource>
 8006068:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	2b08      	cmp	r3, #8
 800606e:	d005      	beq.n	800607c <HAL_RCC_OscConfig+0x164>
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	2b0c      	cmp	r3, #12
 8006074:	d108      	bne.n	8006088 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	2b03      	cmp	r3, #3
 800607a:	d105      	bne.n	8006088 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d134      	bne.n	80060ee <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e2b4      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006090:	d102      	bne.n	8006098 <HAL_RCC_OscConfig+0x180>
 8006092:	f7ff fbf5 	bl	8005880 <LL_RCC_HSE_Enable>
 8006096:	e001      	b.n	800609c <HAL_RCC_OscConfig+0x184>
 8006098:	f7ff fc01 	bl	800589e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d012      	beq.n	80060ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a4:	f7fc ff62 	bl	8002f6c <HAL_GetTick>
 80060a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060ac:	f7fc ff5e 	bl	8002f6c <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b64      	cmp	r3, #100	@ 0x64
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e299      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80060be:	f7ff fbfd 	bl	80058bc <LL_RCC_HSE_IsReady>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0f1      	beq.n	80060ac <HAL_RCC_OscConfig+0x194>
 80060c8:	e011      	b.n	80060ee <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ca:	f7fc ff4f 	bl	8002f6c <HAL_GetTick>
 80060ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80060d0:	e008      	b.n	80060e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060d2:	f7fc ff4b 	bl	8002f6c <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	2b64      	cmp	r3, #100	@ 0x64
 80060de:	d901      	bls.n	80060e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e286      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80060e4:	f7ff fbea 	bl	80058bc <LL_RCC_HSE_IsReady>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f1      	bne.n	80060d2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d04c      	beq.n	8006194 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060fa:	f7ff fdc0 	bl	8005c7e <LL_RCC_GetSysClkSource>
 80060fe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006100:	f7ff fea1 	bl	8005e46 <LL_RCC_PLL_GetMainSource>
 8006104:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	2b04      	cmp	r3, #4
 800610a:	d005      	beq.n	8006118 <HAL_RCC_OscConfig+0x200>
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	2b0c      	cmp	r3, #12
 8006110:	d10e      	bne.n	8006130 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d10b      	bne.n	8006130 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e266      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff fc09 	bl	8005940 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800612e:	e031      	b.n	8006194 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d019      	beq.n	800616c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006138:	f7ff fbd2 	bl	80058e0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613c:	f7fc ff16 	bl	8002f6c <HAL_GetTick>
 8006140:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006144:	f7fc ff12 	bl	8002f6c <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e24d      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006156:	f7ff fbe1 	bl	800591c <LL_RCC_HSI_IsReady>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0f1      	beq.n	8006144 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	4618      	mov	r0, r3
 8006166:	f7ff fbeb 	bl	8005940 <LL_RCC_HSI_SetCalibTrimming>
 800616a:	e013      	b.n	8006194 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800616c:	f7ff fbc7 	bl	80058fe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006170:	f7fc fefc 	bl	8002f6c <HAL_GetTick>
 8006174:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006178:	f7fc fef8 	bl	8002f6c <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e233      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800618a:	f7ff fbc7 	bl	800591c <LL_RCC_HSI_IsReady>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1f1      	bne.n	8006178 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b00      	cmp	r3, #0
 800619e:	d106      	bne.n	80061ae <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 80a3 	beq.w	80062f4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d076      	beq.n	80062a4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0310 	and.w	r3, r3, #16
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d046      	beq.n	8006250 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80061c2:	f7ff fc7e 	bl	8005ac2 <LL_RCC_LSI1_IsReady>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d113      	bne.n	80061f4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80061cc:	f7ff fc57 	bl	8005a7e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061d0:	f7fc fecc 	bl	8002f6c <HAL_GetTick>
 80061d4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80061d6:	e008      	b.n	80061ea <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80061d8:	f7fc fec8 	bl	8002f6c <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d901      	bls.n	80061ea <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e203      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80061ea:	f7ff fc6a 	bl	8005ac2 <LL_RCC_LSI1_IsReady>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0f1      	beq.n	80061d8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80061f4:	f7ff fc77 	bl	8005ae6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f8:	f7fc feb8 	bl	8002f6c <HAL_GetTick>
 80061fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006200:	f7fc feb4 	bl	8002f6c <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b03      	cmp	r3, #3
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e1ef      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006212:	f7ff fc8a 	bl	8005b2a <LL_RCC_LSI2_IsReady>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0f1      	beq.n	8006200 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fc94 	bl	8005b4e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006226:	f7ff fc3b 	bl	8005aa0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622a:	f7fc fe9f 	bl	8002f6c <HAL_GetTick>
 800622e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006230:	e008      	b.n	8006244 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006232:	f7fc fe9b 	bl	8002f6c <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d901      	bls.n	8006244 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e1d6      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006244:	f7ff fc3d 	bl	8005ac2 <LL_RCC_LSI1_IsReady>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f1      	bne.n	8006232 <HAL_RCC_OscConfig+0x31a>
 800624e:	e051      	b.n	80062f4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006250:	f7ff fc15 	bl	8005a7e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006254:	f7fc fe8a 	bl	8002f6c <HAL_GetTick>
 8006258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800625a:	e00c      	b.n	8006276 <HAL_RCC_OscConfig+0x35e>
 800625c:	20000008 	.word	0x20000008
 8006260:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006264:	f7fc fe82 	bl	8002f6c <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e1bd      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006276:	f7ff fc24 	bl	8005ac2 <LL_RCC_LSI1_IsReady>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f1      	beq.n	8006264 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006280:	f7ff fc42 	bl	8005b08 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006286:	f7fc fe71 	bl	8002f6c <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b03      	cmp	r3, #3
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e1ac      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006298:	f7ff fc47 	bl	8005b2a <LL_RCC_LSI2_IsReady>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f1      	bne.n	8006286 <HAL_RCC_OscConfig+0x36e>
 80062a2:	e027      	b.n	80062f4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80062a4:	f7ff fc30 	bl	8005b08 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a8:	f7fc fe60 	bl	8002f6c <HAL_GetTick>
 80062ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80062b0:	f7fc fe5c 	bl	8002f6c <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e197      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80062c2:	f7ff fc32 	bl	8005b2a <LL_RCC_LSI2_IsReady>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f1      	bne.n	80062b0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80062cc:	f7ff fbe8 	bl	8005aa0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d0:	f7fc fe4c 	bl	8002f6c <HAL_GetTick>
 80062d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80062d8:	f7fc fe48 	bl	8002f6c <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e183      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80062ea:	f7ff fbea 	bl	8005ac2 <LL_RCC_LSI1_IsReady>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1f1      	bne.n	80062d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d05b      	beq.n	80063b8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006300:	4ba7      	ldr	r3, [pc, #668]	@ (80065a0 <HAL_RCC_OscConfig+0x688>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006308:	2b00      	cmp	r3, #0
 800630a:	d114      	bne.n	8006336 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800630c:	f7ff fa78 	bl	8005800 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006310:	f7fc fe2c 	bl	8002f6c <HAL_GetTick>
 8006314:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006316:	e008      	b.n	800632a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006318:	f7fc fe28 	bl	8002f6c <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b02      	cmp	r3, #2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e163      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800632a:	4b9d      	ldr	r3, [pc, #628]	@ (80065a0 <HAL_RCC_OscConfig+0x688>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0f0      	beq.n	8006318 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d102      	bne.n	8006344 <HAL_RCC_OscConfig+0x42c>
 800633e:	f7ff fb48 	bl	80059d2 <LL_RCC_LSE_Enable>
 8006342:	e00c      	b.n	800635e <HAL_RCC_OscConfig+0x446>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	2b05      	cmp	r3, #5
 800634a:	d104      	bne.n	8006356 <HAL_RCC_OscConfig+0x43e>
 800634c:	f7ff fb63 	bl	8005a16 <LL_RCC_LSE_EnableBypass>
 8006350:	f7ff fb3f 	bl	80059d2 <LL_RCC_LSE_Enable>
 8006354:	e003      	b.n	800635e <HAL_RCC_OscConfig+0x446>
 8006356:	f7ff fb4d 	bl	80059f4 <LL_RCC_LSE_Disable>
 800635a:	f7ff fb6d 	bl	8005a38 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d014      	beq.n	8006390 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006366:	f7fc fe01 	bl	8002f6c <HAL_GetTick>
 800636a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800636c:	e00a      	b.n	8006384 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800636e:	f7fc fdfd 	bl	8002f6c <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800637c:	4293      	cmp	r3, r2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e136      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006384:	f7ff fb69 	bl	8005a5a <LL_RCC_LSE_IsReady>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0ef      	beq.n	800636e <HAL_RCC_OscConfig+0x456>
 800638e:	e013      	b.n	80063b8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006390:	f7fc fdec 	bl	8002f6c <HAL_GetTick>
 8006394:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006396:	e00a      	b.n	80063ae <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006398:	f7fc fde8 	bl	8002f6c <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e121      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80063ae:	f7ff fb54 	bl	8005a5a <LL_RCC_LSE_IsReady>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1ef      	bne.n	8006398 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d02c      	beq.n	800641e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d014      	beq.n	80063f6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063cc:	f7ff facd 	bl	800596a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d0:	f7fc fdcc 	bl	8002f6c <HAL_GetTick>
 80063d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80063d6:	e008      	b.n	80063ea <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063d8:	f7fc fdc8 	bl	8002f6c <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e103      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80063ea:	f7ff fae0 	bl	80059ae <LL_RCC_HSI48_IsReady>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0f1      	beq.n	80063d8 <HAL_RCC_OscConfig+0x4c0>
 80063f4:	e013      	b.n	800641e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063f6:	f7ff fac9 	bl	800598c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fa:	f7fc fdb7 	bl	8002f6c <HAL_GetTick>
 80063fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006400:	e008      	b.n	8006414 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006402:	f7fc fdb3 	bl	8002f6c <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d901      	bls.n	8006414 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e0ee      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006414:	f7ff facb 	bl	80059ae <LL_RCC_HSI48_IsReady>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f1      	bne.n	8006402 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 80e4 	beq.w	80065f0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006428:	f7ff fc29 	bl	8005c7e <LL_RCC_GetSysClkSource>
 800642c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800642e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643a:	2b02      	cmp	r3, #2
 800643c:	f040 80b4 	bne.w	80065a8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 0203 	and.w	r2, r3, #3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644a:	429a      	cmp	r2, r3
 800644c:	d123      	bne.n	8006496 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006458:	429a      	cmp	r2, r3
 800645a:	d11c      	bne.n	8006496 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	0a1b      	lsrs	r3, r3, #8
 8006460:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006468:	429a      	cmp	r2, r3
 800646a:	d114      	bne.n	8006496 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006476:	429a      	cmp	r2, r3
 8006478:	d10d      	bne.n	8006496 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006484:	429a      	cmp	r2, r3
 8006486:	d106      	bne.n	8006496 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006492:	429a      	cmp	r2, r3
 8006494:	d05d      	beq.n	8006552 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b0c      	cmp	r3, #12
 800649a:	d058      	beq.n	800654e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800649c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e0a1      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80064ae:	f7ff fc84 	bl	8005dba <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80064b2:	f7fc fd5b 	bl	8002f6c <HAL_GetTick>
 80064b6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064ba:	f7fc fd57 	bl	8002f6c <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e092      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80064cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1ef      	bne.n	80064ba <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	4b30      	ldr	r3, [pc, #192]	@ (80065a4 <HAL_RCC_OscConfig+0x68c>)
 80064e2:	4013      	ands	r3, r2
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80064ec:	4311      	orrs	r1, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80064f2:	0212      	lsls	r2, r2, #8
 80064f4:	4311      	orrs	r1, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80064fa:	4311      	orrs	r1, r2
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006500:	4311      	orrs	r1, r2
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006506:	430a      	orrs	r2, r1
 8006508:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800650c:	4313      	orrs	r3, r2
 800650e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006510:	f7ff fc44 	bl	8005d9c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800651e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006522:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006524:	f7fc fd22 	bl	8002f6c <HAL_GetTick>
 8006528:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800652c:	f7fc fd1e 	bl	8002f6c <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e059      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800653e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0ef      	beq.n	800652c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800654c:	e050      	b.n	80065f0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e04f      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d147      	bne.n	80065f0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006560:	f7ff fc1c 	bl	8005d9c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800656e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006572:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006574:	f7fc fcfa 	bl	8002f6c <HAL_GetTick>
 8006578:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800657a:	e008      	b.n	800658e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800657c:	f7fc fcf6 	bl	8002f6c <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e031      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800658e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0ef      	beq.n	800657c <HAL_RCC_OscConfig+0x664>
 800659c:	e028      	b.n	80065f0 <HAL_RCC_OscConfig+0x6d8>
 800659e:	bf00      	nop
 80065a0:	58000400 	.word	0x58000400
 80065a4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	2b0c      	cmp	r3, #12
 80065ac:	d01e      	beq.n	80065ec <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ae:	f7ff fc04 	bl	8005dba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b2:	f7fc fcdb 	bl	8002f6c <HAL_GetTick>
 80065b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065b8:	e008      	b.n	80065cc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ba:	f7fc fcd7 	bl	8002f6c <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e012      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1ef      	bne.n	80065ba <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80065da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065e4:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <HAL_RCC_OscConfig+0x6e4>)
 80065e6:	4013      	ands	r3, r2
 80065e8:	60cb      	str	r3, [r1, #12]
 80065ea:	e001      	b.n	80065f0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3734      	adds	r7, #52	@ 0x34
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd90      	pop	{r4, r7, pc}
 80065fa:	bf00      	nop
 80065fc:	eefefffc 	.word	0xeefefffc

08006600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e12d      	b.n	8006870 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006614:	4b98      	ldr	r3, [pc, #608]	@ (8006878 <HAL_RCC_ClockConfig+0x278>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0307 	and.w	r3, r3, #7
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d91b      	bls.n	800665a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006622:	4b95      	ldr	r3, [pc, #596]	@ (8006878 <HAL_RCC_ClockConfig+0x278>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f023 0207 	bic.w	r2, r3, #7
 800662a:	4993      	ldr	r1, [pc, #588]	@ (8006878 <HAL_RCC_ClockConfig+0x278>)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	4313      	orrs	r3, r2
 8006630:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006632:	f7fc fc9b 	bl	8002f6c <HAL_GetTick>
 8006636:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006638:	e008      	b.n	800664c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800663a:	f7fc fc97 	bl	8002f6c <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b02      	cmp	r3, #2
 8006646:	d901      	bls.n	800664c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e111      	b.n	8006870 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800664c:	4b8a      	ldr	r3, [pc, #552]	@ (8006878 <HAL_RCC_ClockConfig+0x278>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	d1ef      	bne.n	800663a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d016      	beq.n	8006694 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff fb13 	bl	8005c96 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006670:	f7fc fc7c 	bl	8002f6c <HAL_GetTick>
 8006674:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006676:	e008      	b.n	800668a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006678:	f7fc fc78 	bl	8002f6c <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d901      	bls.n	800668a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e0f2      	b.n	8006870 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800668a:	f7ff fbe8 	bl	8005e5e <LL_RCC_IsActiveFlag_HPRE>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0f1      	beq.n	8006678 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	d016      	beq.n	80066ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7ff fb0a 	bl	8005cbe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066aa:	f7fc fc5f 	bl	8002f6c <HAL_GetTick>
 80066ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80066b0:	e008      	b.n	80066c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066b2:	f7fc fc5b 	bl	8002f6c <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d901      	bls.n	80066c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e0d5      	b.n	8006870 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80066c4:	f7ff fbdd 	bl	8005e82 <LL_RCC_IsActiveFlag_C2HPRE>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0f1      	beq.n	80066b2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d016      	beq.n	8006708 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff fb03 	bl	8005cea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80066e4:	f7fc fc42 	bl	8002f6c <HAL_GetTick>
 80066e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80066ec:	f7fc fc3e 	bl	8002f6c <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e0b8      	b.n	8006870 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80066fe:	f7ff fbd3 	bl	8005ea8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0f1      	beq.n	80066ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d016      	beq.n	8006742 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	4618      	mov	r0, r3
 800671a:	f7ff fafd 	bl	8005d18 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800671e:	f7fc fc25 	bl	8002f6c <HAL_GetTick>
 8006722:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006724:	e008      	b.n	8006738 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006726:	f7fc fc21 	bl	8002f6c <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e09b      	b.n	8006870 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006738:	f7ff fbc9 	bl	8005ece <LL_RCC_IsActiveFlag_PPRE1>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0f1      	beq.n	8006726 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d017      	beq.n	800677e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff faf3 	bl	8005d40 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800675a:	f7fc fc07 	bl	8002f6c <HAL_GetTick>
 800675e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006760:	e008      	b.n	8006774 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006762:	f7fc fc03 	bl	8002f6c <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d901      	bls.n	8006774 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e07d      	b.n	8006870 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006774:	f7ff fbbd 	bl	8005ef2 <LL_RCC_IsActiveFlag_PPRE2>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0f1      	beq.n	8006762 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d043      	beq.n	8006812 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d106      	bne.n	80067a0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006792:	f7ff f893 	bl	80058bc <LL_RCC_HSE_IsReady>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d11e      	bne.n	80067da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e067      	b.n	8006870 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d106      	bne.n	80067b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80067a8:	f7ff fb16 	bl	8005dd8 <LL_RCC_PLL_IsReady>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d113      	bne.n	80067da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e05c      	b.n	8006870 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d106      	bne.n	80067cc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80067be:	f7ff f9fb 	bl	8005bb8 <LL_RCC_MSI_IsReady>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d108      	bne.n	80067da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e051      	b.n	8006870 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80067cc:	f7ff f8a6 	bl	800591c <LL_RCC_HSI_IsReady>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e04a      	b.n	8006870 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	4618      	mov	r0, r3
 80067e0:	f7ff fa39 	bl	8005c56 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e4:	f7fc fbc2 	bl	8002f6c <HAL_GetTick>
 80067e8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ea:	e00a      	b.n	8006802 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067ec:	f7fc fbbe 	bl	8002f6c <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e036      	b.n	8006870 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006802:	f7ff fa3c 	bl	8005c7e <LL_RCC_GetSysClkSource>
 8006806:	4602      	mov	r2, r0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	429a      	cmp	r2, r3
 8006810:	d1ec      	bne.n	80067ec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006812:	4b19      	ldr	r3, [pc, #100]	@ (8006878 <HAL_RCC_ClockConfig+0x278>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d21b      	bcs.n	8006858 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006820:	4b15      	ldr	r3, [pc, #84]	@ (8006878 <HAL_RCC_ClockConfig+0x278>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f023 0207 	bic.w	r2, r3, #7
 8006828:	4913      	ldr	r1, [pc, #76]	@ (8006878 <HAL_RCC_ClockConfig+0x278>)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	4313      	orrs	r3, r2
 800682e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006830:	f7fc fb9c 	bl	8002f6c <HAL_GetTick>
 8006834:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006836:	e008      	b.n	800684a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006838:	f7fc fb98 	bl	8002f6c <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d901      	bls.n	800684a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e012      	b.n	8006870 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800684a:	4b0b      	ldr	r3, [pc, #44]	@ (8006878 <HAL_RCC_ClockConfig+0x278>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0307 	and.w	r3, r3, #7
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d1ef      	bne.n	8006838 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006858:	f000 f87e 	bl	8006958 <HAL_RCC_GetHCLKFreq>
 800685c:	4603      	mov	r3, r0
 800685e:	4a07      	ldr	r2, [pc, #28]	@ (800687c <HAL_RCC_ClockConfig+0x27c>)
 8006860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006862:	f7fc fb8f 	bl	8002f84 <HAL_GetTickPrio>
 8006866:	4603      	mov	r3, r0
 8006868:	4618      	mov	r0, r3
 800686a:	f7fc fb31 	bl	8002ed0 <HAL_InitTick>
 800686e:	4603      	mov	r3, r0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	58004000 	.word	0x58004000
 800687c:	20000008 	.word	0x20000008

08006880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006880:	b590      	push	{r4, r7, lr}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006886:	f7ff f9fa 	bl	8005c7e <LL_RCC_GetSysClkSource>
 800688a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006892:	f7ff f9b6 	bl	8005c02 <LL_RCC_MSI_GetRange>
 8006896:	4603      	mov	r3, r0
 8006898:	091b      	lsrs	r3, r3, #4
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	4a2b      	ldr	r2, [pc, #172]	@ (800694c <HAL_RCC_GetSysClockFreq+0xcc>)
 80068a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	e04b      	b.n	8006940 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d102      	bne.n	80068b4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80068ae:	4b28      	ldr	r3, [pc, #160]	@ (8006950 <HAL_RCC_GetSysClockFreq+0xd0>)
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	e045      	b.n	8006940 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b08      	cmp	r3, #8
 80068b8:	d10a      	bne.n	80068d0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80068ba:	f7fe ffcf 	bl	800585c <LL_RCC_HSE_IsEnabledDiv2>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d102      	bne.n	80068ca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80068c4:	4b22      	ldr	r3, [pc, #136]	@ (8006950 <HAL_RCC_GetSysClockFreq+0xd0>)
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	e03a      	b.n	8006940 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80068ca:	4b22      	ldr	r3, [pc, #136]	@ (8006954 <HAL_RCC_GetSysClockFreq+0xd4>)
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	e037      	b.n	8006940 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80068d0:	f7ff fab9 	bl	8005e46 <LL_RCC_PLL_GetMainSource>
 80068d4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d003      	beq.n	80068e4 <HAL_RCC_GetSysClockFreq+0x64>
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d003      	beq.n	80068ea <HAL_RCC_GetSysClockFreq+0x6a>
 80068e2:	e00d      	b.n	8006900 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80068e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006950 <HAL_RCC_GetSysClockFreq+0xd0>)
 80068e6:	60bb      	str	r3, [r7, #8]
        break;
 80068e8:	e015      	b.n	8006916 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80068ea:	f7fe ffb7 	bl	800585c <LL_RCC_HSE_IsEnabledDiv2>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d102      	bne.n	80068fa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80068f4:	4b16      	ldr	r3, [pc, #88]	@ (8006950 <HAL_RCC_GetSysClockFreq+0xd0>)
 80068f6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80068f8:	e00d      	b.n	8006916 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80068fa:	4b16      	ldr	r3, [pc, #88]	@ (8006954 <HAL_RCC_GetSysClockFreq+0xd4>)
 80068fc:	60bb      	str	r3, [r7, #8]
        break;
 80068fe:	e00a      	b.n	8006916 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006900:	f7ff f97f 	bl	8005c02 <LL_RCC_MSI_GetRange>
 8006904:	4603      	mov	r3, r0
 8006906:	091b      	lsrs	r3, r3, #4
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	4a0f      	ldr	r2, [pc, #60]	@ (800694c <HAL_RCC_GetSysClockFreq+0xcc>)
 800690e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006912:	60bb      	str	r3, [r7, #8]
        break;
 8006914:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006916:	f7ff fa71 	bl	8005dfc <LL_RCC_PLL_GetN>
 800691a:	4602      	mov	r2, r0
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	fb03 f402 	mul.w	r4, r3, r2
 8006922:	f7ff fa84 	bl	8005e2e <LL_RCC_PLL_GetDivider>
 8006926:	4603      	mov	r3, r0
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	3301      	adds	r3, #1
 800692c:	fbb4 f4f3 	udiv	r4, r4, r3
 8006930:	f7ff fa71 	bl	8005e16 <LL_RCC_PLL_GetR>
 8006934:	4603      	mov	r3, r0
 8006936:	0f5b      	lsrs	r3, r3, #29
 8006938:	3301      	adds	r3, #1
 800693a:	fbb4 f3f3 	udiv	r3, r4, r3
 800693e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006940:	68fb      	ldr	r3, [r7, #12]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	bd90      	pop	{r4, r7, pc}
 800694a:	bf00      	nop
 800694c:	08014098 	.word	0x08014098
 8006950:	00f42400 	.word	0x00f42400
 8006954:	01e84800 	.word	0x01e84800

08006958 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006958:	b598      	push	{r3, r4, r7, lr}
 800695a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800695c:	f7ff ff90 	bl	8006880 <HAL_RCC_GetSysClockFreq>
 8006960:	4604      	mov	r4, r0
 8006962:	f7ff fa01 	bl	8005d68 <LL_RCC_GetAHBPrescaler>
 8006966:	4603      	mov	r3, r0
 8006968:	091b      	lsrs	r3, r3, #4
 800696a:	f003 030f 	and.w	r3, r3, #15
 800696e:	4a03      	ldr	r2, [pc, #12]	@ (800697c <HAL_RCC_GetHCLKFreq+0x24>)
 8006970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006974:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006978:	4618      	mov	r0, r3
 800697a:	bd98      	pop	{r3, r4, r7, pc}
 800697c:	08014058 	.word	0x08014058

08006980 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006980:	b590      	push	{r4, r7, lr}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2bb0      	cmp	r3, #176	@ 0xb0
 800698c:	d903      	bls.n	8006996 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800698e:	4b15      	ldr	r3, [pc, #84]	@ (80069e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	e007      	b.n	80069a6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	091b      	lsrs	r3, r3, #4
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	4a11      	ldr	r2, [pc, #68]	@ (80069e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80069a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80069a6:	f7ff f9eb 	bl	8005d80 <LL_RCC_GetAHB4Prescaler>
 80069aa:	4603      	mov	r3, r0
 80069ac:	091b      	lsrs	r3, r3, #4
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	4a0d      	ldr	r2, [pc, #52]	@ (80069e8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80069b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80069be:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4a0a      	ldr	r2, [pc, #40]	@ (80069ec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80069c4:	fba2 2303 	umull	r2, r3, r2, r3
 80069c8:	0c9c      	lsrs	r4, r3, #18
 80069ca:	f7fe ff29 	bl	8005820 <HAL_PWREx_GetVoltageRange>
 80069ce:	4603      	mov	r3, r0
 80069d0:	4619      	mov	r1, r3
 80069d2:	4620      	mov	r0, r4
 80069d4:	f000 f80c 	bl	80069f0 <RCC_SetFlashLatency>
 80069d8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd90      	pop	{r4, r7, pc}
 80069e2:	bf00      	nop
 80069e4:	08014098 	.word	0x08014098
 80069e8:	08014058 	.word	0x08014058
 80069ec:	431bde83 	.word	0x431bde83

080069f0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80069f0:	b590      	push	{r4, r7, lr}
 80069f2:	b093      	sub	sp, #76	@ 0x4c
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80069fa:	4b37      	ldr	r3, [pc, #220]	@ (8006ad8 <RCC_SetFlashLatency+0xe8>)
 80069fc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8006a00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006a06:	4a35      	ldr	r2, [pc, #212]	@ (8006adc <RCC_SetFlashLatency+0xec>)
 8006a08:	f107 031c 	add.w	r3, r7, #28
 8006a0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006a12:	4b33      	ldr	r3, [pc, #204]	@ (8006ae0 <RCC_SetFlashLatency+0xf0>)
 8006a14:	f107 040c 	add.w	r4, r7, #12
 8006a18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006a1e:	2300      	movs	r3, #0
 8006a20:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a28:	d11a      	bne.n	8006a60 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a2e:	e013      	b.n	8006a58 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	3348      	adds	r3, #72	@ 0x48
 8006a36:	443b      	add	r3, r7
 8006a38:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d807      	bhi.n	8006a52 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	3348      	adds	r3, #72	@ 0x48
 8006a48:	443b      	add	r3, r7
 8006a4a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006a4e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006a50:	e020      	b.n	8006a94 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006a52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a54:	3301      	adds	r3, #1
 8006a56:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d9e8      	bls.n	8006a30 <RCC_SetFlashLatency+0x40>
 8006a5e:	e019      	b.n	8006a94 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a60:	2300      	movs	r3, #0
 8006a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a64:	e013      	b.n	8006a8e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	3348      	adds	r3, #72	@ 0x48
 8006a6c:	443b      	add	r3, r7
 8006a6e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d807      	bhi.n	8006a88 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	3348      	adds	r3, #72	@ 0x48
 8006a7e:	443b      	add	r3, r7
 8006a80:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006a84:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006a86:	e005      	b.n	8006a94 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d9e8      	bls.n	8006a66 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006a94:	4b13      	ldr	r3, [pc, #76]	@ (8006ae4 <RCC_SetFlashLatency+0xf4>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f023 0207 	bic.w	r2, r3, #7
 8006a9c:	4911      	ldr	r1, [pc, #68]	@ (8006ae4 <RCC_SetFlashLatency+0xf4>)
 8006a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006aa4:	f7fc fa62 	bl	8002f6c <HAL_GetTick>
 8006aa8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006aaa:	e008      	b.n	8006abe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006aac:	f7fc fa5e 	bl	8002f6c <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d901      	bls.n	8006abe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e007      	b.n	8006ace <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006abe:	4b09      	ldr	r3, [pc, #36]	@ (8006ae4 <RCC_SetFlashLatency+0xf4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d1ef      	bne.n	8006aac <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	374c      	adds	r7, #76	@ 0x4c
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd90      	pop	{r4, r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	08012c6c 	.word	0x08012c6c
 8006adc:	08012c7c 	.word	0x08012c7c
 8006ae0:	08012c88 	.word	0x08012c88
 8006ae4:	58004000 	.word	0x58004000

08006ae8 <LL_RCC_LSE_IsEnabled>:
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <LL_RCC_LSE_IsEnabled+0x18>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <LL_RCC_LSE_IsEnabled+0x1a>
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <LL_RCC_LSE_IsReady>:
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d101      	bne.n	8006b24 <LL_RCC_LSE_IsReady+0x18>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <LL_RCC_LSE_IsReady+0x1a>
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <LL_RCC_MSI_EnablePLLMode>:
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8006b34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b3e:	f043 0304 	orr.w	r3, r3, #4
 8006b42:	6013      	str	r3, [r2, #0]
}
 8006b44:	bf00      	nop
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <LL_RCC_SetRFWKPClockSource>:
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006b62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <LL_RCC_SetSMPSClockSource>:
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b88:	f023 0203 	bic.w	r2, r3, #3
 8006b8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <LL_RCC_SetSMPSPrescaler>:
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006bb4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <LL_RCC_SetUSARTClockSource>:
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bda:	f023 0203 	bic.w	r2, r3, #3
 8006bde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <LL_RCC_SetLPUARTClockSource>:
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006c0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <LL_RCC_SetI2CClockSource>:
{
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	091b      	lsrs	r3, r3, #4
 8006c36:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006c3a:	43db      	mvns	r3, r3
 8006c3c:	401a      	ands	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006c46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <LL_RCC_SetLPTIMClockSource>:
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c68:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	0c1b      	lsrs	r3, r3, #16
 8006c70:	041b      	lsls	r3, r3, #16
 8006c72:	43db      	mvns	r3, r3
 8006c74:	401a      	ands	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	041b      	lsls	r3, r3, #16
 8006c7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006c84:	bf00      	nop
 8006c86:	370c      	adds	r7, #12
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <LL_RCC_SetSAIClockSource>:
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ca0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006ca4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <LL_RCC_SetRNGClockSource>:
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ccc:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006cd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <LL_RCC_SetCLK48ClockSource>:
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cf8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006cfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <LL_RCC_SetUSBClockSource>:
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f7ff ffe3 	bl	8006ce8 <LL_RCC_SetCLK48ClockSource>
}
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <LL_RCC_SetADCClockSource>:
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006d32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d3a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006d3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <LL_RCC_SetRTCClockSource>:
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d66:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <LL_RCC_GetRTCClockSource>:
{
 8006d82:	b480      	push	{r7}
 8006d84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <LL_RCC_ForceBackupDomainReset>:
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006db4:	bf00      	nop
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <LL_RCC_ReleaseBackupDomainReset>:
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006dd6:	bf00      	nop
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <LL_RCC_PLLSAI1_Enable>:
{
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006df2:	6013      	str	r3, [r2, #0]
}
 8006df4:	bf00      	nop
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <LL_RCC_PLLSAI1_Disable>:
{
 8006dfe:	b480      	push	{r7}
 8006e00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e0c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e10:	6013      	str	r3, [r2, #0]
}
 8006e12:	bf00      	nop
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <LL_RCC_PLLSAI1_IsReady>:
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e2e:	d101      	bne.n	8006e34 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006e48:	2300      	movs	r3, #0
 8006e4a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d034      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e60:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e64:	d021      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006e66:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006e6a:	d81b      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e70:	d01d      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006e72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006e76:	d815      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00b      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006e7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e80:	d110      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e90:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006e92:	e00d      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3304      	adds	r3, #4
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 f94d 	bl	8007138 <RCCEx_PLLSAI1_ConfigNP>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006ea2:	e005      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	77fb      	strb	r3, [r7, #31]
        break;
 8006ea8:	e002      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006eaa:	bf00      	nop
 8006eac:	e000      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb0:	7ffb      	ldrb	r3, [r7, #31]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d105      	bne.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff fee8 	bl	8006c90 <LL_RCC_SetSAIClockSource>
 8006ec0:	e001      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec2:	7ffb      	ldrb	r3, [r7, #31]
 8006ec4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d046      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006ed2:	f7ff ff56 	bl	8006d82 <LL_RCC_GetRTCClockSource>
 8006ed6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d03c      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006ee2:	f7fe fc8d 	bl	8005800 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d105      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff ff30 	bl	8006d56 <LL_RCC_SetRTCClockSource>
 8006ef6:	e02e      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006ef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f00:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006f02:	f7ff ff4b 	bl	8006d9c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006f06:	f7ff ff5a 	bl	8006dbe <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006f18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006f22:	f7ff fde1 	bl	8006ae8 <LL_RCC_LSE_IsEnabled>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d114      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f2c:	f7fc f81e 	bl	8002f6c <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006f32:	e00b      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f34:	f7fc f81a 	bl	8002f6c <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d902      	bls.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	77fb      	strb	r3, [r7, #31]
              break;
 8006f4a:	e004      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006f4c:	f7ff fdde 	bl	8006b0c <LL_RCC_LSE_IsReady>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d1ee      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006f56:	7ffb      	ldrb	r3, [r7, #31]
 8006f58:	77bb      	strb	r3, [r7, #30]
 8006f5a:	e001      	b.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f5c:	7ffb      	ldrb	r3, [r7, #31]
 8006f5e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7ff fe2a 	bl	8006bca <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff fe35 	bl	8006bf6 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0310 	and.w	r3, r3, #16
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d004      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff fe5d 	bl	8006c5c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d004      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff fe52 	bl	8006c5c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d004      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f7ff fe2a 	bl	8006c22 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff fe1f 	bl	8006c22 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d022      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff fe8d 	bl	8006d14 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007002:	d107      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800700e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007012:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007018:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800701c:	d10b      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3304      	adds	r3, #4
 8007022:	4618      	mov	r0, r3
 8007024:	f000 f8e3 	bl	80071ee <RCCEx_PLLSAI1_ConfigNQ>
 8007028:	4603      	mov	r3, r0
 800702a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800702c:	7ffb      	ldrb	r3, [r7, #31]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007032:	7ffb      	ldrb	r3, [r7, #31]
 8007034:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800703e:	2b00      	cmp	r3, #0
 8007040:	d02b      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800704a:	d008      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007050:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007054:	d003      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705a:	2b00      	cmp	r3, #0
 800705c:	d105      	bne.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007062:	4618      	mov	r0, r3
 8007064:	f7ff fe2a 	bl	8006cbc <LL_RCC_SetRNGClockSource>
 8007068:	e00a      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	2000      	movs	r0, #0
 8007076:	f7ff fe21 	bl	8006cbc <LL_RCC_SetRNGClockSource>
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f7ff fe34 	bl	8006ce8 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007084:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007088:	d107      	bne.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800708a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007094:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007098:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d022      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff fe3d 	bl	8006d2a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070b8:	d107      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070c8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070d2:	d10b      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3304      	adds	r3, #4
 80070d8:	4618      	mov	r0, r3
 80070da:	f000 f8e3 	bl	80072a4 <RCCEx_PLLSAI1_ConfigNR>
 80070de:	4603      	mov	r3, r0
 80070e0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80070e2:	7ffb      	ldrb	r3, [r7, #31]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80070e8:	7ffb      	ldrb	r3, [r7, #31]
 80070ea:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7ff fd26 	bl	8006b4e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d009      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007112:	4618      	mov	r0, r3
 8007114:	f7ff fd45 	bl	8006ba2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff fd2c 	bl	8006b7a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007122:	7fbb      	ldrb	r3, [r7, #30]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3720      	adds	r7, #32
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8007130:	f7ff fcfe 	bl	8006b30 <LL_RCC_MSI_EnablePLLMode>
}
 8007134:	bf00      	nop
 8007136:	bd80      	pop	{r7, pc}

08007138 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007144:	f7ff fe5b 	bl	8006dfe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007148:	f7fb ff10 	bl	8002f6c <HAL_GetTick>
 800714c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800714e:	e009      	b.n	8007164 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007150:	f7fb ff0c 	bl	8002f6c <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d902      	bls.n	8007164 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	73fb      	strb	r3, [r7, #15]
      break;
 8007162:	e004      	b.n	800716e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007164:	f7ff fe5a 	bl	8006e1c <LL_RCC_PLLSAI1_IsReady>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1f0      	bne.n	8007150 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d137      	bne.n	80071e4 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	021b      	lsls	r3, r3, #8
 8007184:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007188:	4313      	orrs	r3, r2
 800718a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800718c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800719e:	4313      	orrs	r3, r2
 80071a0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80071a2:	f7ff fe1d 	bl	8006de0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071a6:	f7fb fee1 	bl	8002f6c <HAL_GetTick>
 80071aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80071ac:	e009      	b.n	80071c2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80071ae:	f7fb fedd 	bl	8002f6c <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d902      	bls.n	80071c2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	73fb      	strb	r3, [r7, #15]
        break;
 80071c0:	e004      	b.n	80071cc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80071c2:	f7ff fe2b 	bl	8006e1c <LL_RCC_PLLSAI1_IsReady>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d1f0      	bne.n	80071ae <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d108      	bne.n	80071e4 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80071d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071d6:	691a      	ldr	r2, [r3, #16]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071e0:	4313      	orrs	r3, r2
 80071e2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80071fa:	f7ff fe00 	bl	8006dfe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071fe:	f7fb feb5 	bl	8002f6c <HAL_GetTick>
 8007202:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007204:	e009      	b.n	800721a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007206:	f7fb feb1 	bl	8002f6c <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	d902      	bls.n	800721a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	73fb      	strb	r3, [r7, #15]
      break;
 8007218:	e004      	b.n	8007224 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800721a:	f7ff fdff 	bl	8006e1c <LL_RCC_PLLSAI1_IsReady>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1f0      	bne.n	8007206 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007224:	7bfb      	ldrb	r3, [r7, #15]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d137      	bne.n	800729a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800722a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	021b      	lsls	r3, r3, #8
 800723a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800723e:	4313      	orrs	r3, r2
 8007240:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007254:	4313      	orrs	r3, r2
 8007256:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007258:	f7ff fdc2 	bl	8006de0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800725c:	f7fb fe86 	bl	8002f6c <HAL_GetTick>
 8007260:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007262:	e009      	b.n	8007278 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007264:	f7fb fe82 	bl	8002f6c <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d902      	bls.n	8007278 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	73fb      	strb	r3, [r7, #15]
        break;
 8007276:	e004      	b.n	8007282 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007278:	f7ff fdd0 	bl	8006e1c <LL_RCC_PLLSAI1_IsReady>
 800727c:	4603      	mov	r3, r0
 800727e:	2b01      	cmp	r3, #1
 8007280:	d1f0      	bne.n	8007264 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d108      	bne.n	800729a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800728c:	691a      	ldr	r2, [r3, #16]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007296:	4313      	orrs	r3, r2
 8007298:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800729a:	7bfb      	ldrb	r3, [r7, #15]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80072b0:	f7ff fda5 	bl	8006dfe <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072b4:	f7fb fe5a 	bl	8002f6c <HAL_GetTick>
 80072b8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80072ba:	e009      	b.n	80072d0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072bc:	f7fb fe56 	bl	8002f6c <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d902      	bls.n	80072d0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	73fb      	strb	r3, [r7, #15]
      break;
 80072ce:	e004      	b.n	80072da <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80072d0:	f7ff fda4 	bl	8006e1c <LL_RCC_PLLSAI1_IsReady>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1f0      	bne.n	80072bc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80072da:	7bfb      	ldrb	r3, [r7, #15]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d137      	bne.n	8007350 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80072e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072f4:	4313      	orrs	r3, r2
 80072f6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80072f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800730a:	4313      	orrs	r3, r2
 800730c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800730e:	f7ff fd67 	bl	8006de0 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007312:	f7fb fe2b 	bl	8002f6c <HAL_GetTick>
 8007316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007318:	e009      	b.n	800732e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800731a:	f7fb fe27 	bl	8002f6c <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	2b02      	cmp	r3, #2
 8007326:	d902      	bls.n	800732e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	73fb      	strb	r3, [r7, #15]
        break;
 800732c:	e004      	b.n	8007338 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800732e:	f7ff fd75 	bl	8006e1c <LL_RCC_PLLSAI1_IsReady>
 8007332:	4603      	mov	r3, r0
 8007334:	2b01      	cmp	r3, #1
 8007336:	d1f0      	bne.n	800731a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d108      	bne.n	8007350 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800733e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800734c:	4313      	orrs	r3, r2
 800734e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e07a      	b.n	8007466 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d106      	bne.n	800738a <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7fb f937 	bl	80025f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2202      	movs	r2, #2
 800738e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f003 0310 	and.w	r3, r3, #16
 800739c:	2b10      	cmp	r3, #16
 800739e:	d058      	beq.n	8007452 <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	22ca      	movs	r2, #202	@ 0xca
 80073a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2253      	movs	r2, #83	@ 0x53
 80073ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f883 	bl	80074bc <RTC_EnterInitMode>
 80073b6:	4603      	mov	r3, r0
 80073b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d12c      	bne.n	800741a <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	6812      	ldr	r2, [r2, #0]
 80073ca:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80073ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073d2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6899      	ldr	r1, [r3, #8]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	68d2      	ldr	r2, [r2, #12]
 80073fa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6919      	ldr	r1, [r3, #16]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	041a      	lsls	r2, r3, #16
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f88b 	bl	800752c <RTC_ExitInitMode>
 8007416:	4603      	mov	r3, r0
 8007418:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d113      	bne.n	8007448 <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0203 	bic.w	r2, r2, #3
 800742e:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69da      	ldr	r2, [r3, #28]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	430a      	orrs	r2, r1
 8007446:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	22ff      	movs	r2, #255	@ 0xff
 800744e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007450:	e001      	b.n	8007456 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d103      	bne.n	8007464 <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8007464:	7bfb      	ldrb	r3, [r7, #15]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
	...

08007470 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a0d      	ldr	r2, [pc, #52]	@ (80074b8 <HAL_RTC_WaitForSynchro+0x48>)
 8007482:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007484:	f7fb fd72 	bl	8002f6c <HAL_GetTick>
 8007488:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800748a:	e009      	b.n	80074a0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800748c:	f7fb fd6e 	bl	8002f6c <HAL_GetTick>
 8007490:	4602      	mov	r2, r0
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800749a:	d901      	bls.n	80074a0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e007      	b.n	80074b0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0ee      	beq.n	800748c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	0001ff5f 	.word	0x0001ff5f

080074bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80074c8:	2300      	movs	r3, #0
 80074ca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d123      	bne.n	8007522 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80074e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074ea:	f7fb fd3f 	bl	8002f6c <HAL_GetTick>
 80074ee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80074f0:	e00d      	b.n	800750e <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074f2:	f7fb fd3b 	bl	8002f6c <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007500:	d905      	bls.n	800750e <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2204      	movs	r2, #4
 8007506:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007518:	2b00      	cmp	r3, #0
 800751a:	d102      	bne.n	8007522 <RTC_EnterInitMode+0x66>
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d1e7      	bne.n	80074f2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007522:	7bfb      	ldrb	r3, [r7, #15]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007546:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10b      	bne.n	800756e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff ff8a 	bl	8007470 <HAL_RTC_WaitForSynchro>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d005      	beq.n	800756e <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2204      	movs	r2, #4
 8007566:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800756e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8007584:	4b5f      	ldr	r3, [pc, #380]	@ (8007704 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a5f      	ldr	r2, [pc, #380]	@ (8007708 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800758a:	fba2 2303 	umull	r2, r3, r2, r3
 800758e:	0adb      	lsrs	r3, r3, #11
 8007590:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007594:	fb02 f303 	mul.w	r3, r2, r3
 8007598:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d101      	bne.n	80075a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 80075a4:	2302      	movs	r3, #2
 80075a6:	e0a7      	b.n	80076f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	22ca      	movs	r2, #202	@ 0xca
 80075be:	625a      	str	r2, [r3, #36]	@ 0x24
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2253      	movs	r2, #83	@ 0x53
 80075c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01a      	beq.n	800760c <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	3b01      	subs	r3, #1
 80075da:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10d      	bne.n	80075fe <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	22ff      	movs	r2, #255	@ 0xff
 80075e8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2203      	movs	r2, #3
 80075ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e07c      	b.n	80076f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f003 0304 	and.w	r3, r3, #4
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1e4      	bne.n	80075d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800761a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	b2da      	uxtb	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800762c:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800762e:	4b35      	ldr	r3, [pc, #212]	@ (8007704 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a35      	ldr	r2, [pc, #212]	@ (8007708 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 8007634:	fba2 2303 	umull	r2, r3, r2, r3
 8007638:	0adb      	lsrs	r3, r3, #11
 800763a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800763e:	fb02 f303 	mul.w	r3, r2, r3
 8007642:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	3b01      	subs	r3, #1
 8007648:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10d      	bne.n	800766c <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	22ff      	movs	r2, #255	@ 0xff
 8007656:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2203      	movs	r2, #3
 800765c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e045      	b.n	80076f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f003 0304 	and.w	r3, r3, #4
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0e4      	beq.n	8007644 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	689a      	ldr	r2, [r3, #8]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0207 	bic.w	r2, r2, #7
 8007688:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6899      	ldr	r1, [r3, #8]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	430a      	orrs	r2, r1
 8007698:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80076a2:	4b1a      	ldr	r3, [pc, #104]	@ (800770c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80076a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076a8:	4a18      	ldr	r2, [pc, #96]	@ (800770c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80076aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076ae:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80076b2:	4b16      	ldr	r3, [pc, #88]	@ (800770c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a15      	ldr	r2, [pc, #84]	@ (800770c <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 80076b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076bc:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076cc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80076dc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	22ff      	movs	r2, #255	@ 0xff
 80076e4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	20000008 	.word	0x20000008
 8007708:	10624dd3 	.word	0x10624dd3
 800770c:	58000800 	.word	0x58000800

08007710 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e095      	b.n	800784e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007726:	2b00      	cmp	r3, #0
 8007728:	d108      	bne.n	800773c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007732:	d009      	beq.n	8007748 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	61da      	str	r2, [r3, #28]
 800773a:	e005      	b.n	8007748 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d106      	bne.n	8007768 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7fb f9c2 	bl	8002aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800777e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007788:	d902      	bls.n	8007790 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	e002      	b.n	8007796 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007794:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800779e:	d007      	beq.n	80077b0 <HAL_SPI_Init+0xa0>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077a8:	d002      	beq.n	80077b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80077c0:	431a      	orrs	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	431a      	orrs	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077de:	431a      	orrs	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077e8:	431a      	orrs	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077f2:	ea42 0103 	orr.w	r1, r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	0c1b      	lsrs	r3, r3, #16
 800780c:	f003 0204 	and.w	r2, r3, #4
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007814:	f003 0310 	and.w	r3, r3, #16
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800782c:	ea42 0103 	orr.w	r1, r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b088      	sub	sp, #32
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	603b      	str	r3, [r7, #0]
 8007862:	4613      	mov	r3, r2
 8007864:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007866:	f7fb fb81 	bl	8002f6c <HAL_GetTick>
 800786a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800786c:	88fb      	ldrh	r3, [r7, #6]
 800786e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b01      	cmp	r3, #1
 800787a:	d001      	beq.n	8007880 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800787c:	2302      	movs	r3, #2
 800787e:	e15c      	b.n	8007b3a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <HAL_SPI_Transmit+0x36>
 8007886:	88fb      	ldrh	r3, [r7, #6]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e154      	b.n	8007b3a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_SPI_Transmit+0x48>
 800789a:	2302      	movs	r3, #2
 800789c:	e14d      	b.n	8007b3a <HAL_SPI_Transmit+0x2e4>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2203      	movs	r2, #3
 80078aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	88fa      	ldrh	r2, [r7, #6]
 80078be:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	88fa      	ldrh	r2, [r7, #6]
 80078c4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078f0:	d10f      	bne.n	8007912 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007900:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007910:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800791c:	2b40      	cmp	r3, #64	@ 0x40
 800791e:	d007      	beq.n	8007930 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800792e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007938:	d952      	bls.n	80079e0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d002      	beq.n	8007948 <HAL_SPI_Transmit+0xf2>
 8007942:	8b7b      	ldrh	r3, [r7, #26]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d145      	bne.n	80079d4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800794c:	881a      	ldrh	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007958:	1c9a      	adds	r2, r3, #2
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007962:	b29b      	uxth	r3, r3
 8007964:	3b01      	subs	r3, #1
 8007966:	b29a      	uxth	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800796c:	e032      	b.n	80079d4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f003 0302 	and.w	r3, r3, #2
 8007978:	2b02      	cmp	r3, #2
 800797a:	d112      	bne.n	80079a2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007980:	881a      	ldrh	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798c:	1c9a      	adds	r2, r3, #2
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80079a0:	e018      	b.n	80079d4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079a2:	f7fb fae3 	bl	8002f6c <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d803      	bhi.n	80079ba <HAL_SPI_Transmit+0x164>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b8:	d102      	bne.n	80079c0 <HAL_SPI_Transmit+0x16a>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d109      	bne.n	80079d4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e0b2      	b.n	8007b3a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1c7      	bne.n	800796e <HAL_SPI_Transmit+0x118>
 80079de:	e083      	b.n	8007ae8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <HAL_SPI_Transmit+0x198>
 80079e8:	8b7b      	ldrh	r3, [r7, #26]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d177      	bne.n	8007ade <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d912      	bls.n	8007a1e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079fc:	881a      	ldrh	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a08:	1c9a      	adds	r2, r3, #2
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	3b02      	subs	r3, #2
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a1c:	e05f      	b.n	8007ade <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	330c      	adds	r3, #12
 8007a28:	7812      	ldrb	r2, [r2, #0]
 8007a2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007a44:	e04b      	b.n	8007ade <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d12b      	bne.n	8007aac <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d912      	bls.n	8007a84 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a62:	881a      	ldrh	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a6e:	1c9a      	adds	r2, r3, #2
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	3b02      	subs	r3, #2
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a82:	e02c      	b.n	8007ade <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	330c      	adds	r3, #12
 8007a8e:	7812      	ldrb	r2, [r2, #0]
 8007a90:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007aaa:	e018      	b.n	8007ade <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aac:	f7fb fa5e 	bl	8002f6c <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	683a      	ldr	r2, [r7, #0]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d803      	bhi.n	8007ac4 <HAL_SPI_Transmit+0x26e>
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac2:	d102      	bne.n	8007aca <HAL_SPI_Transmit+0x274>
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d109      	bne.n	8007ade <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e02d      	b.n	8007b3a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1ae      	bne.n	8007a46 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ae8:	69fa      	ldr	r2, [r7, #28]
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 f947 	bl	8007d80 <SPI_EndRxTxTransaction>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2220      	movs	r2, #32
 8007afc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10a      	bne.n	8007b1c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b06:	2300      	movs	r3, #0
 8007b08:	617b      	str	r3, [r7, #20]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	617b      	str	r3, [r7, #20]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	617b      	str	r3, [r7, #20]
 8007b1a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e000      	b.n	8007b3a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007b38:	2300      	movs	r3, #0
  }
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3720      	adds	r7, #32
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
	...

08007b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	603b      	str	r3, [r7, #0]
 8007b50:	4613      	mov	r3, r2
 8007b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b54:	f7fb fa0a 	bl	8002f6c <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5c:	1a9b      	subs	r3, r3, r2
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	4413      	add	r3, r2
 8007b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b64:	f7fb fa02 	bl	8002f6c <HAL_GetTick>
 8007b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b6a:	4b39      	ldr	r3, [pc, #228]	@ (8007c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	015b      	lsls	r3, r3, #5
 8007b70:	0d1b      	lsrs	r3, r3, #20
 8007b72:	69fa      	ldr	r2, [r7, #28]
 8007b74:	fb02 f303 	mul.w	r3, r2, r3
 8007b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b7a:	e054      	b.n	8007c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b82:	d050      	beq.n	8007c26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b84:	f7fb f9f2 	bl	8002f6c <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d902      	bls.n	8007b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d13d      	bne.n	8007c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bb2:	d111      	bne.n	8007bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bbc:	d004      	beq.n	8007bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bc6:	d107      	bne.n	8007bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007be0:	d10f      	bne.n	8007c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e017      	b.n	8007c46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	3b01      	subs	r3, #1
 8007c24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	bf0c      	ite	eq
 8007c36:	2301      	moveq	r3, #1
 8007c38:	2300      	movne	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d19b      	bne.n	8007b7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3720      	adds	r7, #32
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000008 	.word	0x20000008

08007c54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08a      	sub	sp, #40	@ 0x28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
 8007c60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007c66:	f7fb f981 	bl	8002f6c <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6e:	1a9b      	subs	r3, r3, r2
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	4413      	add	r3, r2
 8007c74:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007c76:	f7fb f979 	bl	8002f6c <HAL_GetTick>
 8007c7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	330c      	adds	r3, #12
 8007c82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c84:	4b3d      	ldr	r3, [pc, #244]	@ (8007d7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	00da      	lsls	r2, r3, #3
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	0d1b      	lsrs	r3, r3, #20
 8007c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c96:	fb02 f303 	mul.w	r3, r2, r3
 8007c9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007c9c:	e060      	b.n	8007d60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007ca4:	d107      	bne.n	8007cb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d104      	bne.n	8007cb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbc:	d050      	beq.n	8007d60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007cbe:	f7fb f955 	bl	8002f6c <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d902      	bls.n	8007cd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d13d      	bne.n	8007d50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ce2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cec:	d111      	bne.n	8007d12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cf6:	d004      	beq.n	8007d02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d00:	d107      	bne.n	8007d12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d1a:	d10f      	bne.n	8007d3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007d3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e010      	b.n	8007d72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	4013      	ands	r3, r2
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d196      	bne.n	8007c9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3728      	adds	r7, #40	@ 0x28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20000008 	.word	0x20000008

08007d80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af02      	add	r7, sp, #8
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f7ff ff5b 	bl	8007c54 <SPI_WaitFifoStateUntilTimeout>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d007      	beq.n	8007db4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007da8:	f043 0220 	orr.w	r2, r3, #32
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e027      	b.n	8007e04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2180      	movs	r1, #128	@ 0x80
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f7ff fec0 	bl	8007b44 <SPI_WaitFlagStateUntilTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d007      	beq.n	8007dda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dce:	f043 0220 	orr.w	r2, r3, #32
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e014      	b.n	8007e04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f7ff ff34 	bl	8007c54 <SPI_WaitFifoStateUntilTimeout>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d007      	beq.n	8007e02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007df6:	f043 0220 	orr.w	r2, r3, #32
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e000      	b.n	8007e04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08a      	sub	sp, #40	@ 0x28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	4613      	mov	r3, r2
 8007e18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e20:	2b20      	cmp	r3, #32
 8007e22:	d167      	bne.n	8007ef4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <HAL_UART_Transmit_DMA+0x24>
 8007e2a:	88fb      	ldrh	r3, [r7, #6]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e060      	b.n	8007ef6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	88fa      	ldrh	r2, [r7, #6]
 8007e3e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	88fa      	ldrh	r2, [r7, #6]
 8007e46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2221      	movs	r2, #33	@ 0x21
 8007e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d028      	beq.n	8007eb4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e66:	4a26      	ldr	r2, [pc, #152]	@ (8007f00 <HAL_UART_Transmit_DMA+0xf4>)
 8007e68:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e6e:	4a25      	ldr	r2, [pc, #148]	@ (8007f04 <HAL_UART_Transmit_DMA+0xf8>)
 8007e70:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e76:	4a24      	ldr	r2, [pc, #144]	@ (8007f08 <HAL_UART_Transmit_DMA+0xfc>)
 8007e78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e7e:	2200      	movs	r2, #0
 8007e80:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3328      	adds	r3, #40	@ 0x28
 8007e92:	461a      	mov	r2, r3
 8007e94:	88fb      	ldrh	r3, [r7, #6]
 8007e96:	f7fb fa26 	bl	80032e6 <HAL_DMA_Start_IT>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d009      	beq.n	8007eb4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2210      	movs	r2, #16
 8007ea4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e020      	b.n	8007ef6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2240      	movs	r2, #64	@ 0x40
 8007eba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	613b      	str	r3, [r7, #16]
   return(result);
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3308      	adds	r3, #8
 8007eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007edc:	623a      	str	r2, [r7, #32]
 8007ede:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee0:	69f9      	ldr	r1, [r7, #28]
 8007ee2:	6a3a      	ldr	r2, [r7, #32]
 8007ee4:	e841 2300 	strex	r3, r2, [r1]
 8007ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1e5      	bne.n	8007ebc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	e000      	b.n	8007ef6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007ef4:	2302      	movs	r3, #2
  }
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3728      	adds	r7, #40	@ 0x28
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	08008703 	.word	0x08008703
 8007f04:	080087a1 	.word	0x080087a1
 8007f08:	080087c1 	.word	0x080087c1

08007f0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b0ba      	sub	sp, #232	@ 0xe8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007f36:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007f40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d11b      	bne.n	8007f80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f4c:	f003 0320 	and.w	r3, r3, #32
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d015      	beq.n	8007f80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f58:	f003 0320 	and.w	r3, r3, #32
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d105      	bne.n	8007f6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d009      	beq.n	8007f80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8312 	beq.w	800859a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	4798      	blx	r3
      }
      return;
 8007f7e:	e30c      	b.n	800859a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 8129 	beq.w	80081dc <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007f8e:	4b90      	ldr	r3, [pc, #576]	@ (80081d0 <HAL_UART_IRQHandler+0x2c4>)
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d106      	bne.n	8007fa4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007f9a:	4b8e      	ldr	r3, [pc, #568]	@ (80081d4 <HAL_UART_IRQHandler+0x2c8>)
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 811c 	beq.w	80081dc <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d011      	beq.n	8007fd4 <HAL_UART_IRQHandler+0xc8>
 8007fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fca:	f043 0201 	orr.w	r2, r3, #1
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d011      	beq.n	8008004 <HAL_UART_IRQHandler+0xf8>
 8007fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00b      	beq.n	8008004 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ffa:	f043 0204 	orr.w	r2, r3, #4
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b00      	cmp	r3, #0
 800800e:	d011      	beq.n	8008034 <HAL_UART_IRQHandler+0x128>
 8008010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2204      	movs	r2, #4
 8008022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800802a:	f043 0202 	orr.w	r2, r3, #2
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008038:	f003 0308 	and.w	r3, r3, #8
 800803c:	2b00      	cmp	r3, #0
 800803e:	d017      	beq.n	8008070 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008044:	f003 0320 	and.w	r3, r3, #32
 8008048:	2b00      	cmp	r3, #0
 800804a:	d105      	bne.n	8008058 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800804c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008050:	4b5f      	ldr	r3, [pc, #380]	@ (80081d0 <HAL_UART_IRQHandler+0x2c4>)
 8008052:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00b      	beq.n	8008070 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2208      	movs	r2, #8
 800805e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008066:	f043 0208 	orr.w	r2, r3, #8
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008078:	2b00      	cmp	r3, #0
 800807a:	d012      	beq.n	80080a2 <HAL_UART_IRQHandler+0x196>
 800807c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008080:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00c      	beq.n	80080a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008098:	f043 0220 	orr.w	r2, r3, #32
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 8278 	beq.w	800859e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d013      	beq.n	80080e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d105      	bne.n	80080d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d007      	beq.n	80080e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080f6:	2b40      	cmp	r3, #64	@ 0x40
 80080f8:	d005      	beq.n	8008106 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008102:	2b00      	cmp	r3, #0
 8008104:	d058      	beq.n	80081b8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fa95 	bl	8008636 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008116:	2b40      	cmp	r3, #64	@ 0x40
 8008118:	d148      	bne.n	80081ac <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3308      	adds	r3, #8
 8008120:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008128:	e853 3f00 	ldrex	r3, [r3]
 800812c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008130:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008138:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3308      	adds	r3, #8
 8008142:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008146:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800814a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008152:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800815e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1d9      	bne.n	800811a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800816c:	2b00      	cmp	r3, #0
 800816e:	d017      	beq.n	80081a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008176:	4a18      	ldr	r2, [pc, #96]	@ (80081d8 <HAL_UART_IRQHandler+0x2cc>)
 8008178:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008180:	4618      	mov	r0, r3
 8008182:	f7fb f98a 	bl	800349a <HAL_DMA_Abort_IT>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d01f      	beq.n	80081cc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800819a:	4610      	mov	r0, r2
 800819c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800819e:	e015      	b.n	80081cc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081aa:	e00f      	b.n	80081cc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b6:	e009      	b.n	80081cc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80081ca:	e1e8      	b.n	800859e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081cc:	bf00      	nop
    return;
 80081ce:	e1e6      	b.n	800859e <HAL_UART_IRQHandler+0x692>
 80081d0:	10000001 	.word	0x10000001
 80081d4:	04000120 	.word	0x04000120
 80081d8:	08008845 	.word	0x08008845

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	f040 8176 	bne.w	80084d2 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081ea:	f003 0310 	and.w	r3, r3, #16
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 816f 	beq.w	80084d2 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f8:	f003 0310 	and.w	r3, r3, #16
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f000 8168 	beq.w	80084d2 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2210      	movs	r2, #16
 8008208:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008214:	2b40      	cmp	r3, #64	@ 0x40
 8008216:	f040 80dc 	bne.w	80083d2 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008228:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 80b1 	beq.w	8008394 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008238:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800823c:	429a      	cmp	r2, r3
 800823e:	f080 80a9 	bcs.w	8008394 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008248:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b00      	cmp	r3, #0
 800825c:	f040 8087 	bne.w	800836e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008268:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800826c:	e853 3f00 	ldrex	r3, [r3]
 8008270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800827c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	461a      	mov	r2, r3
 8008286:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800828a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800828e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008292:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008296:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80082a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1da      	bne.n	8008260 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80082ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082bc:	f023 0301 	bic.w	r3, r3, #1
 80082c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3308      	adds	r3, #8
 80082ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80082ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80082d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80082d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80082e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e1      	bne.n	80082aa <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3308      	adds	r3, #8
 80082ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082f0:	e853 3f00 	ldrex	r3, [r3]
 80082f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80082f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3308      	adds	r3, #8
 8008306:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800830a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800830c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008310:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008312:	e841 2300 	strex	r3, r2, [r1]
 8008316:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1e3      	bne.n	80082e6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2220      	movs	r2, #32
 8008322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008334:	e853 3f00 	ldrex	r3, [r3]
 8008338:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800833a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800833c:	f023 0310 	bic.w	r3, r3, #16
 8008340:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	461a      	mov	r2, r3
 800834a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800834e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008350:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008352:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008354:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008356:	e841 2300 	strex	r3, r2, [r1]
 800835a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800835c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1e4      	bne.n	800832c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008368:	4618      	mov	r0, r3
 800836a:	f7fb f837 	bl	80033dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2202      	movs	r2, #2
 8008372:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8008386:	b292      	uxth	r2, r2
 8008388:	1a8a      	subs	r2, r1, r2
 800838a:	b292      	uxth	r2, r2
 800838c:	4611      	mov	r1, r2
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008392:	e106      	b.n	80085a2 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800839a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800839e:	429a      	cmp	r2, r3
 80083a0:	f040 80ff 	bne.w	80085a2 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	f040 80f5 	bne.w	80085a2 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80083ca:	4611      	mov	r1, r2
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	4798      	blx	r3
      return;
 80083d0:	e0e7      	b.n	80085a2 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083de:	b29b      	uxth	r3, r3
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 80d9 	beq.w	80085a6 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 80083f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 80d4 	beq.w	80085a6 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008406:	e853 3f00 	ldrex	r3, [r3]
 800840a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800840c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800840e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008412:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008420:	647b      	str	r3, [r7, #68]	@ 0x44
 8008422:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008424:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008426:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008428:	e841 2300 	strex	r3, r2, [r1]
 800842c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800842e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e4      	bne.n	80083fe <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3308      	adds	r3, #8
 800843a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843e:	e853 3f00 	ldrex	r3, [r3]
 8008442:	623b      	str	r3, [r7, #32]
   return(result);
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800844a:	f023 0301 	bic.w	r3, r3, #1
 800844e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3308      	adds	r3, #8
 8008458:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800845c:	633a      	str	r2, [r7, #48]	@ 0x30
 800845e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800846a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e1      	bne.n	8008434 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2220      	movs	r2, #32
 8008474:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	60fb      	str	r3, [r7, #12]
   return(result);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f023 0310 	bic.w	r3, r3, #16
 8008498:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	461a      	mov	r2, r3
 80084a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80084a6:	61fb      	str	r3, [r7, #28]
 80084a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084aa:	69b9      	ldr	r1, [r7, #24]
 80084ac:	69fa      	ldr	r2, [r7, #28]
 80084ae:	e841 2300 	strex	r3, r2, [r1]
 80084b2:	617b      	str	r3, [r7, #20]
   return(result);
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d1e4      	bne.n	8008484 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2202      	movs	r2, #2
 80084be:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80084c6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80084ca:	4611      	mov	r1, r2
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084d0:	e069      	b.n	80085a6 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d010      	beq.n	8008500 <HAL_UART_IRQHandler+0x5f4>
 80084de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80084f2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084fe:	e055      	b.n	80085ac <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008508:	2b00      	cmp	r3, #0
 800850a:	d014      	beq.n	8008536 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800850c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008514:	2b00      	cmp	r3, #0
 8008516:	d105      	bne.n	8008524 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800851c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008520:	2b00      	cmp	r3, #0
 8008522:	d008      	beq.n	8008536 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008528:	2b00      	cmp	r3, #0
 800852a:	d03e      	beq.n	80085aa <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	4798      	blx	r3
    }
    return;
 8008534:	e039      	b.n	80085aa <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800853a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	d009      	beq.n	8008556 <HAL_UART_IRQHandler+0x64a>
 8008542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f98c 	bl	800886c <UART_EndTransmit_IT>
    return;
 8008554:	e02a      	b.n	80085ac <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800855a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00b      	beq.n	800857a <HAL_UART_IRQHandler+0x66e>
 8008562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008566:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d005      	beq.n	800857a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008578:	e018      	b.n	80085ac <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800857a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800857e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d012      	beq.n	80085ac <HAL_UART_IRQHandler+0x6a0>
 8008586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800858a:	2b00      	cmp	r3, #0
 800858c:	da0e      	bge.n	80085ac <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008598:	e008      	b.n	80085ac <HAL_UART_IRQHandler+0x6a0>
      return;
 800859a:	bf00      	nop
 800859c:	e006      	b.n	80085ac <HAL_UART_IRQHandler+0x6a0>
    return;
 800859e:	bf00      	nop
 80085a0:	e004      	b.n	80085ac <HAL_UART_IRQHandler+0x6a0>
      return;
 80085a2:	bf00      	nop
 80085a4:	e002      	b.n	80085ac <HAL_UART_IRQHandler+0x6a0>
      return;
 80085a6:	bf00      	nop
 80085a8:	e000      	b.n	80085ac <HAL_UART_IRQHandler+0x6a0>
    return;
 80085aa:	bf00      	nop
  }
}
 80085ac:	37e8      	adds	r7, #232	@ 0xe8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop

080085b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b08f      	sub	sp, #60	@ 0x3c
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80085d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085dc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085e2:	e841 2300 	strex	r3, r2, [r1]
 80085e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1e6      	bne.n	80085bc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	3308      	adds	r3, #8
 80085f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	e853 3f00 	ldrex	r3, [r3]
 80085fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008604:	633b      	str	r3, [r7, #48]	@ 0x30
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3308      	adds	r3, #8
 800860c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800860e:	61ba      	str	r2, [r7, #24]
 8008610:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008612:	6979      	ldr	r1, [r7, #20]
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	e841 2300 	strex	r3, r2, [r1]
 800861a:	613b      	str	r3, [r7, #16]
   return(result);
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1e5      	bne.n	80085ee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2220      	movs	r2, #32
 8008626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800862a:	bf00      	nop
 800862c:	373c      	adds	r7, #60	@ 0x3c
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008636:	b480      	push	{r7}
 8008638:	b095      	sub	sp, #84	@ 0x54
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800864c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	461a      	mov	r2, r3
 800865a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800865c:	643b      	str	r3, [r7, #64]	@ 0x40
 800865e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008662:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800866a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e6      	bne.n	800863e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3308      	adds	r3, #8
 8008676:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	e853 3f00 	ldrex	r3, [r3]
 800867e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008686:	f023 0301 	bic.w	r3, r3, #1
 800868a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3308      	adds	r3, #8
 8008692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008694:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008696:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800869a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e3      	bne.n	8008670 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d118      	bne.n	80086e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f023 0310 	bic.w	r3, r3, #16
 80086c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	461a      	mov	r2, r3
 80086cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086ce:	61bb      	str	r3, [r7, #24]
 80086d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	6979      	ldr	r1, [r7, #20]
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	613b      	str	r3, [r7, #16]
   return(result);
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e6      	bne.n	80086b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2220      	movs	r2, #32
 80086e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80086f6:	bf00      	nop
 80086f8:	3754      	adds	r7, #84	@ 0x54
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b090      	sub	sp, #64	@ 0x40
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800870e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0320 	and.w	r3, r3, #32
 800871a:	2b00      	cmp	r3, #0
 800871c:	d137      	bne.n	800878e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800871e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008720:	2200      	movs	r2, #0
 8008722:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3308      	adds	r3, #8
 800872c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	623b      	str	r3, [r7, #32]
   return(result);
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800873c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800873e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3308      	adds	r3, #8
 8008744:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008746:	633a      	str	r2, [r7, #48]	@ 0x30
 8008748:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800874c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800874e:	e841 2300 	strex	r3, r2, [r1]
 8008752:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e5      	bne.n	8008726 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800875a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	e853 3f00 	ldrex	r3, [r3]
 8008766:	60fb      	str	r3, [r7, #12]
   return(result);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800876e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008778:	61fb      	str	r3, [r7, #28]
 800877a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	69b9      	ldr	r1, [r7, #24]
 800877e:	69fa      	ldr	r2, [r7, #28]
 8008780:	e841 2300 	strex	r3, r2, [r1]
 8008784:	617b      	str	r3, [r7, #20]
   return(result);
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e6      	bne.n	800875a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800878c:	e004      	b.n	8008798 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800878e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008790:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008794:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008796:	4798      	blx	r3
}
 8008798:	bf00      	nop
 800879a:	3740      	adds	r7, #64	@ 0x40
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087b8:	bf00      	nop
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087cc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087d4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087e8:	2b80      	cmp	r3, #128	@ 0x80
 80087ea:	d109      	bne.n	8008800 <UART_DMAError+0x40>
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	2b21      	cmp	r3, #33	@ 0x21
 80087f0:	d106      	bne.n	8008800 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80087fa:	6978      	ldr	r0, [r7, #20]
 80087fc:	f7ff feda 	bl	80085b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880a:	2b40      	cmp	r3, #64	@ 0x40
 800880c:	d109      	bne.n	8008822 <UART_DMAError+0x62>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b22      	cmp	r3, #34	@ 0x22
 8008812:	d106      	bne.n	8008822 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	2200      	movs	r2, #0
 8008818:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800881c:	6978      	ldr	r0, [r7, #20]
 800881e:	f7ff ff0a 	bl	8008636 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008828:	f043 0210 	orr.w	r2, r3, #16
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008838:	6978      	ldr	r0, [r7, #20]
 800883a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800883c:	bf00      	nop
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008850:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008864:	bf00      	nop
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b088      	sub	sp, #32
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	e853 3f00 	ldrex	r3, [r3]
 8008880:	60bb      	str	r3, [r7, #8]
   return(result);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008888:	61fb      	str	r3, [r7, #28]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	61bb      	str	r3, [r7, #24]
 8008894:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008896:	6979      	ldr	r1, [r7, #20]
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	e841 2300 	strex	r3, r2, [r1]
 800889e:	613b      	str	r3, [r7, #16]
   return(result);
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1e6      	bne.n	8008874 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088be:	bf00      	nop
 80088c0:	3720      	adds	r7, #32
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80088c6:	b480      	push	{r7}
 80088c8:	b085      	sub	sp, #20
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80088d6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80088da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	b29a      	uxth	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80088fc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008900:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008908:	b29a      	uxth	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	b29b      	uxth	r3, r3
 800890e:	43db      	mvns	r3, r3
 8008910:	b29b      	uxth	r3, r3
 8008912:	4013      	ands	r3, r2
 8008914:	b29a      	uxth	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800892a:	b480      	push	{r7}
 800892c:	b085      	sub	sp, #20
 800892e:	af00      	add	r7, sp, #0
 8008930:	60f8      	str	r0, [r7, #12]
 8008932:	1d3b      	adds	r3, r7, #4
 8008934:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2201      	movs	r2, #1
 800893c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
	...

08008968 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008968:	b480      	push	{r7}
 800896a:	b0a7      	sub	sp, #156	@ 0x9c
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	b29b      	uxth	r3, r3
 8008986:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800898a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800898e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	78db      	ldrb	r3, [r3, #3]
 8008996:	2b03      	cmp	r3, #3
 8008998:	d81f      	bhi.n	80089da <USB_ActivateEndpoint+0x72>
 800899a:	a201      	add	r2, pc, #4	@ (adr r2, 80089a0 <USB_ActivateEndpoint+0x38>)
 800899c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a0:	080089b1 	.word	0x080089b1
 80089a4:	080089cd 	.word	0x080089cd
 80089a8:	080089e3 	.word	0x080089e3
 80089ac:	080089bf 	.word	0x080089bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80089b0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80089b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80089b8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80089bc:	e012      	b.n	80089e4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80089be:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80089c2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80089c6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80089ca:	e00b      	b.n	80089e4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80089cc:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80089d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80089d4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80089d8:	e004      	b.n	80089e4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80089e0:	e000      	b.n	80089e4 <USB_ActivateEndpoint+0x7c>
      break;
 80089e2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	441a      	add	r2, r3
 80089ee:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80089f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	b21b      	sxth	r3, r3
 8008a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a1e:	b21a      	sxth	r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	b21b      	sxth	r3, r3
 8008a26:	4313      	orrs	r3, r2
 8008a28:	b21b      	sxth	r3, r3
 8008a2a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	441a      	add	r2, r3
 8008a38:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	7b1b      	ldrb	r3, [r3, #12]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f040 8180 	bne.w	8008d5a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	785b      	ldrb	r3, [r3, #1]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 8084 	beq.w	8008b6c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	61bb      	str	r3, [r7, #24]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	461a      	mov	r2, r3
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	4413      	add	r3, r2
 8008a76:	61bb      	str	r3, [r7, #24]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	00da      	lsls	r2, r3, #3
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a86:	617b      	str	r3, [r7, #20]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	88db      	ldrh	r3, [r3, #6]
 8008a8c:	085b      	lsrs	r3, r3, #1
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	827b      	strh	r3, [r7, #18]
 8008aa6:	8a7b      	ldrh	r3, [r7, #18]
 8008aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d01b      	beq.n	8008ae8 <USB_ActivateEndpoint+0x180>
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	881b      	ldrh	r3, [r3, #0]
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ac6:	823b      	strh	r3, [r7, #16]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	441a      	add	r2, r3
 8008ad2:	8a3b      	ldrh	r3, [r7, #16]
 8008ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ae0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	78db      	ldrb	r3, [r3, #3]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d020      	beq.n	8008b32 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b06:	81bb      	strh	r3, [r7, #12]
 8008b08:	89bb      	ldrh	r3, [r7, #12]
 8008b0a:	f083 0320 	eor.w	r3, r3, #32
 8008b0e:	81bb      	strh	r3, [r7, #12]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	441a      	add	r2, r3
 8008b1a:	89bb      	ldrh	r3, [r7, #12]
 8008b1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	8013      	strh	r3, [r2, #0]
 8008b30:	e3f9      	b.n	8009326 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	881b      	ldrh	r3, [r3, #0]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b48:	81fb      	strh	r3, [r7, #14]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	441a      	add	r2, r3
 8008b54:	89fb      	ldrh	r3, [r7, #14]
 8008b56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	8013      	strh	r3, [r2, #0]
 8008b6a:	e3dc      	b.n	8009326 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7c:	4413      	add	r3, r2
 8008b7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	00da      	lsls	r2, r3, #3
 8008b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b88:	4413      	add	r3, r2
 8008b8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	88db      	ldrh	r3, [r3, #6]
 8008b94:	085b      	lsrs	r3, r3, #1
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	005b      	lsls	r3, r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	461a      	mov	r2, r3
 8008bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb0:	4413      	add	r3, r2
 8008bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	00da      	lsls	r2, r3, #3
 8008bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd2:	801a      	strh	r2, [r3, #0]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <USB_ActivateEndpoint+0x28a>
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bee:	801a      	strh	r2, [r3, #0]
 8008bf0:	e041      	b.n	8008c76 <USB_ActivateEndpoint+0x30e>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	2b3e      	cmp	r3, #62	@ 0x3e
 8008bf8:	d81c      	bhi.n	8008c34 <USB_ActivateEndpoint+0x2cc>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	085b      	lsrs	r3, r3, #1
 8008c00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	f003 0301 	and.w	r3, r3, #1
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d004      	beq.n	8008c1a <USB_ActivateEndpoint+0x2b2>
 8008c10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c14:	3301      	adds	r3, #1
 8008c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	029b      	lsls	r3, r3, #10
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c30:	801a      	strh	r2, [r3, #0]
 8008c32:	e020      	b.n	8008c76 <USB_ActivateEndpoint+0x30e>
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	095b      	lsrs	r3, r3, #5
 8008c3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	f003 031f 	and.w	r3, r3, #31
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d104      	bne.n	8008c54 <USB_ActivateEndpoint+0x2ec>
 8008c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	029b      	lsls	r3, r3, #10
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	4313      	orrs	r3, r2
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c74:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008c84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008c86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d01b      	beq.n	8008cc6 <USB_ActivateEndpoint+0x35e>
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	781b      	ldrb	r3, [r3, #0]
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	881b      	ldrh	r3, [r3, #0]
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ca4:	843b      	strh	r3, [r7, #32]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	441a      	add	r2, r3
 8008cb0:	8c3b      	ldrh	r3, [r7, #32]
 8008cb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d124      	bne.n	8008d18 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ce4:	83bb      	strh	r3, [r7, #28]
 8008ce6:	8bbb      	ldrh	r3, [r7, #28]
 8008ce8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008cec:	83bb      	strh	r3, [r7, #28]
 8008cee:	8bbb      	ldrh	r3, [r7, #28]
 8008cf0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008cf4:	83bb      	strh	r3, [r7, #28]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	441a      	add	r2, r3
 8008d00:	8bbb      	ldrh	r3, [r7, #28]
 8008d02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	8013      	strh	r3, [r2, #0]
 8008d16:	e306      	b.n	8009326 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	881b      	ldrh	r3, [r3, #0]
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d2e:	83fb      	strh	r3, [r7, #30]
 8008d30:	8bfb      	ldrh	r3, [r7, #30]
 8008d32:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d36:	83fb      	strh	r3, [r7, #30]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	441a      	add	r2, r3
 8008d42:	8bfb      	ldrh	r3, [r7, #30]
 8008d44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	8013      	strh	r3, [r2, #0]
 8008d58:	e2e5      	b.n	8009326 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	78db      	ldrb	r3, [r3, #3]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d11e      	bne.n	8008da0 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d78:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	441a      	add	r2, r3
 8008d86:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008d8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d92:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	8013      	strh	r3, [r2, #0]
 8008d9e:	e01d      	b.n	8008ddc <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	881b      	ldrh	r3, [r3, #0]
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008db6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	441a      	add	r2, r3
 8008dc4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008dc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	461a      	mov	r2, r3
 8008dea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008dec:	4413      	add	r3, r2
 8008dee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	00da      	lsls	r2, r3, #3
 8008df6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008df8:	4413      	add	r3, r2
 8008dfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008dfe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	891b      	ldrh	r3, [r3, #8]
 8008e04:	085b      	lsrs	r3, r3, #1
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e0e:	801a      	strh	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e20:	4413      	add	r3, r2
 8008e22:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	00da      	lsls	r2, r3, #3
 8008e2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008e32:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	895b      	ldrh	r3, [r3, #10]
 8008e38:	085b      	lsrs	r3, r3, #1
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	005b      	lsls	r3, r3, #1
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e42:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	785b      	ldrb	r3, [r3, #1]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f040 81af 	bne.w	80091ac <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8008e5e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8008e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d01d      	beq.n	8008ea6 <USB_ActivateEndpoint+0x53e>
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e80:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	441a      	add	r2, r3
 8008e8e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8008e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	881b      	ldrh	r3, [r3, #0]
 8008eb2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008eb6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8008eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d01d      	beq.n	8008efe <USB_ActivateEndpoint+0x596>
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ed8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	441a      	add	r2, r3
 8008ee6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008eea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ef6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	785b      	ldrb	r3, [r3, #1]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d16b      	bne.n	8008fde <USB_ActivateEndpoint+0x676>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	461a      	mov	r2, r3
 8008f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f16:	4413      	add	r3, r2
 8008f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	00da      	lsls	r2, r3, #3
 8008f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f22:	4413      	add	r3, r2
 8008f24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008f28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f38:	801a      	strh	r2, [r3, #0]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10a      	bne.n	8008f58 <USB_ActivateEndpoint+0x5f0>
 8008f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f54:	801a      	strh	r2, [r3, #0]
 8008f56:	e05d      	b.n	8009014 <USB_ActivateEndpoint+0x6ac>
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f5e:	d81c      	bhi.n	8008f9a <USB_ActivateEndpoint+0x632>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	085b      	lsrs	r3, r3, #1
 8008f66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d004      	beq.n	8008f80 <USB_ActivateEndpoint+0x618>
 8008f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008f80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	029b      	lsls	r3, r3, #10
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	4313      	orrs	r3, r2
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f96:	801a      	strh	r2, [r3, #0]
 8008f98:	e03c      	b.n	8009014 <USB_ActivateEndpoint+0x6ac>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	095b      	lsrs	r3, r3, #5
 8008fa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	f003 031f 	and.w	r3, r3, #31
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d104      	bne.n	8008fba <USB_ActivateEndpoint+0x652>
 8008fb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fbc:	881b      	ldrh	r3, [r3, #0]
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	029b      	lsls	r3, r3, #10
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fda:	801a      	strh	r2, [r3, #0]
 8008fdc:	e01a      	b.n	8009014 <USB_ActivateEndpoint+0x6ac>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	785b      	ldrb	r3, [r3, #1]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d116      	bne.n	8009014 <USB_ActivateEndpoint+0x6ac>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ff6:	4413      	add	r3, r2
 8008ff8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	00da      	lsls	r2, r3, #3
 8009000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009002:	4413      	add	r3, r2
 8009004:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009008:	653b      	str	r3, [r7, #80]	@ 0x50
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	b29a      	uxth	r2, r3
 8009010:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009012:	801a      	strh	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	647b      	str	r3, [r7, #68]	@ 0x44
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	785b      	ldrb	r3, [r3, #1]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d16b      	bne.n	80090f8 <USB_ActivateEndpoint+0x790>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800902a:	b29b      	uxth	r3, r3
 800902c:	461a      	mov	r2, r3
 800902e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009030:	4413      	add	r3, r2
 8009032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	00da      	lsls	r2, r3, #3
 800903a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800903c:	4413      	add	r3, r2
 800903e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009042:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	b29b      	uxth	r3, r3
 800904a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800904e:	b29a      	uxth	r2, r3
 8009050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009052:	801a      	strh	r2, [r3, #0]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10a      	bne.n	8009072 <USB_ActivateEndpoint+0x70a>
 800905c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	b29b      	uxth	r3, r3
 8009062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800906a:	b29a      	uxth	r2, r3
 800906c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800906e:	801a      	strh	r2, [r3, #0]
 8009070:	e05b      	b.n	800912a <USB_ActivateEndpoint+0x7c2>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	2b3e      	cmp	r3, #62	@ 0x3e
 8009078:	d81c      	bhi.n	80090b4 <USB_ActivateEndpoint+0x74c>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	085b      	lsrs	r3, r3, #1
 8009080:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	2b00      	cmp	r3, #0
 800908e:	d004      	beq.n	800909a <USB_ActivateEndpoint+0x732>
 8009090:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009094:	3301      	adds	r3, #1
 8009096:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800909a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	b29a      	uxth	r2, r3
 80090a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	029b      	lsls	r3, r3, #10
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	4313      	orrs	r3, r2
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b0:	801a      	strh	r2, [r3, #0]
 80090b2:	e03a      	b.n	800912a <USB_ActivateEndpoint+0x7c2>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	095b      	lsrs	r3, r3, #5
 80090ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	f003 031f 	and.w	r3, r3, #31
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d104      	bne.n	80090d4 <USB_ActivateEndpoint+0x76c>
 80090ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090ce:	3b01      	subs	r3, #1
 80090d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80090d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d6:	881b      	ldrh	r3, [r3, #0]
 80090d8:	b29a      	uxth	r2, r3
 80090da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090de:	b29b      	uxth	r3, r3
 80090e0:	029b      	lsls	r3, r3, #10
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	4313      	orrs	r3, r2
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f4:	801a      	strh	r2, [r3, #0]
 80090f6:	e018      	b.n	800912a <USB_ActivateEndpoint+0x7c2>
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	785b      	ldrb	r3, [r3, #1]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d114      	bne.n	800912a <USB_ActivateEndpoint+0x7c2>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009106:	b29b      	uxth	r3, r3
 8009108:	461a      	mov	r2, r3
 800910a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800910c:	4413      	add	r3, r2
 800910e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	00da      	lsls	r2, r3, #3
 8009116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009118:	4413      	add	r3, r2
 800911a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800911e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	b29a      	uxth	r2, r3
 8009126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009128:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	b29b      	uxth	r3, r3
 8009138:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800913c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009140:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009142:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009144:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009148:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800914a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800914c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009150:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	441a      	add	r2, r3
 800915c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800915e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009162:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009166:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800916a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800916e:	b29b      	uxth	r3, r3
 8009170:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	4413      	add	r3, r2
 800917c:	881b      	ldrh	r3, [r3, #0]
 800917e:	b29b      	uxth	r3, r3
 8009180:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009188:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800918a:	687a      	ldr	r2, [r7, #4]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	441a      	add	r2, r3
 8009194:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009196:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800919a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800919e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	8013      	strh	r3, [r2, #0]
 80091aa:	e0bc      	b.n	8009326 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80091bc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80091c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01d      	beq.n	8009204 <USB_ActivateEndpoint+0x89c>
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091de:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	441a      	add	r2, r3
 80091ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80091f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80091fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009200:	b29b      	uxth	r3, r3
 8009202:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8009214:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8009218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01d      	beq.n	800925c <USB_ActivateEndpoint+0x8f4>
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009236:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	441a      	add	r2, r3
 8009244:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8009248:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800924c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009250:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009254:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009258:	b29b      	uxth	r3, r3
 800925a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	78db      	ldrb	r3, [r3, #3]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d024      	beq.n	80092ae <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	b29b      	uxth	r3, r3
 8009272:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800927a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800927e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009282:	f083 0320 	eor.w	r3, r3, #32
 8009286:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	441a      	add	r2, r3
 8009294:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009298:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800929c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	8013      	strh	r3, [r2, #0]
 80092ac:	e01d      	b.n	80092ea <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4413      	add	r3, r2
 80092b8:	881b      	ldrh	r3, [r3, #0]
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092c4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	441a      	add	r2, r3
 80092d2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80092d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009300:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	441a      	add	r2, r3
 800930e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800931a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800931e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009322:	b29b      	uxth	r3, r3
 8009324:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009326:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800932a:	4618      	mov	r0, r3
 800932c:	379c      	adds	r7, #156	@ 0x9c
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
 8009336:	bf00      	nop

08009338 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009338:	b480      	push	{r7}
 800933a:	b08d      	sub	sp, #52	@ 0x34
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	7b1b      	ldrb	r3, [r3, #12]
 8009346:	2b00      	cmp	r3, #0
 8009348:	f040 808e 	bne.w	8009468 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	785b      	ldrb	r3, [r3, #1]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d044      	beq.n	80093de <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	81bb      	strh	r3, [r7, #12]
 8009362:	89bb      	ldrh	r3, [r7, #12]
 8009364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01b      	beq.n	80093a4 <USB_DeactivateEndpoint+0x6c>
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	4413      	add	r3, r2
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	b29b      	uxth	r3, r3
 800937a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800937e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009382:	817b      	strh	r3, [r7, #10]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	441a      	add	r2, r3
 800938e:	897b      	ldrh	r3, [r7, #10]
 8009390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800939c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093ba:	813b      	strh	r3, [r7, #8]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	441a      	add	r2, r3
 80093c6:	893b      	ldrh	r3, [r7, #8]
 80093c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093d8:	b29b      	uxth	r3, r3
 80093da:	8013      	strh	r3, [r2, #0]
 80093dc:	e192      	b.n	8009704 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	827b      	strh	r3, [r7, #18]
 80093ec:	8a7b      	ldrh	r3, [r7, #18]
 80093ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d01b      	beq.n	800942e <USB_DeactivateEndpoint+0xf6>
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	881b      	ldrh	r3, [r3, #0]
 8009402:	b29b      	uxth	r3, r3
 8009404:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800940c:	823b      	strh	r3, [r7, #16]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	441a      	add	r2, r3
 8009418:	8a3b      	ldrh	r3, [r7, #16]
 800941a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800941e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009422:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800942a:	b29b      	uxth	r3, r3
 800942c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	b29b      	uxth	r3, r3
 800943c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009440:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009444:	81fb      	strh	r3, [r7, #14]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	441a      	add	r2, r3
 8009450:	89fb      	ldrh	r3, [r7, #14]
 8009452:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009456:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800945a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800945e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009462:	b29b      	uxth	r3, r3
 8009464:	8013      	strh	r3, [r2, #0]
 8009466:	e14d      	b.n	8009704 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	785b      	ldrb	r3, [r3, #1]
 800946c:	2b00      	cmp	r3, #0
 800946e:	f040 80a5 	bne.w	80095bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	843b      	strh	r3, [r7, #32]
 8009480:	8c3b      	ldrh	r3, [r7, #32]
 8009482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009486:	2b00      	cmp	r3, #0
 8009488:	d01b      	beq.n	80094c2 <USB_DeactivateEndpoint+0x18a>
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	881b      	ldrh	r3, [r3, #0]
 8009496:	b29b      	uxth	r3, r3
 8009498:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800949c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094a0:	83fb      	strh	r3, [r7, #30]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	441a      	add	r2, r3
 80094ac:	8bfb      	ldrh	r3, [r7, #30]
 80094ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80094ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094be:	b29b      	uxth	r3, r3
 80094c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	881b      	ldrh	r3, [r3, #0]
 80094ce:	83bb      	strh	r3, [r7, #28]
 80094d0:	8bbb      	ldrh	r3, [r7, #28]
 80094d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d01b      	beq.n	8009512 <USB_DeactivateEndpoint+0x1da>
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094f0:	837b      	strh	r3, [r7, #26]
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	441a      	add	r2, r3
 80094fc:	8b7b      	ldrh	r3, [r7, #26]
 80094fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009502:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800950a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800950e:	b29b      	uxth	r3, r3
 8009510:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	4413      	add	r3, r2
 800951c:	881b      	ldrh	r3, [r3, #0]
 800951e:	b29b      	uxth	r3, r3
 8009520:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009528:	833b      	strh	r3, [r7, #24]
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	441a      	add	r2, r3
 8009534:	8b3b      	ldrh	r3, [r7, #24]
 8009536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800953a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800953e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009542:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009546:	b29b      	uxth	r3, r3
 8009548:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	b29b      	uxth	r3, r3
 8009558:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800955c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009560:	82fb      	strh	r3, [r7, #22]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	441a      	add	r2, r3
 800956c:	8afb      	ldrh	r3, [r7, #22]
 800956e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800957a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800957e:	b29b      	uxth	r3, r3
 8009580:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	b29b      	uxth	r3, r3
 8009590:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009598:	82bb      	strh	r3, [r7, #20]
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	441a      	add	r2, r3
 80095a4:	8abb      	ldrh	r3, [r7, #20]
 80095a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	8013      	strh	r3, [r2, #0]
 80095ba:	e0a3      	b.n	8009704 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4413      	add	r3, r2
 80095c6:	881b      	ldrh	r3, [r3, #0]
 80095c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80095ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80095cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01b      	beq.n	800960c <USB_DeactivateEndpoint+0x2d4>
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	441a      	add	r2, r3
 80095f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80095f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009600:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009608:	b29b      	uxth	r3, r3
 800960a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	881b      	ldrh	r3, [r3, #0]
 8009618:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800961a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800961c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009620:	2b00      	cmp	r3, #0
 8009622:	d01b      	beq.n	800965c <USB_DeactivateEndpoint+0x324>
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	b29b      	uxth	r3, r3
 8009632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800963a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	441a      	add	r2, r3
 8009646:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009648:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800964c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009650:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009654:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009658:	b29b      	uxth	r3, r3
 800965a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4413      	add	r3, r2
 8009666:	881b      	ldrh	r3, [r3, #0]
 8009668:	b29b      	uxth	r3, r3
 800966a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800966e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009672:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	441a      	add	r2, r3
 800967e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009680:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009684:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009688:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800968c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009690:	b29b      	uxth	r3, r3
 8009692:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	881b      	ldrh	r3, [r3, #0]
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	441a      	add	r2, r3
 80096b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	b29b      	uxth	r3, r3
 80096da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	441a      	add	r2, r3
 80096ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80096f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009700:	b29b      	uxth	r3, r3
 8009702:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3734      	adds	r7, #52	@ 0x34
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b0ac      	sub	sp, #176	@ 0xb0
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	785b      	ldrb	r3, [r3, #1]
 8009720:	2b01      	cmp	r3, #1
 8009722:	f040 84ca 	bne.w	800a0ba <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	699a      	ldr	r2, [r3, #24]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	429a      	cmp	r2, r3
 8009730:	d904      	bls.n	800973c <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800973a:	e003      	b.n	8009744 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	7b1b      	ldrb	r3, [r3, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d122      	bne.n	8009792 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	6959      	ldr	r1, [r3, #20]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	88da      	ldrh	r2, [r3, #6]
 8009754:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009758:	b29b      	uxth	r3, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 febd 	bl	800a4da <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	613b      	str	r3, [r7, #16]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800976a:	b29b      	uxth	r3, r3
 800976c:	461a      	mov	r2, r3
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	4413      	add	r3, r2
 8009772:	613b      	str	r3, [r7, #16]
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	00da      	lsls	r2, r3, #3
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	4413      	add	r3, r2
 800977e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009788:	b29a      	uxth	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	801a      	strh	r2, [r3, #0]
 800978e:	f000 bc6f 	b.w	800a070 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	78db      	ldrb	r3, [r3, #3]
 8009796:	2b02      	cmp	r3, #2
 8009798:	f040 831e 	bne.w	8009dd8 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	6a1a      	ldr	r2, [r3, #32]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	f240 82cf 	bls.w	8009d48 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097c0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	441a      	add	r2, r3
 80097ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80097d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097da:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80097de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	6a1a      	ldr	r2, [r3, #32]
 80097ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80097ee:	1ad2      	subs	r2, r2, r3
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	b29b      	uxth	r3, r3
 8009802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 814f 	beq.w	8009aaa <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	785b      	ldrb	r3, [r3, #1]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d16b      	bne.n	80098f0 <USB_EPStartXfer+0x1de>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009822:	b29b      	uxth	r3, r3
 8009824:	461a      	mov	r2, r3
 8009826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009828:	4413      	add	r3, r2
 800982a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	00da      	lsls	r2, r3, #3
 8009832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009834:	4413      	add	r3, r2
 8009836:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800983a:	627b      	str	r3, [r7, #36]	@ 0x24
 800983c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	b29b      	uxth	r3, r3
 8009842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009846:	b29a      	uxth	r2, r3
 8009848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984a:	801a      	strh	r2, [r3, #0]
 800984c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10a      	bne.n	800986a <USB_EPStartXfer+0x158>
 8009854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	b29b      	uxth	r3, r3
 800985a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800985e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009862:	b29a      	uxth	r2, r3
 8009864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009866:	801a      	strh	r2, [r3, #0]
 8009868:	e05b      	b.n	8009922 <USB_EPStartXfer+0x210>
 800986a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800986e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009870:	d81c      	bhi.n	80098ac <USB_EPStartXfer+0x19a>
 8009872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009876:	085b      	lsrs	r3, r3, #1
 8009878:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800987c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	2b00      	cmp	r3, #0
 8009886:	d004      	beq.n	8009892 <USB_EPStartXfer+0x180>
 8009888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800988c:	3301      	adds	r3, #1
 800988e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	b29a      	uxth	r2, r3
 8009898:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800989c:	b29b      	uxth	r3, r3
 800989e:	029b      	lsls	r3, r3, #10
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	4313      	orrs	r3, r2
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a8:	801a      	strh	r2, [r3, #0]
 80098aa:	e03a      	b.n	8009922 <USB_EPStartXfer+0x210>
 80098ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098b0:	095b      	lsrs	r3, r3, #5
 80098b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80098b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098ba:	f003 031f 	and.w	r3, r3, #31
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d104      	bne.n	80098cc <USB_EPStartXfer+0x1ba>
 80098c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098c6:	3b01      	subs	r3, #1
 80098c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80098cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	029b      	lsls	r3, r3, #10
 80098da:	b29b      	uxth	r3, r3
 80098dc:	4313      	orrs	r3, r2
 80098de:	b29b      	uxth	r3, r3
 80098e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ec:	801a      	strh	r2, [r3, #0]
 80098ee:	e018      	b.n	8009922 <USB_EPStartXfer+0x210>
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	785b      	ldrb	r3, [r3, #1]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d114      	bne.n	8009922 <USB_EPStartXfer+0x210>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098fe:	b29b      	uxth	r3, r3
 8009900:	461a      	mov	r2, r3
 8009902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009904:	4413      	add	r3, r2
 8009906:	633b      	str	r3, [r7, #48]	@ 0x30
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	00da      	lsls	r2, r3, #3
 800990e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009910:	4413      	add	r3, r2
 8009912:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009916:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800991c:	b29a      	uxth	r2, r3
 800991e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009920:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	895b      	ldrh	r3, [r3, #10]
 8009926:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	6959      	ldr	r1, [r3, #20]
 800992e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009932:	b29b      	uxth	r3, r3
 8009934:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fdce 	bl	800a4da <USB_WritePMA>
            ep->xfer_buff += len;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	695a      	ldr	r2, [r3, #20]
 8009942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009946:	441a      	add	r2, r3
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	6a1a      	ldr	r2, [r3, #32]
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	429a      	cmp	r2, r3
 8009956:	d907      	bls.n	8009968 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	6a1a      	ldr	r2, [r3, #32]
 800995c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009960:	1ad2      	subs	r2, r2, r3
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	621a      	str	r2, [r3, #32]
 8009966:	e006      	b.n	8009976 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	6a1b      	ldr	r3, [r3, #32]
 800996c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	2200      	movs	r2, #0
 8009974:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	785b      	ldrb	r3, [r3, #1]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d16b      	bne.n	8009a56 <USB_EPStartXfer+0x344>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	61bb      	str	r3, [r7, #24]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009988:	b29b      	uxth	r3, r3
 800998a:	461a      	mov	r2, r3
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	4413      	add	r3, r2
 8009990:	61bb      	str	r3, [r7, #24]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	00da      	lsls	r2, r3, #3
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	4413      	add	r3, r2
 800999c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80099a0:	617b      	str	r3, [r7, #20]
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	801a      	strh	r2, [r3, #0]
 80099b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10a      	bne.n	80099d0 <USB_EPStartXfer+0x2be>
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	881b      	ldrh	r3, [r3, #0]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	801a      	strh	r2, [r3, #0]
 80099ce:	e05d      	b.n	8009a8c <USB_EPStartXfer+0x37a>
 80099d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80099d6:	d81c      	bhi.n	8009a12 <USB_EPStartXfer+0x300>
 80099d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099dc:	085b      	lsrs	r3, r3, #1
 80099de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80099e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d004      	beq.n	80099f8 <USB_EPStartXfer+0x2e6>
 80099ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80099f2:	3301      	adds	r3, #1
 80099f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	881b      	ldrh	r3, [r3, #0]
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	029b      	lsls	r3, r3, #10
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	801a      	strh	r2, [r3, #0]
 8009a10:	e03c      	b.n	8009a8c <USB_EPStartXfer+0x37a>
 8009a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a16:	095b      	lsrs	r3, r3, #5
 8009a18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009a1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a20:	f003 031f 	and.w	r3, r3, #31
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d104      	bne.n	8009a32 <USB_EPStartXfer+0x320>
 8009a28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	029b      	lsls	r3, r3, #10
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	4313      	orrs	r3, r2
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	801a      	strh	r2, [r3, #0]
 8009a54:	e01a      	b.n	8009a8c <USB_EPStartXfer+0x37a>
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	785b      	ldrb	r3, [r3, #1]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d116      	bne.n	8009a8c <USB_EPStartXfer+0x37a>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	623b      	str	r3, [r7, #32]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	4413      	add	r3, r2
 8009a70:	623b      	str	r3, [r7, #32]
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	00da      	lsls	r2, r3, #3
 8009a78:	6a3b      	ldr	r3, [r7, #32]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a80:	61fb      	str	r3, [r7, #28]
 8009a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	891b      	ldrh	r3, [r3, #8]
 8009a90:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	6959      	ldr	r1, [r3, #20]
 8009a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fd19 	bl	800a4da <USB_WritePMA>
 8009aa8:	e2e2      	b.n	800a070 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	785b      	ldrb	r3, [r3, #1]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d16b      	bne.n	8009b8a <USB_EPStartXfer+0x478>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	461a      	mov	r2, r3
 8009ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ac2:	4413      	add	r3, r2
 8009ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	00da      	lsls	r2, r3, #3
 8009acc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ace:	4413      	add	r3, r2
 8009ad0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ad4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ae4:	801a      	strh	r2, [r3, #0]
 8009ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10a      	bne.n	8009b04 <USB_EPStartXfer+0x3f2>
 8009aee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b00:	801a      	strh	r2, [r3, #0]
 8009b02:	e05d      	b.n	8009bc0 <USB_EPStartXfer+0x4ae>
 8009b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b08:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b0a:	d81c      	bhi.n	8009b46 <USB_EPStartXfer+0x434>
 8009b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b10:	085b      	lsrs	r3, r3, #1
 8009b12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d004      	beq.n	8009b2c <USB_EPStartXfer+0x41a>
 8009b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b26:	3301      	adds	r3, #1
 8009b28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	029b      	lsls	r3, r3, #10
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b42:	801a      	strh	r2, [r3, #0]
 8009b44:	e03c      	b.n	8009bc0 <USB_EPStartXfer+0x4ae>
 8009b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b4a:	095b      	lsrs	r3, r3, #5
 8009b4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009b54:	f003 031f 	and.w	r3, r3, #31
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d104      	bne.n	8009b66 <USB_EPStartXfer+0x454>
 8009b5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b60:	3b01      	subs	r3, #1
 8009b62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b68:	881b      	ldrh	r3, [r3, #0]
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	029b      	lsls	r3, r3, #10
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	4313      	orrs	r3, r2
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b86:	801a      	strh	r2, [r3, #0]
 8009b88:	e01a      	b.n	8009bc0 <USB_EPStartXfer+0x4ae>
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	785b      	ldrb	r3, [r3, #1]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d116      	bne.n	8009bc0 <USB_EPStartXfer+0x4ae>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ba2:	4413      	add	r3, r2
 8009ba4:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	00da      	lsls	r2, r3, #3
 8009bac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bae:	4413      	add	r3, r2
 8009bb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	891b      	ldrh	r3, [r3, #8]
 8009bc4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	6959      	ldr	r1, [r3, #20]
 8009bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fc7f 	bl	800a4da <USB_WritePMA>
            ep->xfer_buff += len;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	695a      	ldr	r2, [r3, #20]
 8009be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009be4:	441a      	add	r2, r3
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	6a1a      	ldr	r2, [r3, #32]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d907      	bls.n	8009c06 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	6a1a      	ldr	r2, [r3, #32]
 8009bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bfe:	1ad2      	subs	r2, r2, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	621a      	str	r2, [r3, #32]
 8009c04:	e006      	b.n	8009c14 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2200      	movs	r2, #0
 8009c12:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	785b      	ldrb	r3, [r3, #1]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d16b      	bne.n	8009cf8 <USB_EPStartXfer+0x5e6>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c30:	4413      	add	r3, r2
 8009c32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	00da      	lsls	r2, r3, #3
 8009c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c46:	881b      	ldrh	r3, [r3, #0]
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c52:	801a      	strh	r2, [r3, #0]
 8009c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10a      	bne.n	8009c72 <USB_EPStartXfer+0x560>
 8009c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c6e:	801a      	strh	r2, [r3, #0]
 8009c70:	e05b      	b.n	8009d2a <USB_EPStartXfer+0x618>
 8009c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c76:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c78:	d81c      	bhi.n	8009cb4 <USB_EPStartXfer+0x5a2>
 8009c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c7e:	085b      	lsrs	r3, r3, #1
 8009c80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d004      	beq.n	8009c9a <USB_EPStartXfer+0x588>
 8009c90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c94:	3301      	adds	r3, #1
 8009c96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	029b      	lsls	r3, r3, #10
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	4313      	orrs	r3, r2
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb0:	801a      	strh	r2, [r3, #0]
 8009cb2:	e03a      	b.n	8009d2a <USB_EPStartXfer+0x618>
 8009cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cb8:	095b      	lsrs	r3, r3, #5
 8009cba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009cbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009cc2:	f003 031f 	and.w	r3, r3, #31
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d104      	bne.n	8009cd4 <USB_EPStartXfer+0x5c2>
 8009cca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd6:	881b      	ldrh	r3, [r3, #0]
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	029b      	lsls	r3, r3, #10
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf4:	801a      	strh	r2, [r3, #0]
 8009cf6:	e018      	b.n	8009d2a <USB_EPStartXfer+0x618>
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	785b      	ldrb	r3, [r3, #1]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d114      	bne.n	8009d2a <USB_EPStartXfer+0x618>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	461a      	mov	r2, r3
 8009d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d0c:	4413      	add	r3, r2
 8009d0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	00da      	lsls	r2, r3, #3
 8009d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d18:	4413      	add	r3, r2
 8009d1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	895b      	ldrh	r3, [r3, #10]
 8009d2e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	6959      	ldr	r1, [r3, #20]
 8009d36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fbca 	bl	800a4da <USB_WritePMA>
 8009d46:	e193      	b.n	800a070 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	6a1b      	ldr	r3, [r3, #32]
 8009d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d66:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	441a      	add	r2, r3
 8009d74:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009d78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	461a      	mov	r2, r3
 8009d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d9c:	4413      	add	r3, r2
 8009d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	00da      	lsls	r2, r3, #3
 8009da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009da8:	4413      	add	r3, r2
 8009daa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009dae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009db8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	891b      	ldrh	r3, [r3, #8]
 8009dbe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	6959      	ldr	r1, [r3, #20]
 8009dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fb82 	bl	800a4da <USB_WritePMA>
 8009dd6:	e14b      	b.n	800a070 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	6a1a      	ldr	r2, [r3, #32]
 8009ddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009de0:	1ad2      	subs	r2, r2, r3
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	881b      	ldrh	r3, [r3, #0]
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 809a 	beq.w	8009f32 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	785b      	ldrb	r3, [r3, #1]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d16b      	bne.n	8009ee2 <USB_EPStartXfer+0x7d0>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	461a      	mov	r2, r3
 8009e18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e1a:	4413      	add	r3, r2
 8009e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	00da      	lsls	r2, r3, #3
 8009e24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e26:	4413      	add	r3, r2
 8009e28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e3c:	801a      	strh	r2, [r3, #0]
 8009e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10a      	bne.n	8009e5c <USB_EPStartXfer+0x74a>
 8009e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e58:	801a      	strh	r2, [r3, #0]
 8009e5a:	e05b      	b.n	8009f14 <USB_EPStartXfer+0x802>
 8009e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e60:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e62:	d81c      	bhi.n	8009e9e <USB_EPStartXfer+0x78c>
 8009e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e68:	085b      	lsrs	r3, r3, #1
 8009e6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d004      	beq.n	8009e84 <USB_EPStartXfer+0x772>
 8009e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e7e:	3301      	adds	r3, #1
 8009e80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	029b      	lsls	r3, r3, #10
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	4313      	orrs	r3, r2
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e9a:	801a      	strh	r2, [r3, #0]
 8009e9c:	e03a      	b.n	8009f14 <USB_EPStartXfer+0x802>
 8009e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ea2:	095b      	lsrs	r3, r3, #5
 8009ea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ea8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009eac:	f003 031f 	and.w	r3, r3, #31
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d104      	bne.n	8009ebe <USB_EPStartXfer+0x7ac>
 8009eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ebe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ec0:	881b      	ldrh	r3, [r3, #0]
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	029b      	lsls	r3, r3, #10
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ed6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ede:	801a      	strh	r2, [r3, #0]
 8009ee0:	e018      	b.n	8009f14 <USB_EPStartXfer+0x802>
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	785b      	ldrb	r3, [r3, #1]
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d114      	bne.n	8009f14 <USB_EPStartXfer+0x802>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ef6:	4413      	add	r3, r2
 8009ef8:	673b      	str	r3, [r7, #112]	@ 0x70
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	00da      	lsls	r2, r3, #3
 8009f00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f02:	4413      	add	r3, r2
 8009f04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	895b      	ldrh	r3, [r3, #10]
 8009f18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	6959      	ldr	r1, [r3, #20]
 8009f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fad5 	bl	800a4da <USB_WritePMA>
 8009f30:	e09e      	b.n	800a070 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	785b      	ldrb	r3, [r3, #1]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d16b      	bne.n	800a012 <USB_EPStartXfer+0x900>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	461a      	mov	r2, r3
 8009f48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f4a:	4413      	add	r3, r2
 8009f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	00da      	lsls	r2, r3, #3
 8009f54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f56:	4413      	add	r3, r2
 8009f58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f6c:	801a      	strh	r2, [r3, #0]
 8009f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10a      	bne.n	8009f8c <USB_EPStartXfer+0x87a>
 8009f76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f88:	801a      	strh	r2, [r3, #0]
 8009f8a:	e063      	b.n	800a054 <USB_EPStartXfer+0x942>
 8009f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f90:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f92:	d81c      	bhi.n	8009fce <USB_EPStartXfer+0x8bc>
 8009f94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f98:	085b      	lsrs	r3, r3, #1
 8009f9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d004      	beq.n	8009fb4 <USB_EPStartXfer+0x8a2>
 8009faa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009fae:	3301      	adds	r3, #1
 8009fb0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fb6:	881b      	ldrh	r3, [r3, #0]
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	029b      	lsls	r3, r3, #10
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fca:	801a      	strh	r2, [r3, #0]
 8009fcc:	e042      	b.n	800a054 <USB_EPStartXfer+0x942>
 8009fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fd2:	095b      	lsrs	r3, r3, #5
 8009fd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fdc:	f003 031f 	and.w	r3, r3, #31
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d104      	bne.n	8009fee <USB_EPStartXfer+0x8dc>
 8009fe4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009fee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	029b      	lsls	r3, r3, #10
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	4313      	orrs	r3, r2
 800a000:	b29b      	uxth	r3, r3
 800a002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a00e:	801a      	strh	r2, [r3, #0]
 800a010:	e020      	b.n	800a054 <USB_EPStartXfer+0x942>
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	785b      	ldrb	r3, [r3, #1]
 800a016:	2b01      	cmp	r3, #1
 800a018:	d11c      	bne.n	800a054 <USB_EPStartXfer+0x942>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a026:	b29b      	uxth	r3, r3
 800a028:	461a      	mov	r2, r3
 800a02a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a02e:	4413      	add	r3, r2
 800a030:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	00da      	lsls	r2, r3, #3
 800a03a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a03e:	4413      	add	r3, r2
 800a040:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a044:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a052:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	891b      	ldrh	r3, [r3, #8]
 800a058:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	6959      	ldr	r1, [r3, #20]
 800a060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a064:	b29b      	uxth	r3, r3
 800a066:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fa35 	bl	800a4da <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4413      	add	r3, r2
 800a07a:	881b      	ldrh	r3, [r3, #0]
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a082:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a086:	817b      	strh	r3, [r7, #10]
 800a088:	897b      	ldrh	r3, [r7, #10]
 800a08a:	f083 0310 	eor.w	r3, r3, #16
 800a08e:	817b      	strh	r3, [r7, #10]
 800a090:	897b      	ldrh	r3, [r7, #10]
 800a092:	f083 0320 	eor.w	r3, r3, #32
 800a096:	817b      	strh	r3, [r7, #10]
 800a098:	687a      	ldr	r2, [r7, #4]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	441a      	add	r2, r3
 800a0a2:	897b      	ldrh	r3, [r7, #10]
 800a0a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	8013      	strh	r3, [r2, #0]
 800a0b8:	e0d5      	b.n	800a266 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	7b1b      	ldrb	r3, [r3, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d156      	bne.n	800a170 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d122      	bne.n	800a110 <USB_EPStartXfer+0x9fe>
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	78db      	ldrb	r3, [r3, #3]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d11e      	bne.n	800a110 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0e8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	441a      	add	r2, r3
 800a0f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a0fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a102:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	8013      	strh	r3, [r2, #0]
 800a10e:	e01d      	b.n	800a14c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	881b      	ldrh	r3, [r3, #0]
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a126:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	441a      	add	r2, r3
 800a134:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800a138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a13c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a148:	b29b      	uxth	r3, r3
 800a14a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	699a      	ldr	r2, [r3, #24]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	691b      	ldr	r3, [r3, #16]
 800a154:	429a      	cmp	r2, r3
 800a156:	d907      	bls.n	800a168 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	699a      	ldr	r2, [r3, #24]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	1ad2      	subs	r2, r2, r3
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	619a      	str	r2, [r3, #24]
 800a166:	e054      	b.n	800a212 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2200      	movs	r2, #0
 800a16c:	619a      	str	r2, [r3, #24]
 800a16e:	e050      	b.n	800a212 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	78db      	ldrb	r3, [r3, #3]
 800a174:	2b02      	cmp	r3, #2
 800a176:	d142      	bne.n	800a1fe <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	69db      	ldr	r3, [r3, #28]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d048      	beq.n	800a212 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	881b      	ldrh	r3, [r3, #0]
 800a18c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a190:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d005      	beq.n	800a1a8 <USB_EPStartXfer+0xa96>
 800a19c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a1a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10b      	bne.n	800a1c0 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a1a8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a1ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d12e      	bne.n	800a212 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a1b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a1b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d128      	bne.n	800a212 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	881b      	ldrh	r3, [r3, #0]
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1d6:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	441a      	add	r2, r3
 800a1e4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800a1e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	8013      	strh	r3, [r2, #0]
 800a1fc:	e009      	b.n	800a212 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	78db      	ldrb	r3, [r3, #3]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d103      	bne.n	800a20e <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	2200      	movs	r2, #0
 800a20a:	619a      	str	r2, [r3, #24]
 800a20c:	e001      	b.n	800a212 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e02a      	b.n	800a268 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	881b      	ldrh	r3, [r3, #0]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a228:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a22c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a230:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a234:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a238:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a23c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a240:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	441a      	add	r2, r3
 800a24e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a252:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a256:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a25a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a25e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a262:	b29b      	uxth	r3, r3
 800a264:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	37b0      	adds	r7, #176	@ 0xb0
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	785b      	ldrb	r3, [r3, #1]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d020      	beq.n	800a2c4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	881b      	ldrh	r3, [r3, #0]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a298:	81bb      	strh	r3, [r7, #12]
 800a29a:	89bb      	ldrh	r3, [r7, #12]
 800a29c:	f083 0310 	eor.w	r3, r3, #16
 800a2a0:	81bb      	strh	r3, [r7, #12]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	441a      	add	r2, r3
 800a2ac:	89bb      	ldrh	r3, [r7, #12]
 800a2ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	8013      	strh	r3, [r2, #0]
 800a2c2:	e01f      	b.n	800a304 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	881b      	ldrh	r3, [r3, #0]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2da:	81fb      	strh	r3, [r7, #14]
 800a2dc:	89fb      	ldrh	r3, [r7, #14]
 800a2de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a2e2:	81fb      	strh	r3, [r7, #14]
 800a2e4:	687a      	ldr	r2, [r7, #4]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	441a      	add	r2, r3
 800a2ee:	89fb      	ldrh	r3, [r7, #14]
 800a2f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a300:	b29b      	uxth	r3, r3
 800a302:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3714      	adds	r7, #20
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr

0800a312 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a312:	b480      	push	{r7}
 800a314:	b087      	sub	sp, #28
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	785b      	ldrb	r3, [r3, #1]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d04c      	beq.n	800a3be <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	881b      	ldrh	r3, [r3, #0]
 800a330:	823b      	strh	r3, [r7, #16]
 800a332:	8a3b      	ldrh	r3, [r7, #16]
 800a334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d01b      	beq.n	800a374 <USB_EPClearStall+0x62>
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	881b      	ldrh	r3, [r3, #0]
 800a348:	b29b      	uxth	r3, r3
 800a34a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a34e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a352:	81fb      	strh	r3, [r7, #14]
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	441a      	add	r2, r3
 800a35e:	89fb      	ldrh	r3, [r7, #14]
 800a360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a36c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a370:	b29b      	uxth	r3, r3
 800a372:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	78db      	ldrb	r3, [r3, #3]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d06c      	beq.n	800a456 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a38e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a392:	81bb      	strh	r3, [r7, #12]
 800a394:	89bb      	ldrh	r3, [r7, #12]
 800a396:	f083 0320 	eor.w	r3, r3, #32
 800a39a:	81bb      	strh	r3, [r7, #12]
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	441a      	add	r2, r3
 800a3a6:	89bb      	ldrh	r3, [r7, #12]
 800a3a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	8013      	strh	r3, [r2, #0]
 800a3bc:	e04b      	b.n	800a456 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	4413      	add	r3, r2
 800a3c8:	881b      	ldrh	r3, [r3, #0]
 800a3ca:	82fb      	strh	r3, [r7, #22]
 800a3cc:	8afb      	ldrh	r3, [r7, #22]
 800a3ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d01b      	beq.n	800a40e <USB_EPClearStall+0xfc>
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4413      	add	r3, r2
 800a3e0:	881b      	ldrh	r3, [r3, #0]
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3ec:	82bb      	strh	r3, [r7, #20]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	441a      	add	r2, r3
 800a3f8:	8abb      	ldrh	r3, [r7, #20]
 800a3fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a402:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4413      	add	r3, r2
 800a418:	881b      	ldrh	r3, [r3, #0]
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a424:	827b      	strh	r3, [r7, #18]
 800a426:	8a7b      	ldrh	r3, [r7, #18]
 800a428:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a42c:	827b      	strh	r3, [r7, #18]
 800a42e:	8a7b      	ldrh	r3, [r7, #18]
 800a430:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a434:	827b      	strh	r3, [r7, #18]
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	441a      	add	r2, r3
 800a440:	8a7b      	ldrh	r3, [r7, #18]
 800a442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a44a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a44e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a452:	b29b      	uxth	r3, r3
 800a454:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	371c      	adds	r7, #28
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a470:	78fb      	ldrb	r3, [r7, #3]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d103      	bne.n	800a47e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2280      	movs	r2, #128	@ 0x80
 800a47a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b085      	sub	sp, #20
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b08b      	sub	sp, #44	@ 0x2c
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	60f8      	str	r0, [r7, #12]
 800a4e2:	60b9      	str	r1, [r7, #8]
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	80fb      	strh	r3, [r7, #6]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a4f0:	88bb      	ldrh	r3, [r7, #4]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	085b      	lsrs	r3, r3, #1
 800a4f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a500:	88fa      	ldrh	r2, [r7, #6]
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	4413      	add	r3, r2
 800a506:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a50a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a510:	e01c      	b.n	800a54c <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	3301      	adds	r3, #1
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	b21b      	sxth	r3, r3
 800a520:	021b      	lsls	r3, r3, #8
 800a522:	b21a      	sxth	r2, r3
 800a524:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a528:	4313      	orrs	r3, r2
 800a52a:	b21b      	sxth	r3, r3
 800a52c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a52e:	6a3b      	ldr	r3, [r7, #32]
 800a530:	8a7a      	ldrh	r2, [r7, #18]
 800a532:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a534:	6a3b      	ldr	r3, [r7, #32]
 800a536:	3302      	adds	r3, #2
 800a538:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	3301      	adds	r3, #1
 800a53e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	3301      	adds	r3, #1
 800a544:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a548:	3b01      	subs	r3, #1
 800a54a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1df      	bne.n	800a512 <USB_WritePMA+0x38>
  }
}
 800a552:	bf00      	nop
 800a554:	bf00      	nop
 800a556:	372c      	adds	r7, #44	@ 0x2c
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a560:	b480      	push	{r7}
 800a562:	b08b      	sub	sp, #44	@ 0x2c
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	4611      	mov	r1, r2
 800a56c:	461a      	mov	r2, r3
 800a56e:	460b      	mov	r3, r1
 800a570:	80fb      	strh	r3, [r7, #6]
 800a572:	4613      	mov	r3, r2
 800a574:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a576:	88bb      	ldrh	r3, [r7, #4]
 800a578:	085b      	lsrs	r3, r3, #1
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a586:	88fa      	ldrh	r2, [r7, #6]
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a590:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	627b      	str	r3, [r7, #36]	@ 0x24
 800a596:	e018      	b.n	800a5ca <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	881b      	ldrh	r3, [r3, #0]
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	3302      	adds	r3, #2
 800a5a4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	0a1b      	lsrs	r3, r3, #8
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1e3      	bne.n	800a598 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a5d0:	88bb      	ldrh	r3, [r7, #4]
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d007      	beq.n	800a5ec <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a5dc:	6a3b      	ldr	r3, [r7, #32]
 800a5de:	881b      	ldrh	r3, [r3, #0]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	701a      	strb	r2, [r3, #0]
  }
}
 800a5ec:	bf00      	nop
 800a5ee:	372c      	adds	r7, #44	@ 0x2c
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	460b      	mov	r3, r1
 800a602:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a604:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a608:	f006 feb2 	bl	8011370 <USBD_static_malloc>
 800a60c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d109      	bne.n	800a628 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	32b0      	adds	r2, #176	@ 0xb0
 800a61e:	2100      	movs	r1, #0
 800a620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a624:	2302      	movs	r3, #2
 800a626:	e0d4      	b.n	800a7d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a628:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a62c:	2100      	movs	r1, #0
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f007 fb64 	bl	8011cfc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	32b0      	adds	r2, #176	@ 0xb0
 800a63e:	68f9      	ldr	r1, [r7, #12]
 800a640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	32b0      	adds	r2, #176	@ 0xb0
 800a64e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	7c1b      	ldrb	r3, [r3, #16]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d138      	bne.n	800a6d2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a660:	4b5e      	ldr	r3, [pc, #376]	@ (800a7dc <USBD_CDC_Init+0x1e4>)
 800a662:	7819      	ldrb	r1, [r3, #0]
 800a664:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a668:	2202      	movs	r2, #2
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f006 fd27 	bl	80110be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a670:	4b5a      	ldr	r3, [pc, #360]	@ (800a7dc <USBD_CDC_Init+0x1e4>)
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	f003 020f 	and.w	r2, r3, #15
 800a678:	6879      	ldr	r1, [r7, #4]
 800a67a:	4613      	mov	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	4413      	add	r3, r2
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	440b      	add	r3, r1
 800a684:	3324      	adds	r3, #36	@ 0x24
 800a686:	2201      	movs	r2, #1
 800a688:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a68a:	4b55      	ldr	r3, [pc, #340]	@ (800a7e0 <USBD_CDC_Init+0x1e8>)
 800a68c:	7819      	ldrb	r1, [r3, #0]
 800a68e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a692:	2202      	movs	r2, #2
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f006 fd12 	bl	80110be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a69a:	4b51      	ldr	r3, [pc, #324]	@ (800a7e0 <USBD_CDC_Init+0x1e8>)
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	f003 020f 	and.w	r2, r3, #15
 800a6a2:	6879      	ldr	r1, [r7, #4]
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	440b      	add	r3, r1
 800a6ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a6b6:	4b4b      	ldr	r3, [pc, #300]	@ (800a7e4 <USBD_CDC_Init+0x1ec>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	f003 020f 	and.w	r2, r3, #15
 800a6be:	6879      	ldr	r1, [r7, #4]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	440b      	add	r3, r1
 800a6ca:	3326      	adds	r3, #38	@ 0x26
 800a6cc:	2210      	movs	r2, #16
 800a6ce:	801a      	strh	r2, [r3, #0]
 800a6d0:	e035      	b.n	800a73e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a6d2:	4b42      	ldr	r3, [pc, #264]	@ (800a7dc <USBD_CDC_Init+0x1e4>)
 800a6d4:	7819      	ldrb	r1, [r3, #0]
 800a6d6:	2340      	movs	r3, #64	@ 0x40
 800a6d8:	2202      	movs	r2, #2
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f006 fcef 	bl	80110be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a6e0:	4b3e      	ldr	r3, [pc, #248]	@ (800a7dc <USBD_CDC_Init+0x1e4>)
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	f003 020f 	and.w	r2, r3, #15
 800a6e8:	6879      	ldr	r1, [r7, #4]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	440b      	add	r3, r1
 800a6f4:	3324      	adds	r3, #36	@ 0x24
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6fa:	4b39      	ldr	r3, [pc, #228]	@ (800a7e0 <USBD_CDC_Init+0x1e8>)
 800a6fc:	7819      	ldrb	r1, [r3, #0]
 800a6fe:	2340      	movs	r3, #64	@ 0x40
 800a700:	2202      	movs	r2, #2
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f006 fcdb 	bl	80110be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a708:	4b35      	ldr	r3, [pc, #212]	@ (800a7e0 <USBD_CDC_Init+0x1e8>)
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	f003 020f 	and.w	r2, r3, #15
 800a710:	6879      	ldr	r1, [r7, #4]
 800a712:	4613      	mov	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4413      	add	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	440b      	add	r3, r1
 800a71c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a720:	2201      	movs	r2, #1
 800a722:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a724:	4b2f      	ldr	r3, [pc, #188]	@ (800a7e4 <USBD_CDC_Init+0x1ec>)
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	f003 020f 	and.w	r2, r3, #15
 800a72c:	6879      	ldr	r1, [r7, #4]
 800a72e:	4613      	mov	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	440b      	add	r3, r1
 800a738:	3326      	adds	r3, #38	@ 0x26
 800a73a:	2210      	movs	r2, #16
 800a73c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a73e:	4b29      	ldr	r3, [pc, #164]	@ (800a7e4 <USBD_CDC_Init+0x1ec>)
 800a740:	7819      	ldrb	r1, [r3, #0]
 800a742:	2308      	movs	r3, #8
 800a744:	2203      	movs	r2, #3
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f006 fcb9 	bl	80110be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a74c:	4b25      	ldr	r3, [pc, #148]	@ (800a7e4 <USBD_CDC_Init+0x1ec>)
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	f003 020f 	and.w	r2, r3, #15
 800a754:	6879      	ldr	r1, [r7, #4]
 800a756:	4613      	mov	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	440b      	add	r3, r1
 800a760:	3324      	adds	r3, #36	@ 0x24
 800a762:	2201      	movs	r2, #1
 800a764:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	33b0      	adds	r3, #176	@ 0xb0
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d101      	bne.n	800a7a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a79c:	2302      	movs	r3, #2
 800a79e:	e018      	b.n	800a7d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	7c1b      	ldrb	r3, [r3, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10a      	bne.n	800a7be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7a8:	4b0d      	ldr	r3, [pc, #52]	@ (800a7e0 <USBD_CDC_Init+0x1e8>)
 800a7aa:	7819      	ldrb	r1, [r3, #0]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f006 fd70 	bl	801129c <USBD_LL_PrepareReceive>
 800a7bc:	e008      	b.n	800a7d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7be:	4b08      	ldr	r3, [pc, #32]	@ (800a7e0 <USBD_CDC_Init+0x1e8>)
 800a7c0:	7819      	ldrb	r1, [r3, #0]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7c8:	2340      	movs	r3, #64	@ 0x40
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f006 fd66 	bl	801129c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	2000009b 	.word	0x2000009b
 800a7e0:	2000009c 	.word	0x2000009c
 800a7e4:	2000009d 	.word	0x2000009d

0800a7e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a7f4:	4b3a      	ldr	r3, [pc, #232]	@ (800a8e0 <USBD_CDC_DeInit+0xf8>)
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f006 fc85 	bl	801110a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a800:	4b37      	ldr	r3, [pc, #220]	@ (800a8e0 <USBD_CDC_DeInit+0xf8>)
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	f003 020f 	and.w	r2, r3, #15
 800a808:	6879      	ldr	r1, [r7, #4]
 800a80a:	4613      	mov	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	440b      	add	r3, r1
 800a814:	3324      	adds	r3, #36	@ 0x24
 800a816:	2200      	movs	r2, #0
 800a818:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a81a:	4b32      	ldr	r3, [pc, #200]	@ (800a8e4 <USBD_CDC_DeInit+0xfc>)
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f006 fc72 	bl	801110a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a826:	4b2f      	ldr	r3, [pc, #188]	@ (800a8e4 <USBD_CDC_DeInit+0xfc>)
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	f003 020f 	and.w	r2, r3, #15
 800a82e:	6879      	ldr	r1, [r7, #4]
 800a830:	4613      	mov	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4413      	add	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	440b      	add	r3, r1
 800a83a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a83e:	2200      	movs	r2, #0
 800a840:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a842:	4b29      	ldr	r3, [pc, #164]	@ (800a8e8 <USBD_CDC_DeInit+0x100>)
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f006 fc5e 	bl	801110a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a84e:	4b26      	ldr	r3, [pc, #152]	@ (800a8e8 <USBD_CDC_DeInit+0x100>)
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	f003 020f 	and.w	r2, r3, #15
 800a856:	6879      	ldr	r1, [r7, #4]
 800a858:	4613      	mov	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	4413      	add	r3, r2
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	440b      	add	r3, r1
 800a862:	3324      	adds	r3, #36	@ 0x24
 800a864:	2200      	movs	r2, #0
 800a866:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a868:	4b1f      	ldr	r3, [pc, #124]	@ (800a8e8 <USBD_CDC_DeInit+0x100>)
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	f003 020f 	and.w	r2, r3, #15
 800a870:	6879      	ldr	r1, [r7, #4]
 800a872:	4613      	mov	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4413      	add	r3, r2
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	440b      	add	r3, r1
 800a87c:	3326      	adds	r3, #38	@ 0x26
 800a87e:	2200      	movs	r2, #0
 800a880:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	32b0      	adds	r2, #176	@ 0xb0
 800a88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d01f      	beq.n	800a8d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	33b0      	adds	r3, #176	@ 0xb0
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	32b0      	adds	r2, #176	@ 0xb0
 800a8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f006 fd68 	bl	801138c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	32b0      	adds	r2, #176	@ 0xb0
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	2000009b 	.word	0x2000009b
 800a8e4:	2000009c 	.word	0x2000009c
 800a8e8:	2000009d 	.word	0x2000009d

0800a8ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	32b0      	adds	r2, #176	@ 0xb0
 800a900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a904:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d101      	bne.n	800a91c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a918:	2303      	movs	r3, #3
 800a91a:	e0bf      	b.n	800aa9c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a924:	2b00      	cmp	r3, #0
 800a926:	d050      	beq.n	800a9ca <USBD_CDC_Setup+0xde>
 800a928:	2b20      	cmp	r3, #32
 800a92a:	f040 80af 	bne.w	800aa8c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	88db      	ldrh	r3, [r3, #6]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d03a      	beq.n	800a9ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	b25b      	sxtb	r3, r3
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	da1b      	bge.n	800a978 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	33b0      	adds	r3, #176	@ 0xb0
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	4413      	add	r3, r2
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a956:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	88d2      	ldrh	r2, [r2, #6]
 800a95c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	88db      	ldrh	r3, [r3, #6]
 800a962:	2b07      	cmp	r3, #7
 800a964:	bf28      	it	cs
 800a966:	2307      	movcs	r3, #7
 800a968:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	89fa      	ldrh	r2, [r7, #14]
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 fceb 	bl	800c34c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a976:	e090      	b.n	800aa9a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	785a      	ldrb	r2, [r3, #1]
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	88db      	ldrh	r3, [r3, #6]
 800a986:	2b3f      	cmp	r3, #63	@ 0x3f
 800a988:	d803      	bhi.n	800a992 <USBD_CDC_Setup+0xa6>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	88db      	ldrh	r3, [r3, #6]
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	e000      	b.n	800a994 <USBD_CDC_Setup+0xa8>
 800a992:	2240      	movs	r2, #64	@ 0x40
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a99a:	6939      	ldr	r1, [r7, #16]
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f001 fcfd 	bl	800c3a4 <USBD_CtlPrepareRx>
      break;
 800a9aa:	e076      	b.n	800aa9a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	33b0      	adds	r3, #176	@ 0xb0
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4413      	add	r3, r2
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	7850      	ldrb	r0, [r2, #1]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	4798      	blx	r3
      break;
 800a9c8:	e067      	b.n	800aa9a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	785b      	ldrb	r3, [r3, #1]
 800a9ce:	2b0b      	cmp	r3, #11
 800a9d0:	d851      	bhi.n	800aa76 <USBD_CDC_Setup+0x18a>
 800a9d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9d8 <USBD_CDC_Setup+0xec>)
 800a9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d8:	0800aa09 	.word	0x0800aa09
 800a9dc:	0800aa85 	.word	0x0800aa85
 800a9e0:	0800aa77 	.word	0x0800aa77
 800a9e4:	0800aa77 	.word	0x0800aa77
 800a9e8:	0800aa77 	.word	0x0800aa77
 800a9ec:	0800aa77 	.word	0x0800aa77
 800a9f0:	0800aa77 	.word	0x0800aa77
 800a9f4:	0800aa77 	.word	0x0800aa77
 800a9f8:	0800aa77 	.word	0x0800aa77
 800a9fc:	0800aa77 	.word	0x0800aa77
 800aa00:	0800aa33 	.word	0x0800aa33
 800aa04:	0800aa5d 	.word	0x0800aa5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d107      	bne.n	800aa24 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa14:	f107 030a 	add.w	r3, r7, #10
 800aa18:	2202      	movs	r2, #2
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f001 fc95 	bl	800c34c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa22:	e032      	b.n	800aa8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f001 fc13 	bl	800c252 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	75fb      	strb	r3, [r7, #23]
          break;
 800aa30:	e02b      	b.n	800aa8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	d107      	bne.n	800aa4e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa3e:	f107 030d 	add.w	r3, r7, #13
 800aa42:	2201      	movs	r2, #1
 800aa44:	4619      	mov	r1, r3
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f001 fc80 	bl	800c34c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa4c:	e01d      	b.n	800aa8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 fbfe 	bl	800c252 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa56:	2303      	movs	r3, #3
 800aa58:	75fb      	strb	r3, [r7, #23]
          break;
 800aa5a:	e016      	b.n	800aa8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	d00f      	beq.n	800aa88 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aa68:	6839      	ldr	r1, [r7, #0]
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f001 fbf1 	bl	800c252 <USBD_CtlError>
            ret = USBD_FAIL;
 800aa70:	2303      	movs	r3, #3
 800aa72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa74:	e008      	b.n	800aa88 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 fbea 	bl	800c252 <USBD_CtlError>
          ret = USBD_FAIL;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	75fb      	strb	r3, [r7, #23]
          break;
 800aa82:	e002      	b.n	800aa8a <USBD_CDC_Setup+0x19e>
          break;
 800aa84:	bf00      	nop
 800aa86:	e008      	b.n	800aa9a <USBD_CDC_Setup+0x1ae>
          break;
 800aa88:	bf00      	nop
      }
      break;
 800aa8a:	e006      	b.n	800aa9a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f001 fbdf 	bl	800c252 <USBD_CtlError>
      ret = USBD_FAIL;
 800aa94:	2303      	movs	r3, #3
 800aa96:	75fb      	strb	r3, [r7, #23]
      break;
 800aa98:	bf00      	nop
  }

  return (uint8_t)ret;
 800aa9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	460b      	mov	r3, r1
 800aaae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aab6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	32b0      	adds	r2, #176	@ 0xb0
 800aac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d101      	bne.n	800aace <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aaca:	2303      	movs	r3, #3
 800aacc:	e065      	b.n	800ab9a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	32b0      	adds	r2, #176	@ 0xb0
 800aad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aadc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aade:	78fb      	ldrb	r3, [r7, #3]
 800aae0:	f003 020f 	and.w	r2, r3, #15
 800aae4:	6879      	ldr	r1, [r7, #4]
 800aae6:	4613      	mov	r3, r2
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	4413      	add	r3, r2
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	440b      	add	r3, r1
 800aaf0:	3318      	adds	r3, #24
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d02f      	beq.n	800ab58 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aaf8:	78fb      	ldrb	r3, [r7, #3]
 800aafa:	f003 020f 	and.w	r2, r3, #15
 800aafe:	6879      	ldr	r1, [r7, #4]
 800ab00:	4613      	mov	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	440b      	add	r3, r1
 800ab0a:	3318      	adds	r3, #24
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	78fb      	ldrb	r3, [r7, #3]
 800ab10:	f003 010f 	and.w	r1, r3, #15
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	460b      	mov	r3, r1
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	440b      	add	r3, r1
 800ab1c:	00db      	lsls	r3, r3, #3
 800ab1e:	4403      	add	r3, r0
 800ab20:	3320      	adds	r3, #32
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab28:	fb01 f303 	mul.w	r3, r1, r3
 800ab2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d112      	bne.n	800ab58 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ab32:	78fb      	ldrb	r3, [r7, #3]
 800ab34:	f003 020f 	and.w	r2, r3, #15
 800ab38:	6879      	ldr	r1, [r7, #4]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4413      	add	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	440b      	add	r3, r1
 800ab44:	3318      	adds	r3, #24
 800ab46:	2200      	movs	r2, #0
 800ab48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab4a:	78f9      	ldrb	r1, [r7, #3]
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	2200      	movs	r2, #0
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f006 fb82 	bl	801125a <USBD_LL_Transmit>
 800ab56:	e01f      	b.n	800ab98 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	33b0      	adds	r3, #176	@ 0xb0
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d010      	beq.n	800ab98 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	33b0      	adds	r3, #176	@ 0xb0
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ab94:	78fa      	ldrb	r2, [r7, #3]
 800ab96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	460b      	mov	r3, r1
 800abac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	32b0      	adds	r2, #176	@ 0xb0
 800abb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abbc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	32b0      	adds	r2, #176	@ 0xb0
 800abc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d101      	bne.n	800abd4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800abd0:	2303      	movs	r3, #3
 800abd2:	e01a      	b.n	800ac0a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800abd4:	78fb      	ldrb	r3, [r7, #3]
 800abd6:	4619      	mov	r1, r3
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f006 fb80 	bl	80112de <USBD_LL_GetRxDataSize>
 800abde:	4602      	mov	r2, r0
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	33b0      	adds	r3, #176	@ 0xb0
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ac04:	4611      	mov	r1, r2
 800ac06:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ac08:	2300      	movs	r3, #0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3710      	adds	r7, #16
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b084      	sub	sp, #16
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	32b0      	adds	r2, #176	@ 0xb0
 800ac24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac30:	2303      	movs	r3, #3
 800ac32:	e024      	b.n	800ac7e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	33b0      	adds	r3, #176	@ 0xb0
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d019      	beq.n	800ac7c <USBD_CDC_EP0_RxReady+0x6a>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ac4e:	2bff      	cmp	r3, #255	@ 0xff
 800ac50:	d014      	beq.n	800ac7c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	33b0      	adds	r3, #176	@ 0xb0
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ac6a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac72:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	22ff      	movs	r2, #255	@ 0xff
 800ac78:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac90:	2182      	movs	r1, #130	@ 0x82
 800ac92:	4818      	ldr	r0, [pc, #96]	@ (800acf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac94:	f000 fc7d 	bl	800b592 <USBD_GetEpDesc>
 800ac98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac9a:	2101      	movs	r1, #1
 800ac9c:	4815      	ldr	r0, [pc, #84]	@ (800acf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac9e:	f000 fc78 	bl	800b592 <USBD_GetEpDesc>
 800aca2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aca4:	2181      	movs	r1, #129	@ 0x81
 800aca6:	4813      	ldr	r0, [pc, #76]	@ (800acf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aca8:	f000 fc73 	bl	800b592 <USBD_GetEpDesc>
 800acac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	2210      	movs	r2, #16
 800acb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d006      	beq.n	800acce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acc8:	711a      	strb	r2, [r3, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d006      	beq.n	800ace2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acdc:	711a      	strb	r2, [r3, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2243      	movs	r2, #67	@ 0x43
 800ace6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ace8:	4b02      	ldr	r3, [pc, #8]	@ (800acf4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	20000058 	.word	0x20000058

0800acf8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad00:	2182      	movs	r1, #130	@ 0x82
 800ad02:	4818      	ldr	r0, [pc, #96]	@ (800ad64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad04:	f000 fc45 	bl	800b592 <USBD_GetEpDesc>
 800ad08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad0a:	2101      	movs	r1, #1
 800ad0c:	4815      	ldr	r0, [pc, #84]	@ (800ad64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad0e:	f000 fc40 	bl	800b592 <USBD_GetEpDesc>
 800ad12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad14:	2181      	movs	r1, #129	@ 0x81
 800ad16:	4813      	ldr	r0, [pc, #76]	@ (800ad64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad18:	f000 fc3b 	bl	800b592 <USBD_GetEpDesc>
 800ad1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	2210      	movs	r2, #16
 800ad28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d006      	beq.n	800ad3e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	2200      	movs	r2, #0
 800ad34:	711a      	strb	r2, [r3, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f042 0202 	orr.w	r2, r2, #2
 800ad3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d006      	beq.n	800ad52 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	711a      	strb	r2, [r3, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f042 0202 	orr.w	r2, r2, #2
 800ad50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2243      	movs	r2, #67	@ 0x43
 800ad56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad58:	4b02      	ldr	r3, [pc, #8]	@ (800ad64 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3718      	adds	r7, #24
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20000058 	.word	0x20000058

0800ad68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad70:	2182      	movs	r1, #130	@ 0x82
 800ad72:	4818      	ldr	r0, [pc, #96]	@ (800add4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad74:	f000 fc0d 	bl	800b592 <USBD_GetEpDesc>
 800ad78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad7a:	2101      	movs	r1, #1
 800ad7c:	4815      	ldr	r0, [pc, #84]	@ (800add4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad7e:	f000 fc08 	bl	800b592 <USBD_GetEpDesc>
 800ad82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad84:	2181      	movs	r1, #129	@ 0x81
 800ad86:	4813      	ldr	r0, [pc, #76]	@ (800add4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad88:	f000 fc03 	bl	800b592 <USBD_GetEpDesc>
 800ad8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d002      	beq.n	800ad9a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	2210      	movs	r2, #16
 800ad98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d006      	beq.n	800adae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ada8:	711a      	strb	r2, [r3, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d006      	beq.n	800adc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800adbc:	711a      	strb	r2, [r3, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2243      	movs	r2, #67	@ 0x43
 800adc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800adc8:	4b02      	ldr	r3, [pc, #8]	@ (800add4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3718      	adds	r7, #24
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	20000058 	.word	0x20000058

0800add8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	220a      	movs	r2, #10
 800ade4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ade6:	4b03      	ldr	r3, [pc, #12]	@ (800adf4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ade8:	4618      	mov	r0, r3
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	20000014 	.word	0x20000014

0800adf8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d101      	bne.n	800ae0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	e009      	b.n	800ae20 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	33b0      	adds	r3, #176	@ 0xb0
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4413      	add	r3, r2
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ae1e:	2300      	movs	r3, #0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	32b0      	adds	r2, #176	@ 0xb0
 800ae42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae46:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d101      	bne.n	800ae52 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae4e:	2303      	movs	r3, #3
 800ae50:	e008      	b.n	800ae64 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	68ba      	ldr	r2, [r7, #8]
 800ae56:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	371c      	adds	r7, #28
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	32b0      	adds	r2, #176	@ 0xb0
 800ae84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e004      	b.n	800ae9e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ae9c:	2300      	movs	r3, #0
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3714      	adds	r7, #20
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
	...

0800aeac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	32b0      	adds	r2, #176	@ 0xb0
 800aebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	32b0      	adds	r2, #176	@ 0xb0
 800aece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aed6:	2303      	movs	r3, #3
 800aed8:	e018      	b.n	800af0c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	7c1b      	ldrb	r3, [r3, #16]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d10a      	bne.n	800aef8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aee2:	4b0c      	ldr	r3, [pc, #48]	@ (800af14 <USBD_CDC_ReceivePacket+0x68>)
 800aee4:	7819      	ldrb	r1, [r3, #0]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aeec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f006 f9d3 	bl	801129c <USBD_LL_PrepareReceive>
 800aef6:	e008      	b.n	800af0a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aef8:	4b06      	ldr	r3, [pc, #24]	@ (800af14 <USBD_CDC_ReceivePacket+0x68>)
 800aefa:	7819      	ldrb	r1, [r3, #0]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af02:	2340      	movs	r3, #64	@ 0x40
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f006 f9c9 	bl	801129c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	2000009c 	.word	0x2000009c

0800af18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	4613      	mov	r3, r2
 800af24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d101      	bne.n	800af30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e01f      	b.n	800af70 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d003      	beq.n	800af56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	68ba      	ldr	r2, [r7, #8]
 800af52:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2201      	movs	r2, #1
 800af5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	79fa      	ldrb	r2, [r7, #7]
 800af62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f006 f82d 	bl	8010fc4 <USBD_LL_Init>
 800af6a:	4603      	mov	r3, r0
 800af6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800af6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3718      	adds	r7, #24
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af82:	2300      	movs	r3, #0
 800af84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d101      	bne.n	800af90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e025      	b.n	800afdc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	32ae      	adds	r2, #174	@ 0xae
 800afa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00f      	beq.n	800afcc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	32ae      	adds	r2, #174	@ 0xae
 800afb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afbc:	f107 020e 	add.w	r2, r7, #14
 800afc0:	4610      	mov	r0, r2
 800afc2:	4798      	blx	r3
 800afc4:	4602      	mov	r2, r0
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800afd2:	1c5a      	adds	r2, r3, #1
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f006 f84b 	bl	8011088 <USBD_LL_Start>
 800aff2:	4603      	mov	r3, r0
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b004:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b006:	4618      	mov	r0, r3
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b084      	sub	sp, #16
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	460b      	mov	r3, r1
 800b01c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d009      	beq.n	800b040 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	78fa      	ldrb	r2, [r7, #3]
 800b036:	4611      	mov	r1, r2
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	4798      	blx	r3
 800b03c:	4603      	mov	r3, r0
 800b03e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b040:	7bfb      	ldrb	r3, [r7, #15]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b084      	sub	sp, #16
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	460b      	mov	r3, r1
 800b054:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	78fa      	ldrb	r2, [r7, #3]
 800b064:	4611      	mov	r1, r2
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	4798      	blx	r3
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d001      	beq.n	800b074 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b070:	2303      	movs	r3, #3
 800b072:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b074:	7bfb      	ldrb	r3, [r7, #15]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b084      	sub	sp, #16
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
 800b086:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	4618      	mov	r0, r3
 800b092:	f001 f8a4 	bl	800c1de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2201      	movs	r2, #1
 800b09a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b0b2:	f003 031f 	and.w	r3, r3, #31
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d01a      	beq.n	800b0f0 <USBD_LL_SetupStage+0x72>
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d822      	bhi.n	800b104 <USBD_LL_SetupStage+0x86>
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d002      	beq.n	800b0c8 <USBD_LL_SetupStage+0x4a>
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d00a      	beq.n	800b0dc <USBD_LL_SetupStage+0x5e>
 800b0c6:	e01d      	b.n	800b104 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fad1 	bl	800b678 <USBD_StdDevReq>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	73fb      	strb	r3, [r7, #15]
      break;
 800b0da:	e020      	b.n	800b11e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fb39 	bl	800b75c <USBD_StdItfReq>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ee:	e016      	b.n	800b11e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fb9b 	bl	800b834 <USBD_StdEPReq>
 800b0fe:	4603      	mov	r3, r0
 800b100:	73fb      	strb	r3, [r7, #15]
      break;
 800b102:	e00c      	b.n	800b11e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b10a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	4619      	mov	r1, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f006 f818 	bl	8011148 <USBD_LL_StallEP>
 800b118:	4603      	mov	r3, r0
 800b11a:	73fb      	strb	r3, [r7, #15]
      break;
 800b11c:	bf00      	nop
  }

  return ret;
 800b11e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	460b      	mov	r3, r1
 800b132:	607a      	str	r2, [r7, #4]
 800b134:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b136:	2300      	movs	r3, #0
 800b138:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b13a:	7afb      	ldrb	r3, [r7, #11]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d16e      	bne.n	800b21e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b146:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b14e:	2b03      	cmp	r3, #3
 800b150:	f040 8098 	bne.w	800b284 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	689a      	ldr	r2, [r3, #8]
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d913      	bls.n	800b188 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	689a      	ldr	r2, [r3, #8]
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	1ad2      	subs	r2, r2, r3
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	68da      	ldr	r2, [r3, #12]
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	4293      	cmp	r3, r2
 800b178:	bf28      	it	cs
 800b17a:	4613      	movcs	r3, r2
 800b17c:	461a      	mov	r2, r3
 800b17e:	6879      	ldr	r1, [r7, #4]
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f001 f92c 	bl	800c3de <USBD_CtlContinueRx>
 800b186:	e07d      	b.n	800b284 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b18e:	f003 031f 	and.w	r3, r3, #31
 800b192:	2b02      	cmp	r3, #2
 800b194:	d014      	beq.n	800b1c0 <USBD_LL_DataOutStage+0x98>
 800b196:	2b02      	cmp	r3, #2
 800b198:	d81d      	bhi.n	800b1d6 <USBD_LL_DataOutStage+0xae>
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <USBD_LL_DataOutStage+0x7c>
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d003      	beq.n	800b1aa <USBD_LL_DataOutStage+0x82>
 800b1a2:	e018      	b.n	800b1d6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	75bb      	strb	r3, [r7, #22]
            break;
 800b1a8:	e018      	b.n	800b1dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f000 f9d2 	bl	800b55e <USBD_CoreFindIF>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	75bb      	strb	r3, [r7, #22]
            break;
 800b1be:	e00d      	b.n	800b1dc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f000 f9d4 	bl	800b578 <USBD_CoreFindEP>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	75bb      	strb	r3, [r7, #22]
            break;
 800b1d4:	e002      	b.n	800b1dc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	75bb      	strb	r3, [r7, #22]
            break;
 800b1da:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b1dc:	7dbb      	ldrb	r3, [r7, #22]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d119      	bne.n	800b216 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	2b03      	cmp	r3, #3
 800b1ec:	d113      	bne.n	800b216 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b1ee:	7dba      	ldrb	r2, [r7, #22]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	32ae      	adds	r2, #174	@ 0xae
 800b1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00b      	beq.n	800b216 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b1fe:	7dba      	ldrb	r2, [r7, #22]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b206:	7dba      	ldrb	r2, [r7, #22]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	32ae      	adds	r2, #174	@ 0xae
 800b20c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f001 f8f2 	bl	800c400 <USBD_CtlSendStatus>
 800b21c:	e032      	b.n	800b284 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b21e:	7afb      	ldrb	r3, [r7, #11]
 800b220:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b224:	b2db      	uxtb	r3, r3
 800b226:	4619      	mov	r1, r3
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f000 f9a5 	bl	800b578 <USBD_CoreFindEP>
 800b22e:	4603      	mov	r3, r0
 800b230:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b232:	7dbb      	ldrb	r3, [r7, #22]
 800b234:	2bff      	cmp	r3, #255	@ 0xff
 800b236:	d025      	beq.n	800b284 <USBD_LL_DataOutStage+0x15c>
 800b238:	7dbb      	ldrb	r3, [r7, #22]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d122      	bne.n	800b284 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b244:	b2db      	uxtb	r3, r3
 800b246:	2b03      	cmp	r3, #3
 800b248:	d117      	bne.n	800b27a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b24a:	7dba      	ldrb	r2, [r7, #22]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	32ae      	adds	r2, #174	@ 0xae
 800b250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00f      	beq.n	800b27a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b25a:	7dba      	ldrb	r2, [r7, #22]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b262:	7dba      	ldrb	r2, [r7, #22]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	32ae      	adds	r2, #174	@ 0xae
 800b268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b26c:	699b      	ldr	r3, [r3, #24]
 800b26e:	7afa      	ldrb	r2, [r7, #11]
 800b270:	4611      	mov	r1, r2
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	4798      	blx	r3
 800b276:	4603      	mov	r3, r0
 800b278:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b27a:	7dfb      	ldrb	r3, [r7, #23]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d001      	beq.n	800b284 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b280:	7dfb      	ldrb	r3, [r7, #23]
 800b282:	e000      	b.n	800b286 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3718      	adds	r7, #24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b086      	sub	sp, #24
 800b292:	af00      	add	r7, sp, #0
 800b294:	60f8      	str	r0, [r7, #12]
 800b296:	460b      	mov	r3, r1
 800b298:	607a      	str	r2, [r7, #4]
 800b29a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b29c:	7afb      	ldrb	r3, [r7, #11]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d16f      	bne.n	800b382 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	3314      	adds	r3, #20
 800b2a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d15a      	bne.n	800b368 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	689a      	ldr	r2, [r3, #8]
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d914      	bls.n	800b2e8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	689a      	ldr	r2, [r3, #8]
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	1ad2      	subs	r2, r2, r3
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	6879      	ldr	r1, [r7, #4]
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f001 f854 	bl	800c382 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2da:	2300      	movs	r3, #0
 800b2dc:	2200      	movs	r2, #0
 800b2de:	2100      	movs	r1, #0
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f005 ffdb 	bl	801129c <USBD_LL_PrepareReceive>
 800b2e6:	e03f      	b.n	800b368 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	68da      	ldr	r2, [r3, #12]
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d11c      	bne.n	800b32e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	685a      	ldr	r2, [r3, #4]
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d316      	bcc.n	800b32e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	685a      	ldr	r2, [r3, #4]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d20f      	bcs.n	800b32e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b30e:	2200      	movs	r2, #0
 800b310:	2100      	movs	r1, #0
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f001 f835 	bl	800c382 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b320:	2300      	movs	r3, #0
 800b322:	2200      	movs	r2, #0
 800b324:	2100      	movs	r1, #0
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f005 ffb8 	bl	801129c <USBD_LL_PrepareReceive>
 800b32c:	e01c      	b.n	800b368 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b03      	cmp	r3, #3
 800b338:	d10f      	bne.n	800b35a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d009      	beq.n	800b35a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b35a:	2180      	movs	r1, #128	@ 0x80
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f005 fef3 	bl	8011148 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b362:	68f8      	ldr	r0, [r7, #12]
 800b364:	f001 f85f 	bl	800c426 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d03a      	beq.n	800b3e8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f7ff fe42 	bl	800affc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b380:	e032      	b.n	800b3e8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b382:	7afb      	ldrb	r3, [r7, #11]
 800b384:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	4619      	mov	r1, r3
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f000 f8f3 	bl	800b578 <USBD_CoreFindEP>
 800b392:	4603      	mov	r3, r0
 800b394:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b396:	7dfb      	ldrb	r3, [r7, #23]
 800b398:	2bff      	cmp	r3, #255	@ 0xff
 800b39a:	d025      	beq.n	800b3e8 <USBD_LL_DataInStage+0x15a>
 800b39c:	7dfb      	ldrb	r3, [r7, #23]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d122      	bne.n	800b3e8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	2b03      	cmp	r3, #3
 800b3ac:	d11c      	bne.n	800b3e8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b3ae:	7dfa      	ldrb	r2, [r7, #23]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	32ae      	adds	r2, #174	@ 0xae
 800b3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b8:	695b      	ldr	r3, [r3, #20]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d014      	beq.n	800b3e8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b3be:	7dfa      	ldrb	r2, [r7, #23]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b3c6:	7dfa      	ldrb	r2, [r7, #23]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	32ae      	adds	r2, #174	@ 0xae
 800b3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d0:	695b      	ldr	r3, [r3, #20]
 800b3d2:	7afa      	ldrb	r2, [r7, #11]
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	4798      	blx	r3
 800b3da:	4603      	mov	r3, r0
 800b3dc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b3de:	7dbb      	ldrb	r3, [r7, #22]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d001      	beq.n	800b3e8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b3e4:	7dbb      	ldrb	r3, [r7, #22]
 800b3e6:	e000      	b.n	800b3ea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3718      	adds	r7, #24
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b084      	sub	sp, #16
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d014      	beq.n	800b458 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00e      	beq.n	800b458 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	6852      	ldr	r2, [r2, #4]
 800b446:	b2d2      	uxtb	r2, r2
 800b448:	4611      	mov	r1, r2
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	4798      	blx	r3
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d001      	beq.n	800b458 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b454:	2303      	movs	r3, #3
 800b456:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b458:	2340      	movs	r3, #64	@ 0x40
 800b45a:	2200      	movs	r2, #0
 800b45c:	2100      	movs	r1, #0
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f005 fe2d 	bl	80110be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2240      	movs	r2, #64	@ 0x40
 800b470:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b474:	2340      	movs	r3, #64	@ 0x40
 800b476:	2200      	movs	r2, #0
 800b478:	2180      	movs	r1, #128	@ 0x80
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f005 fe1f 	bl	80110be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2240      	movs	r2, #64	@ 0x40
 800b48a:	621a      	str	r2, [r3, #32]

  return ret;
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b496:	b480      	push	{r7}
 800b498:	b083      	sub	sp, #12
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	460b      	mov	r3, r1
 800b4a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	78fa      	ldrb	r2, [r7, #3]
 800b4a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b4b6:	b480      	push	{r7}
 800b4b8:	b083      	sub	sp, #12
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b04      	cmp	r3, #4
 800b4c8:	d006      	beq.n	800b4d8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4d0:	b2da      	uxtb	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2204      	movs	r2, #4
 800b4dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b083      	sub	sp, #12
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	2b04      	cmp	r3, #4
 800b500:	d106      	bne.n	800b510 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b508:	b2da      	uxtb	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b082      	sub	sp, #8
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	2b03      	cmp	r3, #3
 800b530:	d110      	bne.n	800b554 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00b      	beq.n	800b554 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b542:	69db      	ldr	r3, [r3, #28]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d005      	beq.n	800b554 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b54e:	69db      	ldr	r3, [r3, #28]
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3708      	adds	r7, #8
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b55e:	b480      	push	{r7}
 800b560:	b083      	sub	sp, #12
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	460b      	mov	r3, r1
 800b568:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b56a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	370c      	adds	r7, #12
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	460b      	mov	r3, r1
 800b582:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b584:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b586:	4618      	mov	r0, r3
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b086      	sub	sp, #24
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	460b      	mov	r3, r1
 800b59c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	885b      	ldrh	r3, [r3, #2]
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	68fa      	ldr	r2, [r7, #12]
 800b5b2:	7812      	ldrb	r2, [r2, #0]
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d91f      	bls.n	800b5f8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b5be:	e013      	b.n	800b5e8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b5c0:	f107 030a 	add.w	r3, r7, #10
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6978      	ldr	r0, [r7, #20]
 800b5c8:	f000 f81b 	bl	800b602 <USBD_GetNextDesc>
 800b5cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	785b      	ldrb	r3, [r3, #1]
 800b5d2:	2b05      	cmp	r3, #5
 800b5d4:	d108      	bne.n	800b5e8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	789b      	ldrb	r3, [r3, #2]
 800b5de:	78fa      	ldrb	r2, [r7, #3]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d008      	beq.n	800b5f6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	885b      	ldrh	r3, [r3, #2]
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	897b      	ldrh	r3, [r7, #10]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d8e5      	bhi.n	800b5c0 <USBD_GetEpDesc+0x2e>
 800b5f4:	e000      	b.n	800b5f8 <USBD_GetEpDesc+0x66>
          break;
 800b5f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b5f8:	693b      	ldr	r3, [r7, #16]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3718      	adds	r7, #24
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b602:	b480      	push	{r7}
 800b604:	b085      	sub	sp, #20
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
 800b60a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	881b      	ldrh	r3, [r3, #0]
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	7812      	ldrb	r2, [r2, #0]
 800b618:	4413      	add	r3, r2
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	461a      	mov	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4413      	add	r3, r2
 800b62a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b62c:	68fb      	ldr	r3, [r7, #12]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3714      	adds	r7, #20
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr

0800b63a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b63a:	b480      	push	{r7}
 800b63c:	b087      	sub	sp, #28
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	3301      	adds	r3, #1
 800b650:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b658:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b65c:	021b      	lsls	r3, r3, #8
 800b65e:	b21a      	sxth	r2, r3
 800b660:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b664:	4313      	orrs	r3, r2
 800b666:	b21b      	sxth	r3, r3
 800b668:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b66a:	89fb      	ldrh	r3, [r7, #14]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	371c      	adds	r7, #28
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b68e:	2b40      	cmp	r3, #64	@ 0x40
 800b690:	d005      	beq.n	800b69e <USBD_StdDevReq+0x26>
 800b692:	2b40      	cmp	r3, #64	@ 0x40
 800b694:	d857      	bhi.n	800b746 <USBD_StdDevReq+0xce>
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00f      	beq.n	800b6ba <USBD_StdDevReq+0x42>
 800b69a:	2b20      	cmp	r3, #32
 800b69c:	d153      	bne.n	800b746 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	32ae      	adds	r2, #174	@ 0xae
 800b6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	6839      	ldr	r1, [r7, #0]
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	4798      	blx	r3
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b6b8:	e04a      	b.n	800b750 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	785b      	ldrb	r3, [r3, #1]
 800b6be:	2b09      	cmp	r3, #9
 800b6c0:	d83b      	bhi.n	800b73a <USBD_StdDevReq+0xc2>
 800b6c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c8 <USBD_StdDevReq+0x50>)
 800b6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c8:	0800b71d 	.word	0x0800b71d
 800b6cc:	0800b731 	.word	0x0800b731
 800b6d0:	0800b73b 	.word	0x0800b73b
 800b6d4:	0800b727 	.word	0x0800b727
 800b6d8:	0800b73b 	.word	0x0800b73b
 800b6dc:	0800b6fb 	.word	0x0800b6fb
 800b6e0:	0800b6f1 	.word	0x0800b6f1
 800b6e4:	0800b73b 	.word	0x0800b73b
 800b6e8:	0800b713 	.word	0x0800b713
 800b6ec:	0800b705 	.word	0x0800b705
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b6f0:	6839      	ldr	r1, [r7, #0]
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 fa3c 	bl	800bb70 <USBD_GetDescriptor>
          break;
 800b6f8:	e024      	b.n	800b744 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b6fa:	6839      	ldr	r1, [r7, #0]
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 fbcb 	bl	800be98 <USBD_SetAddress>
          break;
 800b702:	e01f      	b.n	800b744 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b704:	6839      	ldr	r1, [r7, #0]
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fc0a 	bl	800bf20 <USBD_SetConfig>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73fb      	strb	r3, [r7, #15]
          break;
 800b710:	e018      	b.n	800b744 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fcad 	bl	800c074 <USBD_GetConfig>
          break;
 800b71a:	e013      	b.n	800b744 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b71c:	6839      	ldr	r1, [r7, #0]
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fcde 	bl	800c0e0 <USBD_GetStatus>
          break;
 800b724:	e00e      	b.n	800b744 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b726:	6839      	ldr	r1, [r7, #0]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fd0d 	bl	800c148 <USBD_SetFeature>
          break;
 800b72e:	e009      	b.n	800b744 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b730:	6839      	ldr	r1, [r7, #0]
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fd31 	bl	800c19a <USBD_ClrFeature>
          break;
 800b738:	e004      	b.n	800b744 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fd88 	bl	800c252 <USBD_CtlError>
          break;
 800b742:	bf00      	nop
      }
      break;
 800b744:	e004      	b.n	800b750 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b746:	6839      	ldr	r1, [r7, #0]
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 fd82 	bl	800c252 <USBD_CtlError>
      break;
 800b74e:	bf00      	nop
  }

  return ret;
 800b750:	7bfb      	ldrb	r3, [r7, #15]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop

0800b75c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b766:	2300      	movs	r3, #0
 800b768:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b772:	2b40      	cmp	r3, #64	@ 0x40
 800b774:	d005      	beq.n	800b782 <USBD_StdItfReq+0x26>
 800b776:	2b40      	cmp	r3, #64	@ 0x40
 800b778:	d852      	bhi.n	800b820 <USBD_StdItfReq+0xc4>
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <USBD_StdItfReq+0x26>
 800b77e:	2b20      	cmp	r3, #32
 800b780:	d14e      	bne.n	800b820 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	3b01      	subs	r3, #1
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d840      	bhi.n	800b812 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	889b      	ldrh	r3, [r3, #4]
 800b794:	b2db      	uxtb	r3, r3
 800b796:	2b01      	cmp	r3, #1
 800b798:	d836      	bhi.n	800b808 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	889b      	ldrh	r3, [r3, #4]
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f7ff fedb 	bl	800b55e <USBD_CoreFindIF>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7ac:	7bbb      	ldrb	r3, [r7, #14]
 800b7ae:	2bff      	cmp	r3, #255	@ 0xff
 800b7b0:	d01d      	beq.n	800b7ee <USBD_StdItfReq+0x92>
 800b7b2:	7bbb      	ldrb	r3, [r7, #14]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d11a      	bne.n	800b7ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b7b8:	7bba      	ldrb	r2, [r7, #14]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	32ae      	adds	r2, #174	@ 0xae
 800b7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d00f      	beq.n	800b7e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b7c8:	7bba      	ldrb	r2, [r7, #14]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b7d0:	7bba      	ldrb	r2, [r7, #14]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	32ae      	adds	r2, #174	@ 0xae
 800b7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	6839      	ldr	r1, [r7, #0]
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	4798      	blx	r3
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b7e6:	e004      	b.n	800b7f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b7ec:	e001      	b.n	800b7f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	88db      	ldrh	r3, [r3, #6]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d110      	bne.n	800b81c <USBD_StdItfReq+0xc0>
 800b7fa:	7bfb      	ldrb	r3, [r7, #15]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10d      	bne.n	800b81c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 fdfd 	bl	800c400 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b806:	e009      	b.n	800b81c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 fd21 	bl	800c252 <USBD_CtlError>
          break;
 800b810:	e004      	b.n	800b81c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 fd1c 	bl	800c252 <USBD_CtlError>
          break;
 800b81a:	e000      	b.n	800b81e <USBD_StdItfReq+0xc2>
          break;
 800b81c:	bf00      	nop
      }
      break;
 800b81e:	e004      	b.n	800b82a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fd15 	bl	800c252 <USBD_CtlError>
      break;
 800b828:	bf00      	nop
  }

  return ret;
 800b82a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b83e:	2300      	movs	r3, #0
 800b840:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	889b      	ldrh	r3, [r3, #4]
 800b846:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b850:	2b40      	cmp	r3, #64	@ 0x40
 800b852:	d007      	beq.n	800b864 <USBD_StdEPReq+0x30>
 800b854:	2b40      	cmp	r3, #64	@ 0x40
 800b856:	f200 817f 	bhi.w	800bb58 <USBD_StdEPReq+0x324>
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d02a      	beq.n	800b8b4 <USBD_StdEPReq+0x80>
 800b85e:	2b20      	cmp	r3, #32
 800b860:	f040 817a 	bne.w	800bb58 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b864:	7bbb      	ldrb	r3, [r7, #14]
 800b866:	4619      	mov	r1, r3
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7ff fe85 	bl	800b578 <USBD_CoreFindEP>
 800b86e:	4603      	mov	r3, r0
 800b870:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b872:	7b7b      	ldrb	r3, [r7, #13]
 800b874:	2bff      	cmp	r3, #255	@ 0xff
 800b876:	f000 8174 	beq.w	800bb62 <USBD_StdEPReq+0x32e>
 800b87a:	7b7b      	ldrb	r3, [r7, #13]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f040 8170 	bne.w	800bb62 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b882:	7b7a      	ldrb	r2, [r7, #13]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b88a:	7b7a      	ldrb	r2, [r7, #13]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	32ae      	adds	r2, #174	@ 0xae
 800b890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 8163 	beq.w	800bb62 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b89c:	7b7a      	ldrb	r2, [r7, #13]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	32ae      	adds	r2, #174	@ 0xae
 800b8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	6839      	ldr	r1, [r7, #0]
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	4798      	blx	r3
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b8b2:	e156      	b.n	800bb62 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	785b      	ldrb	r3, [r3, #1]
 800b8b8:	2b03      	cmp	r3, #3
 800b8ba:	d008      	beq.n	800b8ce <USBD_StdEPReq+0x9a>
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	f300 8145 	bgt.w	800bb4c <USBD_StdEPReq+0x318>
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 809b 	beq.w	800b9fe <USBD_StdEPReq+0x1ca>
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d03c      	beq.n	800b946 <USBD_StdEPReq+0x112>
 800b8cc:	e13e      	b.n	800bb4c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	d002      	beq.n	800b8e0 <USBD_StdEPReq+0xac>
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d016      	beq.n	800b90c <USBD_StdEPReq+0xd8>
 800b8de:	e02c      	b.n	800b93a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8e0:	7bbb      	ldrb	r3, [r7, #14]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00d      	beq.n	800b902 <USBD_StdEPReq+0xce>
 800b8e6:	7bbb      	ldrb	r3, [r7, #14]
 800b8e8:	2b80      	cmp	r3, #128	@ 0x80
 800b8ea:	d00a      	beq.n	800b902 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8ec:	7bbb      	ldrb	r3, [r7, #14]
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f005 fc29 	bl	8011148 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8f6:	2180      	movs	r1, #128	@ 0x80
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f005 fc25 	bl	8011148 <USBD_LL_StallEP>
 800b8fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b900:	e020      	b.n	800b944 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fca4 	bl	800c252 <USBD_CtlError>
              break;
 800b90a:	e01b      	b.n	800b944 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	885b      	ldrh	r3, [r3, #2]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10e      	bne.n	800b932 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b914:	7bbb      	ldrb	r3, [r7, #14]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00b      	beq.n	800b932 <USBD_StdEPReq+0xfe>
 800b91a:	7bbb      	ldrb	r3, [r7, #14]
 800b91c:	2b80      	cmp	r3, #128	@ 0x80
 800b91e:	d008      	beq.n	800b932 <USBD_StdEPReq+0xfe>
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	88db      	ldrh	r3, [r3, #6]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d104      	bne.n	800b932 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b928:	7bbb      	ldrb	r3, [r7, #14]
 800b92a:	4619      	mov	r1, r3
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f005 fc0b 	bl	8011148 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fd64 	bl	800c400 <USBD_CtlSendStatus>

              break;
 800b938:	e004      	b.n	800b944 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fc88 	bl	800c252 <USBD_CtlError>
              break;
 800b942:	bf00      	nop
          }
          break;
 800b944:	e107      	b.n	800bb56 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	2b02      	cmp	r3, #2
 800b950:	d002      	beq.n	800b958 <USBD_StdEPReq+0x124>
 800b952:	2b03      	cmp	r3, #3
 800b954:	d016      	beq.n	800b984 <USBD_StdEPReq+0x150>
 800b956:	e04b      	b.n	800b9f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b958:	7bbb      	ldrb	r3, [r7, #14]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00d      	beq.n	800b97a <USBD_StdEPReq+0x146>
 800b95e:	7bbb      	ldrb	r3, [r7, #14]
 800b960:	2b80      	cmp	r3, #128	@ 0x80
 800b962:	d00a      	beq.n	800b97a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b964:	7bbb      	ldrb	r3, [r7, #14]
 800b966:	4619      	mov	r1, r3
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f005 fbed 	bl	8011148 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b96e:	2180      	movs	r1, #128	@ 0x80
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f005 fbe9 	bl	8011148 <USBD_LL_StallEP>
 800b976:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b978:	e040      	b.n	800b9fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b97a:	6839      	ldr	r1, [r7, #0]
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 fc68 	bl	800c252 <USBD_CtlError>
              break;
 800b982:	e03b      	b.n	800b9fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	885b      	ldrh	r3, [r3, #2]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d136      	bne.n	800b9fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b98c:	7bbb      	ldrb	r3, [r7, #14]
 800b98e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b992:	2b00      	cmp	r3, #0
 800b994:	d004      	beq.n	800b9a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b996:	7bbb      	ldrb	r3, [r7, #14]
 800b998:	4619      	mov	r1, r3
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f005 fbf3 	bl	8011186 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fd2d 	bl	800c400 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b9a6:	7bbb      	ldrb	r3, [r7, #14]
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7ff fde4 	bl	800b578 <USBD_CoreFindEP>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9b4:	7b7b      	ldrb	r3, [r7, #13]
 800b9b6:	2bff      	cmp	r3, #255	@ 0xff
 800b9b8:	d01f      	beq.n	800b9fa <USBD_StdEPReq+0x1c6>
 800b9ba:	7b7b      	ldrb	r3, [r7, #13]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d11c      	bne.n	800b9fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b9c0:	7b7a      	ldrb	r2, [r7, #13]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b9c8:	7b7a      	ldrb	r2, [r7, #13]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	32ae      	adds	r2, #174	@ 0xae
 800b9ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d010      	beq.n	800b9fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b9d8:	7b7a      	ldrb	r2, [r7, #13]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	32ae      	adds	r2, #174	@ 0xae
 800b9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	6839      	ldr	r1, [r7, #0]
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	4798      	blx	r3
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b9ee:	e004      	b.n	800b9fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b9f0:	6839      	ldr	r1, [r7, #0]
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 fc2d 	bl	800c252 <USBD_CtlError>
              break;
 800b9f8:	e000      	b.n	800b9fc <USBD_StdEPReq+0x1c8>
              break;
 800b9fa:	bf00      	nop
          }
          break;
 800b9fc:	e0ab      	b.n	800bb56 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d002      	beq.n	800ba10 <USBD_StdEPReq+0x1dc>
 800ba0a:	2b03      	cmp	r3, #3
 800ba0c:	d032      	beq.n	800ba74 <USBD_StdEPReq+0x240>
 800ba0e:	e097      	b.n	800bb40 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba10:	7bbb      	ldrb	r3, [r7, #14]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d007      	beq.n	800ba26 <USBD_StdEPReq+0x1f2>
 800ba16:	7bbb      	ldrb	r3, [r7, #14]
 800ba18:	2b80      	cmp	r3, #128	@ 0x80
 800ba1a:	d004      	beq.n	800ba26 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ba1c:	6839      	ldr	r1, [r7, #0]
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 fc17 	bl	800c252 <USBD_CtlError>
                break;
 800ba24:	e091      	b.n	800bb4a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	da0b      	bge.n	800ba46 <USBD_StdEPReq+0x212>
 800ba2e:	7bbb      	ldrb	r3, [r7, #14]
 800ba30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba34:	4613      	mov	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	4413      	add	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	3310      	adds	r3, #16
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	4413      	add	r3, r2
 800ba42:	3304      	adds	r3, #4
 800ba44:	e00b      	b.n	800ba5e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ba46:	7bbb      	ldrb	r3, [r7, #14]
 800ba48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4413      	add	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	2200      	movs	r2, #0
 800ba64:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	2202      	movs	r2, #2
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 fc6d 	bl	800c34c <USBD_CtlSendData>
              break;
 800ba72:	e06a      	b.n	800bb4a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	da11      	bge.n	800baa0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba7c:	7bbb      	ldrb	r3, [r7, #14]
 800ba7e:	f003 020f 	and.w	r2, r3, #15
 800ba82:	6879      	ldr	r1, [r7, #4]
 800ba84:	4613      	mov	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	4413      	add	r3, r2
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	440b      	add	r3, r1
 800ba8e:	3324      	adds	r3, #36	@ 0x24
 800ba90:	881b      	ldrh	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d117      	bne.n	800bac6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ba96:	6839      	ldr	r1, [r7, #0]
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fbda 	bl	800c252 <USBD_CtlError>
                  break;
 800ba9e:	e054      	b.n	800bb4a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	f003 020f 	and.w	r2, r3, #15
 800baa6:	6879      	ldr	r1, [r7, #4]
 800baa8:	4613      	mov	r3, r2
 800baaa:	009b      	lsls	r3, r3, #2
 800baac:	4413      	add	r3, r2
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	440b      	add	r3, r1
 800bab2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d104      	bne.n	800bac6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800babc:	6839      	ldr	r1, [r7, #0]
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fbc7 	bl	800c252 <USBD_CtlError>
                  break;
 800bac4:	e041      	b.n	800bb4a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bac6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	da0b      	bge.n	800bae6 <USBD_StdEPReq+0x2b2>
 800bace:	7bbb      	ldrb	r3, [r7, #14]
 800bad0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bad4:	4613      	mov	r3, r2
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4413      	add	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	3310      	adds	r3, #16
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	4413      	add	r3, r2
 800bae2:	3304      	adds	r3, #4
 800bae4:	e00b      	b.n	800bafe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bae6:	7bbb      	ldrb	r3, [r7, #14]
 800bae8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baec:	4613      	mov	r3, r2
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	4413      	add	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	4413      	add	r3, r2
 800bafc:	3304      	adds	r3, #4
 800bafe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bb00:	7bbb      	ldrb	r3, [r7, #14]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d002      	beq.n	800bb0c <USBD_StdEPReq+0x2d8>
 800bb06:	7bbb      	ldrb	r3, [r7, #14]
 800bb08:	2b80      	cmp	r3, #128	@ 0x80
 800bb0a:	d103      	bne.n	800bb14 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	601a      	str	r2, [r3, #0]
 800bb12:	e00e      	b.n	800bb32 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bb14:	7bbb      	ldrb	r3, [r7, #14]
 800bb16:	4619      	mov	r1, r3
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f005 fb53 	bl	80111c4 <USBD_LL_IsStallEP>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d003      	beq.n	800bb2c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	2201      	movs	r2, #1
 800bb28:	601a      	str	r2, [r3, #0]
 800bb2a:	e002      	b.n	800bb32 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2202      	movs	r2, #2
 800bb36:	4619      	mov	r1, r3
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fc07 	bl	800c34c <USBD_CtlSendData>
              break;
 800bb3e:	e004      	b.n	800bb4a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bb40:	6839      	ldr	r1, [r7, #0]
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fb85 	bl	800c252 <USBD_CtlError>
              break;
 800bb48:	bf00      	nop
          }
          break;
 800bb4a:	e004      	b.n	800bb56 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 fb7f 	bl	800c252 <USBD_CtlError>
          break;
 800bb54:	bf00      	nop
      }
      break;
 800bb56:	e005      	b.n	800bb64 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bb58:	6839      	ldr	r1, [r7, #0]
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 fb79 	bl	800c252 <USBD_CtlError>
      break;
 800bb60:	e000      	b.n	800bb64 <USBD_StdEPReq+0x330>
      break;
 800bb62:	bf00      	nop
  }

  return ret;
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
	...

0800bb70 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb82:	2300      	movs	r3, #0
 800bb84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	885b      	ldrh	r3, [r3, #2]
 800bb8a:	0a1b      	lsrs	r3, r3, #8
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	2b0e      	cmp	r3, #14
 800bb92:	f200 8152 	bhi.w	800be3a <USBD_GetDescriptor+0x2ca>
 800bb96:	a201      	add	r2, pc, #4	@ (adr r2, 800bb9c <USBD_GetDescriptor+0x2c>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bc0d 	.word	0x0800bc0d
 800bba0:	0800bc25 	.word	0x0800bc25
 800bba4:	0800bc65 	.word	0x0800bc65
 800bba8:	0800be3b 	.word	0x0800be3b
 800bbac:	0800be3b 	.word	0x0800be3b
 800bbb0:	0800bddb 	.word	0x0800bddb
 800bbb4:	0800be07 	.word	0x0800be07
 800bbb8:	0800be3b 	.word	0x0800be3b
 800bbbc:	0800be3b 	.word	0x0800be3b
 800bbc0:	0800be3b 	.word	0x0800be3b
 800bbc4:	0800be3b 	.word	0x0800be3b
 800bbc8:	0800be3b 	.word	0x0800be3b
 800bbcc:	0800be3b 	.word	0x0800be3b
 800bbd0:	0800be3b 	.word	0x0800be3b
 800bbd4:	0800bbd9 	.word	0x0800bbd9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbde:	69db      	ldr	r3, [r3, #28]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d00b      	beq.n	800bbfc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bbea:	69db      	ldr	r3, [r3, #28]
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	7c12      	ldrb	r2, [r2, #16]
 800bbf0:	f107 0108 	add.w	r1, r7, #8
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	4798      	blx	r3
 800bbf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbfa:	e126      	b.n	800be4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bbfc:	6839      	ldr	r1, [r7, #0]
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 fb27 	bl	800c252 <USBD_CtlError>
        err++;
 800bc04:	7afb      	ldrb	r3, [r7, #11]
 800bc06:	3301      	adds	r3, #1
 800bc08:	72fb      	strb	r3, [r7, #11]
      break;
 800bc0a:	e11e      	b.n	800be4a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	7c12      	ldrb	r2, [r2, #16]
 800bc18:	f107 0108 	add.w	r1, r7, #8
 800bc1c:	4610      	mov	r0, r2
 800bc1e:	4798      	blx	r3
 800bc20:	60f8      	str	r0, [r7, #12]
      break;
 800bc22:	e112      	b.n	800be4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	7c1b      	ldrb	r3, [r3, #16]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10d      	bne.n	800bc48 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc34:	f107 0208 	add.w	r2, r7, #8
 800bc38:	4610      	mov	r0, r2
 800bc3a:	4798      	blx	r3
 800bc3c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	3301      	adds	r3, #1
 800bc42:	2202      	movs	r2, #2
 800bc44:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bc46:	e100      	b.n	800be4a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc50:	f107 0208 	add.w	r2, r7, #8
 800bc54:	4610      	mov	r0, r2
 800bc56:	4798      	blx	r3
 800bc58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	2202      	movs	r2, #2
 800bc60:	701a      	strb	r2, [r3, #0]
      break;
 800bc62:	e0f2      	b.n	800be4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	885b      	ldrh	r3, [r3, #2]
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	2b05      	cmp	r3, #5
 800bc6c:	f200 80ac 	bhi.w	800bdc8 <USBD_GetDescriptor+0x258>
 800bc70:	a201      	add	r2, pc, #4	@ (adr r2, 800bc78 <USBD_GetDescriptor+0x108>)
 800bc72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc76:	bf00      	nop
 800bc78:	0800bc91 	.word	0x0800bc91
 800bc7c:	0800bcc5 	.word	0x0800bcc5
 800bc80:	0800bcf9 	.word	0x0800bcf9
 800bc84:	0800bd2d 	.word	0x0800bd2d
 800bc88:	0800bd61 	.word	0x0800bd61
 800bc8c:	0800bd95 	.word	0x0800bd95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00b      	beq.n	800bcb4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	687a      	ldr	r2, [r7, #4]
 800bca6:	7c12      	ldrb	r2, [r2, #16]
 800bca8:	f107 0108 	add.w	r1, r7, #8
 800bcac:	4610      	mov	r0, r2
 800bcae:	4798      	blx	r3
 800bcb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcb2:	e091      	b.n	800bdd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bcb4:	6839      	ldr	r1, [r7, #0]
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 facb 	bl	800c252 <USBD_CtlError>
            err++;
 800bcbc:	7afb      	ldrb	r3, [r7, #11]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	72fb      	strb	r3, [r7, #11]
          break;
 800bcc2:	e089      	b.n	800bdd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d00b      	beq.n	800bce8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	7c12      	ldrb	r2, [r2, #16]
 800bcdc:	f107 0108 	add.w	r1, r7, #8
 800bce0:	4610      	mov	r0, r2
 800bce2:	4798      	blx	r3
 800bce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bce6:	e077      	b.n	800bdd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bce8:	6839      	ldr	r1, [r7, #0]
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 fab1 	bl	800c252 <USBD_CtlError>
            err++;
 800bcf0:	7afb      	ldrb	r3, [r7, #11]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	72fb      	strb	r3, [r7, #11]
          break;
 800bcf6:	e06f      	b.n	800bdd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d00b      	beq.n	800bd1c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	7c12      	ldrb	r2, [r2, #16]
 800bd10:	f107 0108 	add.w	r1, r7, #8
 800bd14:	4610      	mov	r0, r2
 800bd16:	4798      	blx	r3
 800bd18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd1a:	e05d      	b.n	800bdd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd1c:	6839      	ldr	r1, [r7, #0]
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 fa97 	bl	800c252 <USBD_CtlError>
            err++;
 800bd24:	7afb      	ldrb	r3, [r7, #11]
 800bd26:	3301      	adds	r3, #1
 800bd28:	72fb      	strb	r3, [r7, #11]
          break;
 800bd2a:	e055      	b.n	800bdd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00b      	beq.n	800bd50 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	7c12      	ldrb	r2, [r2, #16]
 800bd44:	f107 0108 	add.w	r1, r7, #8
 800bd48:	4610      	mov	r0, r2
 800bd4a:	4798      	blx	r3
 800bd4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd4e:	e043      	b.n	800bdd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd50:	6839      	ldr	r1, [r7, #0]
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 fa7d 	bl	800c252 <USBD_CtlError>
            err++;
 800bd58:	7afb      	ldrb	r3, [r7, #11]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	72fb      	strb	r3, [r7, #11]
          break;
 800bd5e:	e03b      	b.n	800bdd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd66:	695b      	ldr	r3, [r3, #20]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00b      	beq.n	800bd84 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd72:	695b      	ldr	r3, [r3, #20]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	7c12      	ldrb	r2, [r2, #16]
 800bd78:	f107 0108 	add.w	r1, r7, #8
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	4798      	blx	r3
 800bd80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd82:	e029      	b.n	800bdd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fa63 	bl	800c252 <USBD_CtlError>
            err++;
 800bd8c:	7afb      	ldrb	r3, [r7, #11]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	72fb      	strb	r3, [r7, #11]
          break;
 800bd92:	e021      	b.n	800bdd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd9a:	699b      	ldr	r3, [r3, #24]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00b      	beq.n	800bdb8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bda6:	699b      	ldr	r3, [r3, #24]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	7c12      	ldrb	r2, [r2, #16]
 800bdac:	f107 0108 	add.w	r1, r7, #8
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	4798      	blx	r3
 800bdb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdb6:	e00f      	b.n	800bdd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdb8:	6839      	ldr	r1, [r7, #0]
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fa49 	bl	800c252 <USBD_CtlError>
            err++;
 800bdc0:	7afb      	ldrb	r3, [r7, #11]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	72fb      	strb	r3, [r7, #11]
          break;
 800bdc6:	e007      	b.n	800bdd8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bdc8:	6839      	ldr	r1, [r7, #0]
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f000 fa41 	bl	800c252 <USBD_CtlError>
          err++;
 800bdd0:	7afb      	ldrb	r3, [r7, #11]
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bdd6:	bf00      	nop
      }
      break;
 800bdd8:	e037      	b.n	800be4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	7c1b      	ldrb	r3, [r3, #16]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d109      	bne.n	800bdf6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bde8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdea:	f107 0208 	add.w	r2, r7, #8
 800bdee:	4610      	mov	r0, r2
 800bdf0:	4798      	blx	r3
 800bdf2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdf4:	e029      	b.n	800be4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bdf6:	6839      	ldr	r1, [r7, #0]
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 fa2a 	bl	800c252 <USBD_CtlError>
        err++;
 800bdfe:	7afb      	ldrb	r3, [r7, #11]
 800be00:	3301      	adds	r3, #1
 800be02:	72fb      	strb	r3, [r7, #11]
      break;
 800be04:	e021      	b.n	800be4a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	7c1b      	ldrb	r3, [r3, #16]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10d      	bne.n	800be2a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be16:	f107 0208 	add.w	r2, r7, #8
 800be1a:	4610      	mov	r0, r2
 800be1c:	4798      	blx	r3
 800be1e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	3301      	adds	r3, #1
 800be24:	2207      	movs	r2, #7
 800be26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be28:	e00f      	b.n	800be4a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800be2a:	6839      	ldr	r1, [r7, #0]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fa10 	bl	800c252 <USBD_CtlError>
        err++;
 800be32:	7afb      	ldrb	r3, [r7, #11]
 800be34:	3301      	adds	r3, #1
 800be36:	72fb      	strb	r3, [r7, #11]
      break;
 800be38:	e007      	b.n	800be4a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fa08 	bl	800c252 <USBD_CtlError>
      err++;
 800be42:	7afb      	ldrb	r3, [r7, #11]
 800be44:	3301      	adds	r3, #1
 800be46:	72fb      	strb	r3, [r7, #11]
      break;
 800be48:	bf00      	nop
  }

  if (err != 0U)
 800be4a:	7afb      	ldrb	r3, [r7, #11]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d11e      	bne.n	800be8e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	88db      	ldrh	r3, [r3, #6]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d016      	beq.n	800be86 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800be58:	893b      	ldrh	r3, [r7, #8]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00e      	beq.n	800be7c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	88da      	ldrh	r2, [r3, #6]
 800be62:	893b      	ldrh	r3, [r7, #8]
 800be64:	4293      	cmp	r3, r2
 800be66:	bf28      	it	cs
 800be68:	4613      	movcs	r3, r2
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be6e:	893b      	ldrh	r3, [r7, #8]
 800be70:	461a      	mov	r2, r3
 800be72:	68f9      	ldr	r1, [r7, #12]
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 fa69 	bl	800c34c <USBD_CtlSendData>
 800be7a:	e009      	b.n	800be90 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 f9e7 	bl	800c252 <USBD_CtlError>
 800be84:	e004      	b.n	800be90 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 faba 	bl	800c400 <USBD_CtlSendStatus>
 800be8c:	e000      	b.n	800be90 <USBD_GetDescriptor+0x320>
    return;
 800be8e:	bf00      	nop
  }
}
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
 800be96:	bf00      	nop

0800be98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	889b      	ldrh	r3, [r3, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d131      	bne.n	800bf0e <USBD_SetAddress+0x76>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	88db      	ldrh	r3, [r3, #6]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d12d      	bne.n	800bf0e <USBD_SetAddress+0x76>
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	885b      	ldrh	r3, [r3, #2]
 800beb6:	2b7f      	cmp	r3, #127	@ 0x7f
 800beb8:	d829      	bhi.n	800bf0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	885b      	ldrh	r3, [r3, #2]
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bec4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800becc:	b2db      	uxtb	r3, r3
 800bece:	2b03      	cmp	r3, #3
 800bed0:	d104      	bne.n	800bedc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f9bc 	bl	800c252 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beda:	e01d      	b.n	800bf18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	7bfa      	ldrb	r2, [r7, #15]
 800bee0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bee4:	7bfb      	ldrb	r3, [r7, #15]
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f005 f997 	bl	801121c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fa86 	bl	800c400 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d004      	beq.n	800bf04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2202      	movs	r2, #2
 800befe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf02:	e009      	b.n	800bf18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf0c:	e004      	b.n	800bf18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf0e:	6839      	ldr	r1, [r7, #0]
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 f99e 	bl	800c252 <USBD_CtlError>
  }
}
 800bf16:	bf00      	nop
 800bf18:	bf00      	nop
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	885b      	ldrh	r3, [r3, #2]
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	4b4e      	ldr	r3, [pc, #312]	@ (800c070 <USBD_SetConfig+0x150>)
 800bf36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf38:	4b4d      	ldr	r3, [pc, #308]	@ (800c070 <USBD_SetConfig+0x150>)
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d905      	bls.n	800bf4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 f985 	bl	800c252 <USBD_CtlError>
    return USBD_FAIL;
 800bf48:	2303      	movs	r3, #3
 800bf4a:	e08c      	b.n	800c066 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	2b02      	cmp	r3, #2
 800bf56:	d002      	beq.n	800bf5e <USBD_SetConfig+0x3e>
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d029      	beq.n	800bfb0 <USBD_SetConfig+0x90>
 800bf5c:	e075      	b.n	800c04a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bf5e:	4b44      	ldr	r3, [pc, #272]	@ (800c070 <USBD_SetConfig+0x150>)
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d020      	beq.n	800bfa8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bf66:	4b42      	ldr	r3, [pc, #264]	@ (800c070 <USBD_SetConfig+0x150>)
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf70:	4b3f      	ldr	r3, [pc, #252]	@ (800c070 <USBD_SetConfig+0x150>)
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	4619      	mov	r1, r3
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7ff f84b 	bl	800b012 <USBD_SetClassConfig>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bf80:	7bfb      	ldrb	r3, [r7, #15]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d008      	beq.n	800bf98 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 f962 	bl	800c252 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2202      	movs	r2, #2
 800bf92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bf96:	e065      	b.n	800c064 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 fa31 	bl	800c400 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2203      	movs	r2, #3
 800bfa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bfa6:	e05d      	b.n	800c064 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 fa29 	bl	800c400 <USBD_CtlSendStatus>
      break;
 800bfae:	e059      	b.n	800c064 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bfb0:	4b2f      	ldr	r3, [pc, #188]	@ (800c070 <USBD_SetConfig+0x150>)
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d112      	bne.n	800bfde <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2202      	movs	r2, #2
 800bfbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bfc0:	4b2b      	ldr	r3, [pc, #172]	@ (800c070 <USBD_SetConfig+0x150>)
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bfca:	4b29      	ldr	r3, [pc, #164]	@ (800c070 <USBD_SetConfig+0x150>)
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	4619      	mov	r1, r3
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f7ff f83a 	bl	800b04a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fa12 	bl	800c400 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bfdc:	e042      	b.n	800c064 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bfde:	4b24      	ldr	r3, [pc, #144]	@ (800c070 <USBD_SetConfig+0x150>)
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d02a      	beq.n	800c042 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	4619      	mov	r1, r3
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f7ff f828 	bl	800b04a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bffa:	4b1d      	ldr	r3, [pc, #116]	@ (800c070 <USBD_SetConfig+0x150>)
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	461a      	mov	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c004:	4b1a      	ldr	r3, [pc, #104]	@ (800c070 <USBD_SetConfig+0x150>)
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	4619      	mov	r1, r3
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7ff f801 	bl	800b012 <USBD_SetClassConfig>
 800c010:	4603      	mov	r3, r0
 800c012:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c014:	7bfb      	ldrb	r3, [r7, #15]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00f      	beq.n	800c03a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c01a:	6839      	ldr	r1, [r7, #0]
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 f918 	bl	800c252 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	b2db      	uxtb	r3, r3
 800c028:	4619      	mov	r1, r3
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f7ff f80d 	bl	800b04a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2202      	movs	r2, #2
 800c034:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c038:	e014      	b.n	800c064 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 f9e0 	bl	800c400 <USBD_CtlSendStatus>
      break;
 800c040:	e010      	b.n	800c064 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f9dc 	bl	800c400 <USBD_CtlSendStatus>
      break;
 800c048:	e00c      	b.n	800c064 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 f900 	bl	800c252 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c052:	4b07      	ldr	r3, [pc, #28]	@ (800c070 <USBD_SetConfig+0x150>)
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	4619      	mov	r1, r3
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f7fe fff6 	bl	800b04a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c05e:	2303      	movs	r3, #3
 800c060:	73fb      	strb	r3, [r7, #15]
      break;
 800c062:	bf00      	nop
  }

  return ret;
 800c064:	7bfb      	ldrb	r3, [r7, #15]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	200004dc 	.word	0x200004dc

0800c074 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	88db      	ldrh	r3, [r3, #6]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d004      	beq.n	800c090 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 f8e2 	bl	800c252 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c08e:	e023      	b.n	800c0d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c096:	b2db      	uxtb	r3, r3
 800c098:	2b02      	cmp	r3, #2
 800c09a:	dc02      	bgt.n	800c0a2 <USBD_GetConfig+0x2e>
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	dc03      	bgt.n	800c0a8 <USBD_GetConfig+0x34>
 800c0a0:	e015      	b.n	800c0ce <USBD_GetConfig+0x5a>
 800c0a2:	2b03      	cmp	r3, #3
 800c0a4:	d00b      	beq.n	800c0be <USBD_GetConfig+0x4a>
 800c0a6:	e012      	b.n	800c0ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	3308      	adds	r3, #8
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 f948 	bl	800c34c <USBD_CtlSendData>
        break;
 800c0bc:	e00c      	b.n	800c0d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f940 	bl	800c34c <USBD_CtlSendData>
        break;
 800c0cc:	e004      	b.n	800c0d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c0ce:	6839      	ldr	r1, [r7, #0]
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 f8be 	bl	800c252 <USBD_CtlError>
        break;
 800c0d6:	bf00      	nop
}
 800c0d8:	bf00      	nop
 800c0da:	3708      	adds	r7, #8
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	d81e      	bhi.n	800c136 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	88db      	ldrh	r3, [r3, #6]
 800c0fc:	2b02      	cmp	r3, #2
 800c0fe:	d004      	beq.n	800c10a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c100:	6839      	ldr	r1, [r7, #0]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 f8a5 	bl	800c252 <USBD_CtlError>
        break;
 800c108:	e01a      	b.n	800c140 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2201      	movs	r2, #1
 800c10e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c116:	2b00      	cmp	r3, #0
 800c118:	d005      	beq.n	800c126 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68db      	ldr	r3, [r3, #12]
 800c11e:	f043 0202 	orr.w	r2, r3, #2
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	330c      	adds	r3, #12
 800c12a:	2202      	movs	r2, #2
 800c12c:	4619      	mov	r1, r3
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f90c 	bl	800c34c <USBD_CtlSendData>
      break;
 800c134:	e004      	b.n	800c140 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 f88a 	bl	800c252 <USBD_CtlError>
      break;
 800c13e:	bf00      	nop
  }
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	885b      	ldrh	r3, [r3, #2]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d107      	bne.n	800c16a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2201      	movs	r2, #1
 800c15e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 f94c 	bl	800c400 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c168:	e013      	b.n	800c192 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	885b      	ldrh	r3, [r3, #2]
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d10b      	bne.n	800c18a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	889b      	ldrh	r3, [r3, #4]
 800c176:	0a1b      	lsrs	r3, r3, #8
 800c178:	b29b      	uxth	r3, r3
 800c17a:	b2da      	uxtb	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 f93c 	bl	800c400 <USBD_CtlSendStatus>
}
 800c188:	e003      	b.n	800c192 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 f860 	bl	800c252 <USBD_CtlError>
}
 800c192:	bf00      	nop
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b082      	sub	sp, #8
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	d80b      	bhi.n	800c1ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	885b      	ldrh	r3, [r3, #2]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d10c      	bne.n	800c1d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 f91c 	bl	800c400 <USBD_CtlSendStatus>
      }
      break;
 800c1c8:	e004      	b.n	800c1d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c1ca:	6839      	ldr	r1, [r7, #0]
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 f840 	bl	800c252 <USBD_CtlError>
      break;
 800c1d2:	e000      	b.n	800c1d6 <USBD_ClrFeature+0x3c>
      break;
 800c1d4:	bf00      	nop
  }
}
 800c1d6:	bf00      	nop
 800c1d8:	3708      	adds	r7, #8
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b084      	sub	sp, #16
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
 800c1e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	781a      	ldrb	r2, [r3, #0]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	781a      	ldrb	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	3301      	adds	r3, #1
 800c206:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f7ff fa16 	bl	800b63a <SWAPBYTE>
 800c20e:	4603      	mov	r3, r0
 800c210:	461a      	mov	r2, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	3301      	adds	r3, #1
 800c21a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	3301      	adds	r3, #1
 800c220:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f7ff fa09 	bl	800b63a <SWAPBYTE>
 800c228:	4603      	mov	r3, r0
 800c22a:	461a      	mov	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	3301      	adds	r3, #1
 800c234:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	3301      	adds	r3, #1
 800c23a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f7ff f9fc 	bl	800b63a <SWAPBYTE>
 800c242:	4603      	mov	r3, r0
 800c244:	461a      	mov	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	80da      	strh	r2, [r3, #6]
}
 800c24a:	bf00      	nop
 800c24c:	3710      	adds	r7, #16
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b082      	sub	sp, #8
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c25c:	2180      	movs	r1, #128	@ 0x80
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f004 ff72 	bl	8011148 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c264:	2100      	movs	r1, #0
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f004 ff6e 	bl	8011148 <USBD_LL_StallEP>
}
 800c26c:	bf00      	nop
 800c26e:	3708      	adds	r7, #8
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b086      	sub	sp, #24
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c280:	2300      	movs	r3, #0
 800c282:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d042      	beq.n	800c310 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c28e:	6938      	ldr	r0, [r7, #16]
 800c290:	f000 f842 	bl	800c318 <USBD_GetLen>
 800c294:	4603      	mov	r3, r0
 800c296:	3301      	adds	r3, #1
 800c298:	005b      	lsls	r3, r3, #1
 800c29a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c29e:	d808      	bhi.n	800c2b2 <USBD_GetString+0x3e>
 800c2a0:	6938      	ldr	r0, [r7, #16]
 800c2a2:	f000 f839 	bl	800c318 <USBD_GetLen>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	005b      	lsls	r3, r3, #1
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	e001      	b.n	800c2b6 <USBD_GetString+0x42>
 800c2b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c2ba:	7dfb      	ldrb	r3, [r7, #23]
 800c2bc:	68ba      	ldr	r2, [r7, #8]
 800c2be:	4413      	add	r3, r2
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	7812      	ldrb	r2, [r2, #0]
 800c2c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2c6:	7dfb      	ldrb	r3, [r7, #23]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c2cc:	7dfb      	ldrb	r3, [r7, #23]
 800c2ce:	68ba      	ldr	r2, [r7, #8]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	2203      	movs	r2, #3
 800c2d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c2d6:	7dfb      	ldrb	r3, [r7, #23]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c2dc:	e013      	b.n	800c306 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c2de:	7dfb      	ldrb	r3, [r7, #23]
 800c2e0:	68ba      	ldr	r2, [r7, #8]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	693a      	ldr	r2, [r7, #16]
 800c2e6:	7812      	ldrb	r2, [r2, #0]
 800c2e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	613b      	str	r3, [r7, #16]
    idx++;
 800c2f0:	7dfb      	ldrb	r3, [r7, #23]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c2f6:	7dfb      	ldrb	r3, [r7, #23]
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	701a      	strb	r2, [r3, #0]
    idx++;
 800c300:	7dfb      	ldrb	r3, [r7, #23]
 800c302:	3301      	adds	r3, #1
 800c304:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1e7      	bne.n	800c2de <USBD_GetString+0x6a>
 800c30e:	e000      	b.n	800c312 <USBD_GetString+0x9e>
    return;
 800c310:	bf00      	nop
  }
}
 800c312:	3718      	adds	r7, #24
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c320:	2300      	movs	r3, #0
 800c322:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c328:	e005      	b.n	800c336 <USBD_GetLen+0x1e>
  {
    len++;
 800c32a:	7bfb      	ldrb	r3, [r7, #15]
 800c32c:	3301      	adds	r3, #1
 800c32e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	3301      	adds	r3, #1
 800c334:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1f5      	bne.n	800c32a <USBD_GetLen+0x12>
  }

  return len;
 800c33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3714      	adds	r7, #20
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	60f8      	str	r0, [r7, #12]
 800c354:	60b9      	str	r1, [r7, #8]
 800c356:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2202      	movs	r2, #2
 800c35c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	68ba      	ldr	r2, [r7, #8]
 800c370:	2100      	movs	r1, #0
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	f004 ff71 	bl	801125a <USBD_LL_Transmit>

  return USBD_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b084      	sub	sp, #16
 800c386:	af00      	add	r7, sp, #0
 800c388:	60f8      	str	r0, [r7, #12]
 800c38a:	60b9      	str	r1, [r7, #8]
 800c38c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	68ba      	ldr	r2, [r7, #8]
 800c392:	2100      	movs	r1, #0
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f004 ff60 	bl	801125a <USBD_LL_Transmit>

  return USBD_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3710      	adds	r7, #16
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2203      	movs	r2, #3
 800c3b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	68ba      	ldr	r2, [r7, #8]
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f004 ff64 	bl	801129c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b084      	sub	sp, #16
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	60f8      	str	r0, [r7, #12]
 800c3e6:	60b9      	str	r1, [r7, #8]
 800c3e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f004 ff53 	bl	801129c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b082      	sub	sp, #8
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2204      	movs	r2, #4
 800c40c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c410:	2300      	movs	r3, #0
 800c412:	2200      	movs	r2, #0
 800c414:	2100      	movs	r1, #0
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f004 ff1f 	bl	801125a <USBD_LL_Transmit>

  return USBD_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b082      	sub	sp, #8
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2205      	movs	r2, #5
 800c432:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c436:	2300      	movs	r3, #0
 800c438:	2200      	movs	r2, #0
 800c43a:	2100      	movs	r1, #0
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f004 ff2d 	bl	801129c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c442:	2300      	movs	r3, #0
}
 800c444:	4618      	mov	r0, r3
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b088      	sub	sp, #32
 800c450:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c452:	2300      	movs	r3, #0
 800c454:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c456:	f107 0308 	add.w	r3, r7, #8
 800c45a:	2218      	movs	r2, #24
 800c45c:	2100      	movs	r1, #0
 800c45e:	4618      	mov	r0, r3
 800c460:	f001 f92d 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800c464:	233f      	movs	r3, #63	@ 0x3f
 800c466:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800c468:	2381      	movs	r3, #129	@ 0x81
 800c46a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c46c:	1dfb      	adds	r3, r7, #7
 800c46e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c470:	2301      	movs	r3, #1
 800c472:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c474:	f107 0308 	add.w	r3, r7, #8
 800c478:	2100      	movs	r1, #0
 800c47a:	4618      	mov	r0, r3
 800c47c:	f001 fba8 	bl	800dbd0 <hci_send_req>
 800c480:	4603      	mov	r3, r0
 800c482:	2b00      	cmp	r3, #0
 800c484:	da01      	bge.n	800c48a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c486:	23ff      	movs	r3, #255	@ 0xff
 800c488:	e000      	b.n	800c48c <aci_gap_set_non_discoverable+0x40>
  return status;
 800c48a:	79fb      	ldrb	r3, [r7, #7]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3720      	adds	r7, #32
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800c494:	b5b0      	push	{r4, r5, r7, lr}
 800c496:	b0ce      	sub	sp, #312	@ 0x138
 800c498:	af00      	add	r7, sp, #0
 800c49a:	4605      	mov	r5, r0
 800c49c:	460c      	mov	r4, r1
 800c49e:	4610      	mov	r0, r2
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c4a6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800c4aa:	462a      	mov	r2, r5
 800c4ac:	701a      	strb	r2, [r3, #0]
 800c4ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c4b2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	801a      	strh	r2, [r3, #0]
 800c4ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c4be:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	801a      	strh	r2, [r3, #0]
 800c4c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c4ca:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800c4ce:	460a      	mov	r2, r1
 800c4d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800c4d2:	f107 0310 	add.w	r3, r7, #16
 800c4d6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800c4da:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800c4de:	3308      	adds	r3, #8
 800c4e0:	f107 0210 	add.w	r2, r7, #16
 800c4e4:	4413      	add	r3, r2
 800c4e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800c4ea:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800c4ee:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800c4f2:	4413      	add	r3, r2
 800c4f4:	3309      	adds	r3, #9
 800c4f6:	f107 0210 	add.w	r2, r7, #16
 800c4fa:	4413      	add	r3, r2
 800c4fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c500:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c504:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c508:	2200      	movs	r2, #0
 800c50a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c50c:	2300      	movs	r3, #0
 800c50e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800c512:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c516:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c51a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800c51e:	7812      	ldrb	r2, [r2, #0]
 800c520:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c522:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c526:	3301      	adds	r3, #1
 800c528:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800c52c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c530:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c534:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800c538:	8812      	ldrh	r2, [r2, #0]
 800c53a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800c53e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c542:	3302      	adds	r3, #2
 800c544:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800c548:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c54c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c550:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800c554:	8812      	ldrh	r2, [r2, #0]
 800c556:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800c55a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c55e:	3302      	adds	r3, #2
 800c560:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800c564:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c568:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800c56c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800c570:	7812      	ldrb	r2, [r2, #0]
 800c572:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c574:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c578:	3301      	adds	r3, #1
 800c57a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800c57e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c582:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800c586:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c588:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c58c:	3301      	adds	r3, #1
 800c58e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800c592:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c596:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800c59a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800c59c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800c5a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800c5aa:	3308      	adds	r3, #8
 800c5ac:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800c5b0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f001 f872 	bl	800d69e <Osal_MemCpy>
    index_input += Local_Name_Length;
 800c5ba:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800c5be:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800c5c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c5cc:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800c5d0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c5d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800c5dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800c5e6:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f001 f857 	bl	800d69e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800c5f0:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800c5f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800c5f8:	4413      	add	r3, r2
 800c5fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800c5fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c602:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800c606:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c608:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c60c:	3302      	adds	r3, #2
 800c60e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800c612:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c616:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800c61a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800c61c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c620:	3302      	adds	r3, #2
 800c622:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c626:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c62a:	2218      	movs	r2, #24
 800c62c:	2100      	movs	r1, #0
 800c62e:	4618      	mov	r0, r3
 800c630:	f001 f845 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800c634:	233f      	movs	r3, #63	@ 0x3f
 800c636:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800c63a:	2383      	movs	r3, #131	@ 0x83
 800c63c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c640:	f107 0310 	add.w	r3, r7, #16
 800c644:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c648:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c64c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c650:	f107 030f 	add.w	r3, r7, #15
 800c654:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c658:	2301      	movs	r3, #1
 800c65a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c65e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c662:	2100      	movs	r1, #0
 800c664:	4618      	mov	r0, r3
 800c666:	f001 fab3 	bl	800dbd0 <hci_send_req>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	da01      	bge.n	800c674 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800c670:	23ff      	movs	r3, #255	@ 0xff
 800c672:	e004      	b.n	800c67e <aci_gap_set_discoverable+0x1ea>
  return status;
 800c674:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800c678:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c67c:	781b      	ldrb	r3, [r3, #0]
}
 800c67e:	4618      	mov	r0, r3
 800c680:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800c684:	46bd      	mov	sp, r7
 800c686:	bdb0      	pop	{r4, r5, r7, pc}

0800c688 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b0cc      	sub	sp, #304	@ 0x130
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	4602      	mov	r2, r0
 800c690:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c694:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c698:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800c69a:	f107 0310 	add.w	r3, r7, #16
 800c69e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c6a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c6a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800c6b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c6b8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c6bc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c6c0:	7812      	ldrb	r2, [r2, #0]
 800c6c2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c6c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c6ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c6d2:	2218      	movs	r2, #24
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f000 fff1 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800c6dc:	233f      	movs	r3, #63	@ 0x3f
 800c6de:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800c6e2:	2385      	movs	r3, #133	@ 0x85
 800c6e4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c6e8:	f107 0310 	add.w	r3, r7, #16
 800c6ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c6f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c6f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c6f8:	f107 030f 	add.w	r3, r7, #15
 800c6fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c700:	2301      	movs	r3, #1
 800c702:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c706:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c70a:	2100      	movs	r1, #0
 800c70c:	4618      	mov	r0, r3
 800c70e:	f001 fa5f 	bl	800dbd0 <hci_send_req>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	da01      	bge.n	800c71c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800c718:	23ff      	movs	r3, #255	@ 0xff
 800c71a:	e004      	b.n	800c726 <aci_gap_set_io_capability+0x9e>
  return status;
 800c71c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c720:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c724:	781b      	ldrb	r3, [r3, #0]
}
 800c726:	4618      	mov	r0, r3
 800c728:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800c730:	b5b0      	push	{r4, r5, r7, lr}
 800c732:	b0cc      	sub	sp, #304	@ 0x130
 800c734:	af00      	add	r7, sp, #0
 800c736:	4605      	mov	r5, r0
 800c738:	460c      	mov	r4, r1
 800c73a:	4610      	mov	r0, r2
 800c73c:	4619      	mov	r1, r3
 800c73e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c742:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c746:	462a      	mov	r2, r5
 800c748:	701a      	strb	r2, [r3, #0]
 800c74a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c74e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c752:	4622      	mov	r2, r4
 800c754:	701a      	strb	r2, [r3, #0]
 800c756:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c75a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800c75e:	4602      	mov	r2, r0
 800c760:	701a      	strb	r2, [r3, #0]
 800c762:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c766:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800c76a:	460a      	mov	r2, r1
 800c76c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800c76e:	f107 0310 	add.w	r3, r7, #16
 800c772:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c776:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c77a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c77e:	2200      	movs	r2, #0
 800c780:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c782:	2300      	movs	r3, #0
 800c784:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800c788:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c78c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c790:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c794:	7812      	ldrb	r2, [r2, #0]
 800c796:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c798:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c79c:	3301      	adds	r3, #1
 800c79e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800c7a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c7a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c7aa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c7ae:	7812      	ldrb	r2, [r2, #0]
 800c7b0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c7b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800c7bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c7c0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c7c4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800c7c8:	7812      	ldrb	r2, [r2, #0]
 800c7ca:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c7cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800c7d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c7da:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c7de:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800c7e2:	7812      	ldrb	r2, [r2, #0]
 800c7e4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800c7e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800c7f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c7f4:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800c7f8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c7fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c7fe:	3301      	adds	r3, #1
 800c800:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800c804:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c808:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800c80c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c80e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c812:	3301      	adds	r3, #1
 800c814:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800c818:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c81c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800c820:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800c822:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c826:	3301      	adds	r3, #1
 800c828:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800c82c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c830:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800c834:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800c838:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c83c:	3304      	adds	r3, #4
 800c83e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800c842:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c846:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800c84a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800c84c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c850:	3301      	adds	r3, #1
 800c852:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c856:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c85a:	2218      	movs	r2, #24
 800c85c:	2100      	movs	r1, #0
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 ff2d 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800c864:	233f      	movs	r3, #63	@ 0x3f
 800c866:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800c86a:	2386      	movs	r3, #134	@ 0x86
 800c86c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c870:	f107 0310 	add.w	r3, r7, #16
 800c874:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c878:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c87c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c880:	f107 030f 	add.w	r3, r7, #15
 800c884:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c888:	2301      	movs	r3, #1
 800c88a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c88e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c892:	2100      	movs	r1, #0
 800c894:	4618      	mov	r0, r3
 800c896:	f001 f99b 	bl	800dbd0 <hci_send_req>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	da01      	bge.n	800c8a4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800c8a0:	23ff      	movs	r3, #255	@ 0xff
 800c8a2:	e004      	b.n	800c8ae <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800c8a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c8a8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c8ac:	781b      	ldrb	r3, [r3, #0]
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bdb0      	pop	{r4, r5, r7, pc}

0800c8b8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b0cc      	sub	sp, #304	@ 0x130
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	4602      	mov	r2, r0
 800c8c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c8c4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c8c8:	6019      	str	r1, [r3, #0]
 800c8ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c8ce:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c8d2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800c8d4:	f107 0310 	add.w	r3, r7, #16
 800c8d8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800c8dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c8e0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800c8ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c8f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c8f6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800c8fa:	8812      	ldrh	r2, [r2, #0]
 800c8fc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c8fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c902:	3302      	adds	r3, #2
 800c904:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800c908:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c90c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c910:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800c914:	6812      	ldr	r2, [r2, #0]
 800c916:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800c91a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c91e:	3304      	adds	r3, #4
 800c920:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c924:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c928:	2218      	movs	r2, #24
 800c92a:	2100      	movs	r1, #0
 800c92c:	4618      	mov	r0, r3
 800c92e:	f000 fec6 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800c932:	233f      	movs	r3, #63	@ 0x3f
 800c934:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800c938:	2388      	movs	r3, #136	@ 0x88
 800c93a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800c93e:	f107 0310 	add.w	r3, r7, #16
 800c942:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800c946:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c94a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800c94e:	f107 030f 	add.w	r3, r7, #15
 800c952:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800c956:	2301      	movs	r3, #1
 800c958:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c95c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800c960:	2100      	movs	r1, #0
 800c962:	4618      	mov	r0, r3
 800c964:	f001 f934 	bl	800dbd0 <hci_send_req>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	da01      	bge.n	800c972 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800c96e:	23ff      	movs	r3, #255	@ 0xff
 800c970:	e004      	b.n	800c97c <aci_gap_pass_key_resp+0xc4>
  return status;
 800c972:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c976:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800c97a:	781b      	ldrb	r3, [r3, #0]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800c986:	b590      	push	{r4, r7, lr}
 800c988:	b0cd      	sub	sp, #308	@ 0x134
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	4604      	mov	r4, r0
 800c98e:	4608      	mov	r0, r1
 800c990:	4611      	mov	r1, r2
 800c992:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c996:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800c99a:	6013      	str	r3, [r2, #0]
 800c99c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9a0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800c9a4:	4622      	mov	r2, r4
 800c9a6:	701a      	strb	r2, [r3, #0]
 800c9a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9ac:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	701a      	strb	r2, [r3, #0]
 800c9b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c9b8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800c9bc:	460a      	mov	r2, r1
 800c9be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800c9c0:	f107 0310 	add.w	r3, r7, #16
 800c9c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c9c8:	f107 0308 	add.w	r3, r7, #8
 800c9cc:	2207      	movs	r2, #7
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f000 fe74 	bl	800d6be <Osal_MemSet>
  int index_input = 0;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800c9dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c9e0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c9e4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800c9e8:	7812      	ldrb	r2, [r2, #0]
 800c9ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c9ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800c9f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c9fa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c9fe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ca02:	7812      	ldrb	r2, [r2, #0]
 800ca04:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ca06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800ca10:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ca14:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ca18:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ca1c:	7812      	ldrb	r2, [r2, #0]
 800ca1e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ca20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca24:	3301      	adds	r3, #1
 800ca26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ca2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ca2e:	2218      	movs	r2, #24
 800ca30:	2100      	movs	r1, #0
 800ca32:	4618      	mov	r0, r3
 800ca34:	f000 fe43 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800ca38:	233f      	movs	r3, #63	@ 0x3f
 800ca3a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800ca3e:	238a      	movs	r3, #138	@ 0x8a
 800ca40:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ca44:	f107 0310 	add.w	r3, r7, #16
 800ca48:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ca4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ca50:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800ca54:	f107 0308 	add.w	r3, r7, #8
 800ca58:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800ca5c:	2307      	movs	r3, #7
 800ca5e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ca62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ca66:	2100      	movs	r1, #0
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f001 f8b1 	bl	800dbd0 <hci_send_req>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	da01      	bge.n	800ca78 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800ca74:	23ff      	movs	r3, #255	@ 0xff
 800ca76:	e02e      	b.n	800cad6 <aci_gap_init+0x150>
  if ( resp.Status )
 800ca78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca7c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ca80:	781b      	ldrb	r3, [r3, #0]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d005      	beq.n	800ca92 <aci_gap_init+0x10c>
    return resp.Status;
 800ca86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca8a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	e021      	b.n	800cad6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800ca92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ca96:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ca9a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800caa4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800caac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cab0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800cab4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800cab8:	b29a      	uxth	r2, r3
 800caba:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800cabe:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800cac0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cac4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800cac8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800cacc:	b29a      	uxth	r2, r3
 800cace:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800cad2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd90      	pop	{r4, r7, pc}

0800cae0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b0cc      	sub	sp, #304	@ 0x130
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	4602      	mov	r2, r0
 800cae8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800caec:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800caf0:	6019      	str	r1, [r3, #0]
 800caf2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800caf6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cafa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800cafc:	f107 0310 	add.w	r3, r7, #16
 800cb00:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cb04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb08:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800cb16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cb1a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cb1e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800cb22:	7812      	ldrb	r2, [r2, #0]
 800cb24:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cb26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800cb30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cb34:	1c58      	adds	r0, r3, #1
 800cb36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb3a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cb3e:	781a      	ldrb	r2, [r3, #0]
 800cb40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb44:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800cb48:	6819      	ldr	r1, [r3, #0]
 800cb4a:	f000 fda8 	bl	800d69e <Osal_MemCpy>
  index_input += AdvDataLen;
 800cb4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cb52:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cb5c:	4413      	add	r3, r2
 800cb5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cb62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cb66:	2218      	movs	r2, #24
 800cb68:	2100      	movs	r1, #0
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f000 fda7 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800cb70:	233f      	movs	r3, #63	@ 0x3f
 800cb72:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800cb76:	238e      	movs	r3, #142	@ 0x8e
 800cb78:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cb7c:	f107 0310 	add.w	r3, r7, #16
 800cb80:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cb84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cb88:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cb8c:	f107 030f 	add.w	r3, r7, #15
 800cb90:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cb94:	2301      	movs	r3, #1
 800cb96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cb9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cb9e:	2100      	movs	r1, #0
 800cba0:	4618      	mov	r0, r3
 800cba2:	f001 f815 	bl	800dbd0 <hci_send_req>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	da01      	bge.n	800cbb0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800cbac:	23ff      	movs	r3, #255	@ 0xff
 800cbae:	e004      	b.n	800cbba <aci_gap_update_adv_data+0xda>
  return status;
 800cbb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cbb4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cbb8:	781b      	ldrb	r3, [r3, #0]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b088      	sub	sp, #32
 800cbc8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cbce:	f107 0308 	add.w	r3, r7, #8
 800cbd2:	2218      	movs	r2, #24
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 fd71 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800cbdc:	233f      	movs	r3, #63	@ 0x3f
 800cbde:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800cbe0:	2392      	movs	r3, #146	@ 0x92
 800cbe2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cbe4:	1dfb      	adds	r3, r7, #7
 800cbe6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cbec:	f107 0308 	add.w	r3, r7, #8
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 ffec 	bl	800dbd0 <hci_send_req>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	da01      	bge.n	800cc02 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cbfe:	23ff      	movs	r3, #255	@ 0xff
 800cc00:	e000      	b.n	800cc04 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800cc02:	79fb      	ldrb	r3, [r7, #7]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3720      	adds	r7, #32
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b0cc      	sub	sp, #304	@ 0x130
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	4602      	mov	r2, r0
 800cc14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc18:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800cc1c:	801a      	strh	r2, [r3, #0]
 800cc1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc22:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800cc26:	460a      	mov	r2, r1
 800cc28:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800cc2a:	f107 0310 	add.w	r3, r7, #16
 800cc2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cc32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cc36:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800cc44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cc48:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cc4c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800cc50:	8812      	ldrh	r2, [r2, #0]
 800cc52:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cc54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc58:	3302      	adds	r3, #2
 800cc5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800cc5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cc62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cc66:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800cc6a:	7812      	ldrb	r2, [r2, #0]
 800cc6c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cc6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc72:	3301      	adds	r3, #1
 800cc74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cc78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cc7c:	2218      	movs	r2, #24
 800cc7e:	2100      	movs	r1, #0
 800cc80:	4618      	mov	r0, r3
 800cc82:	f000 fd1c 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800cc86:	233f      	movs	r3, #63	@ 0x3f
 800cc88:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800cc8c:	23a5      	movs	r3, #165	@ 0xa5
 800cc8e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cc92:	f107 0310 	add.w	r3, r7, #16
 800cc96:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cc9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cca2:	f107 030f 	add.w	r3, r7, #15
 800cca6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ccb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f000 ff8a 	bl	800dbd0 <hci_send_req>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	da01      	bge.n	800ccc6 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800ccc2:	23ff      	movs	r3, #255	@ 0xff
 800ccc4:	e004      	b.n	800ccd0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800ccc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ccca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ccce:	781b      	ldrb	r3, [r3, #0]
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b088      	sub	sp, #32
 800ccde:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cce0:	2300      	movs	r3, #0
 800cce2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cce4:	f107 0308 	add.w	r3, r7, #8
 800cce8:	2218      	movs	r2, #24
 800ccea:	2100      	movs	r1, #0
 800ccec:	4618      	mov	r0, r3
 800ccee:	f000 fce6 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800ccf2:	233f      	movs	r3, #63	@ 0x3f
 800ccf4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800ccf6:	f240 1301 	movw	r3, #257	@ 0x101
 800ccfa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ccfc:	1dfb      	adds	r3, r7, #7
 800ccfe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cd00:	2301      	movs	r3, #1
 800cd02:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cd04:	f107 0308 	add.w	r3, r7, #8
 800cd08:	2100      	movs	r1, #0
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f000 ff60 	bl	800dbd0 <hci_send_req>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	da01      	bge.n	800cd1a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800cd16:	23ff      	movs	r3, #255	@ 0xff
 800cd18:	e000      	b.n	800cd1c <aci_gatt_init+0x42>
  return status;
 800cd1a:	79fb      	ldrb	r3, [r7, #7]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3720      	adds	r7, #32
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800cd24:	b590      	push	{r4, r7, lr}
 800cd26:	b0cf      	sub	sp, #316	@ 0x13c
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800cd30:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800cd34:	6001      	str	r1, [r0, #0]
 800cd36:	4610      	mov	r0, r2
 800cd38:	4619      	mov	r1, r3
 800cd3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cd3e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cd42:	4622      	mov	r2, r4
 800cd44:	701a      	strb	r2, [r3, #0]
 800cd46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cd4a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800cd4e:	4602      	mov	r2, r0
 800cd50:	701a      	strb	r2, [r3, #0]
 800cd52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cd56:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cd5a:	460a      	mov	r2, r1
 800cd5c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800cd5e:	f107 0310 	add.w	r3, r7, #16
 800cd62:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800cd66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cd6a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d00a      	beq.n	800cd8a <aci_gatt_add_service+0x66>
 800cd74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cd78:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	d101      	bne.n	800cd86 <aci_gatt_add_service+0x62>
 800cd82:	2311      	movs	r3, #17
 800cd84:	e002      	b.n	800cd8c <aci_gatt_add_service+0x68>
 800cd86:	2301      	movs	r3, #1
 800cd88:	e000      	b.n	800cd8c <aci_gatt_add_service+0x68>
 800cd8a:	2303      	movs	r3, #3
 800cd8c:	f107 0210 	add.w	r2, r7, #16
 800cd90:	4413      	add	r3, r2
 800cd92:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cd96:	f107 030c 	add.w	r3, r7, #12
 800cd9a:	2203      	movs	r2, #3
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 fc8d 	bl	800d6be <Osal_MemSet>
  int index_input = 0;
 800cda4:	2300      	movs	r3, #0
 800cda6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800cdaa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cdae:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cdb2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800cdb6:	7812      	ldrb	r2, [r2, #0]
 800cdb8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cdba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800cdc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cdc8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d002      	beq.n	800cdd8 <aci_gatt_add_service+0xb4>
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d004      	beq.n	800cde0 <aci_gatt_add_service+0xbc>
 800cdd6:	e007      	b.n	800cde8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800cdd8:	2302      	movs	r3, #2
 800cdda:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800cdde:	e005      	b.n	800cdec <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800cde0:	2310      	movs	r3, #16
 800cde2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800cde6:	e001      	b.n	800cdec <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800cde8:	2397      	movs	r3, #151	@ 0x97
 800cdea:	e06c      	b.n	800cec6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800cdec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cdf0:	1c58      	adds	r0, r3, #1
 800cdf2:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800cdf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cdfa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800cdfe:	6819      	ldr	r1, [r3, #0]
 800ce00:	f000 fc4d 	bl	800d69e <Osal_MemCpy>
    index_input += size;
 800ce04:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800ce08:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ce0c:	4413      	add	r3, r2
 800ce0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800ce12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ce16:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ce1a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800ce1e:	7812      	ldrb	r2, [r2, #0]
 800ce20:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ce22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce26:	3301      	adds	r3, #1
 800ce28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800ce2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ce30:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ce34:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800ce38:	7812      	ldrb	r2, [r2, #0]
 800ce3a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800ce3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce40:	3301      	adds	r3, #1
 800ce42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ce46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce4a:	2218      	movs	r2, #24
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f000 fc35 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800ce54:	233f      	movs	r3, #63	@ 0x3f
 800ce56:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800ce5a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800ce5e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ce62:	f107 0310 	add.w	r3, r7, #16
 800ce66:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ce6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800ce72:	f107 030c 	add.w	r3, r7, #12
 800ce76:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800ce7a:	2303      	movs	r3, #3
 800ce7c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ce80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce84:	2100      	movs	r1, #0
 800ce86:	4618      	mov	r0, r3
 800ce88:	f000 fea2 	bl	800dbd0 <hci_send_req>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	da01      	bge.n	800ce96 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800ce92:	23ff      	movs	r3, #255	@ 0xff
 800ce94:	e017      	b.n	800cec6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800ce96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ce9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d005      	beq.n	800ceb0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800cea4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cea8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	e00a      	b.n	800cec6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800ceb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ceb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ceb8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800cec2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd90      	pop	{r4, r7, pc}

0800ced0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800ced0:	b590      	push	{r4, r7, lr}
 800ced2:	b0d1      	sub	sp, #324	@ 0x144
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	4604      	mov	r4, r0
 800ced8:	4608      	mov	r0, r1
 800ceda:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800cede:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800cee2:	600a      	str	r2, [r1, #0]
 800cee4:	4619      	mov	r1, r3
 800cee6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ceea:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800ceee:	4622      	mov	r2, r4
 800cef0:	801a      	strh	r2, [r3, #0]
 800cef2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cef6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cefa:	4602      	mov	r2, r0
 800cefc:	701a      	strb	r2, [r3, #0]
 800cefe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf02:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800cf06:	460a      	mov	r2, r1
 800cf08:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800cf0a:	f107 0318 	add.w	r3, r7, #24
 800cf0e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800cf12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf16:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d00a      	beq.n	800cf36 <aci_gatt_add_char+0x66>
 800cf20:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf24:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	2b02      	cmp	r3, #2
 800cf2c:	d101      	bne.n	800cf32 <aci_gatt_add_char+0x62>
 800cf2e:	2313      	movs	r3, #19
 800cf30:	e002      	b.n	800cf38 <aci_gatt_add_char+0x68>
 800cf32:	2303      	movs	r3, #3
 800cf34:	e000      	b.n	800cf38 <aci_gatt_add_char+0x68>
 800cf36:	2305      	movs	r3, #5
 800cf38:	f107 0218 	add.w	r2, r7, #24
 800cf3c:	4413      	add	r3, r2
 800cf3e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800cf42:	f107 0314 	add.w	r3, r7, #20
 800cf46:	2203      	movs	r2, #3
 800cf48:	2100      	movs	r1, #0
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f000 fbb7 	bl	800d6be <Osal_MemSet>
  int index_input = 0;
 800cf50:	2300      	movs	r3, #0
 800cf52:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800cf56:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800cf5a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800cf5e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800cf62:	8812      	ldrh	r2, [r2, #0]
 800cf64:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cf66:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cf6a:	3302      	adds	r3, #2
 800cf6c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800cf70:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800cf74:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800cf78:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800cf7c:	7812      	ldrb	r2, [r2, #0]
 800cf7e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cf80:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cf84:	3301      	adds	r3, #1
 800cf86:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800cf8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cf8e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d002      	beq.n	800cf9e <aci_gatt_add_char+0xce>
 800cf98:	2b02      	cmp	r3, #2
 800cf9a:	d004      	beq.n	800cfa6 <aci_gatt_add_char+0xd6>
 800cf9c:	e007      	b.n	800cfae <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800cf9e:	2302      	movs	r3, #2
 800cfa0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800cfa4:	e005      	b.n	800cfb2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800cfa6:	2310      	movs	r3, #16
 800cfa8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800cfac:	e001      	b.n	800cfb2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800cfae:	2397      	movs	r3, #151	@ 0x97
 800cfb0:	e091      	b.n	800d0d6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800cfb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800cfb6:	1cd8      	adds	r0, r3, #3
 800cfb8:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800cfbc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800cfc0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800cfc4:	6819      	ldr	r1, [r3, #0]
 800cfc6:	f000 fb6a 	bl	800d69e <Osal_MemCpy>
    index_input += size;
 800cfca:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800cfce:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800cfd2:	4413      	add	r3, r2
 800cfd4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800cfd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cfdc:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800cfe0:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800cfe4:	8812      	ldrh	r2, [r2, #0]
 800cfe6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800cfe8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cfec:	3302      	adds	r3, #2
 800cfee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800cff2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cff6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800cffa:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800cffc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d000:	3301      	adds	r3, #1
 800d002:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d006:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d00a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800d00e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d010:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d014:	3301      	adds	r3, #1
 800d016:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d01a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d01e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800d022:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d024:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d028:	3301      	adds	r3, #1
 800d02a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d02e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d032:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800d036:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d038:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d03c:	3301      	adds	r3, #1
 800d03e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d042:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d046:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800d04a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d04c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d050:	3301      	adds	r3, #1
 800d052:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d056:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d05a:	2218      	movs	r2, #24
 800d05c:	2100      	movs	r1, #0
 800d05e:	4618      	mov	r0, r3
 800d060:	f000 fb2d 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800d064:	233f      	movs	r3, #63	@ 0x3f
 800d066:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800d06a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800d06e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800d072:	f107 0318 	add.w	r3, r7, #24
 800d076:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800d07a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d07e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800d082:	f107 0314 	add.w	r3, r7, #20
 800d086:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800d08a:	2303      	movs	r3, #3
 800d08c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d090:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d094:	2100      	movs	r1, #0
 800d096:	4618      	mov	r0, r3
 800d098:	f000 fd9a 	bl	800dbd0 <hci_send_req>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	da01      	bge.n	800d0a6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800d0a2:	23ff      	movs	r3, #255	@ 0xff
 800d0a4:	e017      	b.n	800d0d6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800d0a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d0aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d005      	beq.n	800d0c0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800d0b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d0b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	e00a      	b.n	800d0d6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800d0c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d0c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d0c8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800d0d2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d0d4:	2300      	movs	r3, #0
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd90      	pop	{r4, r7, pc}

0800d0e0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d0e0:	b5b0      	push	{r4, r5, r7, lr}
 800d0e2:	b0cc      	sub	sp, #304	@ 0x130
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	4605      	mov	r5, r0
 800d0e8:	460c      	mov	r4, r1
 800d0ea:	4610      	mov	r0, r2
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0f2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d0f6:	462a      	mov	r2, r5
 800d0f8:	801a      	strh	r2, [r3, #0]
 800d0fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d102:	4622      	mov	r2, r4
 800d104:	801a      	strh	r2, [r3, #0]
 800d106:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d10a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800d10e:	4602      	mov	r2, r0
 800d110:	701a      	strb	r2, [r3, #0]
 800d112:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d116:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d11a:	460a      	mov	r2, r1
 800d11c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d11e:	f107 0310 	add.w	r3, r7, #16
 800d122:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d126:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d12a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d12e:	2200      	movs	r2, #0
 800d130:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d132:	2300      	movs	r3, #0
 800d134:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800d138:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d13c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d140:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d144:	8812      	ldrh	r2, [r2, #0]
 800d146:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d148:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d14c:	3302      	adds	r3, #2
 800d14e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800d152:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d156:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d15a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800d15e:	8812      	ldrh	r2, [r2, #0]
 800d160:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d162:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d166:	3302      	adds	r3, #2
 800d168:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800d16c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d170:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d174:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800d178:	7812      	ldrb	r2, [r2, #0]
 800d17a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d17c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d180:	3301      	adds	r3, #1
 800d182:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d186:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d18a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d18e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800d192:	7812      	ldrb	r2, [r2, #0]
 800d194:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d196:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d19a:	3301      	adds	r3, #1
 800d19c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d1a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d1a4:	1d98      	adds	r0, r3, #6
 800d1a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1aa:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d1ae:	781b      	ldrb	r3, [r3, #0]
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800d1b6:	f000 fa72 	bl	800d69e <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d1ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1be:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d1c8:	4413      	add	r3, r2
 800d1ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d1ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d1d2:	2218      	movs	r2, #24
 800d1d4:	2100      	movs	r1, #0
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f000 fa71 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800d1dc:	233f      	movs	r3, #63	@ 0x3f
 800d1de:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800d1e2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800d1e6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d1ea:	f107 0310 	add.w	r3, r7, #16
 800d1ee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d1f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d1fa:	f107 030f 	add.w	r3, r7, #15
 800d1fe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d202:	2301      	movs	r3, #1
 800d204:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d208:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d20c:	2100      	movs	r1, #0
 800d20e:	4618      	mov	r0, r3
 800d210:	f000 fcde 	bl	800dbd0 <hci_send_req>
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	da01      	bge.n	800d21e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d21a:	23ff      	movs	r3, #255	@ 0xff
 800d21c:	e004      	b.n	800d228 <aci_gatt_update_char_value+0x148>
  return status;
 800d21e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d222:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d226:	781b      	ldrb	r3, [r3, #0]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d22e:	46bd      	mov	sp, r7
 800d230:	bdb0      	pop	{r4, r5, r7, pc}

0800d232 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b0cc      	sub	sp, #304	@ 0x130
 800d236:	af00      	add	r7, sp, #0
 800d238:	4602      	mov	r2, r0
 800d23a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d23e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d242:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800d244:	f107 0310 	add.w	r3, r7, #16
 800d248:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d24c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d250:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d254:	2200      	movs	r2, #0
 800d256:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d258:	2300      	movs	r3, #0
 800d25a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d25e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d262:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d266:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d26a:	8812      	ldrh	r2, [r2, #0]
 800d26c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d26e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d272:	3302      	adds	r3, #2
 800d274:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d278:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d27c:	2218      	movs	r2, #24
 800d27e:	2100      	movs	r1, #0
 800d280:	4618      	mov	r0, r3
 800d282:	f000 fa1c 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800d286:	233f      	movs	r3, #63	@ 0x3f
 800d288:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800d28c:	f240 1325 	movw	r3, #293	@ 0x125
 800d290:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d294:	f107 0310 	add.w	r3, r7, #16
 800d298:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d29c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d2a4:	f107 030f 	add.w	r3, r7, #15
 800d2a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d2b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f000 fc89 	bl	800dbd0 <hci_send_req>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	da01      	bge.n	800d2c8 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800d2c4:	23ff      	movs	r3, #255	@ 0xff
 800d2c6:	e004      	b.n	800d2d2 <aci_gatt_confirm_indication+0xa0>
  return status;
 800d2c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d2d0:	781b      	ldrb	r3, [r3, #0]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b0cc      	sub	sp, #304	@ 0x130
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2e6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d2ea:	601a      	str	r2, [r3, #0]
 800d2ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2f0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	701a      	strb	r2, [r3, #0]
 800d2f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2fc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d300:	460a      	mov	r2, r1
 800d302:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800d304:	f107 0310 	add.w	r3, r7, #16
 800d308:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d30c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d310:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d314:	2200      	movs	r2, #0
 800d316:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d318:	2300      	movs	r3, #0
 800d31a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800d31e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d322:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d326:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d32a:	7812      	ldrb	r2, [r2, #0]
 800d32c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d32e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d332:	3301      	adds	r3, #1
 800d334:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800d338:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d33c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d340:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d344:	7812      	ldrb	r2, [r2, #0]
 800d346:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d348:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d34c:	3301      	adds	r3, #1
 800d34e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800d352:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d356:	1c98      	adds	r0, r3, #2
 800d358:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d35c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d360:	781a      	ldrb	r2, [r3, #0]
 800d362:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d366:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d36a:	6819      	ldr	r1, [r3, #0]
 800d36c:	f000 f997 	bl	800d69e <Osal_MemCpy>
  index_input += Length;
 800d370:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d374:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d37e:	4413      	add	r3, r2
 800d380:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d384:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d388:	2218      	movs	r2, #24
 800d38a:	2100      	movs	r1, #0
 800d38c:	4618      	mov	r0, r3
 800d38e:	f000 f996 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800d392:	233f      	movs	r3, #63	@ 0x3f
 800d394:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800d398:	230c      	movs	r3, #12
 800d39a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d39e:	f107 0310 	add.w	r3, r7, #16
 800d3a2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d3a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d3aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d3ae:	f107 030f 	add.w	r3, r7, #15
 800d3b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d3bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3c0:	2100      	movs	r1, #0
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f000 fc04 	bl	800dbd0 <hci_send_req>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	da01      	bge.n	800d3d2 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800d3ce:	23ff      	movs	r3, #255	@ 0xff
 800d3d0:	e004      	b.n	800d3dc <aci_hal_write_config_data+0x100>
  return status;
 800d3d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3d6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d3da:	781b      	ldrb	r3, [r3, #0]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b0cc      	sub	sp, #304	@ 0x130
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3f2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d3f6:	701a      	strb	r2, [r3, #0]
 800d3f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3fc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d400:	460a      	mov	r2, r1
 800d402:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800d404:	f107 0310 	add.w	r3, r7, #16
 800d408:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d40c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d410:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d414:	2200      	movs	r2, #0
 800d416:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d418:	2300      	movs	r3, #0
 800d41a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800d41e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d422:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d426:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d42a:	7812      	ldrb	r2, [r2, #0]
 800d42c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d42e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d432:	3301      	adds	r3, #1
 800d434:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800d438:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d43c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d440:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d444:	7812      	ldrb	r2, [r2, #0]
 800d446:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d448:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d44c:	3301      	adds	r3, #1
 800d44e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d452:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d456:	2218      	movs	r2, #24
 800d458:	2100      	movs	r1, #0
 800d45a:	4618      	mov	r0, r3
 800d45c:	f000 f92f 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800d460:	233f      	movs	r3, #63	@ 0x3f
 800d462:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800d466:	230f      	movs	r3, #15
 800d468:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d46c:	f107 0310 	add.w	r3, r7, #16
 800d470:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d474:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d478:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d47c:	f107 030f 	add.w	r3, r7, #15
 800d480:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d484:	2301      	movs	r3, #1
 800d486:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d48a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d48e:	2100      	movs	r1, #0
 800d490:	4618      	mov	r0, r3
 800d492:	f000 fb9d 	bl	800dbd0 <hci_send_req>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	da01      	bge.n	800d4a0 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800d49c:	23ff      	movs	r3, #255	@ 0xff
 800d49e:	e004      	b.n	800d4aa <aci_hal_set_tx_power_level+0xc4>
  return status;
 800d4a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d4a4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d4a8:	781b      	ldrb	r3, [r3, #0]
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b0cc      	sub	sp, #304	@ 0x130
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d4c0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d4c4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800d4c6:	f107 0310 	add.w	r3, r7, #16
 800d4ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d4ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d4d2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800d4e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d4e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d4e8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d4ec:	8812      	ldrh	r2, [r2, #0]
 800d4ee:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d4f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4f4:	3302      	adds	r3, #2
 800d4f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d4fa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d4fe:	2218      	movs	r2, #24
 800d500:	2100      	movs	r1, #0
 800d502:	4618      	mov	r0, r3
 800d504:	f000 f8db 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x3f;
 800d508:	233f      	movs	r3, #63	@ 0x3f
 800d50a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800d50e:	2318      	movs	r3, #24
 800d510:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d514:	f107 0310 	add.w	r3, r7, #16
 800d518:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d51c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d520:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d524:	f107 030f 	add.w	r3, r7, #15
 800d528:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d52c:	2301      	movs	r3, #1
 800d52e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d532:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d536:	2100      	movs	r1, #0
 800d538:	4618      	mov	r0, r3
 800d53a:	f000 fb49 	bl	800dbd0 <hci_send_req>
 800d53e:	4603      	mov	r3, r0
 800d540:	2b00      	cmp	r3, #0
 800d542:	da01      	bge.n	800d548 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800d544:	23ff      	movs	r3, #255	@ 0xff
 800d546:	e004      	b.n	800d552 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800d548:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d54c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d550:	781b      	ldrb	r3, [r3, #0]
}
 800d552:	4618      	mov	r0, r3
 800d554:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b088      	sub	sp, #32
 800d560:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d562:	2300      	movs	r3, #0
 800d564:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d566:	f107 0308 	add.w	r3, r7, #8
 800d56a:	2218      	movs	r2, #24
 800d56c:	2100      	movs	r1, #0
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 f8a5 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x03;
 800d574:	2303      	movs	r3, #3
 800d576:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800d578:	2303      	movs	r3, #3
 800d57a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d57c:	1dfb      	adds	r3, r7, #7
 800d57e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d580:	2301      	movs	r3, #1
 800d582:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d584:	f107 0308 	add.w	r3, r7, #8
 800d588:	2100      	movs	r1, #0
 800d58a:	4618      	mov	r0, r3
 800d58c:	f000 fb20 	bl	800dbd0 <hci_send_req>
 800d590:	4603      	mov	r3, r0
 800d592:	2b00      	cmp	r3, #0
 800d594:	da01      	bge.n	800d59a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d596:	23ff      	movs	r3, #255	@ 0xff
 800d598:	e000      	b.n	800d59c <hci_reset+0x40>
  return status;
 800d59a:	79fb      	ldrb	r3, [r7, #7]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3720      	adds	r7, #32
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800d5a4:	b590      	push	{r4, r7, lr}
 800d5a6:	b0cd      	sub	sp, #308	@ 0x134
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	4608      	mov	r0, r1
 800d5ae:	4611      	mov	r1, r2
 800d5b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5b4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d5b8:	4622      	mov	r2, r4
 800d5ba:	701a      	strb	r2, [r3, #0]
 800d5bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5c0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	701a      	strb	r2, [r3, #0]
 800d5c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5cc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d5d0:	460a      	mov	r2, r1
 800d5d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800d5d4:	f107 0310 	add.w	r3, r7, #16
 800d5d8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d5dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5e0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800d5ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d5f2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d5f6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d5fa:	7812      	ldrb	r2, [r2, #0]
 800d5fc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d5fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d602:	3301      	adds	r3, #1
 800d604:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800d608:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d60c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d610:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d614:	7812      	ldrb	r2, [r2, #0]
 800d616:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d618:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d61c:	3301      	adds	r3, #1
 800d61e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800d622:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d626:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d62a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d62e:	7812      	ldrb	r2, [r2, #0]
 800d630:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d632:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d636:	3301      	adds	r3, #1
 800d638:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d63c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d640:	2218      	movs	r2, #24
 800d642:	2100      	movs	r1, #0
 800d644:	4618      	mov	r0, r3
 800d646:	f000 f83a 	bl	800d6be <Osal_MemSet>
  rq.ogf = 0x08;
 800d64a:	2308      	movs	r3, #8
 800d64c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800d650:	2331      	movs	r3, #49	@ 0x31
 800d652:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d656:	f107 0310 	add.w	r3, r7, #16
 800d65a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d65e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d662:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d666:	f107 030f 	add.w	r3, r7, #15
 800d66a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d66e:	2301      	movs	r3, #1
 800d670:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d674:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d678:	2100      	movs	r1, #0
 800d67a:	4618      	mov	r0, r3
 800d67c:	f000 faa8 	bl	800dbd0 <hci_send_req>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	da01      	bge.n	800d68a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800d686:	23ff      	movs	r3, #255	@ 0xff
 800d688:	e004      	b.n	800d694 <hci_le_set_default_phy+0xf0>
  return status;
 800d68a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d68e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d692:	781b      	ldrb	r3, [r3, #0]
}
 800d694:	4618      	mov	r0, r3
 800d696:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd90      	pop	{r4, r7, pc}

0800d69e <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b084      	sub	sp, #16
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	60f8      	str	r0, [r7, #12]
 800d6a6:	60b9      	str	r1, [r7, #8]
 800d6a8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800d6aa:	687a      	ldr	r2, [r7, #4]
 800d6ac:	68b9      	ldr	r1, [r7, #8]
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f004 fbb5 	bl	8011e1e <memcpy>
 800d6b4:	4603      	mov	r3, r0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b084      	sub	sp, #16
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	60f8      	str	r0, [r7, #12]
 800d6c6:	60b9      	str	r1, [r7, #8]
 800d6c8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	68b9      	ldr	r1, [r7, #8]
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f004 fb14 	bl	8011cfc <memset>
 800d6d4:	4603      	mov	r3, r0
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3710      	adds	r7, #16
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800d6de:	b480      	push	{r7}
 800d6e0:	af00      	add	r7, sp, #0
  return;
 800d6e2:	bf00      	nop
}
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	af00      	add	r7, sp, #0
  return;
 800d6f0:	bf00      	nop
}
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr

0800d6fa <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800d6fa:	b480      	push	{r7}
 800d6fc:	af00      	add	r7, sp, #0
  return;
 800d6fe:	bf00      	nop
}
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800d708:	b480      	push	{r7}
 800d70a:	af00      	add	r7, sp, #0
  return;
 800d70c:	bf00      	nop
}
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr

0800d716 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800d716:	b480      	push	{r7}
 800d718:	af00      	add	r7, sp, #0
  return;
 800d71a:	bf00      	nop
}
 800d71c:	46bd      	mov	sp, r7
 800d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d722:	4770      	bx	lr

0800d724 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800d724:	b480      	push	{r7}
 800d726:	af00      	add	r7, sp, #0
  return;
 800d728:	bf00      	nop
}
 800d72a:	46bd      	mov	sp, r7
 800d72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d730:	4770      	bx	lr

0800d732 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800d732:	b480      	push	{r7}
 800d734:	af00      	add	r7, sp, #0
  return;
 800d736:	bf00      	nop
}
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800d740:	b480      	push	{r7}
 800d742:	af00      	add	r7, sp, #0
  return;
 800d744:	bf00      	nop
}
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr

0800d74e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800d74e:	b480      	push	{r7}
 800d750:	af00      	add	r7, sp, #0
  return;
 800d752:	bf00      	nop
}
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800d75c:	b480      	push	{r7}
 800d75e:	af00      	add	r7, sp, #0
  return;
 800d760:	bf00      	nop
}
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr

0800d76a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800d76a:	b480      	push	{r7}
 800d76c:	af00      	add	r7, sp, #0
  return;
 800d76e:	bf00      	nop
}
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800d778:	b480      	push	{r7}
 800d77a:	af00      	add	r7, sp, #0
  return;
 800d77c:	bf00      	nop
}
 800d77e:	46bd      	mov	sp, r7
 800d780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d784:	4770      	bx	lr

0800d786 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800d786:	b480      	push	{r7}
 800d788:	af00      	add	r7, sp, #0
  return;
 800d78a:	bf00      	nop
}
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800d794:	b480      	push	{r7}
 800d796:	af00      	add	r7, sp, #0
  return;
 800d798:	bf00      	nop
}
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800d7a2:	b480      	push	{r7}
 800d7a4:	af00      	add	r7, sp, #0
  return;
 800d7a6:	bf00      	nop
}
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	af00      	add	r7, sp, #0
  return;
 800d7b4:	bf00      	nop
}
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr

0800d7be <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800d7be:	b480      	push	{r7}
 800d7c0:	af00      	add	r7, sp, #0
  return;
 800d7c2:	bf00      	nop
}
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800d7d0:	4b04      	ldr	r3, [pc, #16]	@ (800d7e4 <SVCCTL_Init+0x18>)
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800d7d6:	4b04      	ldr	r3, [pc, #16]	@ (800d7e8 <SVCCTL_Init+0x1c>)
 800d7d8:	2200      	movs	r2, #0
 800d7da:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800d7dc:	f000 f806 	bl	800d7ec <SVCCTL_SvcInit>

  return;
 800d7e0:	bf00      	nop
}
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	20000184 	.word	0x20000184
 800d7e8:	200001a4 	.word	0x200001a4

0800d7ec <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	af00      	add	r7, sp, #0
  BAS_Init();
 800d7f0:	f7ff ff75 	bl	800d6de <BAS_Init>

  BLS_Init();
 800d7f4:	f7ff ff7a 	bl	800d6ec <BLS_Init>

  CRS_STM_Init();
 800d7f8:	f7ff ff7f 	bl	800d6fa <CRS_STM_Init>

  DIS_Init();
 800d7fc:	f7ff ff84 	bl	800d708 <DIS_Init>

  EDS_STM_Init();
 800d800:	f7ff ff89 	bl	800d716 <EDS_STM_Init>

  HIDS_Init();
 800d804:	f7ff ff8e 	bl	800d724 <HIDS_Init>

  HRS_Init();
 800d808:	f7ff ff93 	bl	800d732 <HRS_Init>

  HTS_Init();
 800d80c:	f7ff ff98 	bl	800d740 <HTS_Init>

  IAS_Init();
 800d810:	f7ff ff9d 	bl	800d74e <IAS_Init>

  LLS_Init();
 800d814:	f7ff ffa2 	bl	800d75c <LLS_Init>

  TPS_Init();
 800d818:	f7ff ffa7 	bl	800d76a <TPS_Init>

  MOTENV_STM_Init();
 800d81c:	f7ff ffac 	bl	800d778 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800d820:	f7ff ffb1 	bl	800d786 <P2PS_STM_Init>

  ZDD_STM_Init();
 800d824:	f7ff ffb6 	bl	800d794 <ZDD_STM_Init>

  OTAS_STM_Init();
 800d828:	f7ff ffbb 	bl	800d7a2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800d82c:	f7ff ffc7 	bl	800d7be <BVOPUS_STM_Init>

  MESH_Init();
 800d830:	f7ff ffbe 	bl	800d7b0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800d834:	f002 fcc6 	bl	80101c4 <SVCCTL_InitCustomSvc>
  
  return;
 800d838:	bf00      	nop
}
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800d83c:	b480      	push	{r7}
 800d83e:	b083      	sub	sp, #12
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800d844:	4b09      	ldr	r3, [pc, #36]	@ (800d86c <SVCCTL_RegisterSvcHandler+0x30>)
 800d846:	7f1b      	ldrb	r3, [r3, #28]
 800d848:	4619      	mov	r1, r3
 800d84a:	4a08      	ldr	r2, [pc, #32]	@ (800d86c <SVCCTL_RegisterSvcHandler+0x30>)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800d852:	4b06      	ldr	r3, [pc, #24]	@ (800d86c <SVCCTL_RegisterSvcHandler+0x30>)
 800d854:	7f1b      	ldrb	r3, [r3, #28]
 800d856:	3301      	adds	r3, #1
 800d858:	b2da      	uxtb	r2, r3
 800d85a:	4b04      	ldr	r3, [pc, #16]	@ (800d86c <SVCCTL_RegisterSvcHandler+0x30>)
 800d85c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800d85e:	bf00      	nop
}
 800d860:	370c      	adds	r7, #12
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop
 800d86c:	20000184 	.word	0x20000184

0800d870 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b086      	sub	sp, #24
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	3301      	adds	r3, #1
 800d87c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800d87e:	2300      	movs	r3, #0
 800d880:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	2bff      	cmp	r3, #255	@ 0xff
 800d888:	d125      	bne.n	800d8d6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	3302      	adds	r3, #2
 800d88e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	881b      	ldrh	r3, [r3, #0]
 800d894:	b29b      	uxth	r3, r3
 800d896:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d89a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d89e:	d118      	bne.n	800d8d2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	757b      	strb	r3, [r7, #21]
 800d8a4:	e00d      	b.n	800d8c2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800d8a6:	7d7b      	ldrb	r3, [r7, #21]
 800d8a8:	4a1a      	ldr	r2, [pc, #104]	@ (800d914 <SVCCTL_UserEvtRx+0xa4>)
 800d8aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	4798      	blx	r3
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800d8b6:	7dfb      	ldrb	r3, [r7, #23]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d108      	bne.n	800d8ce <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800d8bc:	7d7b      	ldrb	r3, [r7, #21]
 800d8be:	3301      	adds	r3, #1
 800d8c0:	757b      	strb	r3, [r7, #21]
 800d8c2:	4b14      	ldr	r3, [pc, #80]	@ (800d914 <SVCCTL_UserEvtRx+0xa4>)
 800d8c4:	7f1b      	ldrb	r3, [r3, #28]
 800d8c6:	7d7a      	ldrb	r2, [r7, #21]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d3ec      	bcc.n	800d8a6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800d8cc:	e002      	b.n	800d8d4 <SVCCTL_UserEvtRx+0x64>
              break;
 800d8ce:	bf00      	nop
          break;
 800d8d0:	e000      	b.n	800d8d4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800d8d2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800d8d4:	e000      	b.n	800d8d8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800d8d6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800d8d8:	7dfb      	ldrb	r3, [r7, #23]
 800d8da:	2b02      	cmp	r3, #2
 800d8dc:	d00f      	beq.n	800d8fe <SVCCTL_UserEvtRx+0x8e>
 800d8de:	2b02      	cmp	r3, #2
 800d8e0:	dc10      	bgt.n	800d904 <SVCCTL_UserEvtRx+0x94>
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d002      	beq.n	800d8ec <SVCCTL_UserEvtRx+0x7c>
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d006      	beq.n	800d8f8 <SVCCTL_UserEvtRx+0x88>
 800d8ea:	e00b      	b.n	800d904 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f001 fc65 	bl	800f1bc <SVCCTL_App_Notification>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	75bb      	strb	r3, [r7, #22]
      break;
 800d8f6:	e008      	b.n	800d90a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	75bb      	strb	r3, [r7, #22]
      break;
 800d8fc:	e005      	b.n	800d90a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800d8fe:	2300      	movs	r3, #0
 800d900:	75bb      	strb	r3, [r7, #22]
      break;
 800d902:	e002      	b.n	800d90a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800d904:	2301      	movs	r3, #1
 800d906:	75bb      	strb	r3, [r7, #22]
      break;
 800d908:	bf00      	nop
  }

  return (return_status);
 800d90a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3718      	adds	r7, #24
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	20000184 	.word	0x20000184

0800d918 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b088      	sub	sp, #32
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d920:	f107 030c 	add.w	r3, r7, #12
 800d924:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	212e      	movs	r1, #46	@ 0x2e
 800d930:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800d934:	f000 fae8 	bl	800df08 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d938:	69fb      	ldr	r3, [r7, #28]
 800d93a:	330b      	adds	r3, #11
 800d93c:	78db      	ldrb	r3, [r3, #3]
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3720      	adds	r7, #32
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b088      	sub	sp, #32
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d94e:	f107 030c 	add.w	r3, r7, #12
 800d952:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	210f      	movs	r1, #15
 800d95e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800d962:	f000 fad1 	bl	800df08 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d966:	69fb      	ldr	r3, [r7, #28]
 800d968:	330b      	adds	r3, #11
 800d96a:	78db      	ldrb	r3, [r3, #3]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3720      	adds	r7, #32
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b088      	sub	sp, #32
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d97c:	f107 030c 	add.w	r3, r7, #12
 800d980:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	2110      	movs	r1, #16
 800d988:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800d98c:	f000 fabc 	bl	800df08 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	330b      	adds	r3, #11
 800d994:	78db      	ldrb	r3, [r3, #3]
}
 800d996:	4618      	mov	r0, r3
 800d998:	3720      	adds	r7, #32
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
	...

0800d9a0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b08b      	sub	sp, #44	@ 0x2c
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800d9c8:	4b4a      	ldr	r3, [pc, #296]	@ (800daf4 <SHCI_GetWirelessFwInfo+0x154>)
 800d9ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d9d0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800d9da:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4a44      	ldr	r2, [pc, #272]	@ (800daf8 <SHCI_GetWirelessFwInfo+0x158>)
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	d10f      	bne.n	800da0c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	695b      	ldr	r3, [r3, #20]
 800d9f0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	69db      	ldr	r3, [r3, #28]
 800d9fc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	691b      	ldr	r3, [r3, #16]
 800da08:	617b      	str	r3, [r7, #20]
 800da0a:	e01a      	b.n	800da42 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800da14:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800da18:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	695b      	ldr	r3, [r3, #20]
 800da28:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	699b      	ldr	r3, [r3, #24]
 800da30:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800da42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da44:	0e1b      	lsrs	r3, r3, #24
 800da46:	b2da      	uxtb	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800da4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da4e:	0c1b      	lsrs	r3, r3, #16
 800da50:	b2da      	uxtb	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800da56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da58:	0a1b      	lsrs	r3, r3, #8
 800da5a:	b2da      	uxtb	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800da60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da62:	091b      	lsrs	r3, r3, #4
 800da64:	b2db      	uxtb	r3, r3
 800da66:	f003 030f 	and.w	r3, r3, #15
 800da6a:	b2da      	uxtb	r2, r3
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800da70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da72:	b2db      	uxtb	r3, r3
 800da74:	f003 030f 	and.w	r3, r3, #15
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800da7e:	6a3b      	ldr	r3, [r7, #32]
 800da80:	0e1b      	lsrs	r3, r3, #24
 800da82:	b2da      	uxtb	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800da88:	6a3b      	ldr	r3, [r7, #32]
 800da8a:	0c1b      	lsrs	r3, r3, #16
 800da8c:	b2da      	uxtb	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800da92:	6a3b      	ldr	r3, [r7, #32]
 800da94:	0a1b      	lsrs	r3, r3, #8
 800da96:	b2da      	uxtb	r2, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	b2da      	uxtb	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800daa4:	69fb      	ldr	r3, [r7, #28]
 800daa6:	b2da      	uxtb	r2, r3
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800daac:	69bb      	ldr	r3, [r7, #24]
 800daae:	0e1b      	lsrs	r3, r3, #24
 800dab0:	b2da      	uxtb	r2, r3
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	0c1b      	lsrs	r3, r3, #16
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800dac0:	69bb      	ldr	r3, [r7, #24]
 800dac2:	0a1b      	lsrs	r3, r3, #8
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	0e1b      	lsrs	r3, r3, #24
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	0c1b      	lsrs	r3, r3, #16
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	372c      	adds	r7, #44	@ 0x2c
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr
 800daf4:	58004000 	.word	0x58004000
 800daf8:	a94656b9 	.word	0xa94656b9

0800dafc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	4a08      	ldr	r2, [pc, #32]	@ (800db2c <hci_init+0x30>)
 800db0c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800db0e:	4a08      	ldr	r2, [pc, #32]	@ (800db30 <hci_init+0x34>)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800db14:	4806      	ldr	r0, [pc, #24]	@ (800db30 <hci_init+0x34>)
 800db16:	f000 f979 	bl	800de0c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4618      	mov	r0, r3
 800db20:	f000 f8da 	bl	800dcd8 <TlInit>

  return;
 800db24:	bf00      	nop
}
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	20000508 	.word	0x20000508
 800db30:	200004e0 	.word	0x200004e0

0800db34 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800db3a:	4822      	ldr	r0, [pc, #136]	@ (800dbc4 <hci_user_evt_proc+0x90>)
 800db3c:	f000 fdfa 	bl	800e734 <LST_is_empty>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d12b      	bne.n	800db9e <hci_user_evt_proc+0x6a>
 800db46:	4b20      	ldr	r3, [pc, #128]	@ (800dbc8 <hci_user_evt_proc+0x94>)
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d027      	beq.n	800db9e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800db4e:	f107 030c 	add.w	r3, r7, #12
 800db52:	4619      	mov	r1, r3
 800db54:	481b      	ldr	r0, [pc, #108]	@ (800dbc4 <hci_user_evt_proc+0x90>)
 800db56:	f000 fe7c 	bl	800e852 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800db5a:	4b1c      	ldr	r3, [pc, #112]	@ (800dbcc <hci_user_evt_proc+0x98>)
 800db5c:	69db      	ldr	r3, [r3, #28]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d00c      	beq.n	800db7c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800db66:	2301      	movs	r3, #1
 800db68:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800db6a:	4b18      	ldr	r3, [pc, #96]	@ (800dbcc <hci_user_evt_proc+0x98>)
 800db6c:	69db      	ldr	r3, [r3, #28]
 800db6e:	1d3a      	adds	r2, r7, #4
 800db70:	4610      	mov	r0, r2
 800db72:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800db74:	793a      	ldrb	r2, [r7, #4]
 800db76:	4b14      	ldr	r3, [pc, #80]	@ (800dbc8 <hci_user_evt_proc+0x94>)
 800db78:	701a      	strb	r2, [r3, #0]
 800db7a:	e002      	b.n	800db82 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800db7c:	4b12      	ldr	r3, [pc, #72]	@ (800dbc8 <hci_user_evt_proc+0x94>)
 800db7e:	2201      	movs	r2, #1
 800db80:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800db82:	4b11      	ldr	r3, [pc, #68]	@ (800dbc8 <hci_user_evt_proc+0x94>)
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d004      	beq.n	800db94 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	4618      	mov	r0, r3
 800db8e:	f000 fc0d 	bl	800e3ac <TL_MM_EvtDone>
 800db92:	e004      	b.n	800db9e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	4619      	mov	r1, r3
 800db98:	480a      	ldr	r0, [pc, #40]	@ (800dbc4 <hci_user_evt_proc+0x90>)
 800db9a:	f000 fded 	bl	800e778 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800db9e:	4809      	ldr	r0, [pc, #36]	@ (800dbc4 <hci_user_evt_proc+0x90>)
 800dba0:	f000 fdc8 	bl	800e734 <LST_is_empty>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d107      	bne.n	800dbba <hci_user_evt_proc+0x86>
 800dbaa:	4b07      	ldr	r3, [pc, #28]	@ (800dbc8 <hci_user_evt_proc+0x94>)
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d003      	beq.n	800dbba <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800dbb2:	4804      	ldr	r0, [pc, #16]	@ (800dbc4 <hci_user_evt_proc+0x90>)
 800dbb4:	f002 f9d0 	bl	800ff58 <hci_notify_asynch_evt>
  }


  return;
 800dbb8:	bf00      	nop
 800dbba:	bf00      	nop
}
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	200001ac 	.word	0x200001ac
 800dbc8:	200001b8 	.word	0x200001b8
 800dbcc:	200004e0 	.word	0x200004e0

0800dbd0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b088      	sub	sp, #32
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800dbdc:	2000      	movs	r0, #0
 800dbde:	f000 f8d1 	bl	800dd84 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	885b      	ldrh	r3, [r3, #2]
 800dbea:	b21b      	sxth	r3, r3
 800dbec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dbf0:	b21a      	sxth	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	881b      	ldrh	r3, [r3, #0]
 800dbf6:	b21b      	sxth	r3, r3
 800dbf8:	029b      	lsls	r3, r3, #10
 800dbfa:	b21b      	sxth	r3, r3
 800dbfc:	4313      	orrs	r3, r2
 800dbfe:	b21b      	sxth	r3, r3
 800dc00:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800dc02:	4b33      	ldr	r3, [pc, #204]	@ (800dcd0 <hci_send_req+0x100>)
 800dc04:	2201      	movs	r2, #1
 800dc06:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	68db      	ldr	r3, [r3, #12]
 800dc0c:	b2d9      	uxtb	r1, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	689a      	ldr	r2, [r3, #8]
 800dc12:	8bbb      	ldrh	r3, [r7, #28]
 800dc14:	4618      	mov	r0, r3
 800dc16:	f000 f88f 	bl	800dd38 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800dc1a:	e04e      	b.n	800dcba <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800dc1c:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800dc20:	f002 f9b1 	bl	800ff86 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800dc24:	e043      	b.n	800dcae <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800dc26:	f107 030c 	add.w	r3, r7, #12
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	4829      	ldr	r0, [pc, #164]	@ (800dcd4 <hci_send_req+0x104>)
 800dc2e:	f000 fe10 	bl	800e852 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	7a5b      	ldrb	r3, [r3, #9]
 800dc36:	2b0f      	cmp	r3, #15
 800dc38:	d114      	bne.n	800dc64 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	330b      	adds	r3, #11
 800dc3e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	885b      	ldrh	r3, [r3, #2]
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	8bba      	ldrh	r2, [r7, #28]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d104      	bne.n	800dc56 <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	693a      	ldr	r2, [r7, #16]
 800dc52:	7812      	ldrb	r2, [r2, #0]
 800dc54:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	785b      	ldrb	r3, [r3, #1]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d027      	beq.n	800dcae <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	77fb      	strb	r3, [r7, #31]
 800dc62:	e024      	b.n	800dcae <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	330b      	adds	r3, #11
 800dc68:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	8bba      	ldrh	r2, [r7, #28]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d114      	bne.n	800dca2 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	7a9b      	ldrb	r3, [r3, #10]
 800dc7c:	3b03      	subs	r3, #3
 800dc7e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	695a      	ldr	r2, [r3, #20]
 800dc84:	7dfb      	ldrb	r3, [r7, #23]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	bfa8      	it	ge
 800dc8a:	461a      	movge	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6918      	ldr	r0, [r3, #16]
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	1cd9      	adds	r1, r3, #3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	695b      	ldr	r3, [r3, #20]
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	f004 f8be 	bl	8011e1e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800dca2:	69bb      	ldr	r3, [r7, #24]
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d001      	beq.n	800dcae <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800dcaa:	2301      	movs	r3, #1
 800dcac:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800dcae:	4809      	ldr	r0, [pc, #36]	@ (800dcd4 <hci_send_req+0x104>)
 800dcb0:	f000 fd40 	bl	800e734 <LST_is_empty>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d0b5      	beq.n	800dc26 <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800dcba:	7ffb      	ldrb	r3, [r7, #31]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d0ad      	beq.n	800dc1c <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800dcc0:	2001      	movs	r0, #1
 800dcc2:	f000 f85f 	bl	800dd84 <NotifyCmdStatus>

  return 0;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3720      	adds	r7, #32
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	2000050c 	.word	0x2000050c
 800dcd4:	20000500 	.word	0x20000500

0800dcd8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b086      	sub	sp, #24
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800dce0:	480f      	ldr	r0, [pc, #60]	@ (800dd20 <TlInit+0x48>)
 800dce2:	f000 fd17 	bl	800e714 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800dce6:	4a0f      	ldr	r2, [pc, #60]	@ (800dd24 <TlInit+0x4c>)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800dcec:	480e      	ldr	r0, [pc, #56]	@ (800dd28 <TlInit+0x50>)
 800dcee:	f000 fd11 	bl	800e714 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800dcf2:	4b0e      	ldr	r3, [pc, #56]	@ (800dd2c <TlInit+0x54>)
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800dcf8:	4b0d      	ldr	r3, [pc, #52]	@ (800dd30 <TlInit+0x58>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d00a      	beq.n	800dd16 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800dd04:	4b0b      	ldr	r3, [pc, #44]	@ (800dd34 <TlInit+0x5c>)
 800dd06:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800dd08:	4b09      	ldr	r3, [pc, #36]	@ (800dd30 <TlInit+0x58>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f107 0208 	add.w	r2, r7, #8
 800dd10:	4610      	mov	r0, r2
 800dd12:	4798      	blx	r3
  }

  return;
 800dd14:	bf00      	nop
 800dd16:	bf00      	nop
}
 800dd18:	3718      	adds	r7, #24
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	20000500 	.word	0x20000500
 800dd24:	200001b4 	.word	0x200001b4
 800dd28:	200001ac 	.word	0x200001ac
 800dd2c:	200001b8 	.word	0x200001b8
 800dd30:	200004e0 	.word	0x200004e0
 800dd34:	0800ddc5 	.word	0x0800ddc5

0800dd38 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	4603      	mov	r3, r0
 800dd40:	603a      	str	r2, [r7, #0]
 800dd42:	80fb      	strh	r3, [r7, #6]
 800dd44:	460b      	mov	r3, r1
 800dd46:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800dd48:	4b0c      	ldr	r3, [pc, #48]	@ (800dd7c <SendCmd+0x44>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	88fa      	ldrh	r2, [r7, #6]
 800dd4e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800dd52:	4b0a      	ldr	r3, [pc, #40]	@ (800dd7c <SendCmd+0x44>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	797a      	ldrb	r2, [r7, #5]
 800dd58:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800dd5a:	4b08      	ldr	r3, [pc, #32]	@ (800dd7c <SendCmd+0x44>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	330c      	adds	r3, #12
 800dd60:	797a      	ldrb	r2, [r7, #5]
 800dd62:	6839      	ldr	r1, [r7, #0]
 800dd64:	4618      	mov	r0, r3
 800dd66:	f004 f85a 	bl	8011e1e <memcpy>

  hciContext.io.Send(0,0);
 800dd6a:	4b05      	ldr	r3, [pc, #20]	@ (800dd80 <SendCmd+0x48>)
 800dd6c:	691b      	ldr	r3, [r3, #16]
 800dd6e:	2100      	movs	r1, #0
 800dd70:	2000      	movs	r0, #0
 800dd72:	4798      	blx	r3

  return;
 800dd74:	bf00      	nop
}
 800dd76:	3708      	adds	r7, #8
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}
 800dd7c:	200001b4 	.word	0x200001b4
 800dd80:	200004e0 	.word	0x200004e0

0800dd84 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800dd8e:	79fb      	ldrb	r3, [r7, #7]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d108      	bne.n	800dda6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800dd94:	4b0a      	ldr	r3, [pc, #40]	@ (800ddc0 <NotifyCmdStatus+0x3c>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d00d      	beq.n	800ddb8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800dd9c:	4b08      	ldr	r3, [pc, #32]	@ (800ddc0 <NotifyCmdStatus+0x3c>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	2000      	movs	r0, #0
 800dda2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800dda4:	e008      	b.n	800ddb8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800dda6:	4b06      	ldr	r3, [pc, #24]	@ (800ddc0 <NotifyCmdStatus+0x3c>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d004      	beq.n	800ddb8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800ddae:	4b04      	ldr	r3, [pc, #16]	@ (800ddc0 <NotifyCmdStatus+0x3c>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2001      	movs	r0, #1
 800ddb4:	4798      	blx	r3
  return;
 800ddb6:	bf00      	nop
 800ddb8:	bf00      	nop
}
 800ddba:	3708      	adds	r7, #8
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	20000508 	.word	0x20000508

0800ddc4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	7a5b      	ldrb	r3, [r3, #9]
 800ddd0:	2b0f      	cmp	r3, #15
 800ddd2:	d003      	beq.n	800dddc <TlEvtReceived+0x18>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	7a5b      	ldrb	r3, [r3, #9]
 800ddd8:	2b0e      	cmp	r3, #14
 800ddda:	d107      	bne.n	800ddec <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800dddc:	6879      	ldr	r1, [r7, #4]
 800ddde:	4809      	ldr	r0, [pc, #36]	@ (800de04 <TlEvtReceived+0x40>)
 800dde0:	f000 fcf0 	bl	800e7c4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800dde4:	2000      	movs	r0, #0
 800dde6:	f002 f8c3 	bl	800ff70 <hci_cmd_resp_release>
 800ddea:	e006      	b.n	800ddfa <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800ddec:	6879      	ldr	r1, [r7, #4]
 800ddee:	4806      	ldr	r0, [pc, #24]	@ (800de08 <TlEvtReceived+0x44>)
 800ddf0:	f000 fce8 	bl	800e7c4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ddf4:	4804      	ldr	r0, [pc, #16]	@ (800de08 <TlEvtReceived+0x44>)
 800ddf6:	f002 f8af 	bl	800ff58 <hci_notify_asynch_evt>
  }

  return;
 800ddfa:	bf00      	nop
}
 800ddfc:	3708      	adds	r7, #8
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd80      	pop	{r7, pc}
 800de02:	bf00      	nop
 800de04:	20000500 	.word	0x20000500
 800de08:	200001ac 	.word	0x200001ac

0800de0c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4a05      	ldr	r2, [pc, #20]	@ (800de2c <hci_register_io_bus+0x20>)
 800de18:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4a04      	ldr	r2, [pc, #16]	@ (800de30 <hci_register_io_bus+0x24>)
 800de1e:	611a      	str	r2, [r3, #16]

  return;
 800de20:	bf00      	nop
}
 800de22:	370c      	adds	r7, #12
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr
 800de2c:	0800e125 	.word	0x0800e125
 800de30:	0800e18d 	.word	0x0800e18d

0800de34 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	4a08      	ldr	r2, [pc, #32]	@ (800de64 <shci_init+0x30>)
 800de44:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800de46:	4a08      	ldr	r2, [pc, #32]	@ (800de68 <shci_init+0x34>)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800de4c:	4806      	ldr	r0, [pc, #24]	@ (800de68 <shci_init+0x34>)
 800de4e:	f000 f915 	bl	800e07c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4618      	mov	r0, r3
 800de58:	f000 f898 	bl	800df8c <TlInit>

  return;
 800de5c:	bf00      	nop
}
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	20000530 	.word	0x20000530
 800de68:	20000510 	.word	0x20000510

0800de6c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800de72:	4822      	ldr	r0, [pc, #136]	@ (800defc <shci_user_evt_proc+0x90>)
 800de74:	f000 fc5e 	bl	800e734 <LST_is_empty>
 800de78:	4603      	mov	r3, r0
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d12b      	bne.n	800ded6 <shci_user_evt_proc+0x6a>
 800de7e:	4b20      	ldr	r3, [pc, #128]	@ (800df00 <shci_user_evt_proc+0x94>)
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d027      	beq.n	800ded6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800de86:	f107 030c 	add.w	r3, r7, #12
 800de8a:	4619      	mov	r1, r3
 800de8c:	481b      	ldr	r0, [pc, #108]	@ (800defc <shci_user_evt_proc+0x90>)
 800de8e:	f000 fce0 	bl	800e852 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800de92:	4b1c      	ldr	r3, [pc, #112]	@ (800df04 <shci_user_evt_proc+0x98>)
 800de94:	69db      	ldr	r3, [r3, #28]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00c      	beq.n	800deb4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800de9e:	2301      	movs	r3, #1
 800dea0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800dea2:	4b18      	ldr	r3, [pc, #96]	@ (800df04 <shci_user_evt_proc+0x98>)
 800dea4:	69db      	ldr	r3, [r3, #28]
 800dea6:	1d3a      	adds	r2, r7, #4
 800dea8:	4610      	mov	r0, r2
 800deaa:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800deac:	793a      	ldrb	r2, [r7, #4]
 800deae:	4b14      	ldr	r3, [pc, #80]	@ (800df00 <shci_user_evt_proc+0x94>)
 800deb0:	701a      	strb	r2, [r3, #0]
 800deb2:	e002      	b.n	800deba <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800deb4:	4b12      	ldr	r3, [pc, #72]	@ (800df00 <shci_user_evt_proc+0x94>)
 800deb6:	2201      	movs	r2, #1
 800deb8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800deba:	4b11      	ldr	r3, [pc, #68]	@ (800df00 <shci_user_evt_proc+0x94>)
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d004      	beq.n	800decc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	4618      	mov	r0, r3
 800dec6:	f000 fa71 	bl	800e3ac <TL_MM_EvtDone>
 800deca:	e004      	b.n	800ded6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	4619      	mov	r1, r3
 800ded0:	480a      	ldr	r0, [pc, #40]	@ (800defc <shci_user_evt_proc+0x90>)
 800ded2:	f000 fc51 	bl	800e778 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ded6:	4809      	ldr	r0, [pc, #36]	@ (800defc <shci_user_evt_proc+0x90>)
 800ded8:	f000 fc2c 	bl	800e734 <LST_is_empty>
 800dedc:	4603      	mov	r3, r0
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d107      	bne.n	800def2 <shci_user_evt_proc+0x86>
 800dee2:	4b07      	ldr	r3, [pc, #28]	@ (800df00 <shci_user_evt_proc+0x94>)
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d003      	beq.n	800def2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800deea:	4804      	ldr	r0, [pc, #16]	@ (800defc <shci_user_evt_proc+0x90>)
 800deec:	f7f3 fa1c 	bl	8001328 <shci_notify_asynch_evt>
  }


  return;
 800def0:	bf00      	nop
 800def2:	bf00      	nop
}
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	200001bc 	.word	0x200001bc
 800df00:	200001cc 	.word	0x200001cc
 800df04:	20000510 	.word	0x20000510

0800df08 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60ba      	str	r2, [r7, #8]
 800df10:	607b      	str	r3, [r7, #4]
 800df12:	4603      	mov	r3, r0
 800df14:	81fb      	strh	r3, [r7, #14]
 800df16:	460b      	mov	r3, r1
 800df18:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800df1a:	2000      	movs	r0, #0
 800df1c:	f000 f868 	bl	800dff0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800df20:	4b17      	ldr	r3, [pc, #92]	@ (800df80 <shci_send+0x78>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	89fa      	ldrh	r2, [r7, #14]
 800df26:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800df2a:	4b15      	ldr	r3, [pc, #84]	@ (800df80 <shci_send+0x78>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	7b7a      	ldrb	r2, [r7, #13]
 800df30:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800df32:	4b13      	ldr	r3, [pc, #76]	@ (800df80 <shci_send+0x78>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	330c      	adds	r3, #12
 800df38:	7b7a      	ldrb	r2, [r7, #13]
 800df3a:	68b9      	ldr	r1, [r7, #8]
 800df3c:	4618      	mov	r0, r3
 800df3e:	f003 ff6e 	bl	8011e1e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800df42:	4b10      	ldr	r3, [pc, #64]	@ (800df84 <shci_send+0x7c>)
 800df44:	2201      	movs	r2, #1
 800df46:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800df48:	4b0f      	ldr	r3, [pc, #60]	@ (800df88 <shci_send+0x80>)
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	2100      	movs	r1, #0
 800df4e:	2000      	movs	r0, #0
 800df50:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800df52:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800df56:	f7f3 f9fe 	bl	8001356 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f103 0008 	add.w	r0, r3, #8
 800df60:	4b07      	ldr	r3, [pc, #28]	@ (800df80 <shci_send+0x78>)
 800df62:	6819      	ldr	r1, [r3, #0]
 800df64:	4b06      	ldr	r3, [pc, #24]	@ (800df80 <shci_send+0x78>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	789b      	ldrb	r3, [r3, #2]
 800df6a:	3303      	adds	r3, #3
 800df6c:	461a      	mov	r2, r3
 800df6e:	f003 ff56 	bl	8011e1e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800df72:	2001      	movs	r0, #1
 800df74:	f000 f83c 	bl	800dff0 <Cmd_SetStatus>

  return;
 800df78:	bf00      	nop
}
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	200001c8 	.word	0x200001c8
 800df84:	20000534 	.word	0x20000534
 800df88:	20000510 	.word	0x20000510

0800df8c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b086      	sub	sp, #24
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800df94:	4a10      	ldr	r2, [pc, #64]	@ (800dfd8 <TlInit+0x4c>)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800df9a:	4810      	ldr	r0, [pc, #64]	@ (800dfdc <TlInit+0x50>)
 800df9c:	f000 fbba 	bl	800e714 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800dfa0:	2001      	movs	r0, #1
 800dfa2:	f000 f825 	bl	800dff0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800dfa6:	4b0e      	ldr	r3, [pc, #56]	@ (800dfe0 <TlInit+0x54>)
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800dfac:	4b0d      	ldr	r3, [pc, #52]	@ (800dfe4 <TlInit+0x58>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00c      	beq.n	800dfce <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800dfb8:	4b0b      	ldr	r3, [pc, #44]	@ (800dfe8 <TlInit+0x5c>)
 800dfba:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800dfbc:	4b0b      	ldr	r3, [pc, #44]	@ (800dfec <TlInit+0x60>)
 800dfbe:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800dfc0:	4b08      	ldr	r3, [pc, #32]	@ (800dfe4 <TlInit+0x58>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f107 020c 	add.w	r2, r7, #12
 800dfc8:	4610      	mov	r0, r2
 800dfca:	4798      	blx	r3
  }

  return;
 800dfcc:	bf00      	nop
 800dfce:	bf00      	nop
}
 800dfd0:	3718      	adds	r7, #24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	200001c8 	.word	0x200001c8
 800dfdc:	200001bc 	.word	0x200001bc
 800dfe0:	200001cc 	.word	0x200001cc
 800dfe4:	20000510 	.word	0x20000510
 800dfe8:	0800e041 	.word	0x0800e041
 800dfec:	0800e059 	.word	0x0800e059

0800dff0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	4603      	mov	r3, r0
 800dff8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800dffa:	79fb      	ldrb	r3, [r7, #7]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d10b      	bne.n	800e018 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e000:	4b0d      	ldr	r3, [pc, #52]	@ (800e038 <Cmd_SetStatus+0x48>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d003      	beq.n	800e010 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e008:	4b0b      	ldr	r3, [pc, #44]	@ (800e038 <Cmd_SetStatus+0x48>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	2000      	movs	r0, #0
 800e00e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e010:	4b0a      	ldr	r3, [pc, #40]	@ (800e03c <Cmd_SetStatus+0x4c>)
 800e012:	2200      	movs	r2, #0
 800e014:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e016:	e00b      	b.n	800e030 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e018:	4b08      	ldr	r3, [pc, #32]	@ (800e03c <Cmd_SetStatus+0x4c>)
 800e01a:	2201      	movs	r2, #1
 800e01c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e01e:	4b06      	ldr	r3, [pc, #24]	@ (800e038 <Cmd_SetStatus+0x48>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d004      	beq.n	800e030 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e026:	4b04      	ldr	r3, [pc, #16]	@ (800e038 <Cmd_SetStatus+0x48>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2001      	movs	r0, #1
 800e02c:	4798      	blx	r3
  return;
 800e02e:	bf00      	nop
 800e030:	bf00      	nop
}
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	20000530 	.word	0x20000530
 800e03c:	200001c4 	.word	0x200001c4

0800e040 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e048:	2000      	movs	r0, #0
 800e04a:	f7f3 f979 	bl	8001340 <shci_cmd_resp_release>

  return;
 800e04e:	bf00      	nop
}
 800e050:	3708      	adds	r7, #8
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
	...

0800e058 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e060:	6879      	ldr	r1, [r7, #4]
 800e062:	4805      	ldr	r0, [pc, #20]	@ (800e078 <TlUserEvtReceived+0x20>)
 800e064:	f000 fbae 	bl	800e7c4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e068:	4803      	ldr	r0, [pc, #12]	@ (800e078 <TlUserEvtReceived+0x20>)
 800e06a:	f7f3 f95d 	bl	8001328 <shci_notify_asynch_evt>

  return;
 800e06e:	bf00      	nop
}
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	200001bc 	.word	0x200001bc

0800e07c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b083      	sub	sp, #12
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	4a05      	ldr	r2, [pc, #20]	@ (800e09c <shci_register_io_bus+0x20>)
 800e088:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4a04      	ldr	r2, [pc, #16]	@ (800e0a0 <shci_register_io_bus+0x24>)
 800e08e:	611a      	str	r2, [r3, #16]

  return;
 800e090:	bf00      	nop
}
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr
 800e09c:	0800e239 	.word	0x0800e239
 800e0a0:	0800e28d 	.word	0x0800e28d

0800e0a4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e0a8:	f002 fb24 	bl	80106f4 <HW_IPCC_Enable>

  return;
 800e0ac:	bf00      	nop
}
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <TL_Init>:


void TL_Init( void )
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e0b4:	4b10      	ldr	r3, [pc, #64]	@ (800e0f8 <TL_Init+0x48>)
 800e0b6:	4a11      	ldr	r2, [pc, #68]	@ (800e0fc <TL_Init+0x4c>)
 800e0b8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e0ba:	4b0f      	ldr	r3, [pc, #60]	@ (800e0f8 <TL_Init+0x48>)
 800e0bc:	4a10      	ldr	r2, [pc, #64]	@ (800e100 <TL_Init+0x50>)
 800e0be:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e0c0:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f8 <TL_Init+0x48>)
 800e0c2:	4a10      	ldr	r2, [pc, #64]	@ (800e104 <TL_Init+0x54>)
 800e0c4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e0c6:	4b0c      	ldr	r3, [pc, #48]	@ (800e0f8 <TL_Init+0x48>)
 800e0c8:	4a0f      	ldr	r2, [pc, #60]	@ (800e108 <TL_Init+0x58>)
 800e0ca:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800e0cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e0f8 <TL_Init+0x48>)
 800e0ce:	4a0f      	ldr	r2, [pc, #60]	@ (800e10c <TL_Init+0x5c>)
 800e0d0:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e0d2:	4b09      	ldr	r3, [pc, #36]	@ (800e0f8 <TL_Init+0x48>)
 800e0d4:	4a0e      	ldr	r2, [pc, #56]	@ (800e110 <TL_Init+0x60>)
 800e0d6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e0d8:	4b07      	ldr	r3, [pc, #28]	@ (800e0f8 <TL_Init+0x48>)
 800e0da:	4a0e      	ldr	r2, [pc, #56]	@ (800e114 <TL_Init+0x64>)
 800e0dc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e0de:	4b06      	ldr	r3, [pc, #24]	@ (800e0f8 <TL_Init+0x48>)
 800e0e0:	4a0d      	ldr	r2, [pc, #52]	@ (800e118 <TL_Init+0x68>)
 800e0e2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e0e4:	4b04      	ldr	r3, [pc, #16]	@ (800e0f8 <TL_Init+0x48>)
 800e0e6:	4a0d      	ldr	r2, [pc, #52]	@ (800e11c <TL_Init+0x6c>)
 800e0e8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e0ea:	4b03      	ldr	r3, [pc, #12]	@ (800e0f8 <TL_Init+0x48>)
 800e0ec:	4a0c      	ldr	r2, [pc, #48]	@ (800e120 <TL_Init+0x70>)
 800e0ee:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e0f0:	f002 fb14 	bl	801071c <HW_IPCC_Init>

  return;
 800e0f4:	bf00      	nop
}
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	20030000 	.word	0x20030000
 800e0fc:	20030028 	.word	0x20030028
 800e100:	20030048 	.word	0x20030048
 800e104:	20030058 	.word	0x20030058
 800e108:	20030068 	.word	0x20030068
 800e10c:	20030070 	.word	0x20030070
 800e110:	20030078 	.word	0x20030078
 800e114:	20030080 	.word	0x20030080
 800e118:	2003009c 	.word	0x2003009c
 800e11c:	200300a0 	.word	0x200300a0
 800e120:	200300ac 	.word	0x200300ac

0800e124 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800e130:	4811      	ldr	r0, [pc, #68]	@ (800e178 <TL_BLE_Init+0x54>)
 800e132:	f000 faef 	bl	800e714 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800e136:	4b11      	ldr	r3, [pc, #68]	@ (800e17c <TL_BLE_Init+0x58>)
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	689a      	ldr	r2, [r3, #8]
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	68da      	ldr	r2, [r3, #12]
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	4a0c      	ldr	r2, [pc, #48]	@ (800e180 <TL_BLE_Init+0x5c>)
 800e150:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	4a08      	ldr	r2, [pc, #32]	@ (800e178 <TL_BLE_Init+0x54>)
 800e156:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800e158:	f002 faf6 	bl	8010748 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a08      	ldr	r2, [pc, #32]	@ (800e184 <TL_BLE_Init+0x60>)
 800e162:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	4a07      	ldr	r2, [pc, #28]	@ (800e188 <TL_BLE_Init+0x64>)
 800e16a:	6013      	str	r3, [r2, #0]

  return 0;
 800e16c:	2300      	movs	r3, #0
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	200300c8 	.word	0x200300c8
 800e17c:	20030000 	.word	0x20030000
 800e180:	20030a58 	.word	0x20030a58
 800e184:	20000540 	.word	0x20000540
 800e188:	20000544 	.word	0x20000544

0800e18c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	460b      	mov	r3, r1
 800e196:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800e198:	4b09      	ldr	r3, [pc, #36]	@ (800e1c0 <TL_BLE_SendCmd+0x34>)
 800e19a:	685b      	ldr	r3, [r3, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800e1a2:	4b07      	ldr	r3, [pc, #28]	@ (800e1c0 <TL_BLE_SendCmd+0x34>)
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	2001      	movs	r0, #1
 800e1ac:	f000 f96c 	bl	800e488 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e1b0:	f002 fae4 	bl	801077c <HW_IPCC_BLE_SendCmd>

  return 0;
 800e1b4:	2300      	movs	r3, #0
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	20030000 	.word	0x20030000

0800e1c4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e1ca:	e01c      	b.n	800e206 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e1cc:	1d3b      	adds	r3, r7, #4
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	4812      	ldr	r0, [pc, #72]	@ (800e21c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e1d2:	f000 fb3e 	bl	800e852 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	7a5b      	ldrb	r3, [r3, #9]
 800e1da:	2b0f      	cmp	r3, #15
 800e1dc:	d003      	beq.n	800e1e6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	7a5b      	ldrb	r3, [r3, #9]
 800e1e2:	2b0e      	cmp	r3, #14
 800e1e4:	d105      	bne.n	800e1f2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	2002      	movs	r0, #2
 800e1ec:	f000 f94c 	bl	800e488 <OutputDbgTrace>
 800e1f0:	e004      	b.n	800e1fc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	2003      	movs	r0, #3
 800e1f8:	f000 f946 	bl	800e488 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e1fc:	4b08      	ldr	r3, [pc, #32]	@ (800e220 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	4610      	mov	r0, r2
 800e204:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e206:	4805      	ldr	r0, [pc, #20]	@ (800e21c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e208:	f000 fa94 	bl	800e734 <LST_is_empty>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d0dc      	beq.n	800e1cc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e212:	bf00      	nop
}
 800e214:	3708      	adds	r7, #8
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	200300c8 	.word	0x200300c8
 800e220:	20000540 	.word	0x20000540

0800e224 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e228:	4b02      	ldr	r3, [pc, #8]	@ (800e234 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4798      	blx	r3

  return;
 800e22e:	bf00      	nop
}
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	20000544 	.word	0x20000544

0800e238 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e244:	480d      	ldr	r0, [pc, #52]	@ (800e27c <TL_SYS_Init+0x44>)
 800e246:	f000 fa65 	bl	800e714 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e24a:	4b0d      	ldr	r3, [pc, #52]	@ (800e280 <TL_SYS_Init+0x48>)
 800e24c:	68db      	ldr	r3, [r3, #12]
 800e24e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	689a      	ldr	r2, [r3, #8]
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	4a08      	ldr	r2, [pc, #32]	@ (800e27c <TL_SYS_Init+0x44>)
 800e25c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e25e:	f002 fabf 	bl	80107e0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4a07      	ldr	r2, [pc, #28]	@ (800e284 <TL_SYS_Init+0x4c>)
 800e268:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	4a06      	ldr	r2, [pc, #24]	@ (800e288 <TL_SYS_Init+0x50>)
 800e270:	6013      	str	r3, [r2, #0]

  return 0;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3710      	adds	r7, #16
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}
 800e27c:	200300d0 	.word	0x200300d0
 800e280:	20030000 	.word	0x20030000
 800e284:	20000548 	.word	0x20000548
 800e288:	2000054c 	.word	0x2000054c

0800e28c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	460b      	mov	r3, r1
 800e296:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e298:	4b09      	ldr	r3, [pc, #36]	@ (800e2c0 <TL_SYS_SendCmd+0x34>)
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2210      	movs	r2, #16
 800e2a0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e2a2:	4b07      	ldr	r3, [pc, #28]	@ (800e2c0 <TL_SYS_SendCmd+0x34>)
 800e2a4:	68db      	ldr	r3, [r3, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	2004      	movs	r0, #4
 800e2ac:	f000 f8ec 	bl	800e488 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e2b0:	f002 fab0 	bl	8010814 <HW_IPCC_SYS_SendCmd>

  return 0;
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3708      	adds	r7, #8
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	20030000 	.word	0x20030000

0800e2c4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e2c8:	4b07      	ldr	r3, [pc, #28]	@ (800e2e8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	2005      	movs	r0, #5
 800e2d2:	f000 f8d9 	bl	800e488 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e2d6:	4b05      	ldr	r3, [pc, #20]	@ (800e2ec <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4a03      	ldr	r2, [pc, #12]	@ (800e2e8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e2dc:	68d2      	ldr	r2, [r2, #12]
 800e2de:	6812      	ldr	r2, [r2, #0]
 800e2e0:	4610      	mov	r0, r2
 800e2e2:	4798      	blx	r3

  return;
 800e2e4:	bf00      	nop
}
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	20030000 	.word	0x20030000
 800e2ec:	20000548 	.word	0x20000548

0800e2f0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e2f6:	e00e      	b.n	800e316 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800e2f8:	1d3b      	adds	r3, r7, #4
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	480b      	ldr	r0, [pc, #44]	@ (800e32c <HW_IPCC_SYS_EvtNot+0x3c>)
 800e2fe:	f000 faa8 	bl	800e852 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	4619      	mov	r1, r3
 800e306:	2006      	movs	r0, #6
 800e308:	f000 f8be 	bl	800e488 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800e30c:	4b08      	ldr	r3, [pc, #32]	@ (800e330 <HW_IPCC_SYS_EvtNot+0x40>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	4610      	mov	r0, r2
 800e314:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e316:	4805      	ldr	r0, [pc, #20]	@ (800e32c <HW_IPCC_SYS_EvtNot+0x3c>)
 800e318:	f000 fa0c 	bl	800e734 <LST_is_empty>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d0ea      	beq.n	800e2f8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800e322:	bf00      	nop
}
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	200300d0 	.word	0x200300d0
 800e330:	2000054c 	.word	0x2000054c

0800e334 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800e33c:	4817      	ldr	r0, [pc, #92]	@ (800e39c <TL_MM_Init+0x68>)
 800e33e:	f000 f9e9 	bl	800e714 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800e342:	4817      	ldr	r0, [pc, #92]	@ (800e3a0 <TL_MM_Init+0x6c>)
 800e344:	f000 f9e6 	bl	800e714 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800e348:	4b16      	ldr	r3, [pc, #88]	@ (800e3a4 <TL_MM_Init+0x70>)
 800e34a:	691b      	ldr	r3, [r3, #16]
 800e34c:	4a16      	ldr	r2, [pc, #88]	@ (800e3a8 <TL_MM_Init+0x74>)
 800e34e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800e350:	4b15      	ldr	r3, [pc, #84]	@ (800e3a8 <TL_MM_Init+0x74>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	6892      	ldr	r2, [r2, #8]
 800e358:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800e35a:	4b13      	ldr	r3, [pc, #76]	@ (800e3a8 <TL_MM_Init+0x74>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	68d2      	ldr	r2, [r2, #12]
 800e362:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800e364:	4b10      	ldr	r3, [pc, #64]	@ (800e3a8 <TL_MM_Init+0x74>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a0c      	ldr	r2, [pc, #48]	@ (800e39c <TL_MM_Init+0x68>)
 800e36a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800e36c:	4b0e      	ldr	r3, [pc, #56]	@ (800e3a8 <TL_MM_Init+0x74>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	6812      	ldr	r2, [r2, #0]
 800e374:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800e376:	4b0c      	ldr	r3, [pc, #48]	@ (800e3a8 <TL_MM_Init+0x74>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	687a      	ldr	r2, [r7, #4]
 800e37c:	6852      	ldr	r2, [r2, #4]
 800e37e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800e380:	4b09      	ldr	r3, [pc, #36]	@ (800e3a8 <TL_MM_Init+0x74>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	6912      	ldr	r2, [r2, #16]
 800e388:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800e38a:	4b07      	ldr	r3, [pc, #28]	@ (800e3a8 <TL_MM_Init+0x74>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	6952      	ldr	r2, [r2, #20]
 800e392:	619a      	str	r2, [r3, #24]

  return;
 800e394:	bf00      	nop
}
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	200300b8 	.word	0x200300b8
 800e3a0:	20000538 	.word	0x20000538
 800e3a4:	20030000 	.word	0x20030000
 800e3a8:	20000550 	.word	0x20000550

0800e3ac <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b082      	sub	sp, #8
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800e3b4:	6879      	ldr	r1, [r7, #4]
 800e3b6:	4807      	ldr	r0, [pc, #28]	@ (800e3d4 <TL_MM_EvtDone+0x28>)
 800e3b8:	f000 fa04 	bl	800e7c4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800e3bc:	6879      	ldr	r1, [r7, #4]
 800e3be:	2000      	movs	r0, #0
 800e3c0:	f000 f862 	bl	800e488 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800e3c4:	4804      	ldr	r0, [pc, #16]	@ (800e3d8 <TL_MM_EvtDone+0x2c>)
 800e3c6:	f002 fa6b 	bl	80108a0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800e3ca:	bf00      	nop
}
 800e3cc:	3708      	adds	r7, #8
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	20000538 	.word	0x20000538
 800e3d8:	0800e3dd 	.word	0x0800e3dd

0800e3dc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e3e2:	e00c      	b.n	800e3fe <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800e3e4:	1d3b      	adds	r3, r7, #4
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	480a      	ldr	r0, [pc, #40]	@ (800e414 <SendFreeBuf+0x38>)
 800e3ea:	f000 fa32 	bl	800e852 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800e3ee:	4b0a      	ldr	r3, [pc, #40]	@ (800e418 <SendFreeBuf+0x3c>)
 800e3f0:	691b      	ldr	r3, [r3, #16]
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	4611      	mov	r1, r2
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f000 f9e3 	bl	800e7c4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e3fe:	4805      	ldr	r0, [pc, #20]	@ (800e414 <SendFreeBuf+0x38>)
 800e400:	f000 f998 	bl	800e734 <LST_is_empty>
 800e404:	4603      	mov	r3, r0
 800e406:	2b00      	cmp	r3, #0
 800e408:	d0ec      	beq.n	800e3e4 <SendFreeBuf+0x8>
  }

  return;
 800e40a:	bf00      	nop
}
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	20000538 	.word	0x20000538
 800e418:	20030000 	.word	0x20030000

0800e41c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800e420:	4805      	ldr	r0, [pc, #20]	@ (800e438 <TL_TRACES_Init+0x1c>)
 800e422:	f000 f977 	bl	800e714 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800e426:	4b05      	ldr	r3, [pc, #20]	@ (800e43c <TL_TRACES_Init+0x20>)
 800e428:	695b      	ldr	r3, [r3, #20]
 800e42a:	4a03      	ldr	r2, [pc, #12]	@ (800e438 <TL_TRACES_Init+0x1c>)
 800e42c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800e42e:	f002 fa89 	bl	8010944 <HW_IPCC_TRACES_Init>

  return;
 800e432:	bf00      	nop
}
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	200300c0 	.word	0x200300c0
 800e43c:	20030000 	.word	0x20030000

0800e440 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e446:	e008      	b.n	800e45a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800e448:	1d3b      	adds	r3, r7, #4
 800e44a:	4619      	mov	r1, r3
 800e44c:	4808      	ldr	r0, [pc, #32]	@ (800e470 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e44e:	f000 fa00 	bl	800e852 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	4618      	mov	r0, r3
 800e456:	f000 f80d 	bl	800e474 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e45a:	4805      	ldr	r0, [pc, #20]	@ (800e470 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e45c:	f000 f96a 	bl	800e734 <LST_is_empty>
 800e460:	4603      	mov	r3, r0
 800e462:	2b00      	cmp	r3, #0
 800e464:	d0f0      	beq.n	800e448 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800e466:	bf00      	nop
}
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	200300c0 	.word	0x200300c0

0800e474 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800e47c:	bf00      	nop
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800e488:	b480      	push	{r7}
 800e48a:	b087      	sub	sp, #28
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	4603      	mov	r3, r0
 800e490:	6039      	str	r1, [r7, #0]
 800e492:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 800e494:	79fb      	ldrb	r3, [r7, #7]
 800e496:	2b06      	cmp	r3, #6
 800e498:	d845      	bhi.n	800e526 <OutputDbgTrace+0x9e>
 800e49a:	a201      	add	r2, pc, #4	@ (adr r2, 800e4a0 <OutputDbgTrace+0x18>)
 800e49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a0:	0800e4bd 	.word	0x0800e4bd
 800e4a4:	0800e4e1 	.word	0x0800e4e1
 800e4a8:	0800e4e7 	.word	0x0800e4e7
 800e4ac:	0800e4fb 	.word	0x0800e4fb
 800e4b0:	0800e507 	.word	0x0800e507
 800e4b4:	0800e50d 	.word	0x0800e50d
 800e4b8:	0800e51b 	.word	0x0800e51b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	7a5b      	ldrb	r3, [r3, #9]
 800e4c4:	2bff      	cmp	r3, #255	@ 0xff
 800e4c6:	d005      	beq.n	800e4d4 <OutputDbgTrace+0x4c>
 800e4c8:	2bff      	cmp	r3, #255	@ 0xff
 800e4ca:	dc05      	bgt.n	800e4d8 <OutputDbgTrace+0x50>
 800e4cc:	2b0e      	cmp	r3, #14
 800e4ce:	d005      	beq.n	800e4dc <OutputDbgTrace+0x54>
 800e4d0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800e4d2:	e001      	b.n	800e4d8 <OutputDbgTrace+0x50>
          break;
 800e4d4:	bf00      	nop
 800e4d6:	e027      	b.n	800e528 <OutputDbgTrace+0xa0>
          break;
 800e4d8:	bf00      	nop
 800e4da:	e025      	b.n	800e528 <OutputDbgTrace+0xa0>
          break;
 800e4dc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800e4de:	e023      	b.n	800e528 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e4e4:	e020      	b.n	800e528 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	7a5b      	ldrb	r3, [r3, #9]
 800e4ee:	2b0e      	cmp	r3, #14
 800e4f0:	d001      	beq.n	800e4f6 <OutputDbgTrace+0x6e>
 800e4f2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e4f4:	e000      	b.n	800e4f8 <OutputDbgTrace+0x70>
          break;
 800e4f6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e4f8:	e016      	b.n	800e528 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	7a5b      	ldrb	r3, [r3, #9]
 800e502:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e504:	e010      	b.n	800e528 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e50a:	e00d      	b.n	800e528 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	785b      	ldrb	r3, [r3, #1]
 800e514:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 800e516:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e518:	e006      	b.n	800e528 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	7a5b      	ldrb	r3, [r3, #9]
 800e522:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e524:	e000      	b.n	800e528 <OutputDbgTrace+0xa0>

    default:
      break;
 800e526:	bf00      	nop
  }

  return;
 800e528:	bf00      	nop
}
 800e52a:	371c      	adds	r7, #28
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr

0800e534 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800e540:	215c      	movs	r1, #92	@ 0x5c
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f003 fbe2 	bl	8011d0c <strrchr>
 800e548:	4603      	mov	r3, r0
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d007      	beq.n	800e55e <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800e54e:	215c      	movs	r1, #92	@ 0x5c
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f003 fbdb 	bl	8011d0c <strrchr>
 800e556:	4603      	mov	r3, r0
 800e558:	3301      	adds	r3, #1
 800e55a:	60fb      	str	r3, [r7, #12]
 800e55c:	e00d      	b.n	800e57a <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800e55e:	212f      	movs	r1, #47	@ 0x2f
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f003 fbd3 	bl	8011d0c <strrchr>
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d006      	beq.n	800e57a <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800e56c:	212f      	movs	r1, #47	@ 0x2f
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f003 fbcc 	bl	8011d0c <strrchr>
 800e574:	4603      	mov	r3, r0
 800e576:	3301      	adds	r3, #1
 800e578:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e57a:	68fb      	ldr	r3, [r7, #12]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b086      	sub	sp, #24
 800e588:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e58a:	f3ef 8310 	mrs	r3, PRIMASK
 800e58e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e590:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800e592:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e594:	b672      	cpsid	i
}
 800e596:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800e598:	1cbb      	adds	r3, r7, #2
 800e59a:	4619      	mov	r1, r3
 800e59c:	4812      	ldr	r0, [pc, #72]	@ (800e5e8 <DbgTrace_TxCpltCallback+0x64>)
 800e59e:	f000 fb9d 	bl	800ecdc <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800e5a2:	1cbb      	adds	r3, r7, #2
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	4810      	ldr	r0, [pc, #64]	@ (800e5e8 <DbgTrace_TxCpltCallback+0x64>)
 800e5a8:	f000 fc87 	bl	800eeba <CircularQueue_Sense>
 800e5ac:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00c      	beq.n	800e5ce <DbgTrace_TxCpltCallback+0x4a>
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	f383 8810 	msr	PRIMASK, r3
}
 800e5be:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800e5c0:	887b      	ldrh	r3, [r7, #2]
 800e5c2:	4a0a      	ldr	r2, [pc, #40]	@ (800e5ec <DbgTrace_TxCpltCallback+0x68>)
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	6938      	ldr	r0, [r7, #16]
 800e5c8:	f7f2 fa1c 	bl	8000a04 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800e5cc:	e008      	b.n	800e5e0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800e5ce:	4b08      	ldr	r3, [pc, #32]	@ (800e5f0 <DbgTrace_TxCpltCallback+0x6c>)
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	701a      	strb	r2, [r3, #0]
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f383 8810 	msr	PRIMASK, r3
}
 800e5de:	bf00      	nop
}
 800e5e0:	bf00      	nop
 800e5e2:	3718      	adds	r7, #24
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	20000554 	.word	0x20000554
 800e5ec:	0800e585 	.word	0x0800e585
 800e5f0:	2000009e 	.word	0x2000009e

0800e5f4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	68b9      	ldr	r1, [r7, #8]
 800e604:	68f8      	ldr	r0, [r7, #12]
 800e606:	f000 f805 	bl	800e614 <DbgTraceWrite>
 800e60a:	4603      	mov	r3, r0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3710      	adds	r7, #16
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b08a      	sub	sp, #40	@ 0x28
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800e620:	2300      	movs	r3, #0
 800e622:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e624:	f3ef 8310 	mrs	r3, PRIMASK
 800e628:	61bb      	str	r3, [r7, #24]
  return(result);
 800e62a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800e62c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e634:	d102      	bne.n	800e63c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800e636:	2300      	movs	r3, #0
 800e638:	627b      	str	r3, [r7, #36]	@ 0x24
 800e63a:	e037      	b.n	800e6ac <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2b01      	cmp	r3, #1
 800e640:	d006      	beq.n	800e650 <DbgTraceWrite+0x3c>
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2b02      	cmp	r3, #2
 800e646:	d003      	beq.n	800e650 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800e648:	f04f 33ff 	mov.w	r3, #4294967295
 800e64c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e64e:	e02d      	b.n	800e6ac <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d02a      	beq.n	800e6ac <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800e65a:	b672      	cpsid	i
}
 800e65c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	b29a      	uxth	r2, r3
 800e662:	2301      	movs	r3, #1
 800e664:	68b9      	ldr	r1, [r7, #8]
 800e666:	4814      	ldr	r0, [pc, #80]	@ (800e6b8 <DbgTraceWrite+0xa4>)
 800e668:	f000 f912 	bl	800e890 <CircularQueue_Add>
 800e66c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d015      	beq.n	800e6a0 <DbgTraceWrite+0x8c>
 800e674:	4b11      	ldr	r3, [pc, #68]	@ (800e6bc <DbgTraceWrite+0xa8>)
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d010      	beq.n	800e6a0 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800e67e:	4b0f      	ldr	r3, [pc, #60]	@ (800e6bc <DbgTraceWrite+0xa8>)
 800e680:	2200      	movs	r2, #0
 800e682:	701a      	strb	r2, [r3, #0]
 800e684:	6a3b      	ldr	r3, [r7, #32]
 800e686:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	f383 8810 	msr	PRIMASK, r3
}
 800e68e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	b29b      	uxth	r3, r3
 800e694:	4a0a      	ldr	r2, [pc, #40]	@ (800e6c0 <DbgTraceWrite+0xac>)
 800e696:	4619      	mov	r1, r3
 800e698:	69f8      	ldr	r0, [r7, #28]
 800e69a:	f7f2 f9b3 	bl	8000a04 <DbgOutputTraces>
 800e69e:	e005      	b.n	800e6ac <DbgTraceWrite+0x98>
 800e6a0:	6a3b      	ldr	r3, [r7, #32]
 800e6a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	f383 8810 	msr	PRIMASK, r3
}
 800e6aa:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800e6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3728      	adds	r7, #40	@ 0x28
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20000554 	.word	0x20000554
 800e6bc:	2000009e 	.word	0x2000009e
 800e6c0:	0800e585 	.word	0x0800e585

0800e6c4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b085      	sub	sp, #20
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800e6ce:	4b0f      	ldr	r3, [pc, #60]	@ (800e70c <OTP_Read+0x48>)
 800e6d0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e6d2:	e002      	b.n	800e6da <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	3b08      	subs	r3, #8
 800e6d8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	3307      	adds	r3, #7
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	79fa      	ldrb	r2, [r7, #7]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d003      	beq.n	800e6ee <OTP_Read+0x2a>
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	4a09      	ldr	r2, [pc, #36]	@ (800e710 <OTP_Read+0x4c>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d1f2      	bne.n	800e6d4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	3307      	adds	r3, #7
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	79fa      	ldrb	r2, [r7, #7]
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d001      	beq.n	800e6fe <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
}
 800e700:	4618      	mov	r0, r3
 800e702:	3714      	adds	r7, #20
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr
 800e70c:	1fff73f8 	.word	0x1fff73f8
 800e710:	1fff7000 	.word	0x1fff7000

0800e714 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800e714:	b480      	push	{r7}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	605a      	str	r2, [r3, #4]
}
 800e728:	bf00      	nop
 800e72a:	370c      	adds	r7, #12
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800e734:	b480      	push	{r7}
 800e736:	b087      	sub	sp, #28
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e73c:	f3ef 8310 	mrs	r3, PRIMASK
 800e740:	60fb      	str	r3, [r7, #12]
  return(result);
 800e742:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e744:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e746:	b672      	cpsid	i
}
 800e748:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	429a      	cmp	r2, r3
 800e752:	d102      	bne.n	800e75a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800e754:	2301      	movs	r3, #1
 800e756:	75fb      	strb	r3, [r7, #23]
 800e758:	e001      	b.n	800e75e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800e75a:	2300      	movs	r3, #0
 800e75c:	75fb      	strb	r3, [r7, #23]
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	f383 8810 	msr	PRIMASK, r3
}
 800e768:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800e76a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	371c      	adds	r7, #28
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr

0800e778 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800e778:	b480      	push	{r7}
 800e77a:	b087      	sub	sp, #28
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e782:	f3ef 8310 	mrs	r3, PRIMASK
 800e786:	60fb      	str	r3, [r7, #12]
  return(result);
 800e788:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e78a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e78c:	b672      	cpsid	i
}
 800e78e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	683a      	ldr	r2, [r7, #0]
 800e7a2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	683a      	ldr	r2, [r7, #0]
 800e7aa:	605a      	str	r2, [r3, #4]
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	f383 8810 	msr	PRIMASK, r3
}
 800e7b6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e7b8:	bf00      	nop
 800e7ba:	371c      	adds	r7, #28
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b087      	sub	sp, #28
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7ce:	f3ef 8310 	mrs	r3, PRIMASK
 800e7d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e7d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e7d8:	b672      	cpsid	i
}
 800e7da:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	685a      	ldr	r2, [r3, #4]
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	683a      	ldr	r2, [r7, #0]
 800e7f6:	601a      	str	r2, [r3, #0]
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	f383 8810 	msr	PRIMASK, r3
}
 800e802:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e804:	bf00      	nop
 800e806:	371c      	adds	r7, #28
 800e808:	46bd      	mov	sp, r7
 800e80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80e:	4770      	bx	lr

0800e810 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800e810:	b480      	push	{r7}
 800e812:	b087      	sub	sp, #28
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e818:	f3ef 8310 	mrs	r3, PRIMASK
 800e81c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e81e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e820:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e822:	b672      	cpsid	i
}
 800e824:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	6812      	ldr	r2, [r2, #0]
 800e82e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	6852      	ldr	r2, [r2, #4]
 800e838:	605a      	str	r2, [r3, #4]
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	f383 8810 	msr	PRIMASK, r3
}
 800e844:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e846:	bf00      	nop
 800e848:	371c      	adds	r7, #28
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr

0800e852 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800e852:	b580      	push	{r7, lr}
 800e854:	b086      	sub	sp, #24
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
 800e85a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e85c:	f3ef 8310 	mrs	r3, PRIMASK
 800e860:	60fb      	str	r3, [r7, #12]
  return(result);
 800e862:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800e864:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e866:	b672      	cpsid	i
}
 800e868:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4618      	mov	r0, r3
 800e878:	f7ff ffca 	bl	800e810 <LST_remove_node>
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	f383 8810 	msr	PRIMASK, r3
}
 800e886:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800e888:	bf00      	nop
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}

0800e890 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b08e      	sub	sp, #56	@ 0x38
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	603b      	str	r3, [r7, #0]
 800e89c:	4613      	mov	r3, r2
 800e89e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	891b      	ldrh	r3, [r3, #8]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d101      	bne.n	800e8c8 <CircularQueue_Add+0x38>
 800e8c4:	2302      	movs	r3, #2
 800e8c6:	e000      	b.n	800e8ca <CircularQueue_Add+0x3a>
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	695b      	ldr	r3, [r3, #20]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d029      	beq.n	800e928 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	891b      	ldrh	r3, [r3, #8]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d122      	bne.n	800e922 <CircularQueue_Add+0x92>
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	691b      	ldr	r3, [r3, #16]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681a      	ldr	r2, [r3, #0]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	691b      	ldr	r3, [r3, #16]
 800e8f2:	1c59      	adds	r1, r3, #1
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	4299      	cmp	r1, r3
 800e8fa:	d306      	bcc.n	800e90a <CircularQueue_Add+0x7a>
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	6919      	ldr	r1, [r3, #16]
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	1acb      	subs	r3, r1, r3
 800e906:	3301      	adds	r3, #1
 800e908:	e002      	b.n	800e910 <CircularQueue_Add+0x80>
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	691b      	ldr	r3, [r3, #16]
 800e90e:	3301      	adds	r3, #1
 800e910:	4413      	add	r3, r2
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	021b      	lsls	r3, r3, #8
 800e916:	b29b      	uxth	r3, r3
 800e918:	4403      	add	r3, r0
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	3302      	adds	r3, #2
 800e91e:	b29b      	uxth	r3, r3
 800e920:	e001      	b.n	800e926 <CircularQueue_Add+0x96>
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	891b      	ldrh	r3, [r3, #8]
 800e926:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	891b      	ldrh	r3, [r3, #8]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d002      	beq.n	800e936 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	891b      	ldrh	r3, [r3, #8]
 800e934:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	691a      	ldr	r2, [r3, #16]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	68db      	ldr	r3, [r3, #12]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d307      	bcc.n	800e952 <CircularQueue_Add+0xc2>
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	685a      	ldr	r2, [r3, #4]
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6919      	ldr	r1, [r3, #16]
 800e94a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e94c:	440b      	add	r3, r1
 800e94e:	1ad3      	subs	r3, r2, r3
 800e950:	e000      	b.n	800e954 <CircularQueue_Add+0xc4>
 800e952:	2300      	movs	r3, #0
 800e954:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800e956:	88fa      	ldrh	r2, [r7, #6]
 800e958:	7ffb      	ldrb	r3, [r7, #31]
 800e95a:	4413      	add	r3, r2
 800e95c:	461a      	mov	r2, r3
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	fb02 f303 	mul.w	r3, r2, r3
 800e964:	69ba      	ldr	r2, [r7, #24]
 800e966:	429a      	cmp	r2, r3
 800e968:	d80b      	bhi.n	800e982 <CircularQueue_Add+0xf2>
 800e96a:	88fa      	ldrh	r2, [r7, #6]
 800e96c:	7ffb      	ldrb	r3, [r7, #31]
 800e96e:	4413      	add	r3, r2
 800e970:	461a      	mov	r2, r3
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	fbb3 f1f2 	udiv	r1, r3, r2
 800e978:	fb01 f202 	mul.w	r2, r1, r2
 800e97c:	1a9b      	subs	r3, r3, r2
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	e000      	b.n	800e984 <CircularQueue_Add+0xf4>
 800e982:	2300      	movs	r3, #0
 800e984:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800e986:	7dfa      	ldrb	r2, [r7, #23]
 800e988:	7ffb      	ldrb	r3, [r7, #31]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	bf8c      	ite	hi
 800e98e:	2301      	movhi	r3, #1
 800e990:	2300      	movls	r3, #0
 800e992:	b2db      	uxtb	r3, r3
 800e994:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800e996:	7fbb      	ldrb	r3, [r7, #30]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d008      	beq.n	800e9ae <CircularQueue_Add+0x11e>
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	7f1b      	ldrb	r3, [r3, #28]
 800e9a0:	f003 0301 	and.w	r3, r3, #1
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d002      	beq.n	800e9ae <CircularQueue_Add+0x11e>
 800e9a8:	7dfb      	ldrb	r3, [r7, #23]
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	e000      	b.n	800e9b0 <CircularQueue_Add+0x120>
 800e9ae:	8bbb      	ldrh	r3, [r7, #28]
 800e9b0:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800e9b2:	7fbb      	ldrb	r3, [r7, #30]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d008      	beq.n	800e9ca <CircularQueue_Add+0x13a>
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	7f1b      	ldrb	r3, [r3, #28]
 800e9bc:	f003 0302 	and.w	r3, r3, #2
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d002      	beq.n	800e9ca <CircularQueue_Add+0x13a>
 800e9c4:	7ffb      	ldrb	r3, [r7, #31]
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	e000      	b.n	800e9cc <CircularQueue_Add+0x13c>
 800e9ca:	8bbb      	ldrh	r3, [r7, #28]
 800e9cc:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800e9ce:	88fb      	ldrh	r3, [r7, #6]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f000 817e 	beq.w	800ecd2 <CircularQueue_Add+0x442>
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	695a      	ldr	r2, [r3, #20]
 800e9da:	88f9      	ldrh	r1, [r7, #6]
 800e9dc:	7ffb      	ldrb	r3, [r7, #31]
 800e9de:	440b      	add	r3, r1
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	fb01 f303 	mul.w	r3, r1, r3
 800e9e8:	441a      	add	r2, r3
 800e9ea:	8bbb      	ldrh	r3, [r7, #28]
 800e9ec:	441a      	add	r2, r3
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	f200 816d 	bhi.w	800ecd2 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e9fc:	e14a      	b.n	800ec94 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	691a      	ldr	r2, [r3, #16]
 800ea02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ea04:	441a      	add	r2, r3
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	d307      	bcc.n	800ea1e <CircularQueue_Add+0x18e>
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	691a      	ldr	r2, [r3, #16]
 800ea12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ea14:	441a      	add	r2, r3
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	1ad3      	subs	r3, r2, r3
 800ea1c:	e003      	b.n	800ea26 <CircularQueue_Add+0x196>
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	691a      	ldr	r2, [r3, #16]
 800ea22:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ea24:	4413      	add	r3, r2
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	691b      	ldr	r3, [r3, #16]
 800ea2e:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	891b      	ldrh	r3, [r3, #8]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d130      	bne.n	800ea9a <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea3e:	1c59      	adds	r1, r3, #1
 800ea40:	6339      	str	r1, [r7, #48]	@ 0x30
 800ea42:	4413      	add	r3, r2
 800ea44:	88fa      	ldrh	r2, [r7, #6]
 800ea46:	b2d2      	uxtb	r2, r2
 800ea48:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d304      	bcc.n	800ea5e <CircularQueue_Add+0x1ce>
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	e000      	b.n	800ea60 <CircularQueue_Add+0x1d0>
 800ea5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea60:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800ea62:	88fb      	ldrh	r3, [r7, #6]
 800ea64:	0a1b      	lsrs	r3, r3, #8
 800ea66:	b298      	uxth	r0, r3
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea6e:	1c59      	adds	r1, r3, #1
 800ea70:	6339      	str	r1, [r7, #48]	@ 0x30
 800ea72:	4413      	add	r3, r2
 800ea74:	b2c2      	uxtb	r2, r0
 800ea76:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d304      	bcc.n	800ea8c <CircularQueue_Add+0x1fc>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea88:	1ad3      	subs	r3, r2, r3
 800ea8a:	e000      	b.n	800ea8e <CircularQueue_Add+0x1fe>
 800ea8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea8e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	695b      	ldr	r3, [r3, #20]
 800ea94:	1c9a      	adds	r2, r3, #2
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800ea9a:	88fa      	ldrh	r2, [r7, #6]
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	6859      	ldr	r1, [r3, #4]
 800eaa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa2:	1acb      	subs	r3, r1, r3
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	bf28      	it	cs
 800eaa8:	4613      	movcs	r3, r2
 800eaaa:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800eaac:	88fb      	ldrh	r3, [r7, #6]
 800eaae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eab0:	429a      	cmp	r2, r3
 800eab2:	d007      	beq.n	800eac4 <CircularQueue_Add+0x234>
 800eab4:	88fb      	ldrh	r3, [r7, #6]
 800eab6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d225      	bcs.n	800eb08 <CircularQueue_Add+0x278>
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	7f1b      	ldrb	r3, [r3, #28]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d121      	bne.n	800eb08 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681a      	ldr	r2, [r3, #0]
 800eac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaca:	18d0      	adds	r0, r2, r3
 800eacc:	88fb      	ldrh	r3, [r7, #6]
 800eace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ead0:	fb02 f303 	mul.w	r3, r2, r3
 800ead4:	68ba      	ldr	r2, [r7, #8]
 800ead6:	4413      	add	r3, r2
 800ead8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eada:	4619      	mov	r1, r3
 800eadc:	f003 f99f 	bl	8011e1e <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	695a      	ldr	r2, [r3, #20]
 800eae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eae6:	441a      	add	r2, r3
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800eaec:	2300      	movs	r3, #0
 800eaee:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800eaf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaf2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800eaf4:	88fa      	ldrh	r2, [r7, #6]
 800eaf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaf8:	1ad3      	subs	r3, r2, r3
 800eafa:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800eafc:	7ffb      	ldrb	r3, [r7, #31]
 800eafe:	b29a      	uxth	r2, r3
 800eb00:	88fb      	ldrh	r3, [r7, #6]
 800eb02:	4413      	add	r3, r2
 800eb04:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800eb06:	e0a4      	b.n	800ec52 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800eb08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f000 80a1 	beq.w	800ec52 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	7f1b      	ldrb	r3, [r3, #28]
 800eb14:	f003 0301 	and.w	r3, r3, #1
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d03a      	beq.n	800eb92 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	891b      	ldrh	r3, [r3, #8]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d10d      	bne.n	800eb40 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb2a:	3b02      	subs	r3, #2
 800eb2c:	4413      	add	r3, r2
 800eb2e:	22ff      	movs	r2, #255	@ 0xff
 800eb30:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb38:	3b01      	subs	r3, #1
 800eb3a:	4413      	add	r3, r2
 800eb3c:	22ff      	movs	r2, #255	@ 0xff
 800eb3e:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	695a      	ldr	r2, [r3, #20]
 800eb44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb46:	441a      	add	r2, r3
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800eb50:	88fb      	ldrh	r3, [r7, #6]
 800eb52:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800eb54:	2300      	movs	r3, #0
 800eb56:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	891b      	ldrh	r3, [r3, #8]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d16f      	bne.n	800ec40 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb66:	1c59      	adds	r1, r3, #1
 800eb68:	6339      	str	r1, [r7, #48]	@ 0x30
 800eb6a:	4413      	add	r3, r2
 800eb6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eb6e:	b2d2      	uxtb	r2, r2
 800eb70:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800eb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb74:	0a18      	lsrs	r0, r3, #8
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb7c:	1c59      	adds	r1, r3, #1
 800eb7e:	6339      	str	r1, [r7, #48]	@ 0x30
 800eb80:	4413      	add	r3, r2
 800eb82:	b2c2      	uxtb	r2, r0
 800eb84:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	695b      	ldr	r3, [r3, #20]
 800eb8a:	1c9a      	adds	r2, r3, #2
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	615a      	str	r2, [r3, #20]
 800eb90:	e056      	b.n	800ec40 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	7f1b      	ldrb	r3, [r3, #28]
 800eb96:	f003 0302 	and.w	r3, r3, #2
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d050      	beq.n	800ec40 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	891b      	ldrh	r3, [r3, #8]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d14a      	bne.n	800ec3c <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebac:	3b02      	subs	r3, #2
 800ebae:	4413      	add	r3, r2
 800ebb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebb2:	b2d2      	uxtb	r2, r2
 800ebb4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ebb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebb8:	0a19      	lsrs	r1, r3, #8
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681a      	ldr	r2, [r3, #0]
 800ebbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebc0:	3b01      	subs	r3, #1
 800ebc2:	4413      	add	r3, r2
 800ebc4:	b2ca      	uxtb	r2, r1
 800ebc6:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebce:	18d0      	adds	r0, r2, r3
 800ebd0:	88fb      	ldrh	r3, [r7, #6]
 800ebd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ebd4:	fb02 f303 	mul.w	r3, r2, r3
 800ebd8:	68ba      	ldr	r2, [r7, #8]
 800ebda:	4413      	add	r3, r2
 800ebdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebde:	4619      	mov	r1, r3
 800ebe0:	f003 f91d 	bl	8011e1e <memcpy>
             q->byteCount += NbBytesToCopy; 
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	695a      	ldr	r2, [r3, #20]
 800ebe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebea:	441a      	add	r2, r3
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800ebf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf2:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800ebf4:	88fa      	ldrh	r2, [r7, #6]
 800ebf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf8:	1ad3      	subs	r3, r2, r3
 800ebfa:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	699b      	ldr	r3, [r3, #24]
 800ec00:	1c5a      	adds	r2, r3, #1
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800ec06:	2300      	movs	r3, #0
 800ec08:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681a      	ldr	r2, [r3, #0]
 800ec0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec10:	1c59      	adds	r1, r3, #1
 800ec12:	6339      	str	r1, [r7, #48]	@ 0x30
 800ec14:	4413      	add	r3, r2
 800ec16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec18:	b2d2      	uxtb	r2, r2
 800ec1a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ec1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec1e:	0a18      	lsrs	r0, r3, #8
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec26:	1c59      	adds	r1, r3, #1
 800ec28:	6339      	str	r1, [r7, #48]	@ 0x30
 800ec2a:	4413      	add	r3, r2
 800ec2c:	b2c2      	uxtb	r2, r0
 800ec2e:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	695b      	ldr	r3, [r3, #20]
 800ec34:	1c9a      	adds	r2, r3, #2
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	615a      	str	r2, [r3, #20]
 800ec3a:	e001      	b.n	800ec40 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	e049      	b.n	800ecd4 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800ec40:	7ffb      	ldrb	r3, [r7, #31]
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	4413      	add	r3, r2
 800ec4a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800ec52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d015      	beq.n	800ec84 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681a      	ldr	r2, [r3, #0]
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec5e:	18d0      	adds	r0, r2, r3
 800ec60:	88fb      	ldrh	r3, [r7, #6]
 800ec62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec64:	fb03 f202 	mul.w	r2, r3, r2
 800ec68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec6a:	4413      	add	r3, r2
 800ec6c:	68ba      	ldr	r2, [r7, #8]
 800ec6e:	4413      	add	r3, r2
 800ec70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec72:	4619      	mov	r1, r3
 800ec74:	f003 f8d3 	bl	8011e1e <memcpy>
        q->byteCount += NbBytesToCopy;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	695a      	ldr	r2, [r3, #20]
 800ec7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec7e:	441a      	add	r2, r3
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	699b      	ldr	r3, [r3, #24]
 800ec88:	1c5a      	adds	r2, r3, #1
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800ec8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec90:	3301      	adds	r3, #1
 800ec92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	f4ff aeb0 	bcc.w	800e9fe <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	6919      	ldr	r1, [r3, #16]
 800eca6:	7ffb      	ldrb	r3, [r7, #31]
 800eca8:	4419      	add	r1, r3
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	4299      	cmp	r1, r3
 800ecb0:	d307      	bcc.n	800ecc2 <CircularQueue_Add+0x432>
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6919      	ldr	r1, [r3, #16]
 800ecb6:	7ffb      	ldrb	r3, [r7, #31]
 800ecb8:	4419      	add	r1, r3
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	1acb      	subs	r3, r1, r3
 800ecc0:	e003      	b.n	800ecca <CircularQueue_Add+0x43a>
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	6919      	ldr	r1, [r3, #16]
 800ecc6:	7ffb      	ldrb	r3, [r7, #31]
 800ecc8:	440b      	add	r3, r1
 800ecca:	4413      	add	r3, r2
 800eccc:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800ecce:	6a3b      	ldr	r3, [r7, #32]
 800ecd0:	e000      	b.n	800ecd4 <CircularQueue_Add+0x444>
    return NULL;
 800ecd2:	2300      	movs	r3, #0
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3738      	adds	r7, #56	@ 0x38
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b085      	sub	sp, #20
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ece6:	2300      	movs	r3, #0
 800ece8:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800ecea:	2300      	movs	r3, #0
 800ecec:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	891b      	ldrh	r3, [r3, #8]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d101      	bne.n	800ecfa <CircularQueue_Remove+0x1e>
 800ecf6:	2302      	movs	r3, #2
 800ecf8:	e000      	b.n	800ecfc <CircularQueue_Remove+0x20>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	695b      	ldr	r3, [r3, #20]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	f000 80ca 	beq.w	800eea0 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	891b      	ldrh	r3, [r3, #8]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d120      	bne.n	800ed56 <CircularQueue_Remove+0x7a>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	4618      	mov	r0, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	68db      	ldr	r3, [r3, #12]
 800ed2a:	1c59      	adds	r1, r3, #1
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	4299      	cmp	r1, r3
 800ed32:	d306      	bcc.n	800ed42 <CircularQueue_Remove+0x66>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	68d9      	ldr	r1, [r3, #12]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	685b      	ldr	r3, [r3, #4]
 800ed3c:	1acb      	subs	r3, r1, r3
 800ed3e:	3301      	adds	r3, #1
 800ed40:	e002      	b.n	800ed48 <CircularQueue_Remove+0x6c>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	68db      	ldr	r3, [r3, #12]
 800ed46:	3301      	adds	r3, #1
 800ed48:	4413      	add	r3, r2
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	021b      	lsls	r3, r3, #8
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	4403      	add	r3, r0
 800ed52:	b29b      	uxth	r3, r3
 800ed54:	e001      	b.n	800ed5a <CircularQueue_Remove+0x7e>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	891b      	ldrh	r3, [r3, #8]
 800ed5a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	7f1b      	ldrb	r3, [r3, #28]
 800ed60:	f003 0301 	and.w	r3, r3, #1
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d056      	beq.n	800ee16 <CircularQueue_Remove+0x13a>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	7f1b      	ldrb	r3, [r3, #28]
 800ed6c:	f003 0302 	and.w	r3, r3, #2
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d150      	bne.n	800ee16 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ed74:	897b      	ldrh	r3, [r7, #10]
 800ed76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d103      	bne.n	800ed86 <CircularQueue_Remove+0xaa>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	891b      	ldrh	r3, [r3, #8]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d012      	beq.n	800edac <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	68da      	ldr	r2, [r3, #12]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d941      	bls.n	800ee16 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	891b      	ldrh	r3, [r3, #8]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d03d      	beq.n	800ee16 <CircularQueue_Remove+0x13a>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	685a      	ldr	r2, [r3, #4]
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	68db      	ldr	r3, [r3, #12]
 800eda2:	1ad3      	subs	r3, r2, r3
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	8912      	ldrh	r2, [r2, #8]
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d234      	bcs.n	800ee16 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	695a      	ldr	r2, [r3, #20]
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	68d9      	ldr	r1, [r3, #12]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	685b      	ldr	r3, [r3, #4]
 800edb8:	1acb      	subs	r3, r1, r3
 800edba:	441a      	add	r2, r3
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2200      	movs	r2, #0
 800edc4:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	891b      	ldrh	r3, [r3, #8]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d120      	bne.n	800ee10 <CircularQueue_Remove+0x134>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	4413      	add	r3, r2
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	4618      	mov	r0, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681a      	ldr	r2, [r3, #0]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	68db      	ldr	r3, [r3, #12]
 800ede4:	1c59      	adds	r1, r3, #1
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	4299      	cmp	r1, r3
 800edec:	d306      	bcc.n	800edfc <CircularQueue_Remove+0x120>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	68d9      	ldr	r1, [r3, #12]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	1acb      	subs	r3, r1, r3
 800edf8:	3301      	adds	r3, #1
 800edfa:	e002      	b.n	800ee02 <CircularQueue_Remove+0x126>
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	3301      	adds	r3, #1
 800ee02:	4413      	add	r3, r2
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	021b      	lsls	r3, r3, #8
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	4403      	add	r3, r0
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	e001      	b.n	800ee14 <CircularQueue_Remove+0x138>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	891b      	ldrh	r3, [r3, #8]
 800ee14:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	68d9      	ldr	r1, [r3, #12]
 800ee1e:	7a7b      	ldrb	r3, [r7, #9]
 800ee20:	4419      	add	r1, r3
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	685b      	ldr	r3, [r3, #4]
 800ee26:	4299      	cmp	r1, r3
 800ee28:	d307      	bcc.n	800ee3a <CircularQueue_Remove+0x15e>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	68d9      	ldr	r1, [r3, #12]
 800ee2e:	7a7b      	ldrb	r3, [r7, #9]
 800ee30:	4419      	add	r1, r3
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	1acb      	subs	r3, r1, r3
 800ee38:	e003      	b.n	800ee42 <CircularQueue_Remove+0x166>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	68d9      	ldr	r1, [r3, #12]
 800ee3e:	7a7b      	ldrb	r3, [r7, #9]
 800ee40:	440b      	add	r3, r1
 800ee42:	4413      	add	r3, r2
 800ee44:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	695b      	ldr	r3, [r3, #20]
 800ee4a:	8979      	ldrh	r1, [r7, #10]
 800ee4c:	7a7a      	ldrb	r2, [r7, #9]
 800ee4e:	440a      	add	r2, r1
 800ee50:	1a9a      	subs	r2, r3, r2
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	695b      	ldr	r3, [r3, #20]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d01b      	beq.n	800ee96 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	68da      	ldr	r2, [r3, #12]
 800ee62:	897b      	ldrh	r3, [r7, #10]
 800ee64:	441a      	add	r2, r3
 800ee66:	7a7b      	ldrb	r3, [r7, #9]
 800ee68:	441a      	add	r2, r3
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d309      	bcc.n	800ee86 <CircularQueue_Remove+0x1aa>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	68da      	ldr	r2, [r3, #12]
 800ee76:	897b      	ldrh	r3, [r7, #10]
 800ee78:	441a      	add	r2, r3
 800ee7a:	7a7b      	ldrb	r3, [r7, #9]
 800ee7c:	441a      	add	r2, r3
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	1ad3      	subs	r3, r2, r3
 800ee84:	e005      	b.n	800ee92 <CircularQueue_Remove+0x1b6>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	68da      	ldr	r2, [r3, #12]
 800ee8a:	897b      	ldrh	r3, [r7, #10]
 800ee8c:	441a      	add	r2, r3
 800ee8e:	7a7b      	ldrb	r3, [r7, #9]
 800ee90:	4413      	add	r3, r2
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	699b      	ldr	r3, [r3, #24]
 800ee9a:	1e5a      	subs	r2, r3, #1
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d002      	beq.n	800eeac <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	897a      	ldrh	r2, [r7, #10]
 800eeaa:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800eeac:	68fb      	ldr	r3, [r7, #12]
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	3714      	adds	r7, #20
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb8:	4770      	bx	lr

0800eeba <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800eeba:	b480      	push	{r7}
 800eebc:	b087      	sub	sp, #28
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	6078      	str	r0, [r7, #4]
 800eec2:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800eec4:	2300      	movs	r3, #0
 800eec6:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800eec8:	2300      	movs	r3, #0
 800eeca:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	891b      	ldrh	r3, [r3, #8]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d101      	bne.n	800eed8 <CircularQueue_Sense+0x1e>
 800eed4:	2302      	movs	r3, #2
 800eed6:	e000      	b.n	800eeda <CircularQueue_Sense+0x20>
 800eed8:	2300      	movs	r3, #0
 800eeda:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800eedc:	2300      	movs	r3, #0
 800eede:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800eee0:	2300      	movs	r3, #0
 800eee2:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	695b      	ldr	r3, [r3, #20]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	f000 808e 	beq.w	800f00a <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	68db      	ldr	r3, [r3, #12]
 800eef2:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	891b      	ldrh	r3, [r3, #8]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d120      	bne.n	800ef3e <CircularQueue_Sense+0x84>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681a      	ldr	r2, [r3, #0]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	68db      	ldr	r3, [r3, #12]
 800ef04:	4413      	add	r3, r2
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	4618      	mov	r0, r3
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681a      	ldr	r2, [r3, #0]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	1c59      	adds	r1, r3, #1
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	4299      	cmp	r1, r3
 800ef1a:	d306      	bcc.n	800ef2a <CircularQueue_Sense+0x70>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	68d9      	ldr	r1, [r3, #12]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	1acb      	subs	r3, r1, r3
 800ef26:	3301      	adds	r3, #1
 800ef28:	e002      	b.n	800ef30 <CircularQueue_Sense+0x76>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	68db      	ldr	r3, [r3, #12]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	4413      	add	r3, r2
 800ef32:	781b      	ldrb	r3, [r3, #0]
 800ef34:	021b      	lsls	r3, r3, #8
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	4403      	add	r3, r0
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	e001      	b.n	800ef42 <CircularQueue_Sense+0x88>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	891b      	ldrh	r3, [r3, #8]
 800ef42:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	7f1b      	ldrb	r3, [r3, #28]
 800ef48:	f003 0301 	and.w	r3, r3, #1
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d047      	beq.n	800efe0 <CircularQueue_Sense+0x126>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	7f1b      	ldrb	r3, [r3, #28]
 800ef54:	f003 0302 	and.w	r3, r3, #2
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d141      	bne.n	800efe0 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ef5c:	8a7b      	ldrh	r3, [r7, #18]
 800ef5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d103      	bne.n	800ef6e <CircularQueue_Sense+0xb4>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	891b      	ldrh	r3, [r3, #8]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d012      	beq.n	800ef94 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	68da      	ldr	r2, [r3, #12]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d932      	bls.n	800efe0 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	891b      	ldrh	r3, [r3, #8]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d02e      	beq.n	800efe0 <CircularQueue_Sense+0x126>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	685a      	ldr	r2, [r3, #4]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	1ad3      	subs	r3, r2, r3
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	8912      	ldrh	r2, [r2, #8]
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d225      	bcs.n	800efe0 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800ef94:	2300      	movs	r3, #0
 800ef96:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	891b      	ldrh	r3, [r3, #8]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d11c      	bne.n	800efda <CircularQueue_Sense+0x120>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681a      	ldr	r2, [r3, #0]
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	4413      	add	r3, r2
 800efa8:	781b      	ldrb	r3, [r3, #0]
 800efaa:	4618      	mov	r0, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681a      	ldr	r2, [r3, #0]
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	1c59      	adds	r1, r3, #1
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	4299      	cmp	r1, r3
 800efba:	d305      	bcc.n	800efc8 <CircularQueue_Sense+0x10e>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	68f9      	ldr	r1, [r7, #12]
 800efc2:	1acb      	subs	r3, r1, r3
 800efc4:	3301      	adds	r3, #1
 800efc6:	e001      	b.n	800efcc <CircularQueue_Sense+0x112>
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	3301      	adds	r3, #1
 800efcc:	4413      	add	r3, r2
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	021b      	lsls	r3, r3, #8
 800efd2:	b29b      	uxth	r3, r3
 800efd4:	4403      	add	r3, r0
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	e001      	b.n	800efde <CircularQueue_Sense+0x124>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	891b      	ldrh	r3, [r3, #8]
 800efde:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	7af9      	ldrb	r1, [r7, #11]
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	4419      	add	r1, r3
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	4299      	cmp	r1, r3
 800eff0:	d306      	bcc.n	800f000 <CircularQueue_Sense+0x146>
 800eff2:	7af9      	ldrb	r1, [r7, #11]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	4419      	add	r1, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	1acb      	subs	r3, r1, r3
 800effe:	e002      	b.n	800f006 <CircularQueue_Sense+0x14c>
 800f000:	7af9      	ldrb	r1, [r7, #11]
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	440b      	add	r3, r1
 800f006:	4413      	add	r3, r2
 800f008:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d002      	beq.n	800f016 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	8a7a      	ldrh	r2, [r7, #18]
 800f014:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800f016:	697b      	ldr	r3, [r7, #20]
}
 800f018:	4618      	mov	r0, r3
 800f01a:	371c      	adds	r7, #28
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr

0800f024 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800f024:	b480      	push	{r7}
 800f026:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800f028:	4b03      	ldr	r3, [pc, #12]	@ (800f038 <LL_FLASH_GetUDN+0x14>)
 800f02a:	681b      	ldr	r3, [r3, #0]
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	1fff7580 	.word	0x1fff7580

0800f03c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800f03c:	b480      	push	{r7}
 800f03e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800f040:	4b03      	ldr	r3, [pc, #12]	@ (800f050 <LL_FLASH_GetDeviceID+0x14>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	b2db      	uxtb	r3, r3
}
 800f046:	4618      	mov	r0, r3
 800f048:	46bd      	mov	sp, r7
 800f04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04e:	4770      	bx	lr
 800f050:	1fff7584 	.word	0x1fff7584

0800f054 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800f054:	b480      	push	{r7}
 800f056:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800f058:	4b03      	ldr	r3, [pc, #12]	@ (800f068 <LL_FLASH_GetSTCompanyID+0x14>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	0a1b      	lsrs	r3, r3, #8
}
 800f05e:	4618      	mov	r0, r3
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr
 800f068:	1fff7584 	.word	0x1fff7584

0800f06c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800f06c:	b5b0      	push	{r4, r5, r7, lr}
 800f06e:	b090      	sub	sp, #64	@ 0x40
 800f070:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f072:	2392      	movs	r3, #146	@ 0x92
 800f074:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800f078:	4b45      	ldr	r3, [pc, #276]	@ (800f190 <APP_BLE_Init+0x124>)
 800f07a:	1d3c      	adds	r4, r7, #4
 800f07c:	461d      	mov	r5, r3
 800f07e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f08a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f08e:	c403      	stmia	r4!, {r0, r1}
 800f090:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800f092:	f000 fba5 	bl	800f7e0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800f096:	2101      	movs	r1, #1
 800f098:	2002      	movs	r0, #2
 800f09a:	f002 f9c5 	bl	8011428 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800f09e:	4a3d      	ldr	r2, [pc, #244]	@ (800f194 <APP_BLE_Init+0x128>)
 800f0a0:	2100      	movs	r1, #0
 800f0a2:	2002      	movs	r0, #2
 800f0a4:	f002 faec 	bl	8011680 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800f0a8:	1d3b      	adds	r3, r7, #4
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7fe fc34 	bl	800d918 <SHCI_C2_BLE_Init>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800f0b6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d012      	beq.n	800f0e4 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800f0be:	4836      	ldr	r0, [pc, #216]	@ (800f198 <APP_BLE_Init+0x12c>)
 800f0c0:	f7ff fa38 	bl	800e534 <DbgTraceGetFileName>
 800f0c4:	4601      	mov	r1, r0
 800f0c6:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 800f0ca:	4a34      	ldr	r2, [pc, #208]	@ (800f19c <APP_BLE_Init+0x130>)
 800f0cc:	4834      	ldr	r0, [pc, #208]	@ (800f1a0 <APP_BLE_Init+0x134>)
 800f0ce:	f002 fcc5 	bl	8011a5c <iprintf>
 800f0d2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	4832      	ldr	r0, [pc, #200]	@ (800f1a4 <APP_BLE_Init+0x138>)
 800f0da:	f002 fcbf 	bl	8011a5c <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800f0de:	f7f3 fa1f 	bl	8002520 <Error_Handler>
 800f0e2:	e00c      	b.n	800f0fe <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800f0e4:	482c      	ldr	r0, [pc, #176]	@ (800f198 <APP_BLE_Init+0x12c>)
 800f0e6:	f7ff fa25 	bl	800e534 <DbgTraceGetFileName>
 800f0ea:	4601      	mov	r1, r0
 800f0ec:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 800f0f0:	4a2a      	ldr	r2, [pc, #168]	@ (800f19c <APP_BLE_Init+0x130>)
 800f0f2:	482b      	ldr	r0, [pc, #172]	@ (800f1a0 <APP_BLE_Init+0x134>)
 800f0f4:	f002 fcb2 	bl	8011a5c <iprintf>
 800f0f8:	482b      	ldr	r0, [pc, #172]	@ (800f1a8 <APP_BLE_Init+0x13c>)
 800f0fa:	f002 fcaf 	bl	8011a5c <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800f0fe:	f000 fb85 	bl	800f80c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800f102:	f7fe fb63 	bl	800d7cc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f106:	4b29      	ldr	r3, [pc, #164]	@ (800f1ac <APP_BLE_Init+0x140>)
 800f108:	2200      	movs	r2, #0
 800f10a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800f10e:	4b27      	ldr	r3, [pc, #156]	@ (800f1ac <APP_BLE_Init+0x140>)
 800f110:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f114:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800f116:	4a26      	ldr	r2, [pc, #152]	@ (800f1b0 <APP_BLE_Init+0x144>)
 800f118:	2100      	movs	r1, #0
 800f11a:	2001      	movs	r0, #1
 800f11c:	f002 fab0 	bl	8011680 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800f120:	2006      	movs	r0, #6
 800f122:	f7fe f9c7 	bl	800d4b4 <aci_hal_set_radio_activity_mask>
 800f126:	4603      	mov	r3, r0
 800f128:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800f12c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f130:	2b00      	cmp	r3, #0
 800f132:	d010      	beq.n	800f156 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800f134:	4818      	ldr	r0, [pc, #96]	@ (800f198 <APP_BLE_Init+0x12c>)
 800f136:	f7ff f9fd 	bl	800e534 <DbgTraceGetFileName>
 800f13a:	4601      	mov	r1, r0
 800f13c:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 800f140:	4a16      	ldr	r2, [pc, #88]	@ (800f19c <APP_BLE_Init+0x130>)
 800f142:	4817      	ldr	r0, [pc, #92]	@ (800f1a0 <APP_BLE_Init+0x134>)
 800f144:	f002 fc8a 	bl	8011a5c <iprintf>
 800f148:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f14c:	4619      	mov	r1, r3
 800f14e:	4819      	ldr	r0, [pc, #100]	@ (800f1b4 <APP_BLE_Init+0x148>)
 800f150:	f002 fc84 	bl	8011a5c <iprintf>
 800f154:	e00c      	b.n	800f170 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800f156:	4810      	ldr	r0, [pc, #64]	@ (800f198 <APP_BLE_Init+0x12c>)
 800f158:	f7ff f9ec 	bl	800e534 <DbgTraceGetFileName>
 800f15c:	4601      	mov	r1, r0
 800f15e:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 800f162:	4a0e      	ldr	r2, [pc, #56]	@ (800f19c <APP_BLE_Init+0x130>)
 800f164:	480e      	ldr	r0, [pc, #56]	@ (800f1a0 <APP_BLE_Init+0x134>)
 800f166:	f002 fc79 	bl	8011a5c <iprintf>
 800f16a:	4813      	ldr	r0, [pc, #76]	@ (800f1b8 <APP_BLE_Init+0x14c>)
 800f16c:	f002 fc76 	bl	8011a5c <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800f170:	f000 ff7e 	bl	8010070 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800f174:	4b0d      	ldr	r3, [pc, #52]	@ (800f1ac <APP_BLE_Init+0x140>)
 800f176:	2200      	movs	r2, #0
 800f178:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800f17a:	4b0c      	ldr	r3, [pc, #48]	@ (800f1ac <APP_BLE_Init+0x140>)
 800f17c:	2200      	movs	r2, #0
 800f17e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800f180:	2001      	movs	r0, #1
 800f182:	f000 fdd7 	bl	800fd34 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800f186:	bf00      	nop
}
 800f188:	3740      	adds	r7, #64	@ 0x40
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bdb0      	pop	{r4, r5, r7, pc}
 800f18e:	bf00      	nop
 800f190:	08012da4 	.word	0x08012da4
 800f194:	0800db35 	.word	0x0800db35
 800f198:	08012c98 	.word	0x08012c98
 800f19c:	08014100 	.word	0x08014100
 800f1a0:	08012cb4 	.word	0x08012cb4
 800f1a4:	08012cc8 	.word	0x08012cc8
 800f1a8:	08012d00 	.word	0x08012d00
 800f1ac:	2000057c 	.word	0x2000057c
 800f1b0:	0800feb9 	.word	0x0800feb9
 800f1b4:	08012d28 	.word	0x08012d28
 800f1b8:	08012d6c 	.word	0x08012d6c

0800f1bc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800f1bc:	b5b0      	push	{r4, r5, r7, lr}
 800f1be:	b090      	sub	sp, #64	@ 0x40
 800f1c0:	af04      	add	r7, sp, #16
 800f1c2:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800f1c4:	2392      	movs	r3, #146	@ 0x92
 800f1c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	3301      	adds	r3, #1
 800f1ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 800f1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	2bff      	cmp	r3, #255	@ 0xff
 800f1d6:	f000 8143 	beq.w	800f460 <SVCCTL_App_Notification+0x2a4>
 800f1da:	2bff      	cmp	r3, #255	@ 0xff
 800f1dc:	f300 82cd 	bgt.w	800f77a <SVCCTL_App_Notification+0x5be>
 800f1e0:	2b3e      	cmp	r3, #62	@ 0x3e
 800f1e2:	d06a      	beq.n	800f2ba <SVCCTL_App_Notification+0xfe>
 800f1e4:	2b3e      	cmp	r3, #62	@ 0x3e
 800f1e6:	f300 82c8 	bgt.w	800f77a <SVCCTL_App_Notification+0x5be>
 800f1ea:	2b05      	cmp	r3, #5
 800f1ec:	d002      	beq.n	800f1f4 <SVCCTL_App_Notification+0x38>
 800f1ee:	2b10      	cmp	r3, #16
 800f1f0:	d042      	beq.n	800f278 <SVCCTL_App_Notification+0xbc>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800f1f2:	e2c2      	b.n	800f77a <SVCCTL_App_Notification+0x5be>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800f1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1f6:	3302      	adds	r3, #2
 800f1f8:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f200:	b29a      	uxth	r2, r3
 800f202:	4bab      	ldr	r3, [pc, #684]	@ (800f4b0 <SVCCTL_App_Notification+0x2f4>)
 800f204:	8adb      	ldrh	r3, [r3, #22]
 800f206:	429a      	cmp	r2, r3
 800f208:	d128      	bne.n	800f25c <SVCCTL_App_Notification+0xa0>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800f20a:	4ba9      	ldr	r3, [pc, #676]	@ (800f4b0 <SVCCTL_App_Notification+0x2f4>)
 800f20c:	2200      	movs	r2, #0
 800f20e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f210:	4ba7      	ldr	r3, [pc, #668]	@ (800f4b0 <SVCCTL_App_Notification+0x2f4>)
 800f212:	2200      	movs	r2, #0
 800f214:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800f218:	48a6      	ldr	r0, [pc, #664]	@ (800f4b4 <SVCCTL_App_Notification+0x2f8>)
 800f21a:	f7ff f98b 	bl	800e534 <DbgTraceGetFileName>
 800f21e:	4601      	mov	r1, r0
 800f220:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 800f224:	4aa4      	ldr	r2, [pc, #656]	@ (800f4b8 <SVCCTL_App_Notification+0x2fc>)
 800f226:	48a5      	ldr	r0, [pc, #660]	@ (800f4bc <SVCCTL_App_Notification+0x300>)
 800f228:	f002 fc18 	bl	8011a5c <iprintf>
 800f22c:	48a4      	ldr	r0, [pc, #656]	@ (800f4c0 <SVCCTL_App_Notification+0x304>)
 800f22e:	f002 fc85 	bl	8011b3c <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800f232:	48a0      	ldr	r0, [pc, #640]	@ (800f4b4 <SVCCTL_App_Notification+0x2f8>)
 800f234:	f7ff f97e 	bl	800e534 <DbgTraceGetFileName>
 800f238:	4601      	mov	r1, r0
 800f23a:	f240 13bb 	movw	r3, #443	@ 0x1bb
 800f23e:	4a9e      	ldr	r2, [pc, #632]	@ (800f4b8 <SVCCTL_App_Notification+0x2fc>)
 800f240:	489e      	ldr	r0, [pc, #632]	@ (800f4bc <SVCCTL_App_Notification+0x300>)
 800f242:	f002 fc0b 	bl	8011a5c <iprintf>
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	4619      	mov	r1, r3
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	78db      	ldrb	r3, [r3, #3]
 800f254:	461a      	mov	r2, r3
 800f256:	489b      	ldr	r0, [pc, #620]	@ (800f4c4 <SVCCTL_App_Notification+0x308>)
 800f258:	f002 fc00 	bl	8011a5c <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800f25c:	2001      	movs	r0, #1
 800f25e:	f000 fd69 	bl	800fd34 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800f262:	4b99      	ldr	r3, [pc, #612]	@ (800f4c8 <SVCCTL_App_Notification+0x30c>)
 800f264:	2201      	movs	r2, #1
 800f266:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f268:	4b91      	ldr	r3, [pc, #580]	@ (800f4b0 <SVCCTL_App_Notification+0x2f4>)
 800f26a:	8ada      	ldrh	r2, [r3, #22]
 800f26c:	4b96      	ldr	r3, [pc, #600]	@ (800f4c8 <SVCCTL_App_Notification+0x30c>)
 800f26e:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800f270:	4895      	ldr	r0, [pc, #596]	@ (800f4c8 <SVCCTL_App_Notification+0x30c>)
 800f272:	f000 fee9 	bl	8010048 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800f276:	e283      	b.n	800f780 <SVCCTL_App_Notification+0x5c4>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 800f278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f27a:	3302      	adds	r3, #2
 800f27c:	60fb      	str	r3, [r7, #12]
      APP_DBG_MSG(">>== HCI_HARDWARE_ERROR_EVT_CODE\n");
 800f27e:	488d      	ldr	r0, [pc, #564]	@ (800f4b4 <SVCCTL_App_Notification+0x2f8>)
 800f280:	f7ff f958 	bl	800e534 <DbgTraceGetFileName>
 800f284:	4601      	mov	r1, r0
 800f286:	f240 13dd 	movw	r3, #477	@ 0x1dd
 800f28a:	4a8b      	ldr	r2, [pc, #556]	@ (800f4b8 <SVCCTL_App_Notification+0x2fc>)
 800f28c:	488b      	ldr	r0, [pc, #556]	@ (800f4bc <SVCCTL_App_Notification+0x300>)
 800f28e:	f002 fbe5 	bl	8011a5c <iprintf>
 800f292:	488e      	ldr	r0, [pc, #568]	@ (800f4cc <SVCCTL_App_Notification+0x310>)
 800f294:	f002 fc52 	bl	8011b3c <puts>
      APP_DBG_MSG("Hardware Code = 0x%02X\n",p_hardware_error_event->Hardware_Code);
 800f298:	4886      	ldr	r0, [pc, #536]	@ (800f4b4 <SVCCTL_App_Notification+0x2f8>)
 800f29a:	f7ff f94b 	bl	800e534 <DbgTraceGetFileName>
 800f29e:	4601      	mov	r1, r0
 800f2a0:	f44f 73ef 	mov.w	r3, #478	@ 0x1de
 800f2a4:	4a84      	ldr	r2, [pc, #528]	@ (800f4b8 <SVCCTL_App_Notification+0x2fc>)
 800f2a6:	4885      	ldr	r0, [pc, #532]	@ (800f4bc <SVCCTL_App_Notification+0x300>)
 800f2a8:	f002 fbd8 	bl	8011a5c <iprintf>
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	781b      	ldrb	r3, [r3, #0]
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	4887      	ldr	r0, [pc, #540]	@ (800f4d0 <SVCCTL_App_Notification+0x314>)
 800f2b4:	f002 fbd2 	bl	8011a5c <iprintf>
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 800f2b8:	e262      	b.n	800f780 <SVCCTL_App_Notification+0x5c4>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800f2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2bc:	3302      	adds	r3, #2
 800f2be:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d042      	beq.n	800f34e <SVCCTL_App_Notification+0x192>
 800f2c8:	2b03      	cmp	r3, #3
 800f2ca:	f040 80c7 	bne.w	800f45c <SVCCTL_App_Notification+0x2a0>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800f2d4:	4877      	ldr	r0, [pc, #476]	@ (800f4b4 <SVCCTL_App_Notification+0x2f8>)
 800f2d6:	f7ff f92d 	bl	800e534 <DbgTraceGetFileName>
 800f2da:	4601      	mov	r1, r0
 800f2dc:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 800f2e0:	4a75      	ldr	r2, [pc, #468]	@ (800f4b8 <SVCCTL_App_Notification+0x2fc>)
 800f2e2:	4876      	ldr	r0, [pc, #472]	@ (800f4bc <SVCCTL_App_Notification+0x300>)
 800f2e4:	f002 fbba 	bl	8011a5c <iprintf>
 800f2e8:	487a      	ldr	r0, [pc, #488]	@ (800f4d4 <SVCCTL_App_Notification+0x318>)
 800f2ea:	f002 fc27 	bl	8011b3c <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800f2ee:	4871      	ldr	r0, [pc, #452]	@ (800f4b4 <SVCCTL_App_Notification+0x2f8>)
 800f2f0:	f7ff f920 	bl	800e534 <DbgTraceGetFileName>
 800f2f4:	4601      	mov	r1, r0
 800f2f6:	f240 13f1 	movw	r3, #497	@ 0x1f1
 800f2fa:	4a6f      	ldr	r2, [pc, #444]	@ (800f4b8 <SVCCTL_App_Notification+0x2fc>)
 800f2fc:	486f      	ldr	r0, [pc, #444]	@ (800f4bc <SVCCTL_App_Notification+0x300>)
 800f2fe:	f002 fbad 	bl	8011a5c <iprintf>
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f308:	b29b      	uxth	r3, r3
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7f1 f8e2 	bl	80004d4 <__aeabi_i2d>
 800f310:	f04f 0200 	mov.w	r2, #0
 800f314:	4b70      	ldr	r3, [pc, #448]	@ (800f4d8 <SVCCTL_App_Notification+0x31c>)
 800f316:	f7f1 f947 	bl	80005a8 <__aeabi_dmul>
 800f31a:	4602      	mov	r2, r0
 800f31c:	460b      	mov	r3, r1
 800f31e:	4610      	mov	r0, r2
 800f320:	4619      	mov	r1, r3
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f328:	b29b      	uxth	r3, r3
 800f32a:	461c      	mov	r4, r3
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f332:	b29b      	uxth	r3, r3
 800f334:	461a      	mov	r2, r3
 800f336:	4613      	mov	r3, r2
 800f338:	009b      	lsls	r3, r3, #2
 800f33a:	4413      	add	r3, r2
 800f33c:	005b      	lsls	r3, r3, #1
 800f33e:	9301      	str	r3, [sp, #4]
 800f340:	9400      	str	r4, [sp, #0]
 800f342:	4602      	mov	r2, r0
 800f344:	460b      	mov	r3, r1
 800f346:	4865      	ldr	r0, [pc, #404]	@ (800f4dc <SVCCTL_App_Notification+0x320>)
 800f348:	f002 fb88 	bl	8011a5c <iprintf>
          break;
 800f34c:	e087      	b.n	800f45e <SVCCTL_App_Notification+0x2a2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800f34e:	69bb      	ldr	r3, [r7, #24]
 800f350:	3301      	adds	r3, #1
 800f352:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800f354:	4857      	ldr	r0, [pc, #348]	@ (800f4b4 <SVCCTL_App_Notification+0x2f8>)
 800f356:	f7ff f8ed 	bl	800e534 <DbgTraceGetFileName>
 800f35a:	4601      	mov	r1, r0
 800f35c:	f240 2303 	movw	r3, #515	@ 0x203
 800f360:	4a55      	ldr	r2, [pc, #340]	@ (800f4b8 <SVCCTL_App_Notification+0x2fc>)
 800f362:	4856      	ldr	r0, [pc, #344]	@ (800f4bc <SVCCTL_App_Notification+0x300>)
 800f364:	f002 fb7a 	bl	8011a5c <iprintf>
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f36e:	b29b      	uxth	r3, r3
 800f370:	4619      	mov	r1, r3
 800f372:	485b      	ldr	r0, [pc, #364]	@ (800f4e0 <SVCCTL_App_Notification+0x324>)
 800f374:	f002 fb72 	bl	8011a5c <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800f378:	484e      	ldr	r0, [pc, #312]	@ (800f4b4 <SVCCTL_App_Notification+0x2f8>)
 800f37a:	f7ff f8db 	bl	800e534 <DbgTraceGetFileName>
 800f37e:	4601      	mov	r1, r0
 800f380:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800f384:	4a4c      	ldr	r2, [pc, #304]	@ (800f4b8 <SVCCTL_App_Notification+0x2fc>)
 800f386:	484d      	ldr	r0, [pc, #308]	@ (800f4bc <SVCCTL_App_Notification+0x300>)
 800f388:	f002 fb68 	bl	8011a5c <iprintf>
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	7a9b      	ldrb	r3, [r3, #10]
 800f390:	4618      	mov	r0, r3
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	7a5b      	ldrb	r3, [r3, #9]
 800f396:	461c      	mov	r4, r3
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	7a1b      	ldrb	r3, [r3, #8]
 800f39c:	461d      	mov	r5, r3
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	79db      	ldrb	r3, [r3, #7]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	799b      	ldrb	r3, [r3, #6]
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	795b      	ldrb	r3, [r3, #5]
 800f3ae:	9302      	str	r3, [sp, #8]
 800f3b0:	9101      	str	r1, [sp, #4]
 800f3b2:	9200      	str	r2, [sp, #0]
 800f3b4:	462b      	mov	r3, r5
 800f3b6:	4622      	mov	r2, r4
 800f3b8:	4601      	mov	r1, r0
 800f3ba:	484a      	ldr	r0, [pc, #296]	@ (800f4e4 <SVCCTL_App_Notification+0x328>)
 800f3bc:	f002 fb4e 	bl	8011a5c <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800f3c0:	483c      	ldr	r0, [pc, #240]	@ (800f4b4 <SVCCTL_App_Notification+0x2f8>)
 800f3c2:	f7ff f8b7 	bl	800e534 <DbgTraceGetFileName>
 800f3c6:	4601      	mov	r1, r0
 800f3c8:	f240 230b 	movw	r3, #523	@ 0x20b
 800f3cc:	4a3a      	ldr	r2, [pc, #232]	@ (800f4b8 <SVCCTL_App_Notification+0x2fc>)
 800f3ce:	483b      	ldr	r0, [pc, #236]	@ (800f4bc <SVCCTL_App_Notification+0x300>)
 800f3d0:	f002 fb44 	bl	8011a5c <iprintf>
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7f1 f879 	bl	80004d4 <__aeabi_i2d>
 800f3e2:	f04f 0200 	mov.w	r2, #0
 800f3e6:	4b3c      	ldr	r3, [pc, #240]	@ (800f4d8 <SVCCTL_App_Notification+0x31c>)
 800f3e8:	f7f1 f8de 	bl	80005a8 <__aeabi_dmul>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	460b      	mov	r3, r1
 800f3f0:	4610      	mov	r0, r2
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	461c      	mov	r4, r3
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800f404:	b29b      	uxth	r3, r3
 800f406:	461a      	mov	r2, r3
 800f408:	4613      	mov	r3, r2
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	4413      	add	r3, r2
 800f40e:	005b      	lsls	r3, r3, #1
 800f410:	9301      	str	r3, [sp, #4]
 800f412:	9400      	str	r4, [sp, #0]
 800f414:	4602      	mov	r2, r0
 800f416:	460b      	mov	r3, r1
 800f418:	4830      	ldr	r0, [pc, #192]	@ (800f4dc <SVCCTL_App_Notification+0x320>)
 800f41a:	f002 fb1f 	bl	8011a5c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800f41e:	4b24      	ldr	r3, [pc, #144]	@ (800f4b0 <SVCCTL_App_Notification+0x2f4>)
 800f420:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f424:	2b04      	cmp	r3, #4
 800f426:	d104      	bne.n	800f432 <SVCCTL_App_Notification+0x276>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800f428:	4b21      	ldr	r3, [pc, #132]	@ (800f4b0 <SVCCTL_App_Notification+0x2f4>)
 800f42a:	2206      	movs	r2, #6
 800f42c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800f430:	e003      	b.n	800f43a <SVCCTL_App_Notification+0x27e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800f432:	4b1f      	ldr	r3, [pc, #124]	@ (800f4b0 <SVCCTL_App_Notification+0x2f4>)
 800f434:	2205      	movs	r2, #5
 800f436:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f440:	b29a      	uxth	r2, r3
 800f442:	4b1b      	ldr	r3, [pc, #108]	@ (800f4b0 <SVCCTL_App_Notification+0x2f4>)
 800f444:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800f446:	4b20      	ldr	r3, [pc, #128]	@ (800f4c8 <SVCCTL_App_Notification+0x30c>)
 800f448:	2200      	movs	r2, #0
 800f44a:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f44c:	4b18      	ldr	r3, [pc, #96]	@ (800f4b0 <SVCCTL_App_Notification+0x2f4>)
 800f44e:	8ada      	ldrh	r2, [r3, #22]
 800f450:	4b1d      	ldr	r3, [pc, #116]	@ (800f4c8 <SVCCTL_App_Notification+0x30c>)
 800f452:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800f454:	481c      	ldr	r0, [pc, #112]	@ (800f4c8 <SVCCTL_App_Notification+0x30c>)
 800f456:	f000 fdf7 	bl	8010048 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800f45a:	e000      	b.n	800f45e <SVCCTL_App_Notification+0x2a2>
          break;
 800f45c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800f45e:	e18f      	b.n	800f780 <SVCCTL_App_Notification+0x5c4>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800f460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f462:	3302      	adds	r3, #2
 800f464:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 800f466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f468:	881b      	ldrh	r3, [r3, #0]
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800f470:	4293      	cmp	r3, r2
 800f472:	f000 814a 	beq.w	800f70a <SVCCTL_App_Notification+0x54e>
 800f476:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800f47a:	4293      	cmp	r3, r2
 800f47c:	f300 817f 	bgt.w	800f77e <SVCCTL_App_Notification+0x5c2>
 800f480:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f484:	f000 8175 	beq.w	800f772 <SVCCTL_App_Notification+0x5b6>
 800f488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f48c:	f300 8177 	bgt.w	800f77e <SVCCTL_App_Notification+0x5c2>
 800f490:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f494:	4293      	cmp	r3, r2
 800f496:	f300 8172 	bgt.w	800f77e <SVCCTL_App_Notification+0x5c2>
 800f49a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f49e:	dc23      	bgt.n	800f4e8 <SVCCTL_App_Notification+0x32c>
 800f4a0:	2b04      	cmp	r3, #4
 800f4a2:	f000 8168 	beq.w	800f776 <SVCCTL_App_Notification+0x5ba>
 800f4a6:	2b06      	cmp	r3, #6
 800f4a8:	f000 8142 	beq.w	800f730 <SVCCTL_App_Notification+0x574>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f4ac:	e167      	b.n	800f77e <SVCCTL_App_Notification+0x5c2>
 800f4ae:	bf00      	nop
 800f4b0:	2000057c 	.word	0x2000057c
 800f4b4:	08012c98 	.word	0x08012c98
 800f4b8:	08014110 	.word	0x08014110
 800f4bc:	08012cb4 	.word	0x08012cb4
 800f4c0:	08012de0 	.word	0x08012de0
 800f4c4:	08012e0c 	.word	0x08012e0c
 800f4c8:	20000600 	.word	0x20000600
 800f4cc:	08012e48 	.word	0x08012e48
 800f4d0:	08012e6c 	.word	0x08012e6c
 800f4d4:	08012e84 	.word	0x08012e84
 800f4d8:	3ff40000 	.word	0x3ff40000
 800f4dc:	08012eb8 	.word	0x08012eb8
 800f4e0:	08012f24 	.word	0x08012f24
 800f4e4:	08012f6c 	.word	0x08012f6c
      switch (p_blecore_evt->ecode)
 800f4e8:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800f4ec:	2b09      	cmp	r3, #9
 800f4ee:	f200 8146 	bhi.w	800f77e <SVCCTL_App_Notification+0x5c2>
 800f4f2:	a201      	add	r2, pc, #4	@ (adr r2, 800f4f8 <SVCCTL_App_Notification+0x33c>)
 800f4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4f8:	0800f685 	.word	0x0800f685
 800f4fc:	0800f559 	.word	0x0800f559
 800f500:	0800f77f 	.word	0x0800f77f
 800f504:	0800f77f 	.word	0x0800f77f
 800f508:	0800f77f 	.word	0x0800f77f
 800f50c:	0800f77f 	.word	0x0800f77f
 800f510:	0800f521 	.word	0x0800f521
 800f514:	0800f77f 	.word	0x0800f77f
 800f518:	0800f5cb 	.word	0x0800f5cb
 800f51c:	0800f53d 	.word	0x0800f53d
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800f520:	489a      	ldr	r0, [pc, #616]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f522:	f7ff f807 	bl	800e534 <DbgTraceGetFileName>
 800f526:	4601      	mov	r1, r0
 800f528:	f240 234d 	movw	r3, #589	@ 0x24d
 800f52c:	4a98      	ldr	r2, [pc, #608]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f52e:	4899      	ldr	r0, [pc, #612]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f530:	f002 fa94 	bl	8011a5c <iprintf>
 800f534:	4898      	ldr	r0, [pc, #608]	@ (800f798 <SVCCTL_App_Notification+0x5dc>)
 800f536:	f002 fa91 	bl	8011a5c <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800f53a:	e11d      	b.n	800f778 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800f53c:	4893      	ldr	r0, [pc, #588]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f53e:	f7fe fff9 	bl	800e534 <DbgTraceGetFileName>
 800f542:	4601      	mov	r1, r0
 800f544:	f240 235d 	movw	r3, #605	@ 0x25d
 800f548:	4a91      	ldr	r2, [pc, #580]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f54a:	4892      	ldr	r0, [pc, #584]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f54c:	f002 fa86 	bl	8011a5c <iprintf>
 800f550:	4892      	ldr	r0, [pc, #584]	@ (800f79c <SVCCTL_App_Notification+0x5e0>)
 800f552:	f002 faf3 	bl	8011b3c <puts>
          break;
 800f556:	e10f      	b.n	800f778 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800f558:	488c      	ldr	r0, [pc, #560]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f55a:	f7fe ffeb 	bl	800e534 <DbgTraceGetFileName>
 800f55e:	4601      	mov	r1, r0
 800f560:	f44f 7319 	mov.w	r3, #612	@ 0x264
 800f564:	4a8a      	ldr	r2, [pc, #552]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f566:	488b      	ldr	r0, [pc, #556]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f568:	f002 fa78 	bl	8011a5c <iprintf>
 800f56c:	488c      	ldr	r0, [pc, #560]	@ (800f7a0 <SVCCTL_App_Notification+0x5e4>)
 800f56e:	f002 fae5 	bl	8011b3c <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800f572:	4b8c      	ldr	r3, [pc, #560]	@ (800f7a4 <SVCCTL_App_Notification+0x5e8>)
 800f574:	8adb      	ldrh	r3, [r3, #22]
 800f576:	498c      	ldr	r1, [pc, #560]	@ (800f7a8 <SVCCTL_App_Notification+0x5ec>)
 800f578:	4618      	mov	r0, r3
 800f57a:	f7fd f99d 	bl	800c8b8 <aci_gap_pass_key_resp>
 800f57e:	4603      	mov	r3, r0
 800f580:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800f584:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d010      	beq.n	800f5ae <SVCCTL_App_Notification+0x3f2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800f58c:	487f      	ldr	r0, [pc, #508]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f58e:	f7fe ffd1 	bl	800e534 <DbgTraceGetFileName>
 800f592:	4601      	mov	r1, r0
 800f594:	f240 2369 	movw	r3, #617	@ 0x269
 800f598:	4a7d      	ldr	r2, [pc, #500]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f59a:	487e      	ldr	r0, [pc, #504]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f59c:	f002 fa5e 	bl	8011a5c <iprintf>
 800f5a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	4881      	ldr	r0, [pc, #516]	@ (800f7ac <SVCCTL_App_Notification+0x5f0>)
 800f5a8:	f002 fa58 	bl	8011a5c <iprintf>
          break;
 800f5ac:	e0e4      	b.n	800f778 <SVCCTL_App_Notification+0x5bc>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800f5ae:	4877      	ldr	r0, [pc, #476]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f5b0:	f7fe ffc0 	bl	800e534 <DbgTraceGetFileName>
 800f5b4:	4601      	mov	r1, r0
 800f5b6:	f240 236d 	movw	r3, #621	@ 0x26d
 800f5ba:	4a75      	ldr	r2, [pc, #468]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f5bc:	4875      	ldr	r0, [pc, #468]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f5be:	f002 fa4d 	bl	8011a5c <iprintf>
 800f5c2:	487b      	ldr	r0, [pc, #492]	@ (800f7b0 <SVCCTL_App_Notification+0x5f4>)
 800f5c4:	f002 faba 	bl	8011b3c <puts>
          break;
 800f5c8:	e0d6      	b.n	800f778 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800f5ca:	4870      	ldr	r0, [pc, #448]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f5cc:	f7fe ffb2 	bl	800e534 <DbgTraceGetFileName>
 800f5d0:	4601      	mov	r1, r0
 800f5d2:	f240 2375 	movw	r3, #629	@ 0x275
 800f5d6:	4a6e      	ldr	r2, [pc, #440]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f5d8:	486e      	ldr	r0, [pc, #440]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f5da:	f002 fa3f 	bl	8011a5c <iprintf>
 800f5de:	4875      	ldr	r0, [pc, #468]	@ (800f7b4 <SVCCTL_App_Notification+0x5f8>)
 800f5e0:	f002 faac 	bl	8011b3c <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800f5e4:	4869      	ldr	r0, [pc, #420]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f5e6:	f7fe ffa5 	bl	800e534 <DbgTraceGetFileName>
 800f5ea:	4601      	mov	r1, r0
 800f5ec:	f240 2376 	movw	r3, #630	@ 0x276
 800f5f0:	4a67      	ldr	r2, [pc, #412]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f5f2:	4868      	ldr	r0, [pc, #416]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f5f4:	f002 fa32 	bl	8011a5c <iprintf>
 800f5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5fa:	3302      	adds	r3, #2
 800f5fc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f600:	4619      	mov	r1, r3
 800f602:	486d      	ldr	r0, [pc, #436]	@ (800f7b8 <SVCCTL_App_Notification+0x5fc>)
 800f604:	f002 fa2a 	bl	8011a5c <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800f608:	4860      	ldr	r0, [pc, #384]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f60a:	f7fe ff93 	bl	800e534 <DbgTraceGetFileName>
 800f60e:	4601      	mov	r1, r0
 800f610:	f44f 731e 	mov.w	r3, #632	@ 0x278
 800f614:	4a5e      	ldr	r2, [pc, #376]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f616:	485f      	ldr	r0, [pc, #380]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f618:	f002 fa20 	bl	8011a5c <iprintf>
 800f61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f61e:	3302      	adds	r3, #2
 800f620:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f624:	4619      	mov	r1, r3
 800f626:	4865      	ldr	r0, [pc, #404]	@ (800f7bc <SVCCTL_App_Notification+0x600>)
 800f628:	f002 fa18 	bl	8011a5c <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800f62c:	4b5d      	ldr	r3, [pc, #372]	@ (800f7a4 <SVCCTL_App_Notification+0x5e8>)
 800f62e:	8adb      	ldrh	r3, [r3, #22]
 800f630:	2101      	movs	r1, #1
 800f632:	4618      	mov	r0, r3
 800f634:	f7fd faea 	bl	800cc0c <aci_gap_numeric_comparison_value_confirm_yesno>
 800f638:	4603      	mov	r3, r0
 800f63a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800f63e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f642:	2b00      	cmp	r3, #0
 800f644:	d010      	beq.n	800f668 <SVCCTL_App_Notification+0x4ac>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800f646:	4851      	ldr	r0, [pc, #324]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f648:	f7fe ff74 	bl	800e534 <DbgTraceGetFileName>
 800f64c:	4601      	mov	r1, r0
 800f64e:	f240 237d 	movw	r3, #637	@ 0x27d
 800f652:	4a4f      	ldr	r2, [pc, #316]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f654:	484f      	ldr	r0, [pc, #316]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f656:	f002 fa01 	bl	8011a5c <iprintf>
 800f65a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f65e:	4619      	mov	r1, r3
 800f660:	4857      	ldr	r0, [pc, #348]	@ (800f7c0 <SVCCTL_App_Notification+0x604>)
 800f662:	f002 f9fb 	bl	8011a5c <iprintf>
          break;
 800f666:	e087      	b.n	800f778 <SVCCTL_App_Notification+0x5bc>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800f668:	4848      	ldr	r0, [pc, #288]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f66a:	f7fe ff63 	bl	800e534 <DbgTraceGetFileName>
 800f66e:	4601      	mov	r1, r0
 800f670:	f240 2381 	movw	r3, #641	@ 0x281
 800f674:	4a46      	ldr	r2, [pc, #280]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f676:	4847      	ldr	r0, [pc, #284]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f678:	f002 f9f0 	bl	8011a5c <iprintf>
 800f67c:	4851      	ldr	r0, [pc, #324]	@ (800f7c4 <SVCCTL_App_Notification+0x608>)
 800f67e:	f002 fa5d 	bl	8011b3c <puts>
          break;
 800f682:	e079      	b.n	800f778 <SVCCTL_App_Notification+0x5bc>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800f684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f686:	3302      	adds	r3, #2
 800f688:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800f68a:	4840      	ldr	r0, [pc, #256]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f68c:	f7fe ff52 	bl	800e534 <DbgTraceGetFileName>
 800f690:	4601      	mov	r1, r0
 800f692:	f240 238b 	movw	r3, #651	@ 0x28b
 800f696:	4a3e      	ldr	r2, [pc, #248]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f698:	483e      	ldr	r0, [pc, #248]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f69a:	f002 f9df 	bl	8011a5c <iprintf>
 800f69e:	484a      	ldr	r0, [pc, #296]	@ (800f7c8 <SVCCTL_App_Notification+0x60c>)
 800f6a0:	f002 fa4c 	bl	8011b3c <puts>
          if (p_pairing_complete->Status != 0)
 800f6a4:	6a3b      	ldr	r3, [r7, #32]
 800f6a6:	789b      	ldrb	r3, [r3, #2]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d013      	beq.n	800f6d4 <SVCCTL_App_Notification+0x518>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800f6ac:	4837      	ldr	r0, [pc, #220]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f6ae:	f7fe ff41 	bl	800e534 <DbgTraceGetFileName>
 800f6b2:	4601      	mov	r1, r0
 800f6b4:	f240 238e 	movw	r3, #654	@ 0x28e
 800f6b8:	4a35      	ldr	r2, [pc, #212]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f6ba:	4836      	ldr	r0, [pc, #216]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f6bc:	f002 f9ce 	bl	8011a5c <iprintf>
 800f6c0:	6a3b      	ldr	r3, [r7, #32]
 800f6c2:	789b      	ldrb	r3, [r3, #2]
 800f6c4:	4619      	mov	r1, r3
 800f6c6:	6a3b      	ldr	r3, [r7, #32]
 800f6c8:	78db      	ldrb	r3, [r3, #3]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	483f      	ldr	r0, [pc, #252]	@ (800f7cc <SVCCTL_App_Notification+0x610>)
 800f6ce:	f002 f9c5 	bl	8011a5c <iprintf>
 800f6d2:	e00c      	b.n	800f6ee <SVCCTL_App_Notification+0x532>
            APP_DBG_MSG("     - Pairing Success\n");
 800f6d4:	482d      	ldr	r0, [pc, #180]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f6d6:	f7fe ff2d 	bl	800e534 <DbgTraceGetFileName>
 800f6da:	4601      	mov	r1, r0
 800f6dc:	f240 2392 	movw	r3, #658	@ 0x292
 800f6e0:	4a2b      	ldr	r2, [pc, #172]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f6e2:	482c      	ldr	r0, [pc, #176]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f6e4:	f002 f9ba 	bl	8011a5c <iprintf>
 800f6e8:	4839      	ldr	r0, [pc, #228]	@ (800f7d0 <SVCCTL_App_Notification+0x614>)
 800f6ea:	f002 fa27 	bl	8011b3c <puts>
          APP_DBG_MSG("\n");
 800f6ee:	4827      	ldr	r0, [pc, #156]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f6f0:	f7fe ff20 	bl	800e534 <DbgTraceGetFileName>
 800f6f4:	4601      	mov	r1, r0
 800f6f6:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800f6fa:	4a25      	ldr	r2, [pc, #148]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f6fc:	4825      	ldr	r0, [pc, #148]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f6fe:	f002 f9ad 	bl	8011a5c <iprintf>
 800f702:	200a      	movs	r0, #10
 800f704:	f002 f9bc 	bl	8011a80 <putchar>
          break;
 800f708:	e036      	b.n	800f778 <SVCCTL_App_Notification+0x5bc>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800f70a:	4820      	ldr	r0, [pc, #128]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f70c:	f7fe ff12 	bl	800e534 <DbgTraceGetFileName>
 800f710:	4601      	mov	r1, r0
 800f712:	f240 239d 	movw	r3, #669	@ 0x29d
 800f716:	4a1e      	ldr	r2, [pc, #120]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f718:	481e      	ldr	r0, [pc, #120]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f71a:	f002 f99f 	bl	8011a5c <iprintf>
 800f71e:	482d      	ldr	r0, [pc, #180]	@ (800f7d4 <SVCCTL_App_Notification+0x618>)
 800f720:	f002 f99c 	bl	8011a5c <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800f724:	4b1f      	ldr	r3, [pc, #124]	@ (800f7a4 <SVCCTL_App_Notification+0x5e8>)
 800f726:	8adb      	ldrh	r3, [r3, #22]
 800f728:	4618      	mov	r0, r3
 800f72a:	f7fd fd82 	bl	800d232 <aci_gatt_confirm_indication>
        break;
 800f72e:	e023      	b.n	800f778 <SVCCTL_App_Notification+0x5bc>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 800f730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f732:	3302      	adds	r3, #2
 800f734:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG(">>== ACI_HAL_WARNING_VSEVT_CODE\n");
 800f736:	4815      	ldr	r0, [pc, #84]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f738:	f7fe fefc 	bl	800e534 <DbgTraceGetFileName>
 800f73c:	4601      	mov	r1, r0
 800f73e:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 800f742:	4a13      	ldr	r2, [pc, #76]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f744:	4813      	ldr	r0, [pc, #76]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f746:	f002 f989 	bl	8011a5c <iprintf>
 800f74a:	4823      	ldr	r0, [pc, #140]	@ (800f7d8 <SVCCTL_App_Notification+0x61c>)
 800f74c:	f002 f9f6 	bl	8011b3c <puts>
          APP_DBG_MSG("Warning Type = 0x%02X\n", p_warning_event->Warning_Type);
 800f750:	480e      	ldr	r0, [pc, #56]	@ (800f78c <SVCCTL_App_Notification+0x5d0>)
 800f752:	f7fe feef 	bl	800e534 <DbgTraceGetFileName>
 800f756:	4601      	mov	r1, r0
 800f758:	f240 23a9 	movw	r3, #681	@ 0x2a9
 800f75c:	4a0c      	ldr	r2, [pc, #48]	@ (800f790 <SVCCTL_App_Notification+0x5d4>)
 800f75e:	480d      	ldr	r0, [pc, #52]	@ (800f794 <SVCCTL_App_Notification+0x5d8>)
 800f760:	f002 f97c 	bl	8011a5c <iprintf>
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	4619      	mov	r1, r3
 800f76a:	481c      	ldr	r0, [pc, #112]	@ (800f7dc <SVCCTL_App_Notification+0x620>)
 800f76c:	f002 f976 	bl	8011a5c <iprintf>
          break;
 800f770:	e002      	b.n	800f778 <SVCCTL_App_Notification+0x5bc>
          break;
 800f772:	bf00      	nop
 800f774:	e003      	b.n	800f77e <SVCCTL_App_Notification+0x5c2>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800f776:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f778:	e001      	b.n	800f77e <SVCCTL_App_Notification+0x5c2>
      break;
 800f77a:	bf00      	nop
 800f77c:	e000      	b.n	800f780 <SVCCTL_App_Notification+0x5c4>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f77e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800f780:	2301      	movs	r3, #1
}
 800f782:	4618      	mov	r0, r3
 800f784:	3730      	adds	r7, #48	@ 0x30
 800f786:	46bd      	mov	sp, r7
 800f788:	bdb0      	pop	{r4, r5, r7, pc}
 800f78a:	bf00      	nop
 800f78c:	08012c98 	.word	0x08012c98
 800f790:	08014110 	.word	0x08014110
 800f794:	08012cb4 	.word	0x08012cb4
 800f798:	08012fbc 	.word	0x08012fbc
 800f79c:	08012fe4 	.word	0x08012fe4
 800f7a0:	08013014 	.word	0x08013014
 800f7a4:	2000057c 	.word	0x2000057c
 800f7a8:	0001b207 	.word	0x0001b207
 800f7ac:	0801303c 	.word	0x0801303c
 800f7b0:	08013070 	.word	0x08013070
 800f7b4:	08013098 	.word	0x08013098
 800f7b8:	080130cc 	.word	0x080130cc
 800f7bc:	080130e8 	.word	0x080130e8
 800f7c0:	08013100 	.word	0x08013100
 800f7c4:	08013150 	.word	0x08013150
 800f7c8:	08013198 	.word	0x08013198
 800f7cc:	080131c4 	.word	0x080131c4
 800f7d0:	08013200 	.word	0x08013200
 800f7d4:	08013218 	.word	0x08013218
 800f7d8:	08013240 	.word	0x08013240
 800f7dc:	08013260 	.word	0x08013260

0800f7e0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800f7e6:	4b06      	ldr	r3, [pc, #24]	@ (800f800 <Ble_Tl_Init+0x20>)
 800f7e8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800f7ea:	4b06      	ldr	r3, [pc, #24]	@ (800f804 <Ble_Tl_Init+0x24>)
 800f7ec:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800f7ee:	463b      	mov	r3, r7
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	4805      	ldr	r0, [pc, #20]	@ (800f808 <Ble_Tl_Init+0x28>)
 800f7f4:	f7fe f982 	bl	800dafc <hci_init>

  return;
 800f7f8:	bf00      	nop
}
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	200300d8 	.word	0x200300d8
 800f804:	0800ffd5 	.word	0x0800ffd5
 800f808:	0800ff9d 	.word	0x0800ff9d

0800f80c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800f80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f80e:	b08d      	sub	sp, #52	@ 0x34
 800f810:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800f812:	2300      	movs	r3, #0
 800f814:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f816:	2392      	movs	r3, #146	@ 0x92
 800f818:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800f81a:	48a3      	ldr	r0, [pc, #652]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f81c:	f7fe fe8a 	bl	800e534 <DbgTraceGetFileName>
 800f820:	4601      	mov	r1, r0
 800f822:	f240 23e7 	movw	r3, #743	@ 0x2e7
 800f826:	4aa1      	ldr	r2, [pc, #644]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f828:	48a1      	ldr	r0, [pc, #644]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f82a:	f002 f917 	bl	8011a5c <iprintf>
 800f82e:	48a1      	ldr	r0, [pc, #644]	@ (800fab4 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800f830:	f002 f984 	bl	8011b3c <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800f834:	f7fd fe92 	bl	800d55c <hci_reset>
 800f838:	4603      	mov	r3, r0
 800f83a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f83c:	7dfb      	ldrb	r3, [r7, #23]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00f      	beq.n	800f862 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800f842:	4899      	ldr	r0, [pc, #612]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f844:	f7fe fe76 	bl	800e534 <DbgTraceGetFileName>
 800f848:	4601      	mov	r1, r0
 800f84a:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 800f84e:	4a97      	ldr	r2, [pc, #604]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f850:	4897      	ldr	r0, [pc, #604]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f852:	f002 f903 	bl	8011a5c <iprintf>
 800f856:	7dfb      	ldrb	r3, [r7, #23]
 800f858:	4619      	mov	r1, r3
 800f85a:	4897      	ldr	r0, [pc, #604]	@ (800fab8 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800f85c:	f002 f8fe 	bl	8011a5c <iprintf>
 800f860:	e00c      	b.n	800f87c <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800f862:	4891      	ldr	r0, [pc, #580]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f864:	f7fe fe66 	bl	800e534 <DbgTraceGetFileName>
 800f868:	4601      	mov	r1, r0
 800f86a:	f44f 733d 	mov.w	r3, #756	@ 0x2f4
 800f86e:	4a8f      	ldr	r2, [pc, #572]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f870:	488f      	ldr	r0, [pc, #572]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f872:	f002 f8f3 	bl	8011a5c <iprintf>
 800f876:	4891      	ldr	r0, [pc, #580]	@ (800fabc <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800f878:	f002 f960 	bl	8011b3c <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800f87c:	f000 fad8 	bl	800fe30 <BleGetBdAddress>
 800f880:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 800f882:	693a      	ldr	r2, [r7, #16]
 800f884:	2106      	movs	r1, #6
 800f886:	2000      	movs	r0, #0
 800f888:	f7fd fd28 	bl	800d2dc <aci_hal_write_config_data>
 800f88c:	4603      	mov	r3, r0
 800f88e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f890:	7dfb      	ldrb	r3, [r7, #23]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00f      	beq.n	800f8b6 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, result: 0x%x \n", ret);
 800f896:	4884      	ldr	r0, [pc, #528]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f898:	f7fe fe4c 	bl	800e534 <DbgTraceGetFileName>
 800f89c:	4601      	mov	r1, r0
 800f89e:	f240 23fe 	movw	r3, #766	@ 0x2fe
 800f8a2:	4a82      	ldr	r2, [pc, #520]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f8a4:	4882      	ldr	r0, [pc, #520]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f8a6:	f002 f8d9 	bl	8011a5c <iprintf>
 800f8aa:	7dfb      	ldrb	r3, [r7, #23]
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	4884      	ldr	r0, [pc, #528]	@ (800fac0 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800f8b0:	f002 f8d4 	bl	8011a5c <iprintf>
 800f8b4:	e035      	b.n	800f922 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBLIC_ADDRESS_OFFSET\n");
 800f8b6:	487c      	ldr	r0, [pc, #496]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f8b8:	f7fe fe3c 	bl	800e534 <DbgTraceGetFileName>
 800f8bc:	4601      	mov	r1, r0
 800f8be:	f240 3302 	movw	r3, #770	@ 0x302
 800f8c2:	4a7a      	ldr	r2, [pc, #488]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f8c4:	487a      	ldr	r0, [pc, #488]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f8c6:	f002 f8c9 	bl	8011a5c <iprintf>
 800f8ca:	487e      	ldr	r0, [pc, #504]	@ (800fac4 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800f8cc:	f002 f936 	bl	8011b3c <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800f8d0:	4875      	ldr	r0, [pc, #468]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f8d2:	f7fe fe2f 	bl	800e534 <DbgTraceGetFileName>
 800f8d6:	4601      	mov	r1, r0
 800f8d8:	f240 3303 	movw	r3, #771	@ 0x303
 800f8dc:	4a73      	ldr	r2, [pc, #460]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f8de:	4874      	ldr	r0, [pc, #464]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f8e0:	f002 f8bc 	bl	8011a5c <iprintf>
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	3305      	adds	r3, #5
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	3304      	adds	r3, #4
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	461c      	mov	r4, r3
 800f8f4:	693b      	ldr	r3, [r7, #16]
 800f8f6:	3303      	adds	r3, #3
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	461d      	mov	r5, r3
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	3302      	adds	r3, #2
 800f900:	781b      	ldrb	r3, [r3, #0]
 800f902:	461a      	mov	r2, r3
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	3301      	adds	r3, #1
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	4619      	mov	r1, r3
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	9302      	str	r3, [sp, #8]
 800f912:	9101      	str	r1, [sp, #4]
 800f914:	9200      	str	r2, [sp, #0]
 800f916:	462b      	mov	r3, r5
 800f918:	4622      	mov	r2, r4
 800f91a:	4601      	mov	r1, r0
 800f91c:	486a      	ldr	r0, [pc, #424]	@ (800fac8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800f91e:	f002 f89d 	bl	8011a5c <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800f922:	4a6a      	ldr	r2, [pc, #424]	@ (800facc <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800f924:	2110      	movs	r1, #16
 800f926:	2018      	movs	r0, #24
 800f928:	f7fd fcd8 	bl	800d2dc <aci_hal_write_config_data>
 800f92c:	4603      	mov	r3, r0
 800f92e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f930:	7dfb      	ldrb	r3, [r7, #23]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d00f      	beq.n	800f956 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800f936:	485c      	ldr	r0, [pc, #368]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f938:	f7fe fdfc 	bl	800e534 <DbgTraceGetFileName>
 800f93c:	4601      	mov	r1, r0
 800f93e:	f240 3325 	movw	r3, #805	@ 0x325
 800f942:	4a5a      	ldr	r2, [pc, #360]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f944:	485a      	ldr	r0, [pc, #360]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f946:	f002 f889 	bl	8011a5c <iprintf>
 800f94a:	7dfb      	ldrb	r3, [r7, #23]
 800f94c:	4619      	mov	r1, r3
 800f94e:	4860      	ldr	r0, [pc, #384]	@ (800fad0 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800f950:	f002 f884 	bl	8011a5c <iprintf>
 800f954:	e00c      	b.n	800f970 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800f956:	4854      	ldr	r0, [pc, #336]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f958:	f7fe fdec 	bl	800e534 <DbgTraceGetFileName>
 800f95c:	4601      	mov	r1, r0
 800f95e:	f240 3329 	movw	r3, #809	@ 0x329
 800f962:	4a52      	ldr	r2, [pc, #328]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f964:	4852      	ldr	r0, [pc, #328]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f966:	f002 f879 	bl	8011a5c <iprintf>
 800f96a:	485a      	ldr	r0, [pc, #360]	@ (800fad4 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800f96c:	f002 f8e6 	bl	8011b3c <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800f970:	4a59      	ldr	r2, [pc, #356]	@ (800fad8 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800f972:	2110      	movs	r1, #16
 800f974:	2008      	movs	r0, #8
 800f976:	f7fd fcb1 	bl	800d2dc <aci_hal_write_config_data>
 800f97a:	4603      	mov	r3, r0
 800f97c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f97e:	7dfb      	ldrb	r3, [r7, #23]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d00f      	beq.n	800f9a4 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800f984:	4848      	ldr	r0, [pc, #288]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f986:	f7fe fdd5 	bl	800e534 <DbgTraceGetFileName>
 800f98a:	4601      	mov	r1, r0
 800f98c:	f240 3332 	movw	r3, #818	@ 0x332
 800f990:	4a46      	ldr	r2, [pc, #280]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f992:	4847      	ldr	r0, [pc, #284]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f994:	f002 f862 	bl	8011a5c <iprintf>
 800f998:	7dfb      	ldrb	r3, [r7, #23]
 800f99a:	4619      	mov	r1, r3
 800f99c:	484f      	ldr	r0, [pc, #316]	@ (800fadc <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800f99e:	f002 f85d 	bl	8011a5c <iprintf>
 800f9a2:	e00c      	b.n	800f9be <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800f9a4:	4840      	ldr	r0, [pc, #256]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f9a6:	f7fe fdc5 	bl	800e534 <DbgTraceGetFileName>
 800f9aa:	4601      	mov	r1, r0
 800f9ac:	f240 3336 	movw	r3, #822	@ 0x336
 800f9b0:	4a3e      	ldr	r2, [pc, #248]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f9b2:	483f      	ldr	r0, [pc, #252]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f9b4:	f002 f852 	bl	8011a5c <iprintf>
 800f9b8:	4849      	ldr	r0, [pc, #292]	@ (800fae0 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800f9ba:	f002 f8bf 	bl	8011b3c <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800f9be:	2118      	movs	r1, #24
 800f9c0:	2001      	movs	r0, #1
 800f9c2:	f7fd fd10 	bl	800d3e6 <aci_hal_set_tx_power_level>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f9ca:	7dfb      	ldrb	r3, [r7, #23]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d00f      	beq.n	800f9f0 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800f9d0:	4835      	ldr	r0, [pc, #212]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f9d2:	f7fe fdaf 	bl	800e534 <DbgTraceGetFileName>
 800f9d6:	4601      	mov	r1, r0
 800f9d8:	f240 333f 	movw	r3, #831	@ 0x33f
 800f9dc:	4a33      	ldr	r2, [pc, #204]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f9de:	4834      	ldr	r0, [pc, #208]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f9e0:	f002 f83c 	bl	8011a5c <iprintf>
 800f9e4:	7dfb      	ldrb	r3, [r7, #23]
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	483e      	ldr	r0, [pc, #248]	@ (800fae4 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800f9ea:	f002 f837 	bl	8011a5c <iprintf>
 800f9ee:	e00c      	b.n	800fa0a <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800f9f0:	482d      	ldr	r0, [pc, #180]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f9f2:	f7fe fd9f 	bl	800e534 <DbgTraceGetFileName>
 800f9f6:	4601      	mov	r1, r0
 800f9f8:	f240 3343 	movw	r3, #835	@ 0x343
 800f9fc:	4a2b      	ldr	r2, [pc, #172]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f9fe:	482c      	ldr	r0, [pc, #176]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800fa00:	f002 f82c 	bl	8011a5c <iprintf>
 800fa04:	4838      	ldr	r0, [pc, #224]	@ (800fae8 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800fa06:	f002 f899 	bl	8011b3c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800fa0a:	f7fd f966 	bl	800ccda <aci_gatt_init>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800fa12:	7dfb      	ldrb	r3, [r7, #23]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d00f      	beq.n	800fa38 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800fa18:	4823      	ldr	r0, [pc, #140]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800fa1a:	f7fe fd8b 	bl	800e534 <DbgTraceGetFileName>
 800fa1e:	4601      	mov	r1, r0
 800fa20:	f44f 7353 	mov.w	r3, #844	@ 0x34c
 800fa24:	4a21      	ldr	r2, [pc, #132]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800fa26:	4822      	ldr	r0, [pc, #136]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800fa28:	f002 f818 	bl	8011a5c <iprintf>
 800fa2c:	7dfb      	ldrb	r3, [r7, #23]
 800fa2e:	4619      	mov	r1, r3
 800fa30:	482e      	ldr	r0, [pc, #184]	@ (800faec <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800fa32:	f002 f813 	bl	8011a5c <iprintf>
 800fa36:	e00c      	b.n	800fa52 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800fa38:	481b      	ldr	r0, [pc, #108]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800fa3a:	f7fe fd7b 	bl	800e534 <DbgTraceGetFileName>
 800fa3e:	4601      	mov	r1, r0
 800fa40:	f44f 7354 	mov.w	r3, #848	@ 0x350
 800fa44:	4a19      	ldr	r2, [pc, #100]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800fa46:	481a      	ldr	r0, [pc, #104]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800fa48:	f002 f808 	bl	8011a5c <iprintf>
 800fa4c:	4828      	ldr	r0, [pc, #160]	@ (800faf0 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800fa4e:	f002 f875 	bl	8011b3c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800fa52:	2300      	movs	r3, #0
 800fa54:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800fa56:	7bfb      	ldrb	r3, [r7, #15]
 800fa58:	f043 0301 	orr.w	r3, r3, #1
 800fa5c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800fa5e:	7bfb      	ldrb	r3, [r7, #15]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d069      	beq.n	800fb38 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800fa64:	4b23      	ldr	r3, [pc, #140]	@ (800faf4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800fa66:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800fa68:	1dba      	adds	r2, r7, #6
 800fa6a:	7bf8      	ldrb	r0, [r7, #15]
 800fa6c:	1cbb      	adds	r3, r7, #2
 800fa6e:	9301      	str	r3, [sp, #4]
 800fa70:	1d3b      	adds	r3, r7, #4
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	4613      	mov	r3, r2
 800fa76:	2208      	movs	r2, #8
 800fa78:	2100      	movs	r1, #0
 800fa7a:	f7fc ff84 	bl	800c986 <aci_gap_init>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800fa82:	7dfb      	ldrb	r3, [r7, #23]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d039      	beq.n	800fafc <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800fa88:	4807      	ldr	r0, [pc, #28]	@ (800faa8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800fa8a:	f7fe fd53 	bl	800e534 <DbgTraceGetFileName>
 800fa8e:	4601      	mov	r1, r0
 800fa90:	f44f 735c 	mov.w	r3, #880	@ 0x370
 800fa94:	4a05      	ldr	r2, [pc, #20]	@ (800faac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800fa96:	4806      	ldr	r0, [pc, #24]	@ (800fab0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800fa98:	f001 ffe0 	bl	8011a5c <iprintf>
 800fa9c:	7dfb      	ldrb	r3, [r7, #23]
 800fa9e:	4619      	mov	r1, r3
 800faa0:	4815      	ldr	r0, [pc, #84]	@ (800faf8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800faa2:	f001 ffdb 	bl	8011a5c <iprintf>
 800faa6:	e036      	b.n	800fb16 <Ble_Hci_Gap_Gatt_Init+0x30a>
 800faa8:	08012c98 	.word	0x08012c98
 800faac:	08014128 	.word	0x08014128
 800fab0:	08012cb4 	.word	0x08012cb4
 800fab4:	08013278 	.word	0x08013278
 800fab8:	080132a4 	.word	0x080132a4
 800fabc:	080132d4 	.word	0x080132d4
 800fac0:	080132f4 	.word	0x080132f4
 800fac4:	08013358 	.word	0x08013358
 800fac8:	080133ac 	.word	0x080133ac
 800facc:	080140e0 	.word	0x080140e0
 800fad0:	080133e8 	.word	0x080133e8
 800fad4:	08013440 	.word	0x08013440
 800fad8:	080140f0 	.word	0x080140f0
 800fadc:	08013488 	.word	0x08013488
 800fae0:	080134e0 	.word	0x080134e0
 800fae4:	08013528 	.word	0x08013528
 800fae8:	08013568 	.word	0x08013568
 800faec:	08013598 	.word	0x08013598
 800faf0:	080135cc 	.word	0x080135cc
 800faf4:	080135f0 	.word	0x080135f0
 800faf8:	080135fc 	.word	0x080135fc
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800fafc:	487e      	ldr	r0, [pc, #504]	@ (800fcf8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fafe:	f7fe fd19 	bl	800e534 <DbgTraceGetFileName>
 800fb02:	4601      	mov	r1, r0
 800fb04:	f44f 735d 	mov.w	r3, #884	@ 0x374
 800fb08:	4a7c      	ldr	r2, [pc, #496]	@ (800fcfc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fb0a:	487d      	ldr	r0, [pc, #500]	@ (800fd00 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fb0c:	f001 ffa6 	bl	8011a5c <iprintf>
 800fb10:	487c      	ldr	r0, [pc, #496]	@ (800fd04 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800fb12:	f002 f813 	bl	8011b3c <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800fb16:	88fc      	ldrh	r4, [r7, #6]
 800fb18:	88bd      	ldrh	r5, [r7, #4]
 800fb1a:	68b8      	ldr	r0, [r7, #8]
 800fb1c:	f7f0 fb30 	bl	8000180 <strlen>
 800fb20:	4603      	mov	r3, r0
 800fb22:	b2da      	uxtb	r2, r3
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	9300      	str	r3, [sp, #0]
 800fb28:	4613      	mov	r3, r2
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	4629      	mov	r1, r5
 800fb2e:	4620      	mov	r0, r4
 800fb30:	f7fd fad6 	bl	800d0e0 <aci_gatt_update_char_value>
 800fb34:	4603      	mov	r3, r0
 800fb36:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800fb38:	88f8      	ldrh	r0, [r7, #6]
 800fb3a:	8879      	ldrh	r1, [r7, #2]
 800fb3c:	463b      	mov	r3, r7
 800fb3e:	9300      	str	r3, [sp, #0]
 800fb40:	2302      	movs	r3, #2
 800fb42:	2200      	movs	r2, #0
 800fb44:	f7fd facc 	bl	800d0e0 <aci_gatt_update_char_value>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800fb4c:	2202      	movs	r2, #2
 800fb4e:	2102      	movs	r1, #2
 800fb50:	2000      	movs	r0, #0
 800fb52:	f7fd fd27 	bl	800d5a4 <hci_le_set_default_phy>
 800fb56:	4603      	mov	r3, r0
 800fb58:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800fb5a:	7dfb      	ldrb	r3, [r7, #23]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d00f      	beq.n	800fb80 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800fb60:	4865      	ldr	r0, [pc, #404]	@ (800fcf8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fb62:	f7fe fce7 	bl	800e534 <DbgTraceGetFileName>
 800fb66:	4601      	mov	r1, r0
 800fb68:	f240 3396 	movw	r3, #918	@ 0x396
 800fb6c:	4a63      	ldr	r2, [pc, #396]	@ (800fcfc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fb6e:	4864      	ldr	r0, [pc, #400]	@ (800fd00 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fb70:	f001 ff74 	bl	8011a5c <iprintf>
 800fb74:	7dfb      	ldrb	r3, [r7, #23]
 800fb76:	4619      	mov	r1, r3
 800fb78:	4863      	ldr	r0, [pc, #396]	@ (800fd08 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800fb7a:	f001 ff6f 	bl	8011a5c <iprintf>
 800fb7e:	e00c      	b.n	800fb9a <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800fb80:	485d      	ldr	r0, [pc, #372]	@ (800fcf8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fb82:	f7fe fcd7 	bl	800e534 <DbgTraceGetFileName>
 800fb86:	4601      	mov	r1, r0
 800fb88:	f240 339a 	movw	r3, #922	@ 0x39a
 800fb8c:	4a5b      	ldr	r2, [pc, #364]	@ (800fcfc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fb8e:	485c      	ldr	r0, [pc, #368]	@ (800fd00 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fb90:	f001 ff64 	bl	8011a5c <iprintf>
 800fb94:	485d      	ldr	r0, [pc, #372]	@ (800fd0c <Ble_Hci_Gap_Gatt_Init+0x500>)
 800fb96:	f001 ffd1 	bl	8011b3c <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800fb9a:	4b5d      	ldr	r3, [pc, #372]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fb9c:	2201      	movs	r2, #1
 800fb9e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800fba0:	4b5b      	ldr	r3, [pc, #364]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7fc fd6f 	bl	800c688 <aci_gap_set_io_capability>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800fbae:	7dfb      	ldrb	r3, [r7, #23]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d00f      	beq.n	800fbd4 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800fbb4:	4850      	ldr	r0, [pc, #320]	@ (800fcf8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fbb6:	f7fe fcbd 	bl	800e534 <DbgTraceGetFileName>
 800fbba:	4601      	mov	r1, r0
 800fbbc:	f44f 7369 	mov.w	r3, #932	@ 0x3a4
 800fbc0:	4a4e      	ldr	r2, [pc, #312]	@ (800fcfc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fbc2:	484f      	ldr	r0, [pc, #316]	@ (800fd00 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fbc4:	f001 ff4a 	bl	8011a5c <iprintf>
 800fbc8:	7dfb      	ldrb	r3, [r7, #23]
 800fbca:	4619      	mov	r1, r3
 800fbcc:	4851      	ldr	r0, [pc, #324]	@ (800fd14 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800fbce:	f001 ff45 	bl	8011a5c <iprintf>
 800fbd2:	e00c      	b.n	800fbee <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800fbd4:	4848      	ldr	r0, [pc, #288]	@ (800fcf8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fbd6:	f7fe fcad 	bl	800e534 <DbgTraceGetFileName>
 800fbda:	4601      	mov	r1, r0
 800fbdc:	f44f 736a 	mov.w	r3, #936	@ 0x3a8
 800fbe0:	4a46      	ldr	r2, [pc, #280]	@ (800fcfc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fbe2:	4847      	ldr	r0, [pc, #284]	@ (800fd00 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fbe4:	f001 ff3a 	bl	8011a5c <iprintf>
 800fbe8:	484b      	ldr	r0, [pc, #300]	@ (800fd18 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800fbea:	f001 ffa7 	bl	8011b3c <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800fbee:	4b48      	ldr	r3, [pc, #288]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800fbf4:	4b46      	ldr	r3, [pc, #280]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fbf6:	2208      	movs	r2, #8
 800fbf8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800fbfa:	4b45      	ldr	r3, [pc, #276]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fbfc:	2210      	movs	r2, #16
 800fbfe:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800fc00:	4b43      	ldr	r3, [pc, #268]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc02:	2200      	movs	r2, #0
 800fc04:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800fc06:	4b42      	ldr	r3, [pc, #264]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc08:	4a44      	ldr	r2, [pc, #272]	@ (800fd1c <Ble_Hci_Gap_Gatt_Init+0x510>)
 800fc0a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800fc0c:	4b40      	ldr	r3, [pc, #256]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc0e:	2200      	movs	r2, #0
 800fc10:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800fc12:	4b3f      	ldr	r3, [pc, #252]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc14:	789c      	ldrb	r4, [r3, #2]
 800fc16:	4b3e      	ldr	r3, [pc, #248]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc18:	785d      	ldrb	r5, [r3, #1]
 800fc1a:	4b3d      	ldr	r3, [pc, #244]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc1c:	791b      	ldrb	r3, [r3, #4]
 800fc1e:	4a3c      	ldr	r2, [pc, #240]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc20:	7952      	ldrb	r2, [r2, #5]
 800fc22:	493b      	ldr	r1, [pc, #236]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc24:	78c9      	ldrb	r1, [r1, #3]
 800fc26:	483a      	ldr	r0, [pc, #232]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc28:	6880      	ldr	r0, [r0, #8]
 800fc2a:	2600      	movs	r6, #0
 800fc2c:	9604      	str	r6, [sp, #16]
 800fc2e:	9003      	str	r0, [sp, #12]
 800fc30:	9102      	str	r1, [sp, #8]
 800fc32:	9201      	str	r2, [sp, #4]
 800fc34:	9300      	str	r3, [sp, #0]
 800fc36:	2300      	movs	r3, #0
 800fc38:	2201      	movs	r2, #1
 800fc3a:	4629      	mov	r1, r5
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	f7fc fd77 	bl	800c730 <aci_gap_set_authentication_requirement>
 800fc42:	4603      	mov	r3, r0
 800fc44:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800fc46:	7dfb      	ldrb	r3, [r7, #23]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d00f      	beq.n	800fc6c <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800fc4c:	482a      	ldr	r0, [pc, #168]	@ (800fcf8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fc4e:	f7fe fc71 	bl	800e534 <DbgTraceGetFileName>
 800fc52:	4601      	mov	r1, r0
 800fc54:	f240 33c3 	movw	r3, #963	@ 0x3c3
 800fc58:	4a28      	ldr	r2, [pc, #160]	@ (800fcfc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fc5a:	4829      	ldr	r0, [pc, #164]	@ (800fd00 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fc5c:	f001 fefe 	bl	8011a5c <iprintf>
 800fc60:	7dfb      	ldrb	r3, [r7, #23]
 800fc62:	4619      	mov	r1, r3
 800fc64:	482e      	ldr	r0, [pc, #184]	@ (800fd20 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800fc66:	f001 fef9 	bl	8011a5c <iprintf>
 800fc6a:	e00c      	b.n	800fc86 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800fc6c:	4822      	ldr	r0, [pc, #136]	@ (800fcf8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fc6e:	f7fe fc61 	bl	800e534 <DbgTraceGetFileName>
 800fc72:	4601      	mov	r1, r0
 800fc74:	f240 33c7 	movw	r3, #967	@ 0x3c7
 800fc78:	4a20      	ldr	r2, [pc, #128]	@ (800fcfc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fc7a:	4821      	ldr	r0, [pc, #132]	@ (800fd00 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fc7c:	f001 feee 	bl	8011a5c <iprintf>
 800fc80:	4828      	ldr	r0, [pc, #160]	@ (800fd24 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800fc82:	f001 ff5b 	bl	8011b3c <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800fc86:	4b22      	ldr	r3, [pc, #136]	@ (800fd10 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fc88:	789b      	ldrb	r3, [r3, #2]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d023      	beq.n	800fcd6 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800fc8e:	f7fc ff99 	bl	800cbc4 <aci_gap_configure_filter_accept_list>
 800fc92:	4603      	mov	r3, r0
 800fc94:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800fc96:	7dfb      	ldrb	r3, [r7, #23]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d00f      	beq.n	800fcbc <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800fc9c:	4816      	ldr	r0, [pc, #88]	@ (800fcf8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fc9e:	f7fe fc49 	bl	800e534 <DbgTraceGetFileName>
 800fca2:	4601      	mov	r1, r0
 800fca4:	f240 33d2 	movw	r3, #978	@ 0x3d2
 800fca8:	4a14      	ldr	r2, [pc, #80]	@ (800fcfc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fcaa:	4815      	ldr	r0, [pc, #84]	@ (800fd00 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fcac:	f001 fed6 	bl	8011a5c <iprintf>
 800fcb0:	7dfb      	ldrb	r3, [r7, #23]
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	481c      	ldr	r0, [pc, #112]	@ (800fd28 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800fcb6:	f001 fed1 	bl	8011a5c <iprintf>
 800fcba:	e00c      	b.n	800fcd6 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800fcbc:	480e      	ldr	r0, [pc, #56]	@ (800fcf8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fcbe:	f7fe fc39 	bl	800e534 <DbgTraceGetFileName>
 800fcc2:	4601      	mov	r1, r0
 800fcc4:	f240 33d6 	movw	r3, #982	@ 0x3d6
 800fcc8:	4a0c      	ldr	r2, [pc, #48]	@ (800fcfc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fcca:	480d      	ldr	r0, [pc, #52]	@ (800fd00 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fccc:	f001 fec6 	bl	8011a5c <iprintf>
 800fcd0:	4816      	ldr	r0, [pc, #88]	@ (800fd2c <Ble_Hci_Gap_Gatt_Init+0x520>)
 800fcd2:	f001 ff33 	bl	8011b3c <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800fcd6:	4808      	ldr	r0, [pc, #32]	@ (800fcf8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fcd8:	f7fe fc2c 	bl	800e534 <DbgTraceGetFileName>
 800fcdc:	4601      	mov	r1, r0
 800fcde:	f240 33d9 	movw	r3, #985	@ 0x3d9
 800fce2:	4a06      	ldr	r2, [pc, #24]	@ (800fcfc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fce4:	4806      	ldr	r0, [pc, #24]	@ (800fd00 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fce6:	f001 feb9 	bl	8011a5c <iprintf>
 800fcea:	4811      	ldr	r0, [pc, #68]	@ (800fd30 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800fcec:	f001 feb6 	bl	8011a5c <iprintf>
}
 800fcf0:	bf00      	nop
 800fcf2:	371c      	adds	r7, #28
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcf8:	08012c98 	.word	0x08012c98
 800fcfc:	08014128 	.word	0x08014128
 800fd00:	08012cb4 	.word	0x08012cb4
 800fd04:	0801362c 	.word	0x0801362c
 800fd08:	0801364c 	.word	0x0801364c
 800fd0c:	08013688 	.word	0x08013688
 800fd10:	2000057c 	.word	0x2000057c
 800fd14:	080136b4 	.word	0x080136b4
 800fd18:	080136f4 	.word	0x080136f4
 800fd1c:	0001b207 	.word	0x0001b207
 800fd20:	08013724 	.word	0x08013724
 800fd24:	08013770 	.word	0x08013770
 800fd28:	080137ac 	.word	0x080137ac
 800fd2c:	080137ec 	.word	0x080137ec
 800fd30:	0801381c 	.word	0x0801381c

0800fd34 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b08c      	sub	sp, #48	@ 0x30
 800fd38:	af08      	add	r7, sp, #32
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fd3e:	2392      	movs	r3, #146	@ 0x92
 800fd40:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800fd42:	4a32      	ldr	r2, [pc, #200]	@ (800fe0c <Adv_Request+0xd8>)
 800fd44:	79fb      	ldrb	r3, [r7, #7]
 800fd46:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	9306      	str	r3, [sp, #24]
 800fd4e:	2300      	movs	r3, #0
 800fd50:	9305      	str	r3, [sp, #20]
 800fd52:	2300      	movs	r3, #0
 800fd54:	9304      	str	r3, [sp, #16]
 800fd56:	2300      	movs	r3, #0
 800fd58:	9303      	str	r3, [sp, #12]
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	9302      	str	r3, [sp, #8]
 800fd5e:	2300      	movs	r3, #0
 800fd60:	9301      	str	r3, [sp, #4]
 800fd62:	2300      	movs	r3, #0
 800fd64:	9300      	str	r3, [sp, #0]
 800fd66:	2300      	movs	r3, #0
 800fd68:	22a0      	movs	r2, #160	@ 0xa0
 800fd6a:	2180      	movs	r1, #128	@ 0x80
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	f7fc fb91 	bl	800c494 <aci_gap_set_discoverable>
 800fd72:	4603      	mov	r3, r0
 800fd74:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800fd76:	7bfb      	ldrb	r3, [r7, #15]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00f      	beq.n	800fd9c <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800fd7c:	4824      	ldr	r0, [pc, #144]	@ (800fe10 <Adv_Request+0xdc>)
 800fd7e:	f7fe fbd9 	bl	800e534 <DbgTraceGetFileName>
 800fd82:	4601      	mov	r1, r0
 800fd84:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 800fd88:	4a22      	ldr	r2, [pc, #136]	@ (800fe14 <Adv_Request+0xe0>)
 800fd8a:	4823      	ldr	r0, [pc, #140]	@ (800fe18 <Adv_Request+0xe4>)
 800fd8c:	f001 fe66 	bl	8011a5c <iprintf>
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
 800fd92:	4619      	mov	r1, r3
 800fd94:	4821      	ldr	r0, [pc, #132]	@ (800fe1c <Adv_Request+0xe8>)
 800fd96:	f001 fe61 	bl	8011a5c <iprintf>
 800fd9a:	e00c      	b.n	800fdb6 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800fd9c:	481c      	ldr	r0, [pc, #112]	@ (800fe10 <Adv_Request+0xdc>)
 800fd9e:	f7fe fbc9 	bl	800e534 <DbgTraceGetFileName>
 800fda2:	4601      	mov	r1, r0
 800fda4:	f240 33f3 	movw	r3, #1011	@ 0x3f3
 800fda8:	4a1a      	ldr	r2, [pc, #104]	@ (800fe14 <Adv_Request+0xe0>)
 800fdaa:	481b      	ldr	r0, [pc, #108]	@ (800fe18 <Adv_Request+0xe4>)
 800fdac:	f001 fe56 	bl	8011a5c <iprintf>
 800fdb0:	481b      	ldr	r0, [pc, #108]	@ (800fe20 <Adv_Request+0xec>)
 800fdb2:	f001 fec3 	bl	8011b3c <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800fdb6:	491b      	ldr	r1, [pc, #108]	@ (800fe24 <Adv_Request+0xf0>)
 800fdb8:	2013      	movs	r0, #19
 800fdba:	f7fc fe91 	bl	800cae0 <aci_gap_update_adv_data>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800fdc2:	7bfb      	ldrb	r3, [r7, #15]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d00f      	beq.n	800fde8 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800fdc8:	4811      	ldr	r0, [pc, #68]	@ (800fe10 <Adv_Request+0xdc>)
 800fdca:	f7fe fbb3 	bl	800e534 <DbgTraceGetFileName>
 800fdce:	4601      	mov	r1, r0
 800fdd0:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800fdd4:	4a0f      	ldr	r2, [pc, #60]	@ (800fe14 <Adv_Request+0xe0>)
 800fdd6:	4810      	ldr	r0, [pc, #64]	@ (800fe18 <Adv_Request+0xe4>)
 800fdd8:	f001 fe40 	bl	8011a5c <iprintf>
 800fddc:	7bfb      	ldrb	r3, [r7, #15]
 800fdde:	4619      	mov	r1, r3
 800fde0:	4811      	ldr	r0, [pc, #68]	@ (800fe28 <Adv_Request+0xf4>)
 800fde2:	f001 fe3b 	bl	8011a5c <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800fde6:	e00d      	b.n	800fe04 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800fde8:	4809      	ldr	r0, [pc, #36]	@ (800fe10 <Adv_Request+0xdc>)
 800fdea:	f7fe fba3 	bl	800e534 <DbgTraceGetFileName>
 800fdee:	4601      	mov	r1, r0
 800fdf0:	f240 4302 	movw	r3, #1026	@ 0x402
 800fdf4:	4a07      	ldr	r2, [pc, #28]	@ (800fe14 <Adv_Request+0xe0>)
 800fdf6:	4808      	ldr	r0, [pc, #32]	@ (800fe18 <Adv_Request+0xe4>)
 800fdf8:	f001 fe30 	bl	8011a5c <iprintf>
 800fdfc:	480b      	ldr	r0, [pc, #44]	@ (800fe2c <Adv_Request+0xf8>)
 800fdfe:	f001 fe2d 	bl	8011a5c <iprintf>
  return;
 800fe02:	bf00      	nop
}
 800fe04:	3710      	adds	r7, #16
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	2000057c 	.word	0x2000057c
 800fe10:	08012c98 	.word	0x08012c98
 800fe14:	08014140 	.word	0x08014140
 800fe18:	08012cb4 	.word	0x08012cb4
 800fe1c:	08013848 	.word	0x08013848
 800fe20:	08013880 	.word	0x08013880
 800fe24:	200000a0 	.word	0x200000a0
 800fe28:	080138a8 	.word	0x080138a8
 800fe2c:	080138dc 	.word	0x080138dc

0800fe30 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b086      	sub	sp, #24
 800fe34:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800fe36:	f7ff f8f5 	bl	800f024 <LL_FLASH_GetUDN>
 800fe3a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe42:	d023      	beq.n	800fe8c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800fe44:	f7ff f906 	bl	800f054 <LL_FLASH_GetSTCompanyID>
 800fe48:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800fe4a:	f7ff f8f7 	bl	800f03c <LL_FLASH_GetDeviceID>
 800fe4e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	b2da      	uxtb	r2, r3
 800fe54:	4b16      	ldr	r3, [pc, #88]	@ (800feb0 <BleGetBdAddress+0x80>)
 800fe56:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	0a1b      	lsrs	r3, r3, #8
 800fe5c:	b2da      	uxtb	r2, r3
 800fe5e:	4b14      	ldr	r3, [pc, #80]	@ (800feb0 <BleGetBdAddress+0x80>)
 800fe60:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	b2da      	uxtb	r2, r3
 800fe66:	4b12      	ldr	r3, [pc, #72]	@ (800feb0 <BleGetBdAddress+0x80>)
 800fe68:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	b2da      	uxtb	r2, r3
 800fe6e:	4b10      	ldr	r3, [pc, #64]	@ (800feb0 <BleGetBdAddress+0x80>)
 800fe70:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	0a1b      	lsrs	r3, r3, #8
 800fe76:	b2da      	uxtb	r2, r3
 800fe78:	4b0d      	ldr	r3, [pc, #52]	@ (800feb0 <BleGetBdAddress+0x80>)
 800fe7a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	0c1b      	lsrs	r3, r3, #16
 800fe80:	b2da      	uxtb	r2, r3
 800fe82:	4b0b      	ldr	r3, [pc, #44]	@ (800feb0 <BleGetBdAddress+0x80>)
 800fe84:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800fe86:	4b0a      	ldr	r3, [pc, #40]	@ (800feb0 <BleGetBdAddress+0x80>)
 800fe88:	617b      	str	r3, [r7, #20]
 800fe8a:	e00b      	b.n	800fea4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800fe8c:	2000      	movs	r0, #0
 800fe8e:	f7fe fc19 	bl	800e6c4 <OTP_Read>
 800fe92:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d002      	beq.n	800fea0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	617b      	str	r3, [r7, #20]
 800fe9e:	e001      	b.n	800fea4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800fea0:	4b04      	ldr	r3, [pc, #16]	@ (800feb4 <BleGetBdAddress+0x84>)
 800fea2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800fea4:	697b      	ldr	r3, [r7, #20]
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3718      	adds	r7, #24
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	20000574 	.word	0x20000574
 800feb4:	080140d8 	.word	0x080140d8

0800feb8 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800febe:	4b1f      	ldr	r3, [pc, #124]	@ (800ff3c <Adv_Cancel+0x84>)
 800fec0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800fec4:	2b05      	cmp	r3, #5
 800fec6:	d035      	beq.n	800ff34 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fec8:	2392      	movs	r3, #146	@ 0x92
 800feca:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800fecc:	f7fc fabe 	bl	800c44c <aci_gap_set_non_discoverable>
 800fed0:	4603      	mov	r3, r0
 800fed2:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800fed4:	4b19      	ldr	r3, [pc, #100]	@ (800ff3c <Adv_Cancel+0x84>)
 800fed6:	2200      	movs	r2, #0
 800fed8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800fedc:	79fb      	ldrb	r3, [r7, #7]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d00d      	beq.n	800fefe <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800fee2:	4817      	ldr	r0, [pc, #92]	@ (800ff40 <Adv_Cancel+0x88>)
 800fee4:	f7fe fb26 	bl	800e534 <DbgTraceGetFileName>
 800fee8:	4601      	mov	r1, r0
 800feea:	f44f 638a 	mov.w	r3, #1104	@ 0x450
 800feee:	4a15      	ldr	r2, [pc, #84]	@ (800ff44 <Adv_Cancel+0x8c>)
 800fef0:	4815      	ldr	r0, [pc, #84]	@ (800ff48 <Adv_Cancel+0x90>)
 800fef2:	f001 fdb3 	bl	8011a5c <iprintf>
 800fef6:	4815      	ldr	r0, [pc, #84]	@ (800ff4c <Adv_Cancel+0x94>)
 800fef8:	f001 fdb0 	bl	8011a5c <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800fefc:	e01a      	b.n	800ff34 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800fefe:	4810      	ldr	r0, [pc, #64]	@ (800ff40 <Adv_Cancel+0x88>)
 800ff00:	f7fe fb18 	bl	800e534 <DbgTraceGetFileName>
 800ff04:	4601      	mov	r1, r0
 800ff06:	f240 4354 	movw	r3, #1108	@ 0x454
 800ff0a:	4a0e      	ldr	r2, [pc, #56]	@ (800ff44 <Adv_Cancel+0x8c>)
 800ff0c:	480e      	ldr	r0, [pc, #56]	@ (800ff48 <Adv_Cancel+0x90>)
 800ff0e:	f001 fda5 	bl	8011a5c <iprintf>
 800ff12:	480f      	ldr	r0, [pc, #60]	@ (800ff50 <Adv_Cancel+0x98>)
 800ff14:	f001 fda2 	bl	8011a5c <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800ff18:	4809      	ldr	r0, [pc, #36]	@ (800ff40 <Adv_Cancel+0x88>)
 800ff1a:	f7fe fb0b 	bl	800e534 <DbgTraceGetFileName>
 800ff1e:	4601      	mov	r1, r0
 800ff20:	f240 4355 	movw	r3, #1109	@ 0x455
 800ff24:	4a07      	ldr	r2, [pc, #28]	@ (800ff44 <Adv_Cancel+0x8c>)
 800ff26:	4808      	ldr	r0, [pc, #32]	@ (800ff48 <Adv_Cancel+0x90>)
 800ff28:	f001 fd98 	bl	8011a5c <iprintf>
 800ff2c:	4809      	ldr	r0, [pc, #36]	@ (800ff54 <Adv_Cancel+0x9c>)
 800ff2e:	f001 fd95 	bl	8011a5c <iprintf>
  return;
 800ff32:	bf00      	nop
 800ff34:	bf00      	nop
}
 800ff36:	3708      	adds	r7, #8
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	2000057c 	.word	0x2000057c
 800ff40:	08012c98 	.word	0x08012c98
 800ff44:	0801414c 	.word	0x0801414c
 800ff48:	08012cb4 	.word	0x08012cb4
 800ff4c:	08013904 	.word	0x08013904
 800ff50:	08013928 	.word	0x08013928
 800ff54:	08013930 	.word	0x08013930

0800ff58 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800ff60:	2100      	movs	r1, #0
 800ff62:	2002      	movs	r0, #2
 800ff64:	f001 fbae 	bl	80116c4 <UTIL_SEQ_SetTask>

  return;
 800ff68:	bf00      	nop
}
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ff78:	2001      	movs	r0, #1
 800ff7a:	f001 fc0f 	bl	801179c <UTIL_SEQ_SetEvt>

  return;
 800ff7e:	bf00      	nop
}
 800ff80:	3708      	adds	r7, #8
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b082      	sub	sp, #8
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ff8e:	2001      	movs	r0, #1
 800ff90:	f001 fc24 	bl	80117dc <UTIL_SEQ_WaitEvt>

  return;
 800ff94:	bf00      	nop
}
 800ff96:	3708      	adds	r7, #8
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}

0800ff9c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	3308      	adds	r3, #8
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fd fc5e 	bl	800d870 <SVCCTL_UserEvtRx>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800ffb8:	7afb      	ldrb	r3, [r7, #11]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d003      	beq.n	800ffc6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800ffc4:	e003      	b.n	800ffce <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	701a      	strb	r2, [r3, #0]
  return;
 800ffcc:	bf00      	nop
}
 800ffce:	3710      	adds	r7, #16
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}

0800ffd4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b084      	sub	sp, #16
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	4603      	mov	r3, r0
 800ffdc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800ffde:	79fb      	ldrb	r3, [r7, #7]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d002      	beq.n	800ffea <BLE_StatusNot+0x16>
 800ffe4:	2b01      	cmp	r3, #1
 800ffe6:	d006      	beq.n	800fff6 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800ffe8:	e00b      	b.n	8010002 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ffea:	2303      	movs	r3, #3
 800ffec:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800ffee:	68f8      	ldr	r0, [r7, #12]
 800fff0:	f001 fb94 	bl	801171c <UTIL_SEQ_PauseTask>
      break;
 800fff4:	e005      	b.n	8010002 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800fff6:	2303      	movs	r3, #3
 800fff8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800fffa:	68f8      	ldr	r0, [r7, #12]
 800fffc:	f001 fbae 	bl	801175c <UTIL_SEQ_ResumeTask>
      break;
 8010000:	bf00      	nop
  }

  return;
 8010002:	bf00      	nop
}
 8010004:	3710      	adds	r7, #16
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}
	...

0801000c <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 801000c:	b480      	push	{r7}
 801000e:	b083      	sub	sp, #12
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	2b04      	cmp	r3, #4
 801001a:	d80d      	bhi.n	8010038 <Custom_STM_App_Notification+0x2c>
 801001c:	a201      	add	r2, pc, #4	@ (adr r2, 8010024 <Custom_STM_App_Notification+0x18>)
 801001e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010022:	bf00      	nop
 8010024:	08010039 	.word	0x08010039
 8010028:	08010039 	.word	0x08010039
 801002c:	08010039 	.word	0x08010039
 8010030:	08010039 	.word	0x08010039
 8010034:	08010039 	.word	0x08010039

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8010038:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 801003a:	bf00      	nop
}
 801003c:	370c      	adds	r7, #12
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr
 8010046:	bf00      	nop

08010048 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d002      	beq.n	801005e <Custom_APP_Notification+0x16>
 8010058:	2b01      	cmp	r3, #1
 801005a:	d002      	beq.n	8010062 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 801005c:	e002      	b.n	8010064 <Custom_APP_Notification+0x1c>
      break;
 801005e:	bf00      	nop
 8010060:	e000      	b.n	8010064 <Custom_APP_Notification+0x1c>
      break;
 8010062:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8010064:	bf00      	nop
}
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8010070:	b480      	push	{r7}
 8010072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8010074:	bf00      	nop
}
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr
	...

08010080 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b08c      	sub	sp, #48	@ 0x30
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8010088:	2300      	movs	r3, #0
 801008a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	3301      	adds	r3, #1
 8010092:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8010094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	2bff      	cmp	r3, #255	@ 0xff
 801009a:	f040 808a 	bne.w	80101b2 <Custom_STM_Event_Handler+0x132>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 801009e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100a0:	3302      	adds	r3, #2
 80100a2:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 80100a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100a6:	881b      	ldrh	r3, [r3, #0]
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80100ae:	2b1a      	cmp	r3, #26
 80100b0:	d87b      	bhi.n	80101aa <Custom_STM_Event_Handler+0x12a>
 80100b2:	a201      	add	r2, pc, #4	@ (adr r2, 80100b8 <Custom_STM_Event_Handler+0x38>)
 80100b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b8:	08010125 	.word	0x08010125
 80100bc:	080101ab 	.word	0x080101ab
 80100c0:	080101ab 	.word	0x080101ab
 80100c4:	080101ab 	.word	0x080101ab
 80100c8:	080101ab 	.word	0x080101ab
 80100cc:	080101ab 	.word	0x080101ab
 80100d0:	080101ab 	.word	0x080101ab
 80100d4:	080101ab 	.word	0x080101ab
 80100d8:	080101ab 	.word	0x080101ab
 80100dc:	080101ab 	.word	0x080101ab
 80100e0:	080101ab 	.word	0x080101ab
 80100e4:	080101ab 	.word	0x080101ab
 80100e8:	080101ab 	.word	0x080101ab
 80100ec:	080101ab 	.word	0x080101ab
 80100f0:	080101ab 	.word	0x080101ab
 80100f4:	080101ab 	.word	0x080101ab
 80100f8:	080101ab 	.word	0x080101ab
 80100fc:	080101ab 	.word	0x080101ab
 8010100:	080101ab 	.word	0x080101ab
 8010104:	080101ab 	.word	0x080101ab
 8010108:	080101ab 	.word	0x080101ab
 801010c:	080101ab 	.word	0x080101ab
 8010110:	080101ab 	.word	0x080101ab
 8010114:	080101ab 	.word	0x080101ab
 8010118:	080101ab 	.word	0x080101ab
 801011c:	080101ab 	.word	0x080101ab
 8010120:	0801018d 	.word	0x0801018d
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8010124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010126:	3302      	adds	r3, #2
 8010128:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 801012a:	69fb      	ldr	r3, [r7, #28]
 801012c:	885b      	ldrh	r3, [r3, #2]
 801012e:	b29b      	uxth	r3, r3
 8010130:	461a      	mov	r2, r3
 8010132:	4b23      	ldr	r3, [pc, #140]	@ (80101c0 <Custom_STM_Event_Handler+0x140>)
 8010134:	889b      	ldrh	r3, [r3, #4]
 8010136:	3302      	adds	r3, #2
 8010138:	429a      	cmp	r2, r3
 801013a:	d119      	bne.n	8010170 <Custom_STM_Event_Handler+0xf0>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 801013c:	2301      	movs	r3, #1
 801013e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	7a1b      	ldrb	r3, [r3, #8]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d002      	beq.n	8010150 <Custom_STM_Event_Handler+0xd0>
 801014a:	2b01      	cmp	r3, #1
 801014c:	d008      	beq.n	8010160 <Custom_STM_Event_Handler+0xe0>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 801014e:	e01c      	b.n	801018a <Custom_STM_Event_Handler+0x10a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 8010150:	2303      	movs	r3, #3
 8010152:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010154:	f107 0308 	add.w	r3, r7, #8
 8010158:	4618      	mov	r0, r3
 801015a:	f7ff ff57 	bl	801000c <Custom_STM_App_Notification>
                break;
 801015e:	e014      	b.n	801018a <Custom_STM_Event_Handler+0x10a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 8010160:	2302      	movs	r3, #2
 8010162:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8010164:	f107 0308 	add.w	r3, r7, #8
 8010168:	4618      	mov	r0, r3
 801016a:	f7ff ff4f 	bl	801000c <Custom_STM_App_Notification>
                break;
 801016e:	e00c      	b.n	801018a <Custom_STM_Event_Handler+0x10a>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	885b      	ldrh	r3, [r3, #2]
 8010174:	b29b      	uxth	r3, r3
 8010176:	461a      	mov	r2, r3
 8010178:	4b11      	ldr	r3, [pc, #68]	@ (80101c0 <Custom_STM_Event_Handler+0x140>)
 801017a:	885b      	ldrh	r3, [r3, #2]
 801017c:	3301      	adds	r3, #1
 801017e:	429a      	cmp	r2, r3
 8010180:	d115      	bne.n	80101ae <Custom_STM_Event_Handler+0x12e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8010182:	2301      	movs	r3, #1
 8010184:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8010188:	e011      	b.n	80101ae <Custom_STM_Event_Handler+0x12e>
 801018a:	e010      	b.n	80101ae <Custom_STM_Event_Handler+0x12e>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 801018c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801018e:	3302      	adds	r3, #2
 8010190:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8010192:	2304      	movs	r3, #4
 8010194:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8010196:	6a3b      	ldr	r3, [r7, #32]
 8010198:	881b      	ldrh	r3, [r3, #0]
 801019a:	b29b      	uxth	r3, r3
 801019c:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 801019e:	f107 0308 	add.w	r3, r7, #8
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7ff ff32 	bl	801000c <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 80101a8:	e002      	b.n	80101b0 <Custom_STM_Event_Handler+0x130>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80101aa:	bf00      	nop
 80101ac:	e002      	b.n	80101b4 <Custom_STM_Event_Handler+0x134>
          break;
 80101ae:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80101b0:	e000      	b.n	80101b4 <Custom_STM_Event_Handler+0x134>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80101b2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80101b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 80101b8:	4618      	mov	r0, r3
 80101ba:	3730      	adds	r7, #48	@ 0x30
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	20000604 	.word	0x20000604

080101c4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b08c      	sub	sp, #48	@ 0x30
 80101c8:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80101ca:	2392      	movs	r3, #146	@ 0x92
 80101cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80101ce:	487f      	ldr	r0, [pc, #508]	@ (80103cc <SVCCTL_InitCustomSvc+0x208>)
 80101d0:	f7fd fb34 	bl	800d83c <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 80101d4:	2306      	movs	r3, #6
 80101d6:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 80101d8:	238f      	movs	r3, #143	@ 0x8f
 80101da:	713b      	strb	r3, [r7, #4]
 80101dc:	23e5      	movs	r3, #229	@ 0xe5
 80101de:	717b      	strb	r3, [r7, #5]
 80101e0:	23b3      	movs	r3, #179	@ 0xb3
 80101e2:	71bb      	strb	r3, [r7, #6]
 80101e4:	23d5      	movs	r3, #213	@ 0xd5
 80101e6:	71fb      	strb	r3, [r7, #7]
 80101e8:	232e      	movs	r3, #46	@ 0x2e
 80101ea:	723b      	strb	r3, [r7, #8]
 80101ec:	237f      	movs	r3, #127	@ 0x7f
 80101ee:	727b      	strb	r3, [r7, #9]
 80101f0:	234a      	movs	r3, #74	@ 0x4a
 80101f2:	72bb      	strb	r3, [r7, #10]
 80101f4:	2398      	movs	r3, #152	@ 0x98
 80101f6:	72fb      	strb	r3, [r7, #11]
 80101f8:	232a      	movs	r3, #42	@ 0x2a
 80101fa:	733b      	strb	r3, [r7, #12]
 80101fc:	2348      	movs	r3, #72	@ 0x48
 80101fe:	737b      	strb	r3, [r7, #13]
 8010200:	237a      	movs	r3, #122	@ 0x7a
 8010202:	73bb      	strb	r3, [r7, #14]
 8010204:	23cc      	movs	r3, #204	@ 0xcc
 8010206:	73fb      	strb	r3, [r7, #15]
 8010208:	2340      	movs	r3, #64	@ 0x40
 801020a:	743b      	strb	r3, [r7, #16]
 801020c:	23fe      	movs	r3, #254	@ 0xfe
 801020e:	747b      	strb	r3, [r7, #17]
 8010210:	2300      	movs	r3, #0
 8010212:	74bb      	strb	r3, [r7, #18]
 8010214:	2300      	movs	r3, #0
 8010216:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8010218:	7dbb      	ldrb	r3, [r7, #22]
 801021a:	1d39      	adds	r1, r7, #4
 801021c:	4a6c      	ldr	r2, [pc, #432]	@ (80103d0 <SVCCTL_InitCustomSvc+0x20c>)
 801021e:	9200      	str	r2, [sp, #0]
 8010220:	2201      	movs	r2, #1
 8010222:	2002      	movs	r0, #2
 8010224:	f7fc fd7e 	bl	800cd24 <aci_gatt_add_service>
 8010228:	4603      	mov	r3, r0
 801022a:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomMy_P2PsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801022c:	7dfb      	ldrb	r3, [r7, #23]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d00f      	beq.n	8010252 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: My_P2PS, error code: 0x%x \n\r", ret);
 8010232:	4868      	ldr	r0, [pc, #416]	@ (80103d4 <SVCCTL_InitCustomSvc+0x210>)
 8010234:	f7fe f97e 	bl	800e534 <DbgTraceGetFileName>
 8010238:	4601      	mov	r1, r0
 801023a:	f240 133f 	movw	r3, #319	@ 0x13f
 801023e:	4a66      	ldr	r2, [pc, #408]	@ (80103d8 <SVCCTL_InitCustomSvc+0x214>)
 8010240:	4866      	ldr	r0, [pc, #408]	@ (80103dc <SVCCTL_InitCustomSvc+0x218>)
 8010242:	f001 fc0b 	bl	8011a5c <iprintf>
 8010246:	7dfb      	ldrb	r3, [r7, #23]
 8010248:	4619      	mov	r1, r3
 801024a:	4865      	ldr	r0, [pc, #404]	@ (80103e0 <SVCCTL_InitCustomSvc+0x21c>)
 801024c:	f001 fc06 	bl	8011a5c <iprintf>
 8010250:	e00c      	b.n	801026c <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: My_P2PS \n\r");
 8010252:	4860      	ldr	r0, [pc, #384]	@ (80103d4 <SVCCTL_InitCustomSvc+0x210>)
 8010254:	f7fe f96e 	bl	800e534 <DbgTraceGetFileName>
 8010258:	4601      	mov	r1, r0
 801025a:	f240 1343 	movw	r3, #323	@ 0x143
 801025e:	4a5e      	ldr	r2, [pc, #376]	@ (80103d8 <SVCCTL_InitCustomSvc+0x214>)
 8010260:	485e      	ldr	r0, [pc, #376]	@ (80103dc <SVCCTL_InitCustomSvc+0x218>)
 8010262:	f001 fbfb 	bl	8011a5c <iprintf>
 8010266:	485f      	ldr	r0, [pc, #380]	@ (80103e4 <SVCCTL_InitCustomSvc+0x220>)
 8010268:	f001 fbf8 	bl	8011a5c <iprintf>
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 801026c:	2319      	movs	r3, #25
 801026e:	713b      	strb	r3, [r7, #4]
 8010270:	23ed      	movs	r3, #237	@ 0xed
 8010272:	717b      	strb	r3, [r7, #5]
 8010274:	2382      	movs	r3, #130	@ 0x82
 8010276:	71bb      	strb	r3, [r7, #6]
 8010278:	23ae      	movs	r3, #174	@ 0xae
 801027a:	71fb      	strb	r3, [r7, #7]
 801027c:	23ed      	movs	r3, #237	@ 0xed
 801027e:	723b      	strb	r3, [r7, #8]
 8010280:	2321      	movs	r3, #33	@ 0x21
 8010282:	727b      	strb	r3, [r7, #9]
 8010284:	234c      	movs	r3, #76	@ 0x4c
 8010286:	72bb      	strb	r3, [r7, #10]
 8010288:	239d      	movs	r3, #157	@ 0x9d
 801028a:	72fb      	strb	r3, [r7, #11]
 801028c:	2341      	movs	r3, #65	@ 0x41
 801028e:	733b      	strb	r3, [r7, #12]
 8010290:	2345      	movs	r3, #69	@ 0x45
 8010292:	737b      	strb	r3, [r7, #13]
 8010294:	2322      	movs	r3, #34	@ 0x22
 8010296:	73bb      	strb	r3, [r7, #14]
 8010298:	238e      	movs	r3, #142	@ 0x8e
 801029a:	73fb      	strb	r3, [r7, #15]
 801029c:	2341      	movs	r3, #65	@ 0x41
 801029e:	743b      	strb	r3, [r7, #16]
 80102a0:	23fe      	movs	r3, #254	@ 0xfe
 80102a2:	747b      	strb	r3, [r7, #17]
 80102a4:	2300      	movs	r3, #0
 80102a6:	74bb      	strb	r3, [r7, #18]
 80102a8:	2300      	movs	r3, #0
 80102aa:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 80102ac:	4b48      	ldr	r3, [pc, #288]	@ (80103d0 <SVCCTL_InitCustomSvc+0x20c>)
 80102ae:	8818      	ldrh	r0, [r3, #0]
 80102b0:	4b4d      	ldr	r3, [pc, #308]	@ (80103e8 <SVCCTL_InitCustomSvc+0x224>)
 80102b2:	881b      	ldrh	r3, [r3, #0]
 80102b4:	1d3a      	adds	r2, r7, #4
 80102b6:	494d      	ldr	r1, [pc, #308]	@ (80103ec <SVCCTL_InitCustomSvc+0x228>)
 80102b8:	9105      	str	r1, [sp, #20]
 80102ba:	2101      	movs	r1, #1
 80102bc:	9104      	str	r1, [sp, #16]
 80102be:	2110      	movs	r1, #16
 80102c0:	9103      	str	r1, [sp, #12]
 80102c2:	2101      	movs	r1, #1
 80102c4:	9102      	str	r1, [sp, #8]
 80102c6:	2100      	movs	r1, #0
 80102c8:	9101      	str	r1, [sp, #4]
 80102ca:	2106      	movs	r1, #6
 80102cc:	9100      	str	r1, [sp, #0]
 80102ce:	2102      	movs	r1, #2
 80102d0:	f7fc fdfe 	bl	800ced0 <aci_gatt_add_char>
 80102d4:	4603      	mov	r3, r0
 80102d6:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomLed_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80102d8:	7dfb      	ldrb	r3, [r7, #23]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d00f      	beq.n	80102fe <SVCCTL_InitCustomSvc+0x13a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LED_C, error code: 0x%x \n\r", ret);
 80102de:	483d      	ldr	r0, [pc, #244]	@ (80103d4 <SVCCTL_InitCustomSvc+0x210>)
 80102e0:	f7fe f928 	bl	800e534 <DbgTraceGetFileName>
 80102e4:	4601      	mov	r1, r0
 80102e6:	f240 1355 	movw	r3, #341	@ 0x155
 80102ea:	4a3b      	ldr	r2, [pc, #236]	@ (80103d8 <SVCCTL_InitCustomSvc+0x214>)
 80102ec:	483b      	ldr	r0, [pc, #236]	@ (80103dc <SVCCTL_InitCustomSvc+0x218>)
 80102ee:	f001 fbb5 	bl	8011a5c <iprintf>
 80102f2:	7dfb      	ldrb	r3, [r7, #23]
 80102f4:	4619      	mov	r1, r3
 80102f6:	483e      	ldr	r0, [pc, #248]	@ (80103f0 <SVCCTL_InitCustomSvc+0x22c>)
 80102f8:	f001 fbb0 	bl	8011a5c <iprintf>
 80102fc:	e00c      	b.n	8010318 <SVCCTL_InitCustomSvc+0x154>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LED_C \n\r");
 80102fe:	4835      	ldr	r0, [pc, #212]	@ (80103d4 <SVCCTL_InitCustomSvc+0x210>)
 8010300:	f7fe f918 	bl	800e534 <DbgTraceGetFileName>
 8010304:	4601      	mov	r1, r0
 8010306:	f240 1359 	movw	r3, #345	@ 0x159
 801030a:	4a33      	ldr	r2, [pc, #204]	@ (80103d8 <SVCCTL_InitCustomSvc+0x214>)
 801030c:	4833      	ldr	r0, [pc, #204]	@ (80103dc <SVCCTL_InitCustomSvc+0x218>)
 801030e:	f001 fba5 	bl	8011a5c <iprintf>
 8010312:	4838      	ldr	r0, [pc, #224]	@ (80103f4 <SVCCTL_InitCustomSvc+0x230>)
 8010314:	f001 fba2 	bl	8011a5c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  My_Switch_Char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 8010318:	2319      	movs	r3, #25
 801031a:	713b      	strb	r3, [r7, #4]
 801031c:	23ed      	movs	r3, #237	@ 0xed
 801031e:	717b      	strb	r3, [r7, #5]
 8010320:	2382      	movs	r3, #130	@ 0x82
 8010322:	71bb      	strb	r3, [r7, #6]
 8010324:	23ae      	movs	r3, #174	@ 0xae
 8010326:	71fb      	strb	r3, [r7, #7]
 8010328:	23ed      	movs	r3, #237	@ 0xed
 801032a:	723b      	strb	r3, [r7, #8]
 801032c:	2321      	movs	r3, #33	@ 0x21
 801032e:	727b      	strb	r3, [r7, #9]
 8010330:	234c      	movs	r3, #76	@ 0x4c
 8010332:	72bb      	strb	r3, [r7, #10]
 8010334:	239d      	movs	r3, #157	@ 0x9d
 8010336:	72fb      	strb	r3, [r7, #11]
 8010338:	2341      	movs	r3, #65	@ 0x41
 801033a:	733b      	strb	r3, [r7, #12]
 801033c:	2345      	movs	r3, #69	@ 0x45
 801033e:	737b      	strb	r3, [r7, #13]
 8010340:	2322      	movs	r3, #34	@ 0x22
 8010342:	73bb      	strb	r3, [r7, #14]
 8010344:	238e      	movs	r3, #142	@ 0x8e
 8010346:	73fb      	strb	r3, [r7, #15]
 8010348:	2342      	movs	r3, #66	@ 0x42
 801034a:	743b      	strb	r3, [r7, #16]
 801034c:	23fe      	movs	r3, #254	@ 0xfe
 801034e:	747b      	strb	r3, [r7, #17]
 8010350:	2300      	movs	r3, #0
 8010352:	74bb      	strb	r3, [r7, #18]
 8010354:	2300      	movs	r3, #0
 8010356:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 8010358:	4b1d      	ldr	r3, [pc, #116]	@ (80103d0 <SVCCTL_InitCustomSvc+0x20c>)
 801035a:	8818      	ldrh	r0, [r3, #0]
 801035c:	4b26      	ldr	r3, [pc, #152]	@ (80103f8 <SVCCTL_InitCustomSvc+0x234>)
 801035e:	881b      	ldrh	r3, [r3, #0]
 8010360:	1d3a      	adds	r2, r7, #4
 8010362:	4926      	ldr	r1, [pc, #152]	@ (80103fc <SVCCTL_InitCustomSvc+0x238>)
 8010364:	9105      	str	r1, [sp, #20]
 8010366:	2101      	movs	r1, #1
 8010368:	9104      	str	r1, [sp, #16]
 801036a:	2110      	movs	r1, #16
 801036c:	9103      	str	r1, [sp, #12]
 801036e:	2101      	movs	r1, #1
 8010370:	9102      	str	r1, [sp, #8]
 8010372:	2100      	movs	r1, #0
 8010374:	9101      	str	r1, [sp, #4]
 8010376:	2110      	movs	r1, #16
 8010378:	9100      	str	r1, [sp, #0]
 801037a:	2102      	movs	r1, #2
 801037c:	f7fc fda8 	bl	800ced0 <aci_gatt_add_char>
 8010380:	4603      	mov	r3, r0
 8010382:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomSwitch_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8010384:	7dfb      	ldrb	r3, [r7, #23]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d00f      	beq.n	80103aa <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : SWITCH_C, error code: 0x%x \n\r", ret);
 801038a:	4812      	ldr	r0, [pc, #72]	@ (80103d4 <SVCCTL_InitCustomSvc+0x210>)
 801038c:	f7fe f8d2 	bl	800e534 <DbgTraceGetFileName>
 8010390:	4601      	mov	r1, r0
 8010392:	f240 136f 	movw	r3, #367	@ 0x16f
 8010396:	4a10      	ldr	r2, [pc, #64]	@ (80103d8 <SVCCTL_InitCustomSvc+0x214>)
 8010398:	4810      	ldr	r0, [pc, #64]	@ (80103dc <SVCCTL_InitCustomSvc+0x218>)
 801039a:	f001 fb5f 	bl	8011a5c <iprintf>
 801039e:	7dfb      	ldrb	r3, [r7, #23]
 80103a0:	4619      	mov	r1, r3
 80103a2:	4817      	ldr	r0, [pc, #92]	@ (8010400 <SVCCTL_InitCustomSvc+0x23c>)
 80103a4:	f001 fb5a 	bl	8011a5c <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80103a8:	e00d      	b.n	80103c6 <SVCCTL_InitCustomSvc+0x202>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : SWITCH_C \n\r");
 80103aa:	480a      	ldr	r0, [pc, #40]	@ (80103d4 <SVCCTL_InitCustomSvc+0x210>)
 80103ac:	f7fe f8c2 	bl	800e534 <DbgTraceGetFileName>
 80103b0:	4601      	mov	r1, r0
 80103b2:	f240 1373 	movw	r3, #371	@ 0x173
 80103b6:	4a08      	ldr	r2, [pc, #32]	@ (80103d8 <SVCCTL_InitCustomSvc+0x214>)
 80103b8:	4808      	ldr	r0, [pc, #32]	@ (80103dc <SVCCTL_InitCustomSvc+0x218>)
 80103ba:	f001 fb4f 	bl	8011a5c <iprintf>
 80103be:	4811      	ldr	r0, [pc, #68]	@ (8010404 <SVCCTL_InitCustomSvc+0x240>)
 80103c0:	f001 fb4c 	bl	8011a5c <iprintf>
  return;
 80103c4:	bf00      	nop
}
 80103c6:	3718      	adds	r7, #24
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	08010081 	.word	0x08010081
 80103d0:	20000604 	.word	0x20000604
 80103d4:	0801394c 	.word	0x0801394c
 80103d8:	08014158 	.word	0x08014158
 80103dc:	0801396c 	.word	0x0801396c
 80103e0:	08013980 	.word	0x08013980
 80103e4:	080139c8 	.word	0x080139c8
 80103e8:	200000b4 	.word	0x200000b4
 80103ec:	20000606 	.word	0x20000606
 80103f0:	080139fc 	.word	0x080139fc
 80103f4:	08013a40 	.word	0x08013a40
 80103f8:	200000b6 	.word	0x200000b6
 80103fc:	20000608 	.word	0x20000608
 8010400:	08013a74 	.word	0x08013a74
 8010404:	08013abc 	.word	0x08013abc

08010408 <LL_PWR_EnableBootC2>:
{
 8010408:	b480      	push	{r7}
 801040a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 801040c:	4b05      	ldr	r3, [pc, #20]	@ (8010424 <LL_PWR_EnableBootC2+0x1c>)
 801040e:	68db      	ldr	r3, [r3, #12]
 8010410:	4a04      	ldr	r2, [pc, #16]	@ (8010424 <LL_PWR_EnableBootC2+0x1c>)
 8010412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010416:	60d3      	str	r3, [r2, #12]
}
 8010418:	bf00      	nop
 801041a:	46bd      	mov	sp, r7
 801041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop
 8010424:	58000400 	.word	0x58000400

08010428 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8010428:	b480      	push	{r7}
 801042a:	b083      	sub	sp, #12
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8010430:	4b06      	ldr	r3, [pc, #24]	@ (801044c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010432:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8010436:	4905      	ldr	r1, [pc, #20]	@ (801044c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	4313      	orrs	r3, r2
 801043c:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8010440:	bf00      	nop
 8010442:	370c      	adds	r7, #12
 8010444:	46bd      	mov	sp, r7
 8010446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044a:	4770      	bx	lr
 801044c:	58000800 	.word	0x58000800

08010450 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8010450:	b480      	push	{r7}
 8010452:	b083      	sub	sp, #12
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8010458:	4b05      	ldr	r3, [pc, #20]	@ (8010470 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801045a:	6a1a      	ldr	r2, [r3, #32]
 801045c:	4904      	ldr	r1, [pc, #16]	@ (8010470 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	4313      	orrs	r3, r2
 8010462:	620b      	str	r3, [r1, #32]
}
 8010464:	bf00      	nop
 8010466:	370c      	adds	r7, #12
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr
 8010470:	58000800 	.word	0x58000800

08010474 <LL_AHB3_GRP1_EnableClock>:
{
 8010474:	b480      	push	{r7}
 8010476:	b085      	sub	sp, #20
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 801047c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010480:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010482:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	4313      	orrs	r3, r2
 801048a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 801048c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010490:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4013      	ands	r3, r2
 8010496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010498:	68fb      	ldr	r3, [r7, #12]
}
 801049a:	bf00      	nop
 801049c:	3714      	adds	r7, #20
 801049e:	46bd      	mov	sp, r7
 80104a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a4:	4770      	bx	lr

080104a6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80104a6:	b480      	push	{r7}
 80104a8:	b085      	sub	sp, #20
 80104aa:	af00      	add	r7, sp, #0
 80104ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80104ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80104b2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80104b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	4313      	orrs	r3, r2
 80104be:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80104c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80104c6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	4013      	ands	r3, r2
 80104ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80104d0:	68fb      	ldr	r3, [r7, #12]
}
 80104d2:	bf00      	nop
 80104d4:	3714      	adds	r7, #20
 80104d6:	46bd      	mov	sp, r7
 80104d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104dc:	4770      	bx	lr

080104de <LL_C1_IPCC_EnableIT_TXF>:
{
 80104de:	b480      	push	{r7}
 80104e0:	b083      	sub	sp, #12
 80104e2:	af00      	add	r7, sp, #0
 80104e4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	601a      	str	r2, [r3, #0]
}
 80104f2:	bf00      	nop
 80104f4:	370c      	adds	r7, #12
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr

080104fe <LL_C1_IPCC_EnableIT_RXO>:
{
 80104fe:	b480      	push	{r7}
 8010500:	b083      	sub	sp, #12
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	f043 0201 	orr.w	r2, r3, #1
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	601a      	str	r2, [r3, #0]
}
 8010512:	bf00      	nop
 8010514:	370c      	adds	r7, #12
 8010516:	46bd      	mov	sp, r7
 8010518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051c:	4770      	bx	lr

0801051e <LL_C1_IPCC_EnableTransmitChannel>:
{
 801051e:	b480      	push	{r7}
 8010520:	b083      	sub	sp, #12
 8010522:	af00      	add	r7, sp, #0
 8010524:	6078      	str	r0, [r7, #4]
 8010526:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	685a      	ldr	r2, [r3, #4]
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	041b      	lsls	r3, r3, #16
 8010530:	43db      	mvns	r3, r3
 8010532:	401a      	ands	r2, r3
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	605a      	str	r2, [r3, #4]
}
 8010538:	bf00      	nop
 801053a:	370c      	adds	r7, #12
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	4770      	bx	lr

08010544 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8010544:	b480      	push	{r7}
 8010546:	b083      	sub	sp, #12
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	685a      	ldr	r2, [r3, #4]
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	041b      	lsls	r3, r3, #16
 8010556:	431a      	orrs	r2, r3
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	605a      	str	r2, [r3, #4]
}
 801055c:	bf00      	nop
 801055e:	370c      	adds	r7, #12
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr

08010568 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8010568:	b480      	push	{r7}
 801056a:	b083      	sub	sp, #12
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	685a      	ldr	r2, [r3, #4]
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	43db      	mvns	r3, r3
 801057a:	401a      	ands	r2, r3
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	605a      	str	r2, [r3, #4]
}
 8010580:	bf00      	nop
 8010582:	370c      	adds	r7, #12
 8010584:	46bd      	mov	sp, r7
 8010586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058a:	4770      	bx	lr

0801058c <LL_C1_IPCC_ClearFlag_CHx>:
{
 801058c:	b480      	push	{r7}
 801058e:	b083      	sub	sp, #12
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	683a      	ldr	r2, [r7, #0]
 801059a:	609a      	str	r2, [r3, #8]
}
 801059c:	bf00      	nop
 801059e:	370c      	adds	r7, #12
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr

080105a8 <LL_C1_IPCC_SetFlag_CHx>:
{
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	041a      	lsls	r2, r3, #16
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	609a      	str	r2, [r3, #8]
}
 80105ba:	bf00      	nop
 80105bc:	370c      	adds	r7, #12
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr

080105c6 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80105c6:	b480      	push	{r7}
 80105c8:	b083      	sub	sp, #12
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	6078      	str	r0, [r7, #4]
 80105ce:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	68da      	ldr	r2, [r3, #12]
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	4013      	ands	r3, r2
 80105d8:	683a      	ldr	r2, [r7, #0]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d101      	bne.n	80105e2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80105de:	2301      	movs	r3, #1
 80105e0:	e000      	b.n	80105e4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80105e2:	2300      	movs	r3, #0
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	370c      	adds	r7, #12
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr

080105f0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	69da      	ldr	r2, [r3, #28]
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	4013      	ands	r3, r2
 8010602:	683a      	ldr	r2, [r7, #0]
 8010604:	429a      	cmp	r2, r3
 8010606:	d101      	bne.n	801060c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8010608:	2301      	movs	r3, #1
 801060a:	e000      	b.n	801060e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 801060c:	2300      	movs	r3, #0
}
 801060e:	4618      	mov	r0, r3
 8010610:	370c      	adds	r7, #12
 8010612:	46bd      	mov	sp, r7
 8010614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010618:	4770      	bx	lr
	...

0801061c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 801061c:	b580      	push	{r7, lr}
 801061e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8010620:	2102      	movs	r1, #2
 8010622:	4818      	ldr	r0, [pc, #96]	@ (8010684 <HW_IPCC_Rx_Handler+0x68>)
 8010624:	f7ff ffe4 	bl	80105f0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010628:	4603      	mov	r3, r0
 801062a:	2b00      	cmp	r3, #0
 801062c:	d008      	beq.n	8010640 <HW_IPCC_Rx_Handler+0x24>
 801062e:	4b15      	ldr	r3, [pc, #84]	@ (8010684 <HW_IPCC_Rx_Handler+0x68>)
 8010630:	685b      	ldr	r3, [r3, #4]
 8010632:	f003 0302 	and.w	r3, r3, #2
 8010636:	2b00      	cmp	r3, #0
 8010638:	d102      	bne.n	8010640 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 801063a:	f000 f925 	bl	8010888 <HW_IPCC_SYS_EvtHandler>
 801063e:	e01e      	b.n	801067e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8010640:	2101      	movs	r1, #1
 8010642:	4810      	ldr	r0, [pc, #64]	@ (8010684 <HW_IPCC_Rx_Handler+0x68>)
 8010644:	f7ff ffd4 	bl	80105f0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010648:	4603      	mov	r3, r0
 801064a:	2b00      	cmp	r3, #0
 801064c:	d008      	beq.n	8010660 <HW_IPCC_Rx_Handler+0x44>
 801064e:	4b0d      	ldr	r3, [pc, #52]	@ (8010684 <HW_IPCC_Rx_Handler+0x68>)
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	f003 0301 	and.w	r3, r3, #1
 8010656:	2b00      	cmp	r3, #0
 8010658:	d102      	bne.n	8010660 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 801065a:	f000 f899 	bl	8010790 <HW_IPCC_BLE_EvtHandler>
 801065e:	e00e      	b.n	801067e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8010660:	2108      	movs	r1, #8
 8010662:	4808      	ldr	r0, [pc, #32]	@ (8010684 <HW_IPCC_Rx_Handler+0x68>)
 8010664:	f7ff ffc4 	bl	80105f0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8010668:	4603      	mov	r3, r0
 801066a:	2b00      	cmp	r3, #0
 801066c:	d008      	beq.n	8010680 <HW_IPCC_Rx_Handler+0x64>
 801066e:	4b05      	ldr	r3, [pc, #20]	@ (8010684 <HW_IPCC_Rx_Handler+0x68>)
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	f003 0308 	and.w	r3, r3, #8
 8010676:	2b00      	cmp	r3, #0
 8010678:	d102      	bne.n	8010680 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 801067a:	f000 f97d 	bl	8010978 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 801067e:	bf00      	nop
 8010680:	bf00      	nop
}
 8010682:	bd80      	pop	{r7, pc}
 8010684:	58000c00 	.word	0x58000c00

08010688 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8010688:	b580      	push	{r7, lr}
 801068a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801068c:	2102      	movs	r1, #2
 801068e:	4818      	ldr	r0, [pc, #96]	@ (80106f0 <HW_IPCC_Tx_Handler+0x68>)
 8010690:	f7ff ff99 	bl	80105c6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010694:	4603      	mov	r3, r0
 8010696:	2b00      	cmp	r3, #0
 8010698:	d108      	bne.n	80106ac <HW_IPCC_Tx_Handler+0x24>
 801069a:	4b15      	ldr	r3, [pc, #84]	@ (80106f0 <HW_IPCC_Tx_Handler+0x68>)
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d102      	bne.n	80106ac <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80106a6:	f000 f8d3 	bl	8010850 <HW_IPCC_SYS_CmdEvtHandler>
 80106aa:	e01e      	b.n	80106ea <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80106ac:	2108      	movs	r1, #8
 80106ae:	4810      	ldr	r0, [pc, #64]	@ (80106f0 <HW_IPCC_Tx_Handler+0x68>)
 80106b0:	f7ff ff89 	bl	80105c6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80106b4:	4603      	mov	r3, r0
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d108      	bne.n	80106cc <HW_IPCC_Tx_Handler+0x44>
 80106ba:	4b0d      	ldr	r3, [pc, #52]	@ (80106f0 <HW_IPCC_Tx_Handler+0x68>)
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d102      	bne.n	80106cc <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80106c6:	f000 f919 	bl	80108fc <HW_IPCC_MM_FreeBufHandler>
 80106ca:	e00e      	b.n	80106ea <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80106cc:	2120      	movs	r1, #32
 80106ce:	4808      	ldr	r0, [pc, #32]	@ (80106f0 <HW_IPCC_Tx_Handler+0x68>)
 80106d0:	f7ff ff79 	bl	80105c6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80106d4:	4603      	mov	r3, r0
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d108      	bne.n	80106ec <HW_IPCC_Tx_Handler+0x64>
 80106da:	4b05      	ldr	r3, [pc, #20]	@ (80106f0 <HW_IPCC_Tx_Handler+0x68>)
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d102      	bne.n	80106ec <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80106e6:	f000 f85f 	bl	80107a8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80106ea:	bf00      	nop
 80106ec:	bf00      	nop
}
 80106ee:	bd80      	pop	{r7, pc}
 80106f0:	58000c00 	.word	0x58000c00

080106f4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80106f8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80106fc:	f7ff fed3 	bl	80104a6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8010700:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010704:	f7ff fea4 	bl	8010450 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8010708:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801070c:	f7ff fe8c 	bl	8010428 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8010710:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8010712:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8010714:	f7ff fe78 	bl	8010408 <LL_PWR_EnableBootC2>

  return;
 8010718:	bf00      	nop
}
 801071a:	bd80      	pop	{r7, pc}

0801071c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 801071c:	b580      	push	{r7, lr}
 801071e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8010720:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8010724:	f7ff fea6 	bl	8010474 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8010728:	4806      	ldr	r0, [pc, #24]	@ (8010744 <HW_IPCC_Init+0x28>)
 801072a:	f7ff fee8 	bl	80104fe <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801072e:	4805      	ldr	r0, [pc, #20]	@ (8010744 <HW_IPCC_Init+0x28>)
 8010730:	f7ff fed5 	bl	80104de <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8010734:	202c      	movs	r0, #44	@ 0x2c
 8010736:	f7f2 fd92 	bl	800325e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801073a:	202d      	movs	r0, #45	@ 0x2d
 801073c:	f7f2 fd8f 	bl	800325e <HAL_NVIC_EnableIRQ>

  return;
 8010740:	bf00      	nop
}
 8010742:	bd80      	pop	{r7, pc}
 8010744:	58000c00 	.word	0x58000c00

08010748 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b084      	sub	sp, #16
 801074c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801074e:	f3ef 8310 	mrs	r3, PRIMASK
 8010752:	607b      	str	r3, [r7, #4]
  return(result);
 8010754:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8010756:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010758:	b672      	cpsid	i
}
 801075a:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801075c:	2101      	movs	r1, #1
 801075e:	4806      	ldr	r0, [pc, #24]	@ (8010778 <HW_IPCC_BLE_Init+0x30>)
 8010760:	f7ff ff02 	bl	8010568 <LL_C1_IPCC_EnableReceiveChannel>
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	f383 8810 	msr	PRIMASK, r3
}
 801076e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8010770:	bf00      	nop
}
 8010772:	3710      	adds	r7, #16
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}
 8010778:	58000c00 	.word	0x58000c00

0801077c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 801077c:	b580      	push	{r7, lr}
 801077e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8010780:	2101      	movs	r1, #1
 8010782:	4802      	ldr	r0, [pc, #8]	@ (801078c <HW_IPCC_BLE_SendCmd+0x10>)
 8010784:	f7ff ff10 	bl	80105a8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010788:	bf00      	nop
}
 801078a:	bd80      	pop	{r7, pc}
 801078c:	58000c00 	.word	0x58000c00

08010790 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8010790:	b580      	push	{r7, lr}
 8010792:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8010794:	f7fd fd16 	bl	800e1c4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8010798:	2101      	movs	r1, #1
 801079a:	4802      	ldr	r0, [pc, #8]	@ (80107a4 <HW_IPCC_BLE_EvtHandler+0x14>)
 801079c:	f7ff fef6 	bl	801058c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80107a0:	bf00      	nop
}
 80107a2:	bd80      	pop	{r7, pc}
 80107a4:	58000c00 	.word	0x58000c00

080107a8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107ae:	f3ef 8310 	mrs	r3, PRIMASK
 80107b2:	607b      	str	r3, [r7, #4]
  return(result);
 80107b4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80107b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80107b8:	b672      	cpsid	i
}
 80107ba:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80107bc:	2120      	movs	r1, #32
 80107be:	4807      	ldr	r0, [pc, #28]	@ (80107dc <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 80107c0:	f7ff fec0 	bl	8010544 <LL_C1_IPCC_DisableTransmitChannel>
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	f383 8810 	msr	PRIMASK, r3
}
 80107ce:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 80107d0:	f7fd fd28 	bl	800e224 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80107d4:	bf00      	nop
}
 80107d6:	3710      	adds	r7, #16
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	58000c00 	.word	0x58000c00

080107e0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b084      	sub	sp, #16
 80107e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107e6:	f3ef 8310 	mrs	r3, PRIMASK
 80107ea:	607b      	str	r3, [r7, #4]
  return(result);
 80107ec:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80107ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80107f0:	b672      	cpsid	i
}
 80107f2:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80107f4:	2102      	movs	r1, #2
 80107f6:	4806      	ldr	r0, [pc, #24]	@ (8010810 <HW_IPCC_SYS_Init+0x30>)
 80107f8:	f7ff feb6 	bl	8010568 <LL_C1_IPCC_EnableReceiveChannel>
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	f383 8810 	msr	PRIMASK, r3
}
 8010806:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8010808:	bf00      	nop
}
 801080a:	3710      	adds	r7, #16
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	58000c00 	.word	0x58000c00

08010814 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b084      	sub	sp, #16
 8010818:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801081a:	2102      	movs	r1, #2
 801081c:	480b      	ldr	r0, [pc, #44]	@ (801084c <HW_IPCC_SYS_SendCmd+0x38>)
 801081e:	f7ff fec3 	bl	80105a8 <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010822:	f3ef 8310 	mrs	r3, PRIMASK
 8010826:	607b      	str	r3, [r7, #4]
  return(result);
 8010828:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 801082a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801082c:	b672      	cpsid	i
}
 801082e:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010830:	2102      	movs	r1, #2
 8010832:	4806      	ldr	r0, [pc, #24]	@ (801084c <HW_IPCC_SYS_SendCmd+0x38>)
 8010834:	f7ff fe73 	bl	801051e <LL_C1_IPCC_EnableTransmitChannel>
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	f383 8810 	msr	PRIMASK, r3
}
 8010842:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8010844:	bf00      	nop
}
 8010846:	3710      	adds	r7, #16
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	58000c00 	.word	0x58000c00

08010850 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010856:	f3ef 8310 	mrs	r3, PRIMASK
 801085a:	607b      	str	r3, [r7, #4]
  return(result);
 801085c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 801085e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010860:	b672      	cpsid	i
}
 8010862:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010864:	2102      	movs	r1, #2
 8010866:	4807      	ldr	r0, [pc, #28]	@ (8010884 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 8010868:	f7ff fe6c 	bl	8010544 <LL_C1_IPCC_DisableTransmitChannel>
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	f383 8810 	msr	PRIMASK, r3
}
 8010876:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 8010878:	f7fd fd24 	bl	800e2c4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 801087c:	bf00      	nop
}
 801087e:	3710      	adds	r7, #16
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}
 8010884:	58000c00 	.word	0x58000c00

08010888 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8010888:	b580      	push	{r7, lr}
 801088a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 801088c:	f7fd fd30 	bl	800e2f0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010890:	2102      	movs	r1, #2
 8010892:	4802      	ldr	r0, [pc, #8]	@ (801089c <HW_IPCC_SYS_EvtHandler+0x14>)
 8010894:	f7ff fe7a 	bl	801058c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010898:	bf00      	nop
}
 801089a:	bd80      	pop	{r7, pc}
 801089c:	58000c00 	.word	0x58000c00

080108a0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b086      	sub	sp, #24
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80108a8:	2108      	movs	r1, #8
 80108aa:	4812      	ldr	r0, [pc, #72]	@ (80108f4 <HW_IPCC_MM_SendFreeBuf+0x54>)
 80108ac:	f7ff fe8b 	bl	80105c6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80108b0:	4603      	mov	r3, r0
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d013      	beq.n	80108de <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 80108b6:	4a10      	ldr	r2, [pc, #64]	@ (80108f8 <HW_IPCC_MM_SendFreeBuf+0x58>)
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108bc:	f3ef 8310 	mrs	r3, PRIMASK
 80108c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80108c2:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 80108c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80108c6:	b672      	cpsid	i
}
 80108c8:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80108ca:	2108      	movs	r1, #8
 80108cc:	4809      	ldr	r0, [pc, #36]	@ (80108f4 <HW_IPCC_MM_SendFreeBuf+0x54>)
 80108ce:	f7ff fe26 	bl	801051e <LL_C1_IPCC_EnableTransmitChannel>
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	f383 8810 	msr	PRIMASK, r3
}
 80108dc:	e005      	b.n	80108ea <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80108e2:	2108      	movs	r1, #8
 80108e4:	4803      	ldr	r0, [pc, #12]	@ (80108f4 <HW_IPCC_MM_SendFreeBuf+0x54>)
 80108e6:	f7ff fe5f 	bl	80105a8 <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 80108ea:	bf00      	nop
}
 80108ec:	3718      	adds	r7, #24
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	58000c00 	.word	0x58000c00
 80108f8:	2000060c 	.word	0x2000060c

080108fc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b084      	sub	sp, #16
 8010900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010902:	f3ef 8310 	mrs	r3, PRIMASK
 8010906:	607b      	str	r3, [r7, #4]
  return(result);
 8010908:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 801090a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801090c:	b672      	cpsid	i
}
 801090e:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010910:	2108      	movs	r1, #8
 8010912:	480a      	ldr	r0, [pc, #40]	@ (801093c <HW_IPCC_MM_FreeBufHandler+0x40>)
 8010914:	f7ff fe16 	bl	8010544 <LL_C1_IPCC_DisableTransmitChannel>
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	f383 8810 	msr	PRIMASK, r3
}
 8010922:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 8010924:	4b06      	ldr	r3, [pc, #24]	@ (8010940 <HW_IPCC_MM_FreeBufHandler+0x44>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801092a:	2108      	movs	r1, #8
 801092c:	4803      	ldr	r0, [pc, #12]	@ (801093c <HW_IPCC_MM_FreeBufHandler+0x40>)
 801092e:	f7ff fe3b 	bl	80105a8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010932:	bf00      	nop
}
 8010934:	3710      	adds	r7, #16
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	58000c00 	.word	0x58000c00
 8010940:	2000060c 	.word	0x2000060c

08010944 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b084      	sub	sp, #16
 8010948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801094a:	f3ef 8310 	mrs	r3, PRIMASK
 801094e:	607b      	str	r3, [r7, #4]
  return(result);
 8010950:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8010952:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010954:	b672      	cpsid	i
}
 8010956:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8010958:	2108      	movs	r1, #8
 801095a:	4806      	ldr	r0, [pc, #24]	@ (8010974 <HW_IPCC_TRACES_Init+0x30>)
 801095c:	f7ff fe04 	bl	8010568 <LL_C1_IPCC_EnableReceiveChannel>
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	f383 8810 	msr	PRIMASK, r3
}
 801096a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 801096c:	bf00      	nop
}
 801096e:	3710      	adds	r7, #16
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}
 8010974:	58000c00 	.word	0x58000c00

08010978 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8010978:	b580      	push	{r7, lr}
 801097a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 801097c:	f7fd fd60 	bl	800e440 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8010980:	2108      	movs	r1, #8
 8010982:	4802      	ldr	r0, [pc, #8]	@ (801098c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8010984:	f7ff fe02 	bl	801058c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010988:	bf00      	nop
}
 801098a:	bd80      	pop	{r7, pc}
 801098c:	58000c00 	.word	0x58000c00

08010990 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010994:	2200      	movs	r2, #0
 8010996:	4912      	ldr	r1, [pc, #72]	@ (80109e0 <MX_USB_Device_Init+0x50>)
 8010998:	4812      	ldr	r0, [pc, #72]	@ (80109e4 <MX_USB_Device_Init+0x54>)
 801099a:	f7fa fabd 	bl	800af18 <USBD_Init>
 801099e:	4603      	mov	r3, r0
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d001      	beq.n	80109a8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80109a4:	f7f1 fdbc 	bl	8002520 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80109a8:	490f      	ldr	r1, [pc, #60]	@ (80109e8 <MX_USB_Device_Init+0x58>)
 80109aa:	480e      	ldr	r0, [pc, #56]	@ (80109e4 <MX_USB_Device_Init+0x54>)
 80109ac:	f7fa fae4 	bl	800af78 <USBD_RegisterClass>
 80109b0:	4603      	mov	r3, r0
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d001      	beq.n	80109ba <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80109b6:	f7f1 fdb3 	bl	8002520 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80109ba:	490c      	ldr	r1, [pc, #48]	@ (80109ec <MX_USB_Device_Init+0x5c>)
 80109bc:	4809      	ldr	r0, [pc, #36]	@ (80109e4 <MX_USB_Device_Init+0x54>)
 80109be:	f7fa fa1b 	bl	800adf8 <USBD_CDC_RegisterInterface>
 80109c2:	4603      	mov	r3, r0
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d001      	beq.n	80109cc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80109c8:	f7f1 fdaa 	bl	8002520 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80109cc:	4805      	ldr	r0, [pc, #20]	@ (80109e4 <MX_USB_Device_Init+0x54>)
 80109ce:	f7fa fb09 	bl	800afe4 <USBD_Start>
 80109d2:	4603      	mov	r3, r0
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d001      	beq.n	80109dc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80109d8:	f7f1 fda2 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80109dc:	bf00      	nop
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	200000cc 	.word	0x200000cc
 80109e4:	20000610 	.word	0x20000610
 80109e8:	20000020 	.word	0x20000020
 80109ec:	200000b8 	.word	0x200000b8

080109f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80109f4:	2200      	movs	r2, #0
 80109f6:	4905      	ldr	r1, [pc, #20]	@ (8010a0c <CDC_Init_FS+0x1c>)
 80109f8:	4805      	ldr	r0, [pc, #20]	@ (8010a10 <CDC_Init_FS+0x20>)
 80109fa:	f7fa fa17 	bl	800ae2c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80109fe:	4905      	ldr	r1, [pc, #20]	@ (8010a14 <CDC_Init_FS+0x24>)
 8010a00:	4803      	ldr	r0, [pc, #12]	@ (8010a10 <CDC_Init_FS+0x20>)
 8010a02:	f7fa fa35 	bl	800ae70 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010a06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	bd80      	pop	{r7, pc}
 8010a0c:	200010ec 	.word	0x200010ec
 8010a10:	20000610 	.word	0x20000610
 8010a14:	200008ec 	.word	0x200008ec

08010a18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010a18:	b480      	push	{r7}
 8010a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010a1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	46bd      	mov	sp, r7
 8010a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a26:	4770      	bx	lr

08010a28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b083      	sub	sp, #12
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	4603      	mov	r3, r0
 8010a30:	6039      	str	r1, [r7, #0]
 8010a32:	71fb      	strb	r3, [r7, #7]
 8010a34:	4613      	mov	r3, r2
 8010a36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010a38:	79fb      	ldrb	r3, [r7, #7]
 8010a3a:	2b23      	cmp	r3, #35	@ 0x23
 8010a3c:	d84a      	bhi.n	8010ad4 <CDC_Control_FS+0xac>
 8010a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8010a44 <CDC_Control_FS+0x1c>)
 8010a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a44:	08010ad5 	.word	0x08010ad5
 8010a48:	08010ad5 	.word	0x08010ad5
 8010a4c:	08010ad5 	.word	0x08010ad5
 8010a50:	08010ad5 	.word	0x08010ad5
 8010a54:	08010ad5 	.word	0x08010ad5
 8010a58:	08010ad5 	.word	0x08010ad5
 8010a5c:	08010ad5 	.word	0x08010ad5
 8010a60:	08010ad5 	.word	0x08010ad5
 8010a64:	08010ad5 	.word	0x08010ad5
 8010a68:	08010ad5 	.word	0x08010ad5
 8010a6c:	08010ad5 	.word	0x08010ad5
 8010a70:	08010ad5 	.word	0x08010ad5
 8010a74:	08010ad5 	.word	0x08010ad5
 8010a78:	08010ad5 	.word	0x08010ad5
 8010a7c:	08010ad5 	.word	0x08010ad5
 8010a80:	08010ad5 	.word	0x08010ad5
 8010a84:	08010ad5 	.word	0x08010ad5
 8010a88:	08010ad5 	.word	0x08010ad5
 8010a8c:	08010ad5 	.word	0x08010ad5
 8010a90:	08010ad5 	.word	0x08010ad5
 8010a94:	08010ad5 	.word	0x08010ad5
 8010a98:	08010ad5 	.word	0x08010ad5
 8010a9c:	08010ad5 	.word	0x08010ad5
 8010aa0:	08010ad5 	.word	0x08010ad5
 8010aa4:	08010ad5 	.word	0x08010ad5
 8010aa8:	08010ad5 	.word	0x08010ad5
 8010aac:	08010ad5 	.word	0x08010ad5
 8010ab0:	08010ad5 	.word	0x08010ad5
 8010ab4:	08010ad5 	.word	0x08010ad5
 8010ab8:	08010ad5 	.word	0x08010ad5
 8010abc:	08010ad5 	.word	0x08010ad5
 8010ac0:	08010ad5 	.word	0x08010ad5
 8010ac4:	08010ad5 	.word	0x08010ad5
 8010ac8:	08010ad5 	.word	0x08010ad5
 8010acc:	08010ad5 	.word	0x08010ad5
 8010ad0:	08010ad5 	.word	0x08010ad5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010ad4:	bf00      	nop
  }

  return (USBD_OK);
 8010ad6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	370c      	adds	r7, #12
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr

08010ae4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b082      	sub	sp, #8
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010aee:	6879      	ldr	r1, [r7, #4]
 8010af0:	4805      	ldr	r0, [pc, #20]	@ (8010b08 <CDC_Receive_FS+0x24>)
 8010af2:	f7fa f9bd 	bl	800ae70 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010af6:	4804      	ldr	r0, [pc, #16]	@ (8010b08 <CDC_Receive_FS+0x24>)
 8010af8:	f7fa f9d8 	bl	800aeac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010afc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3708      	adds	r7, #8
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}
 8010b06:	bf00      	nop
 8010b08:	20000610 	.word	0x20000610

08010b0c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b087      	sub	sp, #28
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	60f8      	str	r0, [r7, #12]
 8010b14:	60b9      	str	r1, [r7, #8]
 8010b16:	4613      	mov	r3, r2
 8010b18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	371c      	adds	r7, #28
 8010b26:	46bd      	mov	sp, r7
 8010b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2c:	4770      	bx	lr
	...

08010b30 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b30:	b480      	push	{r7}
 8010b32:	b083      	sub	sp, #12
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	4603      	mov	r3, r0
 8010b38:	6039      	str	r1, [r7, #0]
 8010b3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	2212      	movs	r2, #18
 8010b40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8010b42:	4b03      	ldr	r3, [pc, #12]	@ (8010b50 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	370c      	adds	r7, #12
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4e:	4770      	bx	lr
 8010b50:	200000ec 	.word	0x200000ec

08010b54 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b54:	b480      	push	{r7}
 8010b56:	b083      	sub	sp, #12
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	6039      	str	r1, [r7, #0]
 8010b5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	2204      	movs	r2, #4
 8010b64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010b66:	4b03      	ldr	r3, [pc, #12]	@ (8010b74 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	370c      	adds	r7, #12
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b72:	4770      	bx	lr
 8010b74:	20000100 	.word	0x20000100

08010b78 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	4603      	mov	r3, r0
 8010b80:	6039      	str	r1, [r7, #0]
 8010b82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010b84:	79fb      	ldrb	r3, [r7, #7]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d105      	bne.n	8010b96 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010b8a:	683a      	ldr	r2, [r7, #0]
 8010b8c:	4907      	ldr	r1, [pc, #28]	@ (8010bac <USBD_CDC_ProductStrDescriptor+0x34>)
 8010b8e:	4808      	ldr	r0, [pc, #32]	@ (8010bb0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010b90:	f7fb fb70 	bl	800c274 <USBD_GetString>
 8010b94:	e004      	b.n	8010ba0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010b96:	683a      	ldr	r2, [r7, #0]
 8010b98:	4904      	ldr	r1, [pc, #16]	@ (8010bac <USBD_CDC_ProductStrDescriptor+0x34>)
 8010b9a:	4805      	ldr	r0, [pc, #20]	@ (8010bb0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010b9c:	f7fb fb6a 	bl	800c274 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ba0:	4b02      	ldr	r3, [pc, #8]	@ (8010bac <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3708      	adds	r7, #8
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop
 8010bac:	200018ec 	.word	0x200018ec
 8010bb0:	08013e9c 	.word	0x08013e9c

08010bb4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b082      	sub	sp, #8
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	4603      	mov	r3, r0
 8010bbc:	6039      	str	r1, [r7, #0]
 8010bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010bc0:	683a      	ldr	r2, [r7, #0]
 8010bc2:	4904      	ldr	r1, [pc, #16]	@ (8010bd4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8010bc4:	4804      	ldr	r0, [pc, #16]	@ (8010bd8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8010bc6:	f7fb fb55 	bl	800c274 <USBD_GetString>
  return USBD_StrDesc;
 8010bca:	4b02      	ldr	r3, [pc, #8]	@ (8010bd4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010bcc:	4618      	mov	r0, r3
 8010bce:	3708      	adds	r7, #8
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}
 8010bd4:	200018ec 	.word	0x200018ec
 8010bd8:	08013eb4 	.word	0x08013eb4

08010bdc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	4603      	mov	r3, r0
 8010be4:	6039      	str	r1, [r7, #0]
 8010be6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010be8:	683b      	ldr	r3, [r7, #0]
 8010bea:	221a      	movs	r2, #26
 8010bec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010bee:	f000 f843 	bl	8010c78 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010bf2:	4b02      	ldr	r3, [pc, #8]	@ (8010bfc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	20000104 	.word	0x20000104

08010c00 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b082      	sub	sp, #8
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	4603      	mov	r3, r0
 8010c08:	6039      	str	r1, [r7, #0]
 8010c0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010c0c:	79fb      	ldrb	r3, [r7, #7]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d105      	bne.n	8010c1e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010c12:	683a      	ldr	r2, [r7, #0]
 8010c14:	4907      	ldr	r1, [pc, #28]	@ (8010c34 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010c16:	4808      	ldr	r0, [pc, #32]	@ (8010c38 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010c18:	f7fb fb2c 	bl	800c274 <USBD_GetString>
 8010c1c:	e004      	b.n	8010c28 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010c1e:	683a      	ldr	r2, [r7, #0]
 8010c20:	4904      	ldr	r1, [pc, #16]	@ (8010c34 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010c22:	4805      	ldr	r0, [pc, #20]	@ (8010c38 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010c24:	f7fb fb26 	bl	800c274 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c28:	4b02      	ldr	r3, [pc, #8]	@ (8010c34 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3708      	adds	r7, #8
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	200018ec 	.word	0x200018ec
 8010c38:	08013ec8 	.word	0x08013ec8

08010c3c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b082      	sub	sp, #8
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	4603      	mov	r3, r0
 8010c44:	6039      	str	r1, [r7, #0]
 8010c46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010c48:	79fb      	ldrb	r3, [r7, #7]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d105      	bne.n	8010c5a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010c4e:	683a      	ldr	r2, [r7, #0]
 8010c50:	4907      	ldr	r1, [pc, #28]	@ (8010c70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010c52:	4808      	ldr	r0, [pc, #32]	@ (8010c74 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010c54:	f7fb fb0e 	bl	800c274 <USBD_GetString>
 8010c58:	e004      	b.n	8010c64 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010c5a:	683a      	ldr	r2, [r7, #0]
 8010c5c:	4904      	ldr	r1, [pc, #16]	@ (8010c70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010c5e:	4805      	ldr	r0, [pc, #20]	@ (8010c74 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010c60:	f7fb fb08 	bl	800c274 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010c64:	4b02      	ldr	r3, [pc, #8]	@ (8010c70 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3708      	adds	r7, #8
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	200018ec 	.word	0x200018ec
 8010c74:	08013ed4 	.word	0x08013ed4

08010c78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b084      	sub	sp, #16
 8010c7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8010cbc <Get_SerialNum+0x44>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010c84:	4b0e      	ldr	r3, [pc, #56]	@ (8010cc0 <Get_SerialNum+0x48>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8010cc4 <Get_SerialNum+0x4c>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010c90:	68fa      	ldr	r2, [r7, #12]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	4413      	add	r3, r2
 8010c96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d009      	beq.n	8010cb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010c9e:	2208      	movs	r2, #8
 8010ca0:	4909      	ldr	r1, [pc, #36]	@ (8010cc8 <Get_SerialNum+0x50>)
 8010ca2:	68f8      	ldr	r0, [r7, #12]
 8010ca4:	f000 f814 	bl	8010cd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010ca8:	2204      	movs	r2, #4
 8010caa:	4908      	ldr	r1, [pc, #32]	@ (8010ccc <Get_SerialNum+0x54>)
 8010cac:	68b8      	ldr	r0, [r7, #8]
 8010cae:	f000 f80f 	bl	8010cd0 <IntToUnicode>
  }
}
 8010cb2:	bf00      	nop
 8010cb4:	3710      	adds	r7, #16
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	1fff7590 	.word	0x1fff7590
 8010cc0:	1fff7594 	.word	0x1fff7594
 8010cc4:	1fff7598 	.word	0x1fff7598
 8010cc8:	20000106 	.word	0x20000106
 8010ccc:	20000116 	.word	0x20000116

08010cd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b087      	sub	sp, #28
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	60b9      	str	r1, [r7, #8]
 8010cda:	4613      	mov	r3, r2
 8010cdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	75fb      	strb	r3, [r7, #23]
 8010ce6:	e027      	b.n	8010d38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	0f1b      	lsrs	r3, r3, #28
 8010cec:	2b09      	cmp	r3, #9
 8010cee:	d80b      	bhi.n	8010d08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	0f1b      	lsrs	r3, r3, #28
 8010cf4:	b2da      	uxtb	r2, r3
 8010cf6:	7dfb      	ldrb	r3, [r7, #23]
 8010cf8:	005b      	lsls	r3, r3, #1
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	440b      	add	r3, r1
 8010d00:	3230      	adds	r2, #48	@ 0x30
 8010d02:	b2d2      	uxtb	r2, r2
 8010d04:	701a      	strb	r2, [r3, #0]
 8010d06:	e00a      	b.n	8010d1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	0f1b      	lsrs	r3, r3, #28
 8010d0c:	b2da      	uxtb	r2, r3
 8010d0e:	7dfb      	ldrb	r3, [r7, #23]
 8010d10:	005b      	lsls	r3, r3, #1
 8010d12:	4619      	mov	r1, r3
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	440b      	add	r3, r1
 8010d18:	3237      	adds	r2, #55	@ 0x37
 8010d1a:	b2d2      	uxtb	r2, r2
 8010d1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	011b      	lsls	r3, r3, #4
 8010d22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010d24:	7dfb      	ldrb	r3, [r7, #23]
 8010d26:	005b      	lsls	r3, r3, #1
 8010d28:	3301      	adds	r3, #1
 8010d2a:	68ba      	ldr	r2, [r7, #8]
 8010d2c:	4413      	add	r3, r2
 8010d2e:	2200      	movs	r2, #0
 8010d30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010d32:	7dfb      	ldrb	r3, [r7, #23]
 8010d34:	3301      	adds	r3, #1
 8010d36:	75fb      	strb	r3, [r7, #23]
 8010d38:	7dfa      	ldrb	r2, [r7, #23]
 8010d3a:	79fb      	ldrb	r3, [r7, #7]
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d3d3      	bcc.n	8010ce8 <IntToUnicode+0x18>
  }
}
 8010d40:	bf00      	nop
 8010d42:	bf00      	nop
 8010d44:	371c      	adds	r7, #28
 8010d46:	46bd      	mov	sp, r7
 8010d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4c:	4770      	bx	lr

08010d4e <LL_AHB2_GRP1_EnableClock>:
{
 8010d4e:	b480      	push	{r7}
 8010d50:	b085      	sub	sp, #20
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8010d56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010d5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010d5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	4313      	orrs	r3, r2
 8010d64:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8010d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010d6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	4013      	ands	r3, r2
 8010d70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010d72:	68fb      	ldr	r3, [r7, #12]
}
 8010d74:	bf00      	nop
 8010d76:	3714      	adds	r7, #20
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7e:	4770      	bx	lr

08010d80 <LL_APB1_GRP1_EnableClock>:
{
 8010d80:	b480      	push	{r7}
 8010d82:	b085      	sub	sp, #20
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8010d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010d8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010d8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	4313      	orrs	r3, r2
 8010d96:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8010d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010d9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	4013      	ands	r3, r2
 8010da2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010da4:	68fb      	ldr	r3, [r7, #12]
}
 8010da6:	bf00      	nop
 8010da8:	3714      	adds	r7, #20
 8010daa:	46bd      	mov	sp, r7
 8010dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db0:	4770      	bx	lr
	...

08010db4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b09c      	sub	sp, #112	@ 0x70
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010dbc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	601a      	str	r2, [r3, #0]
 8010dc4:	605a      	str	r2, [r3, #4]
 8010dc6:	609a      	str	r2, [r3, #8]
 8010dc8:	60da      	str	r2, [r3, #12]
 8010dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010dcc:	f107 030c 	add.w	r3, r7, #12
 8010dd0:	2250      	movs	r2, #80	@ 0x50
 8010dd2:	2100      	movs	r1, #0
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f000 ff91 	bl	8011cfc <memset>
  if(pcdHandle->Instance==USB)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	4a23      	ldr	r2, [pc, #140]	@ (8010e6c <HAL_PCD_MspInit+0xb8>)
 8010de0:	4293      	cmp	r3, r2
 8010de2:	d13e      	bne.n	8010e62 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010de4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010de8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8010dea:	2318      	movs	r3, #24
 8010dec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8010dee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010df2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8010df4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010df8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8010dfa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8010dfe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8010e00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8010e04:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8010e06:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8010e0a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010e0c:	f107 030c 	add.w	r3, r7, #12
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7f6 f815 	bl	8006e40 <HAL_RCCEx_PeriphCLKConfig>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d001      	beq.n	8010e20 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8010e1c:	f7f1 fb80 	bl	8002520 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e20:	2001      	movs	r0, #1
 8010e22:	f7ff ff94 	bl	8010d4e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010e26:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010e2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e2c:	2302      	movs	r3, #2
 8010e2e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e30:	2300      	movs	r3, #0
 8010e32:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010e34:	2300      	movs	r3, #0
 8010e36:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8010e38:	230a      	movs	r3, #10
 8010e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e3c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8010e40:	4619      	mov	r1, r3
 8010e42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8010e46:	f7f2 fc75 	bl	8003734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010e4a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8010e4e:	f7ff ff97 	bl	8010d80 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8010e52:	2200      	movs	r2, #0
 8010e54:	2100      	movs	r1, #0
 8010e56:	2014      	movs	r0, #20
 8010e58:	f7f2 f9e7 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010e5c:	2014      	movs	r0, #20
 8010e5e:	f7f2 f9fe 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010e62:	bf00      	nop
 8010e64:	3770      	adds	r7, #112	@ 0x70
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	40006800 	.word	0x40006800

08010e70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8010e84:	4619      	mov	r1, r3
 8010e86:	4610      	mov	r0, r2
 8010e88:	f7fa f8f9 	bl	800b07e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010e8c:	bf00      	nop
 8010e8e:	3708      	adds	r7, #8
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010ea6:	78fa      	ldrb	r2, [r7, #3]
 8010ea8:	6879      	ldr	r1, [r7, #4]
 8010eaa:	4613      	mov	r3, r2
 8010eac:	009b      	lsls	r3, r3, #2
 8010eae:	4413      	add	r3, r2
 8010eb0:	00db      	lsls	r3, r3, #3
 8010eb2:	440b      	add	r3, r1
 8010eb4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010eb8:	681a      	ldr	r2, [r3, #0]
 8010eba:	78fb      	ldrb	r3, [r7, #3]
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	f7fa f933 	bl	800b128 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8010ec2:	bf00      	nop
 8010ec4:	3708      	adds	r7, #8
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b082      	sub	sp, #8
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
 8010ed2:	460b      	mov	r3, r1
 8010ed4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010edc:	78fa      	ldrb	r2, [r7, #3]
 8010ede:	6879      	ldr	r1, [r7, #4]
 8010ee0:	4613      	mov	r3, r2
 8010ee2:	009b      	lsls	r3, r3, #2
 8010ee4:	4413      	add	r3, r2
 8010ee6:	00db      	lsls	r3, r3, #3
 8010ee8:	440b      	add	r3, r1
 8010eea:	3324      	adds	r3, #36	@ 0x24
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	78fb      	ldrb	r3, [r7, #3]
 8010ef0:	4619      	mov	r1, r3
 8010ef2:	f7fa f9cc 	bl	800b28e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8010ef6:	bf00      	nop
 8010ef8:	3708      	adds	r7, #8
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}

08010efe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010efe:	b580      	push	{r7, lr}
 8010f00:	b082      	sub	sp, #8
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7fa fb06 	bl	800b51e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8010f12:	bf00      	nop
 8010f14:	3708      	adds	r7, #8
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}

08010f1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f1a:	b580      	push	{r7, lr}
 8010f1c:	b084      	sub	sp, #16
 8010f1e:	af00      	add	r7, sp, #0
 8010f20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010f22:	2301      	movs	r3, #1
 8010f24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	795b      	ldrb	r3, [r3, #5]
 8010f2a:	2b02      	cmp	r3, #2
 8010f2c:	d001      	beq.n	8010f32 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010f2e:	f7f1 faf7 	bl	8002520 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010f38:	7bfa      	ldrb	r2, [r7, #15]
 8010f3a:	4611      	mov	r1, r2
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7fa faaa 	bl	800b496 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7fa fa52 	bl	800b3f2 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010f4e:	bf00      	nop
 8010f50:	3710      	adds	r7, #16
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
	...

08010f58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010f66:	4618      	mov	r0, r3
 8010f68:	f7fa faa5 	bl	800b4b6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	7a5b      	ldrb	r3, [r3, #9]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d005      	beq.n	8010f80 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010f74:	4b04      	ldr	r3, [pc, #16]	@ (8010f88 <HAL_PCD_SuspendCallback+0x30>)
 8010f76:	691b      	ldr	r3, [r3, #16]
 8010f78:	4a03      	ldr	r2, [pc, #12]	@ (8010f88 <HAL_PCD_SuspendCallback+0x30>)
 8010f7a:	f043 0306 	orr.w	r3, r3, #6
 8010f7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8010f80:	bf00      	nop
 8010f82:	3708      	adds	r7, #8
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	e000ed00 	.word	0xe000ed00

08010f8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	7a5b      	ldrb	r3, [r3, #9]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d007      	beq.n	8010fac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010f9c:	4b08      	ldr	r3, [pc, #32]	@ (8010fc0 <HAL_PCD_ResumeCallback+0x34>)
 8010f9e:	691b      	ldr	r3, [r3, #16]
 8010fa0:	4a07      	ldr	r2, [pc, #28]	@ (8010fc0 <HAL_PCD_ResumeCallback+0x34>)
 8010fa2:	f023 0306 	bic.w	r3, r3, #6
 8010fa6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010fa8:	f000 f9fa 	bl	80113a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7fa fa9b 	bl	800b4ee <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010fb8:	bf00      	nop
 8010fba:	3708      	adds	r7, #8
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}
 8010fc0:	e000ed00 	.word	0xe000ed00

08010fc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8011080 <USBD_LL_Init+0xbc>)
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	4a2a      	ldr	r2, [pc, #168]	@ (8011080 <USBD_LL_Init+0xbc>)
 8010fd8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8010fdc:	f7f4 fc2e 	bl	800583c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8010fe0:	4b27      	ldr	r3, [pc, #156]	@ (8011080 <USBD_LL_Init+0xbc>)
 8010fe2:	4a28      	ldr	r2, [pc, #160]	@ (8011084 <USBD_LL_Init+0xc0>)
 8010fe4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010fe6:	4b26      	ldr	r3, [pc, #152]	@ (8011080 <USBD_LL_Init+0xbc>)
 8010fe8:	2208      	movs	r2, #8
 8010fea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010fec:	4b24      	ldr	r3, [pc, #144]	@ (8011080 <USBD_LL_Init+0xbc>)
 8010fee:	2202      	movs	r2, #2
 8010ff0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010ff2:	4b23      	ldr	r3, [pc, #140]	@ (8011080 <USBD_LL_Init+0xbc>)
 8010ff4:	2202      	movs	r2, #2
 8010ff6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010ff8:	4b21      	ldr	r3, [pc, #132]	@ (8011080 <USBD_LL_Init+0xbc>)
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010ffe:	4b20      	ldr	r3, [pc, #128]	@ (8011080 <USBD_LL_Init+0xbc>)
 8011000:	2200      	movs	r2, #0
 8011002:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011004:	4b1e      	ldr	r3, [pc, #120]	@ (8011080 <USBD_LL_Init+0xbc>)
 8011006:	2200      	movs	r2, #0
 8011008:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801100a:	4b1d      	ldr	r3, [pc, #116]	@ (8011080 <USBD_LL_Init+0xbc>)
 801100c:	2200      	movs	r2, #0
 801100e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011010:	481b      	ldr	r0, [pc, #108]	@ (8011080 <USBD_LL_Init+0xbc>)
 8011012:	f7f2 fef3 	bl	8003dfc <HAL_PCD_Init>
 8011016:	4603      	mov	r3, r0
 8011018:	2b00      	cmp	r3, #0
 801101a:	d001      	beq.n	8011020 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 801101c:	f7f1 fa80 	bl	8002520 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011026:	2318      	movs	r3, #24
 8011028:	2200      	movs	r2, #0
 801102a:	2100      	movs	r1, #0
 801102c:	f7f4 fb7a 	bl	8005724 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011036:	2358      	movs	r3, #88	@ 0x58
 8011038:	2200      	movs	r2, #0
 801103a:	2180      	movs	r1, #128	@ 0x80
 801103c:	f7f4 fb72 	bl	8005724 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011046:	23c0      	movs	r3, #192	@ 0xc0
 8011048:	2200      	movs	r2, #0
 801104a:	2181      	movs	r1, #129	@ 0x81
 801104c:	f7f4 fb6a 	bl	8005724 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011056:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801105a:	2200      	movs	r2, #0
 801105c:	2101      	movs	r1, #1
 801105e:	f7f4 fb61 	bl	8005724 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011068:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801106c:	2200      	movs	r2, #0
 801106e:	2182      	movs	r1, #130	@ 0x82
 8011070:	f7f4 fb58 	bl	8005724 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011074:	2300      	movs	r3, #0
}
 8011076:	4618      	mov	r0, r3
 8011078:	3708      	adds	r7, #8
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
 801107e:	bf00      	nop
 8011080:	20001aec 	.word	0x20001aec
 8011084:	40006800 	.word	0x40006800

08011088 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b084      	sub	sp, #16
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011090:	2300      	movs	r3, #0
 8011092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011094:	2300      	movs	r3, #0
 8011096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801109e:	4618      	mov	r0, r3
 80110a0:	f7f2 ff7a 	bl	8003f98 <HAL_PCD_Start>
 80110a4:	4603      	mov	r3, r0
 80110a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110a8:	7bfb      	ldrb	r3, [r7, #15]
 80110aa:	4618      	mov	r0, r3
 80110ac:	f000 f97e 	bl	80113ac <USBD_Get_USB_Status>
 80110b0:	4603      	mov	r3, r0
 80110b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80110b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3710      	adds	r7, #16
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}

080110be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80110be:	b580      	push	{r7, lr}
 80110c0:	b084      	sub	sp, #16
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	6078      	str	r0, [r7, #4]
 80110c6:	4608      	mov	r0, r1
 80110c8:	4611      	mov	r1, r2
 80110ca:	461a      	mov	r2, r3
 80110cc:	4603      	mov	r3, r0
 80110ce:	70fb      	strb	r3, [r7, #3]
 80110d0:	460b      	mov	r3, r1
 80110d2:	70bb      	strb	r3, [r7, #2]
 80110d4:	4613      	mov	r3, r2
 80110d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80110d8:	2300      	movs	r3, #0
 80110da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110dc:	2300      	movs	r3, #0
 80110de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80110e6:	78bb      	ldrb	r3, [r7, #2]
 80110e8:	883a      	ldrh	r2, [r7, #0]
 80110ea:	78f9      	ldrb	r1, [r7, #3]
 80110ec:	f7f3 f8c1 	bl	8004272 <HAL_PCD_EP_Open>
 80110f0:	4603      	mov	r3, r0
 80110f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80110f4:	7bfb      	ldrb	r3, [r7, #15]
 80110f6:	4618      	mov	r0, r3
 80110f8:	f000 f958 	bl	80113ac <USBD_Get_USB_Status>
 80110fc:	4603      	mov	r3, r0
 80110fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011100:	7bbb      	ldrb	r3, [r7, #14]
}
 8011102:	4618      	mov	r0, r3
 8011104:	3710      	adds	r7, #16
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}

0801110a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801110a:	b580      	push	{r7, lr}
 801110c:	b084      	sub	sp, #16
 801110e:	af00      	add	r7, sp, #0
 8011110:	6078      	str	r0, [r7, #4]
 8011112:	460b      	mov	r3, r1
 8011114:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011116:	2300      	movs	r3, #0
 8011118:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801111a:	2300      	movs	r3, #0
 801111c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011124:	78fa      	ldrb	r2, [r7, #3]
 8011126:	4611      	mov	r1, r2
 8011128:	4618      	mov	r0, r3
 801112a:	f7f3 f901 	bl	8004330 <HAL_PCD_EP_Close>
 801112e:	4603      	mov	r3, r0
 8011130:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011132:	7bfb      	ldrb	r3, [r7, #15]
 8011134:	4618      	mov	r0, r3
 8011136:	f000 f939 	bl	80113ac <USBD_Get_USB_Status>
 801113a:	4603      	mov	r3, r0
 801113c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801113e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011140:	4618      	mov	r0, r3
 8011142:	3710      	adds	r7, #16
 8011144:	46bd      	mov	sp, r7
 8011146:	bd80      	pop	{r7, pc}

08011148 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b084      	sub	sp, #16
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	460b      	mov	r3, r1
 8011152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011154:	2300      	movs	r3, #0
 8011156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011158:	2300      	movs	r3, #0
 801115a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011162:	78fa      	ldrb	r2, [r7, #3]
 8011164:	4611      	mov	r1, r2
 8011166:	4618      	mov	r0, r3
 8011168:	f7f3 f9aa 	bl	80044c0 <HAL_PCD_EP_SetStall>
 801116c:	4603      	mov	r3, r0
 801116e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011170:	7bfb      	ldrb	r3, [r7, #15]
 8011172:	4618      	mov	r0, r3
 8011174:	f000 f91a 	bl	80113ac <USBD_Get_USB_Status>
 8011178:	4603      	mov	r3, r0
 801117a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801117c:	7bbb      	ldrb	r3, [r7, #14]
}
 801117e:	4618      	mov	r0, r3
 8011180:	3710      	adds	r7, #16
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}

08011186 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011186:	b580      	push	{r7, lr}
 8011188:	b084      	sub	sp, #16
 801118a:	af00      	add	r7, sp, #0
 801118c:	6078      	str	r0, [r7, #4]
 801118e:	460b      	mov	r3, r1
 8011190:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011192:	2300      	movs	r3, #0
 8011194:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011196:	2300      	movs	r3, #0
 8011198:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80111a0:	78fa      	ldrb	r2, [r7, #3]
 80111a2:	4611      	mov	r1, r2
 80111a4:	4618      	mov	r0, r3
 80111a6:	f7f3 f9dd 	bl	8004564 <HAL_PCD_EP_ClrStall>
 80111aa:	4603      	mov	r3, r0
 80111ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80111ae:	7bfb      	ldrb	r3, [r7, #15]
 80111b0:	4618      	mov	r0, r3
 80111b2:	f000 f8fb 	bl	80113ac <USBD_Get_USB_Status>
 80111b6:	4603      	mov	r3, r0
 80111b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80111ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80111bc:	4618      	mov	r0, r3
 80111be:	3710      	adds	r7, #16
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}

080111c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80111c4:	b480      	push	{r7}
 80111c6:	b085      	sub	sp, #20
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
 80111cc:	460b      	mov	r3, r1
 80111ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80111d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80111d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	da0b      	bge.n	80111f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80111e0:	78fb      	ldrb	r3, [r7, #3]
 80111e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80111e6:	68f9      	ldr	r1, [r7, #12]
 80111e8:	4613      	mov	r3, r2
 80111ea:	009b      	lsls	r3, r3, #2
 80111ec:	4413      	add	r3, r2
 80111ee:	00db      	lsls	r3, r3, #3
 80111f0:	440b      	add	r3, r1
 80111f2:	3312      	adds	r3, #18
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	e00b      	b.n	8011210 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80111f8:	78fb      	ldrb	r3, [r7, #3]
 80111fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80111fe:	68f9      	ldr	r1, [r7, #12]
 8011200:	4613      	mov	r3, r2
 8011202:	009b      	lsls	r3, r3, #2
 8011204:	4413      	add	r3, r2
 8011206:	00db      	lsls	r3, r3, #3
 8011208:	440b      	add	r3, r1
 801120a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801120e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011210:	4618      	mov	r0, r3
 8011212:	3714      	adds	r7, #20
 8011214:	46bd      	mov	sp, r7
 8011216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121a:	4770      	bx	lr

0801121c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b084      	sub	sp, #16
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	460b      	mov	r3, r1
 8011226:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011228:	2300      	movs	r3, #0
 801122a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801122c:	2300      	movs	r3, #0
 801122e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011236:	78fa      	ldrb	r2, [r7, #3]
 8011238:	4611      	mov	r1, r2
 801123a:	4618      	mov	r0, r3
 801123c:	f7f2 fff5 	bl	800422a <HAL_PCD_SetAddress>
 8011240:	4603      	mov	r3, r0
 8011242:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011244:	7bfb      	ldrb	r3, [r7, #15]
 8011246:	4618      	mov	r0, r3
 8011248:	f000 f8b0 	bl	80113ac <USBD_Get_USB_Status>
 801124c:	4603      	mov	r3, r0
 801124e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011250:	7bbb      	ldrb	r3, [r7, #14]
}
 8011252:	4618      	mov	r0, r3
 8011254:	3710      	adds	r7, #16
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}

0801125a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801125a:	b580      	push	{r7, lr}
 801125c:	b086      	sub	sp, #24
 801125e:	af00      	add	r7, sp, #0
 8011260:	60f8      	str	r0, [r7, #12]
 8011262:	607a      	str	r2, [r7, #4]
 8011264:	603b      	str	r3, [r7, #0]
 8011266:	460b      	mov	r3, r1
 8011268:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801126a:	2300      	movs	r3, #0
 801126c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801126e:	2300      	movs	r3, #0
 8011270:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011278:	7af9      	ldrb	r1, [r7, #11]
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	687a      	ldr	r2, [r7, #4]
 801127e:	f7f3 f8e8 	bl	8004452 <HAL_PCD_EP_Transmit>
 8011282:	4603      	mov	r3, r0
 8011284:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011286:	7dfb      	ldrb	r3, [r7, #23]
 8011288:	4618      	mov	r0, r3
 801128a:	f000 f88f 	bl	80113ac <USBD_Get_USB_Status>
 801128e:	4603      	mov	r3, r0
 8011290:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011292:	7dbb      	ldrb	r3, [r7, #22]
}
 8011294:	4618      	mov	r0, r3
 8011296:	3718      	adds	r7, #24
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b086      	sub	sp, #24
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	60f8      	str	r0, [r7, #12]
 80112a4:	607a      	str	r2, [r7, #4]
 80112a6:	603b      	str	r3, [r7, #0]
 80112a8:	460b      	mov	r3, r1
 80112aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112ac:	2300      	movs	r3, #0
 80112ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112b0:	2300      	movs	r3, #0
 80112b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80112ba:	7af9      	ldrb	r1, [r7, #11]
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	f7f3 f87e 	bl	80043c0 <HAL_PCD_EP_Receive>
 80112c4:	4603      	mov	r3, r0
 80112c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112c8:	7dfb      	ldrb	r3, [r7, #23]
 80112ca:	4618      	mov	r0, r3
 80112cc:	f000 f86e 	bl	80113ac <USBD_Get_USB_Status>
 80112d0:	4603      	mov	r3, r0
 80112d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80112d4:	7dbb      	ldrb	r3, [r7, #22]
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3718      	adds	r7, #24
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}

080112de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80112de:	b580      	push	{r7, lr}
 80112e0:	b082      	sub	sp, #8
 80112e2:	af00      	add	r7, sp, #0
 80112e4:	6078      	str	r0, [r7, #4]
 80112e6:	460b      	mov	r3, r1
 80112e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80112f0:	78fa      	ldrb	r2, [r7, #3]
 80112f2:	4611      	mov	r1, r2
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7f3 f894 	bl	8004422 <HAL_PCD_EP_GetRxCount>
 80112fa:	4603      	mov	r3, r0
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3708      	adds	r7, #8
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}

08011304 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b082      	sub	sp, #8
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	460b      	mov	r3, r1
 801130e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011310:	78fb      	ldrb	r3, [r7, #3]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d002      	beq.n	801131c <HAL_PCDEx_LPM_Callback+0x18>
 8011316:	2b01      	cmp	r3, #1
 8011318:	d013      	beq.n	8011342 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801131a:	e023      	b.n	8011364 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	7a5b      	ldrb	r3, [r3, #9]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d007      	beq.n	8011334 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011324:	f000 f83c 	bl	80113a0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011328:	4b10      	ldr	r3, [pc, #64]	@ (801136c <HAL_PCDEx_LPM_Callback+0x68>)
 801132a:	691b      	ldr	r3, [r3, #16]
 801132c:	4a0f      	ldr	r2, [pc, #60]	@ (801136c <HAL_PCDEx_LPM_Callback+0x68>)
 801132e:	f023 0306 	bic.w	r3, r3, #6
 8011332:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801133a:	4618      	mov	r0, r3
 801133c:	f7fa f8d7 	bl	800b4ee <USBD_LL_Resume>
    break;
 8011340:	e010      	b.n	8011364 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011348:	4618      	mov	r0, r3
 801134a:	f7fa f8b4 	bl	800b4b6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	7a5b      	ldrb	r3, [r3, #9]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d005      	beq.n	8011362 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011356:	4b05      	ldr	r3, [pc, #20]	@ (801136c <HAL_PCDEx_LPM_Callback+0x68>)
 8011358:	691b      	ldr	r3, [r3, #16]
 801135a:	4a04      	ldr	r2, [pc, #16]	@ (801136c <HAL_PCDEx_LPM_Callback+0x68>)
 801135c:	f043 0306 	orr.w	r3, r3, #6
 8011360:	6113      	str	r3, [r2, #16]
    break;
 8011362:	bf00      	nop
}
 8011364:	bf00      	nop
 8011366:	3708      	adds	r7, #8
 8011368:	46bd      	mov	sp, r7
 801136a:	bd80      	pop	{r7, pc}
 801136c:	e000ed00 	.word	0xe000ed00

08011370 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011370:	b480      	push	{r7}
 8011372:	b083      	sub	sp, #12
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011378:	4b03      	ldr	r3, [pc, #12]	@ (8011388 <USBD_static_malloc+0x18>)
}
 801137a:	4618      	mov	r0, r3
 801137c:	370c      	adds	r7, #12
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr
 8011386:	bf00      	nop
 8011388:	20001dc8 	.word	0x20001dc8

0801138c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801138c:	b480      	push	{r7}
 801138e:	b083      	sub	sp, #12
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011394:	bf00      	nop
 8011396:	370c      	adds	r7, #12
 8011398:	46bd      	mov	sp, r7
 801139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139e:	4770      	bx	lr

080113a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80113a4:	f7f1 f820 	bl	80023e8 <SystemClock_Config>
}
 80113a8:	bf00      	nop
 80113aa:	bd80      	pop	{r7, pc}

080113ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b085      	sub	sp, #20
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	4603      	mov	r3, r0
 80113b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113b6:	2300      	movs	r3, #0
 80113b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80113ba:	79fb      	ldrb	r3, [r7, #7]
 80113bc:	2b03      	cmp	r3, #3
 80113be:	d817      	bhi.n	80113f0 <USBD_Get_USB_Status+0x44>
 80113c0:	a201      	add	r2, pc, #4	@ (adr r2, 80113c8 <USBD_Get_USB_Status+0x1c>)
 80113c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c6:	bf00      	nop
 80113c8:	080113d9 	.word	0x080113d9
 80113cc:	080113df 	.word	0x080113df
 80113d0:	080113e5 	.word	0x080113e5
 80113d4:	080113eb 	.word	0x080113eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80113d8:	2300      	movs	r3, #0
 80113da:	73fb      	strb	r3, [r7, #15]
    break;
 80113dc:	e00b      	b.n	80113f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80113de:	2303      	movs	r3, #3
 80113e0:	73fb      	strb	r3, [r7, #15]
    break;
 80113e2:	e008      	b.n	80113f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80113e4:	2301      	movs	r3, #1
 80113e6:	73fb      	strb	r3, [r7, #15]
    break;
 80113e8:	e005      	b.n	80113f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80113ea:	2303      	movs	r3, #3
 80113ec:	73fb      	strb	r3, [r7, #15]
    break;
 80113ee:	e002      	b.n	80113f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80113f0:	2303      	movs	r3, #3
 80113f2:	73fb      	strb	r3, [r7, #15]
    break;
 80113f4:	bf00      	nop
  }
  return usb_status;
 80113f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3714      	adds	r7, #20
 80113fc:	46bd      	mov	sp, r7
 80113fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011402:	4770      	bx	lr

08011404 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8011404:	b480      	push	{r7}
 8011406:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011408:	4b05      	ldr	r3, [pc, #20]	@ (8011420 <UTIL_LPM_Init+0x1c>)
 801140a:	2200      	movs	r2, #0
 801140c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801140e:	4b05      	ldr	r3, [pc, #20]	@ (8011424 <UTIL_LPM_Init+0x20>)
 8011410:	2200      	movs	r2, #0
 8011412:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011414:	bf00      	nop
 8011416:	46bd      	mov	sp, r7
 8011418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141c:	4770      	bx	lr
 801141e:	bf00      	nop
 8011420:	20001fe8 	.word	0x20001fe8
 8011424:	20001fec 	.word	0x20001fec

08011428 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8011428:	b480      	push	{r7}
 801142a:	b087      	sub	sp, #28
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
 8011430:	460b      	mov	r3, r1
 8011432:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011434:	f3ef 8310 	mrs	r3, PRIMASK
 8011438:	613b      	str	r3, [r7, #16]
  return(result);
 801143a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801143c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801143e:	b672      	cpsid	i
}
 8011440:	bf00      	nop
  
  switch(state)
 8011442:	78fb      	ldrb	r3, [r7, #3]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d008      	beq.n	801145a <UTIL_LPM_SetOffMode+0x32>
 8011448:	2b01      	cmp	r3, #1
 801144a:	d10e      	bne.n	801146a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801144c:	4b0d      	ldr	r3, [pc, #52]	@ (8011484 <UTIL_LPM_SetOffMode+0x5c>)
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	4313      	orrs	r3, r2
 8011454:	4a0b      	ldr	r2, [pc, #44]	@ (8011484 <UTIL_LPM_SetOffMode+0x5c>)
 8011456:	6013      	str	r3, [r2, #0]
      break;
 8011458:	e008      	b.n	801146c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	43da      	mvns	r2, r3
 801145e:	4b09      	ldr	r3, [pc, #36]	@ (8011484 <UTIL_LPM_SetOffMode+0x5c>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	4013      	ands	r3, r2
 8011464:	4a07      	ldr	r2, [pc, #28]	@ (8011484 <UTIL_LPM_SetOffMode+0x5c>)
 8011466:	6013      	str	r3, [r2, #0]
      break;
 8011468:	e000      	b.n	801146c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801146a:	bf00      	nop
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	f383 8810 	msr	PRIMASK, r3
}
 8011476:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011478:	bf00      	nop
 801147a:	371c      	adds	r7, #28
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr
 8011484:	20001fec 	.word	0x20001fec

08011488 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b090      	sub	sp, #64	@ 0x40
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8011490:	4b73      	ldr	r3, [pc, #460]	@ (8011660 <UTIL_SEQ_Run+0x1d8>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8011496:	4b72      	ldr	r3, [pc, #456]	@ (8011660 <UTIL_SEQ_Run+0x1d8>)
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	4013      	ands	r3, r2
 801149e:	4a70      	ldr	r2, [pc, #448]	@ (8011660 <UTIL_SEQ_Run+0x1d8>)
 80114a0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80114a2:	4b70      	ldr	r3, [pc, #448]	@ (8011664 <UTIL_SEQ_Run+0x1dc>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80114a8:	4b6f      	ldr	r3, [pc, #444]	@ (8011668 <UTIL_SEQ_Run+0x1e0>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80114ae:	4b6f      	ldr	r3, [pc, #444]	@ (801166c <UTIL_SEQ_Run+0x1e4>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80114b4:	4b6e      	ldr	r3, [pc, #440]	@ (8011670 <UTIL_SEQ_Run+0x1e8>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80114ba:	e08d      	b.n	80115d8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80114bc:	2300      	movs	r3, #0
 80114be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80114c0:	e002      	b.n	80114c8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80114c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114c4:	3301      	adds	r3, #1
 80114c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80114c8:	4a6a      	ldr	r2, [pc, #424]	@ (8011674 <UTIL_SEQ_Run+0x1ec>)
 80114ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80114d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114d2:	401a      	ands	r2, r3
 80114d4:	4b62      	ldr	r3, [pc, #392]	@ (8011660 <UTIL_SEQ_Run+0x1d8>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	4013      	ands	r3, r2
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d0f1      	beq.n	80114c2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80114de:	4a65      	ldr	r2, [pc, #404]	@ (8011674 <UTIL_SEQ_Run+0x1ec>)
 80114e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114e2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80114e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114e8:	401a      	ands	r2, r3
 80114ea:	4b5d      	ldr	r3, [pc, #372]	@ (8011660 <UTIL_SEQ_Run+0x1d8>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	4013      	ands	r3, r2
 80114f0:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80114f2:	4a60      	ldr	r2, [pc, #384]	@ (8011674 <UTIL_SEQ_Run+0x1ec>)
 80114f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114f6:	00db      	lsls	r3, r3, #3
 80114f8:	4413      	add	r3, r2
 80114fa:	685a      	ldr	r2, [r3, #4]
 80114fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114fe:	4013      	ands	r3, r2
 8011500:	2b00      	cmp	r3, #0
 8011502:	d106      	bne.n	8011512 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011504:	4a5b      	ldr	r2, [pc, #364]	@ (8011674 <UTIL_SEQ_Run+0x1ec>)
 8011506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011508:	00db      	lsls	r3, r3, #3
 801150a:	4413      	add	r3, r2
 801150c:	f04f 32ff 	mov.w	r2, #4294967295
 8011510:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011512:	4a58      	ldr	r2, [pc, #352]	@ (8011674 <UTIL_SEQ_Run+0x1ec>)
 8011514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011516:	00db      	lsls	r3, r3, #3
 8011518:	4413      	add	r3, r2
 801151a:	685a      	ldr	r2, [r3, #4]
 801151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801151e:	4013      	ands	r3, r2
 8011520:	4618      	mov	r0, r3
 8011522:	f000 f9c1 	bl	80118a8 <SEQ_BitPosition>
 8011526:	4603      	mov	r3, r0
 8011528:	461a      	mov	r2, r3
 801152a:	4b53      	ldr	r3, [pc, #332]	@ (8011678 <UTIL_SEQ_Run+0x1f0>)
 801152c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801152e:	4a51      	ldr	r2, [pc, #324]	@ (8011674 <UTIL_SEQ_Run+0x1ec>)
 8011530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011532:	00db      	lsls	r3, r3, #3
 8011534:	4413      	add	r3, r2
 8011536:	685a      	ldr	r2, [r3, #4]
 8011538:	4b4f      	ldr	r3, [pc, #316]	@ (8011678 <UTIL_SEQ_Run+0x1f0>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	2101      	movs	r1, #1
 801153e:	fa01 f303 	lsl.w	r3, r1, r3
 8011542:	43db      	mvns	r3, r3
 8011544:	401a      	ands	r2, r3
 8011546:	494b      	ldr	r1, [pc, #300]	@ (8011674 <UTIL_SEQ_Run+0x1ec>)
 8011548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801154a:	00db      	lsls	r3, r3, #3
 801154c:	440b      	add	r3, r1
 801154e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011550:	f3ef 8310 	mrs	r3, PRIMASK
 8011554:	61bb      	str	r3, [r7, #24]
  return(result);
 8011556:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011558:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801155a:	b672      	cpsid	i
}
 801155c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801155e:	4b46      	ldr	r3, [pc, #280]	@ (8011678 <UTIL_SEQ_Run+0x1f0>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	2201      	movs	r2, #1
 8011564:	fa02 f303 	lsl.w	r3, r2, r3
 8011568:	43da      	mvns	r2, r3
 801156a:	4b3e      	ldr	r3, [pc, #248]	@ (8011664 <UTIL_SEQ_Run+0x1dc>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	4013      	ands	r3, r2
 8011570:	4a3c      	ldr	r2, [pc, #240]	@ (8011664 <UTIL_SEQ_Run+0x1dc>)
 8011572:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011574:	2301      	movs	r3, #1
 8011576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011578:	e013      	b.n	80115a2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801157a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801157c:	3b01      	subs	r3, #1
 801157e:	4a3d      	ldr	r2, [pc, #244]	@ (8011674 <UTIL_SEQ_Run+0x1ec>)
 8011580:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8011584:	4b3c      	ldr	r3, [pc, #240]	@ (8011678 <UTIL_SEQ_Run+0x1f0>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2201      	movs	r2, #1
 801158a:	fa02 f303 	lsl.w	r3, r2, r3
 801158e:	43da      	mvns	r2, r3
 8011590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011592:	3b01      	subs	r3, #1
 8011594:	400a      	ands	r2, r1
 8011596:	4937      	ldr	r1, [pc, #220]	@ (8011674 <UTIL_SEQ_Run+0x1ec>)
 8011598:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801159c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801159e:	3b01      	subs	r3, #1
 80115a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80115a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d1e8      	bne.n	801157a <UTIL_SEQ_Run+0xf2>
 80115a8:	6a3b      	ldr	r3, [r7, #32]
 80115aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	f383 8810 	msr	PRIMASK, r3
}
 80115b2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80115b4:	4b30      	ldr	r3, [pc, #192]	@ (8011678 <UTIL_SEQ_Run+0x1f0>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	4a30      	ldr	r2, [pc, #192]	@ (801167c <UTIL_SEQ_Run+0x1f4>)
 80115ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80115be:	4798      	blx	r3

    local_taskset = TaskSet;
 80115c0:	4b28      	ldr	r3, [pc, #160]	@ (8011664 <UTIL_SEQ_Run+0x1dc>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80115c6:	4b28      	ldr	r3, [pc, #160]	@ (8011668 <UTIL_SEQ_Run+0x1e0>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80115cc:	4b27      	ldr	r3, [pc, #156]	@ (801166c <UTIL_SEQ_Run+0x1e4>)
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80115d2:	4b27      	ldr	r3, [pc, #156]	@ (8011670 <UTIL_SEQ_Run+0x1e8>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80115d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80115da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115dc:	401a      	ands	r2, r3
 80115de:	4b20      	ldr	r3, [pc, #128]	@ (8011660 <UTIL_SEQ_Run+0x1d8>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	4013      	ands	r3, r2
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d005      	beq.n	80115f4 <UTIL_SEQ_Run+0x16c>
 80115e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80115ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ec:	4013      	ands	r3, r2
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	f43f af64 	beq.w	80114bc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80115f4:	4b20      	ldr	r3, [pc, #128]	@ (8011678 <UTIL_SEQ_Run+0x1f0>)
 80115f6:	f04f 32ff 	mov.w	r2, #4294967295
 80115fa:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80115fc:	f000 f946 	bl	801188c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011600:	f3ef 8310 	mrs	r3, PRIMASK
 8011604:	613b      	str	r3, [r7, #16]
  return(result);
 8011606:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8011608:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801160a:	b672      	cpsid	i
}
 801160c:	bf00      	nop
  local_taskset = TaskSet;
 801160e:	4b15      	ldr	r3, [pc, #84]	@ (8011664 <UTIL_SEQ_Run+0x1dc>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8011614:	4b14      	ldr	r3, [pc, #80]	@ (8011668 <UTIL_SEQ_Run+0x1e0>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801161a:	4b14      	ldr	r3, [pc, #80]	@ (801166c <UTIL_SEQ_Run+0x1e4>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8011620:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011624:	401a      	ands	r2, r3
 8011626:	4b0e      	ldr	r3, [pc, #56]	@ (8011660 <UTIL_SEQ_Run+0x1d8>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	4013      	ands	r3, r2
 801162c:	2b00      	cmp	r3, #0
 801162e:	d107      	bne.n	8011640 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8011630:	4b0f      	ldr	r3, [pc, #60]	@ (8011670 <UTIL_SEQ_Run+0x1e8>)
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011636:	4013      	ands	r3, r2
 8011638:	2b00      	cmp	r3, #0
 801163a:	d101      	bne.n	8011640 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801163c:	f7ef fe6d 	bl	800131a <UTIL_SEQ_Idle>
 8011640:	69fb      	ldr	r3, [r7, #28]
 8011642:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	f383 8810 	msr	PRIMASK, r3
}
 801164a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801164c:	f000 f925 	bl	801189a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8011650:	4a03      	ldr	r2, [pc, #12]	@ (8011660 <UTIL_SEQ_Run+0x1d8>)
 8011652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011654:	6013      	str	r3, [r2, #0]

  return;
 8011656:	bf00      	nop
}
 8011658:	3740      	adds	r7, #64	@ 0x40
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	20000124 	.word	0x20000124
 8011664:	20001ff0 	.word	0x20001ff0
 8011668:	20001ff4 	.word	0x20001ff4
 801166c:	20000120 	.word	0x20000120
 8011670:	20001ff8 	.word	0x20001ff8
 8011674:	20002080 	.word	0x20002080
 8011678:	20001ffc 	.word	0x20001ffc
 801167c:	20002000 	.word	0x20002000

08011680 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b088      	sub	sp, #32
 8011684:	af00      	add	r7, sp, #0
 8011686:	60f8      	str	r0, [r7, #12]
 8011688:	60b9      	str	r1, [r7, #8]
 801168a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801168c:	f3ef 8310 	mrs	r3, PRIMASK
 8011690:	617b      	str	r3, [r7, #20]
  return(result);
 8011692:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8011694:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8011696:	b672      	cpsid	i
}
 8011698:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801169a:	68f8      	ldr	r0, [r7, #12]
 801169c:	f000 f904 	bl	80118a8 <SEQ_BitPosition>
 80116a0:	4603      	mov	r3, r0
 80116a2:	4619      	mov	r1, r3
 80116a4:	4a06      	ldr	r2, [pc, #24]	@ (80116c0 <UTIL_SEQ_RegTask+0x40>)
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80116ac:	69fb      	ldr	r3, [r7, #28]
 80116ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116b0:	69bb      	ldr	r3, [r7, #24]
 80116b2:	f383 8810 	msr	PRIMASK, r3
}
 80116b6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80116b8:	bf00      	nop
}
 80116ba:	3720      	adds	r7, #32
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}
 80116c0:	20002000 	.word	0x20002000

080116c4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80116c4:	b480      	push	{r7}
 80116c6:	b087      	sub	sp, #28
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116ce:	f3ef 8310 	mrs	r3, PRIMASK
 80116d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80116d4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80116d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80116d8:	b672      	cpsid	i
}
 80116da:	bf00      	nop

  TaskSet |= TaskId_bm;
 80116dc:	4b0d      	ldr	r3, [pc, #52]	@ (8011714 <UTIL_SEQ_SetTask+0x50>)
 80116de:	681a      	ldr	r2, [r3, #0]
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	4313      	orrs	r3, r2
 80116e4:	4a0b      	ldr	r2, [pc, #44]	@ (8011714 <UTIL_SEQ_SetTask+0x50>)
 80116e6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80116e8:	4a0b      	ldr	r2, [pc, #44]	@ (8011718 <UTIL_SEQ_SetTask+0x54>)
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	431a      	orrs	r2, r3
 80116f4:	4908      	ldr	r1, [pc, #32]	@ (8011718 <UTIL_SEQ_SetTask+0x54>)
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	f383 8810 	msr	PRIMASK, r3
}
 8011706:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8011708:	bf00      	nop
}
 801170a:	371c      	adds	r7, #28
 801170c:	46bd      	mov	sp, r7
 801170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011712:	4770      	bx	lr
 8011714:	20001ff0 	.word	0x20001ff0
 8011718:	20002080 	.word	0x20002080

0801171c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801171c:	b480      	push	{r7}
 801171e:	b087      	sub	sp, #28
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011724:	f3ef 8310 	mrs	r3, PRIMASK
 8011728:	60fb      	str	r3, [r7, #12]
  return(result);
 801172a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801172c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801172e:	b672      	cpsid	i
}
 8011730:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	43da      	mvns	r2, r3
 8011736:	4b08      	ldr	r3, [pc, #32]	@ (8011758 <UTIL_SEQ_PauseTask+0x3c>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	4013      	ands	r3, r2
 801173c:	4a06      	ldr	r2, [pc, #24]	@ (8011758 <UTIL_SEQ_PauseTask+0x3c>)
 801173e:	6013      	str	r3, [r2, #0]
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	f383 8810 	msr	PRIMASK, r3
}
 801174a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801174c:	bf00      	nop
}
 801174e:	371c      	adds	r7, #28
 8011750:	46bd      	mov	sp, r7
 8011752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011756:	4770      	bx	lr
 8011758:	20000120 	.word	0x20000120

0801175c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801175c:	b480      	push	{r7}
 801175e:	b087      	sub	sp, #28
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011764:	f3ef 8310 	mrs	r3, PRIMASK
 8011768:	60fb      	str	r3, [r7, #12]
  return(result);
 801176a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801176c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801176e:	b672      	cpsid	i
}
 8011770:	bf00      	nop

  TaskMask |= TaskId_bm;
 8011772:	4b09      	ldr	r3, [pc, #36]	@ (8011798 <UTIL_SEQ_ResumeTask+0x3c>)
 8011774:	681a      	ldr	r2, [r3, #0]
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	4313      	orrs	r3, r2
 801177a:	4a07      	ldr	r2, [pc, #28]	@ (8011798 <UTIL_SEQ_ResumeTask+0x3c>)
 801177c:	6013      	str	r3, [r2, #0]
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	f383 8810 	msr	PRIMASK, r3
}
 8011788:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801178a:	bf00      	nop
}
 801178c:	371c      	adds	r7, #28
 801178e:	46bd      	mov	sp, r7
 8011790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011794:	4770      	bx	lr
 8011796:	bf00      	nop
 8011798:	20000120 	.word	0x20000120

0801179c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801179c:	b480      	push	{r7}
 801179e:	b087      	sub	sp, #28
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117a4:	f3ef 8310 	mrs	r3, PRIMASK
 80117a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80117aa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80117ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80117ae:	b672      	cpsid	i
}
 80117b0:	bf00      	nop

  EvtSet |= EvtId_bm;
 80117b2:	4b09      	ldr	r3, [pc, #36]	@ (80117d8 <UTIL_SEQ_SetEvt+0x3c>)
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	4313      	orrs	r3, r2
 80117ba:	4a07      	ldr	r2, [pc, #28]	@ (80117d8 <UTIL_SEQ_SetEvt+0x3c>)
 80117bc:	6013      	str	r3, [r2, #0]
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117c2:	693b      	ldr	r3, [r7, #16]
 80117c4:	f383 8810 	msr	PRIMASK, r3
}
 80117c8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80117ca:	bf00      	nop
}
 80117cc:	371c      	adds	r7, #28
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr
 80117d6:	bf00      	nop
 80117d8:	20001ff4 	.word	0x20001ff4

080117dc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b088      	sub	sp, #32
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80117e4:	4b1f      	ldr	r3, [pc, #124]	@ (8011864 <UTIL_SEQ_WaitEvt+0x88>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80117ea:	4b1e      	ldr	r3, [pc, #120]	@ (8011864 <UTIL_SEQ_WaitEvt+0x88>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117f2:	d102      	bne.n	80117fa <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80117f4:	2300      	movs	r3, #0
 80117f6:	61fb      	str	r3, [r7, #28]
 80117f8:	e005      	b.n	8011806 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80117fa:	4b1a      	ldr	r3, [pc, #104]	@ (8011864 <UTIL_SEQ_WaitEvt+0x88>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2201      	movs	r2, #1
 8011800:	fa02 f303 	lsl.w	r3, r2, r3
 8011804:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8011806:	4b18      	ldr	r3, [pc, #96]	@ (8011868 <UTIL_SEQ_WaitEvt+0x8c>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 801180c:	4a16      	ldr	r2, [pc, #88]	@ (8011868 <UTIL_SEQ_WaitEvt+0x8c>)
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8011812:	e003      	b.n	801181c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8011814:	6879      	ldr	r1, [r7, #4]
 8011816:	69f8      	ldr	r0, [r7, #28]
 8011818:	f000 f82a 	bl	8011870 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 801181c:	4b13      	ldr	r3, [pc, #76]	@ (801186c <UTIL_SEQ_WaitEvt+0x90>)
 801181e:	681a      	ldr	r2, [r3, #0]
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	4013      	ands	r3, r2
 8011824:	2b00      	cmp	r3, #0
 8011826:	d0f5      	beq.n	8011814 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8011828:	4a0e      	ldr	r2, [pc, #56]	@ (8011864 <UTIL_SEQ_WaitEvt+0x88>)
 801182a:	69bb      	ldr	r3, [r7, #24]
 801182c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801182e:	f3ef 8310 	mrs	r3, PRIMASK
 8011832:	60bb      	str	r3, [r7, #8]
  return(result);
 8011834:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011836:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011838:	b672      	cpsid	i
}
 801183a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	43da      	mvns	r2, r3
 8011840:	4b0a      	ldr	r3, [pc, #40]	@ (801186c <UTIL_SEQ_WaitEvt+0x90>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	4013      	ands	r3, r2
 8011846:	4a09      	ldr	r2, [pc, #36]	@ (801186c <UTIL_SEQ_WaitEvt+0x90>)
 8011848:	6013      	str	r3, [r2, #0]
 801184a:	693b      	ldr	r3, [r7, #16]
 801184c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	f383 8810 	msr	PRIMASK, r3
}
 8011854:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8011856:	4a04      	ldr	r2, [pc, #16]	@ (8011868 <UTIL_SEQ_WaitEvt+0x8c>)
 8011858:	697b      	ldr	r3, [r7, #20]
 801185a:	6013      	str	r3, [r2, #0]
  return;
 801185c:	bf00      	nop
}
 801185e:	3720      	adds	r7, #32
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}
 8011864:	20001ffc 	.word	0x20001ffc
 8011868:	20001ff8 	.word	0x20001ff8
 801186c:	20001ff4 	.word	0x20001ff4

08011870 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b082      	sub	sp, #8
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
 8011878:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	43db      	mvns	r3, r3
 801187e:	4618      	mov	r0, r3
 8011880:	f7ff fe02 	bl	8011488 <UTIL_SEQ_Run>
  return;
 8011884:	bf00      	nop
}
 8011886:	3708      	adds	r7, #8
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}

0801188c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801188c:	b480      	push	{r7}
 801188e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8011890:	bf00      	nop
}
 8011892:	46bd      	mov	sp, r7
 8011894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011898:	4770      	bx	lr

0801189a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801189a:	b480      	push	{r7}
 801189c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801189e:	bf00      	nop
}
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr

080118a8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80118a8:	b480      	push	{r7}
 80118aa:	b085      	sub	sp, #20
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d101      	bne.n	80118be <SEQ_BitPosition+0x16>
    return 32U;
 80118ba:	2320      	movs	r3, #32
 80118bc:	e003      	b.n	80118c6 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	fab3 f383 	clz	r3, r3
 80118c4:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 80118c6:	f1c3 031f 	rsb	r3, r3, #31
 80118ca:	b2db      	uxtb	r3, r3
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3714      	adds	r7, #20
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <std>:
 80118d8:	2300      	movs	r3, #0
 80118da:	b510      	push	{r4, lr}
 80118dc:	4604      	mov	r4, r0
 80118de:	e9c0 3300 	strd	r3, r3, [r0]
 80118e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80118e6:	6083      	str	r3, [r0, #8]
 80118e8:	8181      	strh	r1, [r0, #12]
 80118ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80118ec:	81c2      	strh	r2, [r0, #14]
 80118ee:	6183      	str	r3, [r0, #24]
 80118f0:	4619      	mov	r1, r3
 80118f2:	2208      	movs	r2, #8
 80118f4:	305c      	adds	r0, #92	@ 0x5c
 80118f6:	f000 fa01 	bl	8011cfc <memset>
 80118fa:	4b0d      	ldr	r3, [pc, #52]	@ (8011930 <std+0x58>)
 80118fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80118fe:	4b0d      	ldr	r3, [pc, #52]	@ (8011934 <std+0x5c>)
 8011900:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011902:	4b0d      	ldr	r3, [pc, #52]	@ (8011938 <std+0x60>)
 8011904:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011906:	4b0d      	ldr	r3, [pc, #52]	@ (801193c <std+0x64>)
 8011908:	6323      	str	r3, [r4, #48]	@ 0x30
 801190a:	4b0d      	ldr	r3, [pc, #52]	@ (8011940 <std+0x68>)
 801190c:	6224      	str	r4, [r4, #32]
 801190e:	429c      	cmp	r4, r3
 8011910:	d006      	beq.n	8011920 <std+0x48>
 8011912:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011916:	4294      	cmp	r4, r2
 8011918:	d002      	beq.n	8011920 <std+0x48>
 801191a:	33d0      	adds	r3, #208	@ 0xd0
 801191c:	429c      	cmp	r4, r3
 801191e:	d105      	bne.n	801192c <std+0x54>
 8011920:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011928:	f000 ba76 	b.w	8011e18 <__retarget_lock_init_recursive>
 801192c:	bd10      	pop	{r4, pc}
 801192e:	bf00      	nop
 8011930:	08011b4d 	.word	0x08011b4d
 8011934:	08011b6f 	.word	0x08011b6f
 8011938:	08011ba7 	.word	0x08011ba7
 801193c:	08011bcb 	.word	0x08011bcb
 8011940:	20002088 	.word	0x20002088

08011944 <stdio_exit_handler>:
 8011944:	4a02      	ldr	r2, [pc, #8]	@ (8011950 <stdio_exit_handler+0xc>)
 8011946:	4903      	ldr	r1, [pc, #12]	@ (8011954 <stdio_exit_handler+0x10>)
 8011948:	4803      	ldr	r0, [pc, #12]	@ (8011958 <stdio_exit_handler+0x14>)
 801194a:	f000 b869 	b.w	8011a20 <_fwalk_sglue>
 801194e:	bf00      	nop
 8011950:	20000128 	.word	0x20000128
 8011954:	080126d1 	.word	0x080126d1
 8011958:	20000138 	.word	0x20000138

0801195c <cleanup_stdio>:
 801195c:	6841      	ldr	r1, [r0, #4]
 801195e:	4b0c      	ldr	r3, [pc, #48]	@ (8011990 <cleanup_stdio+0x34>)
 8011960:	4299      	cmp	r1, r3
 8011962:	b510      	push	{r4, lr}
 8011964:	4604      	mov	r4, r0
 8011966:	d001      	beq.n	801196c <cleanup_stdio+0x10>
 8011968:	f000 feb2 	bl	80126d0 <_fflush_r>
 801196c:	68a1      	ldr	r1, [r4, #8]
 801196e:	4b09      	ldr	r3, [pc, #36]	@ (8011994 <cleanup_stdio+0x38>)
 8011970:	4299      	cmp	r1, r3
 8011972:	d002      	beq.n	801197a <cleanup_stdio+0x1e>
 8011974:	4620      	mov	r0, r4
 8011976:	f000 feab 	bl	80126d0 <_fflush_r>
 801197a:	68e1      	ldr	r1, [r4, #12]
 801197c:	4b06      	ldr	r3, [pc, #24]	@ (8011998 <cleanup_stdio+0x3c>)
 801197e:	4299      	cmp	r1, r3
 8011980:	d004      	beq.n	801198c <cleanup_stdio+0x30>
 8011982:	4620      	mov	r0, r4
 8011984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011988:	f000 bea2 	b.w	80126d0 <_fflush_r>
 801198c:	bd10      	pop	{r4, pc}
 801198e:	bf00      	nop
 8011990:	20002088 	.word	0x20002088
 8011994:	200020f0 	.word	0x200020f0
 8011998:	20002158 	.word	0x20002158

0801199c <global_stdio_init.part.0>:
 801199c:	b510      	push	{r4, lr}
 801199e:	4b0b      	ldr	r3, [pc, #44]	@ (80119cc <global_stdio_init.part.0+0x30>)
 80119a0:	4c0b      	ldr	r4, [pc, #44]	@ (80119d0 <global_stdio_init.part.0+0x34>)
 80119a2:	4a0c      	ldr	r2, [pc, #48]	@ (80119d4 <global_stdio_init.part.0+0x38>)
 80119a4:	601a      	str	r2, [r3, #0]
 80119a6:	4620      	mov	r0, r4
 80119a8:	2200      	movs	r2, #0
 80119aa:	2104      	movs	r1, #4
 80119ac:	f7ff ff94 	bl	80118d8 <std>
 80119b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80119b4:	2201      	movs	r2, #1
 80119b6:	2109      	movs	r1, #9
 80119b8:	f7ff ff8e 	bl	80118d8 <std>
 80119bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80119c0:	2202      	movs	r2, #2
 80119c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119c6:	2112      	movs	r1, #18
 80119c8:	f7ff bf86 	b.w	80118d8 <std>
 80119cc:	200021c0 	.word	0x200021c0
 80119d0:	20002088 	.word	0x20002088
 80119d4:	08011945 	.word	0x08011945

080119d8 <__sfp_lock_acquire>:
 80119d8:	4801      	ldr	r0, [pc, #4]	@ (80119e0 <__sfp_lock_acquire+0x8>)
 80119da:	f000 ba1e 	b.w	8011e1a <__retarget_lock_acquire_recursive>
 80119de:	bf00      	nop
 80119e0:	200021c9 	.word	0x200021c9

080119e4 <__sfp_lock_release>:
 80119e4:	4801      	ldr	r0, [pc, #4]	@ (80119ec <__sfp_lock_release+0x8>)
 80119e6:	f000 ba19 	b.w	8011e1c <__retarget_lock_release_recursive>
 80119ea:	bf00      	nop
 80119ec:	200021c9 	.word	0x200021c9

080119f0 <__sinit>:
 80119f0:	b510      	push	{r4, lr}
 80119f2:	4604      	mov	r4, r0
 80119f4:	f7ff fff0 	bl	80119d8 <__sfp_lock_acquire>
 80119f8:	6a23      	ldr	r3, [r4, #32]
 80119fa:	b11b      	cbz	r3, 8011a04 <__sinit+0x14>
 80119fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a00:	f7ff bff0 	b.w	80119e4 <__sfp_lock_release>
 8011a04:	4b04      	ldr	r3, [pc, #16]	@ (8011a18 <__sinit+0x28>)
 8011a06:	6223      	str	r3, [r4, #32]
 8011a08:	4b04      	ldr	r3, [pc, #16]	@ (8011a1c <__sinit+0x2c>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d1f5      	bne.n	80119fc <__sinit+0xc>
 8011a10:	f7ff ffc4 	bl	801199c <global_stdio_init.part.0>
 8011a14:	e7f2      	b.n	80119fc <__sinit+0xc>
 8011a16:	bf00      	nop
 8011a18:	0801195d 	.word	0x0801195d
 8011a1c:	200021c0 	.word	0x200021c0

08011a20 <_fwalk_sglue>:
 8011a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a24:	4607      	mov	r7, r0
 8011a26:	4688      	mov	r8, r1
 8011a28:	4614      	mov	r4, r2
 8011a2a:	2600      	movs	r6, #0
 8011a2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a30:	f1b9 0901 	subs.w	r9, r9, #1
 8011a34:	d505      	bpl.n	8011a42 <_fwalk_sglue+0x22>
 8011a36:	6824      	ldr	r4, [r4, #0]
 8011a38:	2c00      	cmp	r4, #0
 8011a3a:	d1f7      	bne.n	8011a2c <_fwalk_sglue+0xc>
 8011a3c:	4630      	mov	r0, r6
 8011a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a42:	89ab      	ldrh	r3, [r5, #12]
 8011a44:	2b01      	cmp	r3, #1
 8011a46:	d907      	bls.n	8011a58 <_fwalk_sglue+0x38>
 8011a48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	d003      	beq.n	8011a58 <_fwalk_sglue+0x38>
 8011a50:	4629      	mov	r1, r5
 8011a52:	4638      	mov	r0, r7
 8011a54:	47c0      	blx	r8
 8011a56:	4306      	orrs	r6, r0
 8011a58:	3568      	adds	r5, #104	@ 0x68
 8011a5a:	e7e9      	b.n	8011a30 <_fwalk_sglue+0x10>

08011a5c <iprintf>:
 8011a5c:	b40f      	push	{r0, r1, r2, r3}
 8011a5e:	b507      	push	{r0, r1, r2, lr}
 8011a60:	4906      	ldr	r1, [pc, #24]	@ (8011a7c <iprintf+0x20>)
 8011a62:	ab04      	add	r3, sp, #16
 8011a64:	6808      	ldr	r0, [r1, #0]
 8011a66:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a6a:	6881      	ldr	r1, [r0, #8]
 8011a6c:	9301      	str	r3, [sp, #4]
 8011a6e:	f000 fb07 	bl	8012080 <_vfiprintf_r>
 8011a72:	b003      	add	sp, #12
 8011a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a78:	b004      	add	sp, #16
 8011a7a:	4770      	bx	lr
 8011a7c:	20000134 	.word	0x20000134

08011a80 <putchar>:
 8011a80:	4b02      	ldr	r3, [pc, #8]	@ (8011a8c <putchar+0xc>)
 8011a82:	4601      	mov	r1, r0
 8011a84:	6818      	ldr	r0, [r3, #0]
 8011a86:	6882      	ldr	r2, [r0, #8]
 8011a88:	f000 beac 	b.w	80127e4 <_putc_r>
 8011a8c:	20000134 	.word	0x20000134

08011a90 <_puts_r>:
 8011a90:	6a03      	ldr	r3, [r0, #32]
 8011a92:	b570      	push	{r4, r5, r6, lr}
 8011a94:	6884      	ldr	r4, [r0, #8]
 8011a96:	4605      	mov	r5, r0
 8011a98:	460e      	mov	r6, r1
 8011a9a:	b90b      	cbnz	r3, 8011aa0 <_puts_r+0x10>
 8011a9c:	f7ff ffa8 	bl	80119f0 <__sinit>
 8011aa0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011aa2:	07db      	lsls	r3, r3, #31
 8011aa4:	d405      	bmi.n	8011ab2 <_puts_r+0x22>
 8011aa6:	89a3      	ldrh	r3, [r4, #12]
 8011aa8:	0598      	lsls	r0, r3, #22
 8011aaa:	d402      	bmi.n	8011ab2 <_puts_r+0x22>
 8011aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011aae:	f000 f9b4 	bl	8011e1a <__retarget_lock_acquire_recursive>
 8011ab2:	89a3      	ldrh	r3, [r4, #12]
 8011ab4:	0719      	lsls	r1, r3, #28
 8011ab6:	d502      	bpl.n	8011abe <_puts_r+0x2e>
 8011ab8:	6923      	ldr	r3, [r4, #16]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d135      	bne.n	8011b2a <_puts_r+0x9a>
 8011abe:	4621      	mov	r1, r4
 8011ac0:	4628      	mov	r0, r5
 8011ac2:	f000 f8c5 	bl	8011c50 <__swsetup_r>
 8011ac6:	b380      	cbz	r0, 8011b2a <_puts_r+0x9a>
 8011ac8:	f04f 35ff 	mov.w	r5, #4294967295
 8011acc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ace:	07da      	lsls	r2, r3, #31
 8011ad0:	d405      	bmi.n	8011ade <_puts_r+0x4e>
 8011ad2:	89a3      	ldrh	r3, [r4, #12]
 8011ad4:	059b      	lsls	r3, r3, #22
 8011ad6:	d402      	bmi.n	8011ade <_puts_r+0x4e>
 8011ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ada:	f000 f99f 	bl	8011e1c <__retarget_lock_release_recursive>
 8011ade:	4628      	mov	r0, r5
 8011ae0:	bd70      	pop	{r4, r5, r6, pc}
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	da04      	bge.n	8011af0 <_puts_r+0x60>
 8011ae6:	69a2      	ldr	r2, [r4, #24]
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	dc17      	bgt.n	8011b1c <_puts_r+0x8c>
 8011aec:	290a      	cmp	r1, #10
 8011aee:	d015      	beq.n	8011b1c <_puts_r+0x8c>
 8011af0:	6823      	ldr	r3, [r4, #0]
 8011af2:	1c5a      	adds	r2, r3, #1
 8011af4:	6022      	str	r2, [r4, #0]
 8011af6:	7019      	strb	r1, [r3, #0]
 8011af8:	68a3      	ldr	r3, [r4, #8]
 8011afa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011afe:	3b01      	subs	r3, #1
 8011b00:	60a3      	str	r3, [r4, #8]
 8011b02:	2900      	cmp	r1, #0
 8011b04:	d1ed      	bne.n	8011ae2 <_puts_r+0x52>
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	da11      	bge.n	8011b2e <_puts_r+0x9e>
 8011b0a:	4622      	mov	r2, r4
 8011b0c:	210a      	movs	r1, #10
 8011b0e:	4628      	mov	r0, r5
 8011b10:	f000 f85f 	bl	8011bd2 <__swbuf_r>
 8011b14:	3001      	adds	r0, #1
 8011b16:	d0d7      	beq.n	8011ac8 <_puts_r+0x38>
 8011b18:	250a      	movs	r5, #10
 8011b1a:	e7d7      	b.n	8011acc <_puts_r+0x3c>
 8011b1c:	4622      	mov	r2, r4
 8011b1e:	4628      	mov	r0, r5
 8011b20:	f000 f857 	bl	8011bd2 <__swbuf_r>
 8011b24:	3001      	adds	r0, #1
 8011b26:	d1e7      	bne.n	8011af8 <_puts_r+0x68>
 8011b28:	e7ce      	b.n	8011ac8 <_puts_r+0x38>
 8011b2a:	3e01      	subs	r6, #1
 8011b2c:	e7e4      	b.n	8011af8 <_puts_r+0x68>
 8011b2e:	6823      	ldr	r3, [r4, #0]
 8011b30:	1c5a      	adds	r2, r3, #1
 8011b32:	6022      	str	r2, [r4, #0]
 8011b34:	220a      	movs	r2, #10
 8011b36:	701a      	strb	r2, [r3, #0]
 8011b38:	e7ee      	b.n	8011b18 <_puts_r+0x88>
	...

08011b3c <puts>:
 8011b3c:	4b02      	ldr	r3, [pc, #8]	@ (8011b48 <puts+0xc>)
 8011b3e:	4601      	mov	r1, r0
 8011b40:	6818      	ldr	r0, [r3, #0]
 8011b42:	f7ff bfa5 	b.w	8011a90 <_puts_r>
 8011b46:	bf00      	nop
 8011b48:	20000134 	.word	0x20000134

08011b4c <__sread>:
 8011b4c:	b510      	push	{r4, lr}
 8011b4e:	460c      	mov	r4, r1
 8011b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b54:	f000 f912 	bl	8011d7c <_read_r>
 8011b58:	2800      	cmp	r0, #0
 8011b5a:	bfab      	itete	ge
 8011b5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8011b60:	181b      	addge	r3, r3, r0
 8011b62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011b66:	bfac      	ite	ge
 8011b68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011b6a:	81a3      	strhlt	r3, [r4, #12]
 8011b6c:	bd10      	pop	{r4, pc}

08011b6e <__swrite>:
 8011b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b72:	461f      	mov	r7, r3
 8011b74:	898b      	ldrh	r3, [r1, #12]
 8011b76:	05db      	lsls	r3, r3, #23
 8011b78:	4605      	mov	r5, r0
 8011b7a:	460c      	mov	r4, r1
 8011b7c:	4616      	mov	r6, r2
 8011b7e:	d505      	bpl.n	8011b8c <__swrite+0x1e>
 8011b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b84:	2302      	movs	r3, #2
 8011b86:	2200      	movs	r2, #0
 8011b88:	f000 f8e6 	bl	8011d58 <_lseek_r>
 8011b8c:	89a3      	ldrh	r3, [r4, #12]
 8011b8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011b96:	81a3      	strh	r3, [r4, #12]
 8011b98:	4632      	mov	r2, r6
 8011b9a:	463b      	mov	r3, r7
 8011b9c:	4628      	mov	r0, r5
 8011b9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba2:	f000 b8fd 	b.w	8011da0 <_write_r>

08011ba6 <__sseek>:
 8011ba6:	b510      	push	{r4, lr}
 8011ba8:	460c      	mov	r4, r1
 8011baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bae:	f000 f8d3 	bl	8011d58 <_lseek_r>
 8011bb2:	1c43      	adds	r3, r0, #1
 8011bb4:	89a3      	ldrh	r3, [r4, #12]
 8011bb6:	bf15      	itete	ne
 8011bb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011bba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011bbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011bc2:	81a3      	strheq	r3, [r4, #12]
 8011bc4:	bf18      	it	ne
 8011bc6:	81a3      	strhne	r3, [r4, #12]
 8011bc8:	bd10      	pop	{r4, pc}

08011bca <__sclose>:
 8011bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bce:	f000 b8b3 	b.w	8011d38 <_close_r>

08011bd2 <__swbuf_r>:
 8011bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bd4:	460e      	mov	r6, r1
 8011bd6:	4614      	mov	r4, r2
 8011bd8:	4605      	mov	r5, r0
 8011bda:	b118      	cbz	r0, 8011be4 <__swbuf_r+0x12>
 8011bdc:	6a03      	ldr	r3, [r0, #32]
 8011bde:	b90b      	cbnz	r3, 8011be4 <__swbuf_r+0x12>
 8011be0:	f7ff ff06 	bl	80119f0 <__sinit>
 8011be4:	69a3      	ldr	r3, [r4, #24]
 8011be6:	60a3      	str	r3, [r4, #8]
 8011be8:	89a3      	ldrh	r3, [r4, #12]
 8011bea:	071a      	lsls	r2, r3, #28
 8011bec:	d501      	bpl.n	8011bf2 <__swbuf_r+0x20>
 8011bee:	6923      	ldr	r3, [r4, #16]
 8011bf0:	b943      	cbnz	r3, 8011c04 <__swbuf_r+0x32>
 8011bf2:	4621      	mov	r1, r4
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	f000 f82b 	bl	8011c50 <__swsetup_r>
 8011bfa:	b118      	cbz	r0, 8011c04 <__swbuf_r+0x32>
 8011bfc:	f04f 37ff 	mov.w	r7, #4294967295
 8011c00:	4638      	mov	r0, r7
 8011c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c04:	6823      	ldr	r3, [r4, #0]
 8011c06:	6922      	ldr	r2, [r4, #16]
 8011c08:	1a98      	subs	r0, r3, r2
 8011c0a:	6963      	ldr	r3, [r4, #20]
 8011c0c:	b2f6      	uxtb	r6, r6
 8011c0e:	4283      	cmp	r3, r0
 8011c10:	4637      	mov	r7, r6
 8011c12:	dc05      	bgt.n	8011c20 <__swbuf_r+0x4e>
 8011c14:	4621      	mov	r1, r4
 8011c16:	4628      	mov	r0, r5
 8011c18:	f000 fd5a 	bl	80126d0 <_fflush_r>
 8011c1c:	2800      	cmp	r0, #0
 8011c1e:	d1ed      	bne.n	8011bfc <__swbuf_r+0x2a>
 8011c20:	68a3      	ldr	r3, [r4, #8]
 8011c22:	3b01      	subs	r3, #1
 8011c24:	60a3      	str	r3, [r4, #8]
 8011c26:	6823      	ldr	r3, [r4, #0]
 8011c28:	1c5a      	adds	r2, r3, #1
 8011c2a:	6022      	str	r2, [r4, #0]
 8011c2c:	701e      	strb	r6, [r3, #0]
 8011c2e:	6962      	ldr	r2, [r4, #20]
 8011c30:	1c43      	adds	r3, r0, #1
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d004      	beq.n	8011c40 <__swbuf_r+0x6e>
 8011c36:	89a3      	ldrh	r3, [r4, #12]
 8011c38:	07db      	lsls	r3, r3, #31
 8011c3a:	d5e1      	bpl.n	8011c00 <__swbuf_r+0x2e>
 8011c3c:	2e0a      	cmp	r6, #10
 8011c3e:	d1df      	bne.n	8011c00 <__swbuf_r+0x2e>
 8011c40:	4621      	mov	r1, r4
 8011c42:	4628      	mov	r0, r5
 8011c44:	f000 fd44 	bl	80126d0 <_fflush_r>
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	d0d9      	beq.n	8011c00 <__swbuf_r+0x2e>
 8011c4c:	e7d6      	b.n	8011bfc <__swbuf_r+0x2a>
	...

08011c50 <__swsetup_r>:
 8011c50:	b538      	push	{r3, r4, r5, lr}
 8011c52:	4b29      	ldr	r3, [pc, #164]	@ (8011cf8 <__swsetup_r+0xa8>)
 8011c54:	4605      	mov	r5, r0
 8011c56:	6818      	ldr	r0, [r3, #0]
 8011c58:	460c      	mov	r4, r1
 8011c5a:	b118      	cbz	r0, 8011c64 <__swsetup_r+0x14>
 8011c5c:	6a03      	ldr	r3, [r0, #32]
 8011c5e:	b90b      	cbnz	r3, 8011c64 <__swsetup_r+0x14>
 8011c60:	f7ff fec6 	bl	80119f0 <__sinit>
 8011c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c68:	0719      	lsls	r1, r3, #28
 8011c6a:	d422      	bmi.n	8011cb2 <__swsetup_r+0x62>
 8011c6c:	06da      	lsls	r2, r3, #27
 8011c6e:	d407      	bmi.n	8011c80 <__swsetup_r+0x30>
 8011c70:	2209      	movs	r2, #9
 8011c72:	602a      	str	r2, [r5, #0]
 8011c74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c78:	81a3      	strh	r3, [r4, #12]
 8011c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8011c7e:	e033      	b.n	8011ce8 <__swsetup_r+0x98>
 8011c80:	0758      	lsls	r0, r3, #29
 8011c82:	d512      	bpl.n	8011caa <__swsetup_r+0x5a>
 8011c84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c86:	b141      	cbz	r1, 8011c9a <__swsetup_r+0x4a>
 8011c88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c8c:	4299      	cmp	r1, r3
 8011c8e:	d002      	beq.n	8011c96 <__swsetup_r+0x46>
 8011c90:	4628      	mov	r0, r5
 8011c92:	f000 f8d3 	bl	8011e3c <_free_r>
 8011c96:	2300      	movs	r3, #0
 8011c98:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c9a:	89a3      	ldrh	r3, [r4, #12]
 8011c9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011ca0:	81a3      	strh	r3, [r4, #12]
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	6063      	str	r3, [r4, #4]
 8011ca6:	6923      	ldr	r3, [r4, #16]
 8011ca8:	6023      	str	r3, [r4, #0]
 8011caa:	89a3      	ldrh	r3, [r4, #12]
 8011cac:	f043 0308 	orr.w	r3, r3, #8
 8011cb0:	81a3      	strh	r3, [r4, #12]
 8011cb2:	6923      	ldr	r3, [r4, #16]
 8011cb4:	b94b      	cbnz	r3, 8011cca <__swsetup_r+0x7a>
 8011cb6:	89a3      	ldrh	r3, [r4, #12]
 8011cb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011cc0:	d003      	beq.n	8011cca <__swsetup_r+0x7a>
 8011cc2:	4621      	mov	r1, r4
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	f000 fd51 	bl	801276c <__smakebuf_r>
 8011cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cce:	f013 0201 	ands.w	r2, r3, #1
 8011cd2:	d00a      	beq.n	8011cea <__swsetup_r+0x9a>
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	60a2      	str	r2, [r4, #8]
 8011cd8:	6962      	ldr	r2, [r4, #20]
 8011cda:	4252      	negs	r2, r2
 8011cdc:	61a2      	str	r2, [r4, #24]
 8011cde:	6922      	ldr	r2, [r4, #16]
 8011ce0:	b942      	cbnz	r2, 8011cf4 <__swsetup_r+0xa4>
 8011ce2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011ce6:	d1c5      	bne.n	8011c74 <__swsetup_r+0x24>
 8011ce8:	bd38      	pop	{r3, r4, r5, pc}
 8011cea:	0799      	lsls	r1, r3, #30
 8011cec:	bf58      	it	pl
 8011cee:	6962      	ldrpl	r2, [r4, #20]
 8011cf0:	60a2      	str	r2, [r4, #8]
 8011cf2:	e7f4      	b.n	8011cde <__swsetup_r+0x8e>
 8011cf4:	2000      	movs	r0, #0
 8011cf6:	e7f7      	b.n	8011ce8 <__swsetup_r+0x98>
 8011cf8:	20000134 	.word	0x20000134

08011cfc <memset>:
 8011cfc:	4402      	add	r2, r0
 8011cfe:	4603      	mov	r3, r0
 8011d00:	4293      	cmp	r3, r2
 8011d02:	d100      	bne.n	8011d06 <memset+0xa>
 8011d04:	4770      	bx	lr
 8011d06:	f803 1b01 	strb.w	r1, [r3], #1
 8011d0a:	e7f9      	b.n	8011d00 <memset+0x4>

08011d0c <strrchr>:
 8011d0c:	b538      	push	{r3, r4, r5, lr}
 8011d0e:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8011d12:	4603      	mov	r3, r0
 8011d14:	d10e      	bne.n	8011d34 <strrchr+0x28>
 8011d16:	4621      	mov	r1, r4
 8011d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d1c:	f000 bd96 	b.w	801284c <strchr>
 8011d20:	1c43      	adds	r3, r0, #1
 8011d22:	4605      	mov	r5, r0
 8011d24:	4621      	mov	r1, r4
 8011d26:	4618      	mov	r0, r3
 8011d28:	f000 fd90 	bl	801284c <strchr>
 8011d2c:	2800      	cmp	r0, #0
 8011d2e:	d1f7      	bne.n	8011d20 <strrchr+0x14>
 8011d30:	4628      	mov	r0, r5
 8011d32:	bd38      	pop	{r3, r4, r5, pc}
 8011d34:	2500      	movs	r5, #0
 8011d36:	e7f5      	b.n	8011d24 <strrchr+0x18>

08011d38 <_close_r>:
 8011d38:	b538      	push	{r3, r4, r5, lr}
 8011d3a:	4d06      	ldr	r5, [pc, #24]	@ (8011d54 <_close_r+0x1c>)
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	4604      	mov	r4, r0
 8011d40:	4608      	mov	r0, r1
 8011d42:	602b      	str	r3, [r5, #0]
 8011d44:	f7f0 ffad 	bl	8002ca2 <_close>
 8011d48:	1c43      	adds	r3, r0, #1
 8011d4a:	d102      	bne.n	8011d52 <_close_r+0x1a>
 8011d4c:	682b      	ldr	r3, [r5, #0]
 8011d4e:	b103      	cbz	r3, 8011d52 <_close_r+0x1a>
 8011d50:	6023      	str	r3, [r4, #0]
 8011d52:	bd38      	pop	{r3, r4, r5, pc}
 8011d54:	200021c4 	.word	0x200021c4

08011d58 <_lseek_r>:
 8011d58:	b538      	push	{r3, r4, r5, lr}
 8011d5a:	4d07      	ldr	r5, [pc, #28]	@ (8011d78 <_lseek_r+0x20>)
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	4608      	mov	r0, r1
 8011d60:	4611      	mov	r1, r2
 8011d62:	2200      	movs	r2, #0
 8011d64:	602a      	str	r2, [r5, #0]
 8011d66:	461a      	mov	r2, r3
 8011d68:	f7f0 ffc2 	bl	8002cf0 <_lseek>
 8011d6c:	1c43      	adds	r3, r0, #1
 8011d6e:	d102      	bne.n	8011d76 <_lseek_r+0x1e>
 8011d70:	682b      	ldr	r3, [r5, #0]
 8011d72:	b103      	cbz	r3, 8011d76 <_lseek_r+0x1e>
 8011d74:	6023      	str	r3, [r4, #0]
 8011d76:	bd38      	pop	{r3, r4, r5, pc}
 8011d78:	200021c4 	.word	0x200021c4

08011d7c <_read_r>:
 8011d7c:	b538      	push	{r3, r4, r5, lr}
 8011d7e:	4d07      	ldr	r5, [pc, #28]	@ (8011d9c <_read_r+0x20>)
 8011d80:	4604      	mov	r4, r0
 8011d82:	4608      	mov	r0, r1
 8011d84:	4611      	mov	r1, r2
 8011d86:	2200      	movs	r2, #0
 8011d88:	602a      	str	r2, [r5, #0]
 8011d8a:	461a      	mov	r2, r3
 8011d8c:	f7f0 ff6c 	bl	8002c68 <_read>
 8011d90:	1c43      	adds	r3, r0, #1
 8011d92:	d102      	bne.n	8011d9a <_read_r+0x1e>
 8011d94:	682b      	ldr	r3, [r5, #0]
 8011d96:	b103      	cbz	r3, 8011d9a <_read_r+0x1e>
 8011d98:	6023      	str	r3, [r4, #0]
 8011d9a:	bd38      	pop	{r3, r4, r5, pc}
 8011d9c:	200021c4 	.word	0x200021c4

08011da0 <_write_r>:
 8011da0:	b538      	push	{r3, r4, r5, lr}
 8011da2:	4d07      	ldr	r5, [pc, #28]	@ (8011dc0 <_write_r+0x20>)
 8011da4:	4604      	mov	r4, r0
 8011da6:	4608      	mov	r0, r1
 8011da8:	4611      	mov	r1, r2
 8011daa:	2200      	movs	r2, #0
 8011dac:	602a      	str	r2, [r5, #0]
 8011dae:	461a      	mov	r2, r3
 8011db0:	f7fc fc20 	bl	800e5f4 <_write>
 8011db4:	1c43      	adds	r3, r0, #1
 8011db6:	d102      	bne.n	8011dbe <_write_r+0x1e>
 8011db8:	682b      	ldr	r3, [r5, #0]
 8011dba:	b103      	cbz	r3, 8011dbe <_write_r+0x1e>
 8011dbc:	6023      	str	r3, [r4, #0]
 8011dbe:	bd38      	pop	{r3, r4, r5, pc}
 8011dc0:	200021c4 	.word	0x200021c4

08011dc4 <__errno>:
 8011dc4:	4b01      	ldr	r3, [pc, #4]	@ (8011dcc <__errno+0x8>)
 8011dc6:	6818      	ldr	r0, [r3, #0]
 8011dc8:	4770      	bx	lr
 8011dca:	bf00      	nop
 8011dcc:	20000134 	.word	0x20000134

08011dd0 <__libc_init_array>:
 8011dd0:	b570      	push	{r4, r5, r6, lr}
 8011dd2:	4d0d      	ldr	r5, [pc, #52]	@ (8011e08 <__libc_init_array+0x38>)
 8011dd4:	4c0d      	ldr	r4, [pc, #52]	@ (8011e0c <__libc_init_array+0x3c>)
 8011dd6:	1b64      	subs	r4, r4, r5
 8011dd8:	10a4      	asrs	r4, r4, #2
 8011dda:	2600      	movs	r6, #0
 8011ddc:	42a6      	cmp	r6, r4
 8011dde:	d109      	bne.n	8011df4 <__libc_init_array+0x24>
 8011de0:	4d0b      	ldr	r5, [pc, #44]	@ (8011e10 <__libc_init_array+0x40>)
 8011de2:	4c0c      	ldr	r4, [pc, #48]	@ (8011e14 <__libc_init_array+0x44>)
 8011de4:	f000 fd72 	bl	80128cc <_init>
 8011de8:	1b64      	subs	r4, r4, r5
 8011dea:	10a4      	asrs	r4, r4, #2
 8011dec:	2600      	movs	r6, #0
 8011dee:	42a6      	cmp	r6, r4
 8011df0:	d105      	bne.n	8011dfe <__libc_init_array+0x2e>
 8011df2:	bd70      	pop	{r4, r5, r6, pc}
 8011df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011df8:	4798      	blx	r3
 8011dfa:	3601      	adds	r6, #1
 8011dfc:	e7ee      	b.n	8011ddc <__libc_init_array+0xc>
 8011dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e02:	4798      	blx	r3
 8011e04:	3601      	adds	r6, #1
 8011e06:	e7f2      	b.n	8011dee <__libc_init_array+0x1e>
 8011e08:	080141a8 	.word	0x080141a8
 8011e0c:	080141a8 	.word	0x080141a8
 8011e10:	080141a8 	.word	0x080141a8
 8011e14:	080141ac 	.word	0x080141ac

08011e18 <__retarget_lock_init_recursive>:
 8011e18:	4770      	bx	lr

08011e1a <__retarget_lock_acquire_recursive>:
 8011e1a:	4770      	bx	lr

08011e1c <__retarget_lock_release_recursive>:
 8011e1c:	4770      	bx	lr

08011e1e <memcpy>:
 8011e1e:	440a      	add	r2, r1
 8011e20:	4291      	cmp	r1, r2
 8011e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e26:	d100      	bne.n	8011e2a <memcpy+0xc>
 8011e28:	4770      	bx	lr
 8011e2a:	b510      	push	{r4, lr}
 8011e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e34:	4291      	cmp	r1, r2
 8011e36:	d1f9      	bne.n	8011e2c <memcpy+0xe>
 8011e38:	bd10      	pop	{r4, pc}
	...

08011e3c <_free_r>:
 8011e3c:	b538      	push	{r3, r4, r5, lr}
 8011e3e:	4605      	mov	r5, r0
 8011e40:	2900      	cmp	r1, #0
 8011e42:	d041      	beq.n	8011ec8 <_free_r+0x8c>
 8011e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e48:	1f0c      	subs	r4, r1, #4
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	bfb8      	it	lt
 8011e4e:	18e4      	addlt	r4, r4, r3
 8011e50:	f000 f8e0 	bl	8012014 <__malloc_lock>
 8011e54:	4a1d      	ldr	r2, [pc, #116]	@ (8011ecc <_free_r+0x90>)
 8011e56:	6813      	ldr	r3, [r2, #0]
 8011e58:	b933      	cbnz	r3, 8011e68 <_free_r+0x2c>
 8011e5a:	6063      	str	r3, [r4, #4]
 8011e5c:	6014      	str	r4, [r2, #0]
 8011e5e:	4628      	mov	r0, r5
 8011e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e64:	f000 b8dc 	b.w	8012020 <__malloc_unlock>
 8011e68:	42a3      	cmp	r3, r4
 8011e6a:	d908      	bls.n	8011e7e <_free_r+0x42>
 8011e6c:	6820      	ldr	r0, [r4, #0]
 8011e6e:	1821      	adds	r1, r4, r0
 8011e70:	428b      	cmp	r3, r1
 8011e72:	bf01      	itttt	eq
 8011e74:	6819      	ldreq	r1, [r3, #0]
 8011e76:	685b      	ldreq	r3, [r3, #4]
 8011e78:	1809      	addeq	r1, r1, r0
 8011e7a:	6021      	streq	r1, [r4, #0]
 8011e7c:	e7ed      	b.n	8011e5a <_free_r+0x1e>
 8011e7e:	461a      	mov	r2, r3
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	b10b      	cbz	r3, 8011e88 <_free_r+0x4c>
 8011e84:	42a3      	cmp	r3, r4
 8011e86:	d9fa      	bls.n	8011e7e <_free_r+0x42>
 8011e88:	6811      	ldr	r1, [r2, #0]
 8011e8a:	1850      	adds	r0, r2, r1
 8011e8c:	42a0      	cmp	r0, r4
 8011e8e:	d10b      	bne.n	8011ea8 <_free_r+0x6c>
 8011e90:	6820      	ldr	r0, [r4, #0]
 8011e92:	4401      	add	r1, r0
 8011e94:	1850      	adds	r0, r2, r1
 8011e96:	4283      	cmp	r3, r0
 8011e98:	6011      	str	r1, [r2, #0]
 8011e9a:	d1e0      	bne.n	8011e5e <_free_r+0x22>
 8011e9c:	6818      	ldr	r0, [r3, #0]
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	6053      	str	r3, [r2, #4]
 8011ea2:	4408      	add	r0, r1
 8011ea4:	6010      	str	r0, [r2, #0]
 8011ea6:	e7da      	b.n	8011e5e <_free_r+0x22>
 8011ea8:	d902      	bls.n	8011eb0 <_free_r+0x74>
 8011eaa:	230c      	movs	r3, #12
 8011eac:	602b      	str	r3, [r5, #0]
 8011eae:	e7d6      	b.n	8011e5e <_free_r+0x22>
 8011eb0:	6820      	ldr	r0, [r4, #0]
 8011eb2:	1821      	adds	r1, r4, r0
 8011eb4:	428b      	cmp	r3, r1
 8011eb6:	bf04      	itt	eq
 8011eb8:	6819      	ldreq	r1, [r3, #0]
 8011eba:	685b      	ldreq	r3, [r3, #4]
 8011ebc:	6063      	str	r3, [r4, #4]
 8011ebe:	bf04      	itt	eq
 8011ec0:	1809      	addeq	r1, r1, r0
 8011ec2:	6021      	streq	r1, [r4, #0]
 8011ec4:	6054      	str	r4, [r2, #4]
 8011ec6:	e7ca      	b.n	8011e5e <_free_r+0x22>
 8011ec8:	bd38      	pop	{r3, r4, r5, pc}
 8011eca:	bf00      	nop
 8011ecc:	200021d0 	.word	0x200021d0

08011ed0 <sbrk_aligned>:
 8011ed0:	b570      	push	{r4, r5, r6, lr}
 8011ed2:	4e0f      	ldr	r6, [pc, #60]	@ (8011f10 <sbrk_aligned+0x40>)
 8011ed4:	460c      	mov	r4, r1
 8011ed6:	6831      	ldr	r1, [r6, #0]
 8011ed8:	4605      	mov	r5, r0
 8011eda:	b911      	cbnz	r1, 8011ee2 <sbrk_aligned+0x12>
 8011edc:	f000 fce6 	bl	80128ac <_sbrk_r>
 8011ee0:	6030      	str	r0, [r6, #0]
 8011ee2:	4621      	mov	r1, r4
 8011ee4:	4628      	mov	r0, r5
 8011ee6:	f000 fce1 	bl	80128ac <_sbrk_r>
 8011eea:	1c43      	adds	r3, r0, #1
 8011eec:	d103      	bne.n	8011ef6 <sbrk_aligned+0x26>
 8011eee:	f04f 34ff 	mov.w	r4, #4294967295
 8011ef2:	4620      	mov	r0, r4
 8011ef4:	bd70      	pop	{r4, r5, r6, pc}
 8011ef6:	1cc4      	adds	r4, r0, #3
 8011ef8:	f024 0403 	bic.w	r4, r4, #3
 8011efc:	42a0      	cmp	r0, r4
 8011efe:	d0f8      	beq.n	8011ef2 <sbrk_aligned+0x22>
 8011f00:	1a21      	subs	r1, r4, r0
 8011f02:	4628      	mov	r0, r5
 8011f04:	f000 fcd2 	bl	80128ac <_sbrk_r>
 8011f08:	3001      	adds	r0, #1
 8011f0a:	d1f2      	bne.n	8011ef2 <sbrk_aligned+0x22>
 8011f0c:	e7ef      	b.n	8011eee <sbrk_aligned+0x1e>
 8011f0e:	bf00      	nop
 8011f10:	200021cc 	.word	0x200021cc

08011f14 <_malloc_r>:
 8011f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f18:	1ccd      	adds	r5, r1, #3
 8011f1a:	f025 0503 	bic.w	r5, r5, #3
 8011f1e:	3508      	adds	r5, #8
 8011f20:	2d0c      	cmp	r5, #12
 8011f22:	bf38      	it	cc
 8011f24:	250c      	movcc	r5, #12
 8011f26:	2d00      	cmp	r5, #0
 8011f28:	4606      	mov	r6, r0
 8011f2a:	db01      	blt.n	8011f30 <_malloc_r+0x1c>
 8011f2c:	42a9      	cmp	r1, r5
 8011f2e:	d904      	bls.n	8011f3a <_malloc_r+0x26>
 8011f30:	230c      	movs	r3, #12
 8011f32:	6033      	str	r3, [r6, #0]
 8011f34:	2000      	movs	r0, #0
 8011f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012010 <_malloc_r+0xfc>
 8011f3e:	f000 f869 	bl	8012014 <__malloc_lock>
 8011f42:	f8d8 3000 	ldr.w	r3, [r8]
 8011f46:	461c      	mov	r4, r3
 8011f48:	bb44      	cbnz	r4, 8011f9c <_malloc_r+0x88>
 8011f4a:	4629      	mov	r1, r5
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	f7ff ffbf 	bl	8011ed0 <sbrk_aligned>
 8011f52:	1c43      	adds	r3, r0, #1
 8011f54:	4604      	mov	r4, r0
 8011f56:	d158      	bne.n	801200a <_malloc_r+0xf6>
 8011f58:	f8d8 4000 	ldr.w	r4, [r8]
 8011f5c:	4627      	mov	r7, r4
 8011f5e:	2f00      	cmp	r7, #0
 8011f60:	d143      	bne.n	8011fea <_malloc_r+0xd6>
 8011f62:	2c00      	cmp	r4, #0
 8011f64:	d04b      	beq.n	8011ffe <_malloc_r+0xea>
 8011f66:	6823      	ldr	r3, [r4, #0]
 8011f68:	4639      	mov	r1, r7
 8011f6a:	4630      	mov	r0, r6
 8011f6c:	eb04 0903 	add.w	r9, r4, r3
 8011f70:	f000 fc9c 	bl	80128ac <_sbrk_r>
 8011f74:	4581      	cmp	r9, r0
 8011f76:	d142      	bne.n	8011ffe <_malloc_r+0xea>
 8011f78:	6821      	ldr	r1, [r4, #0]
 8011f7a:	1a6d      	subs	r5, r5, r1
 8011f7c:	4629      	mov	r1, r5
 8011f7e:	4630      	mov	r0, r6
 8011f80:	f7ff ffa6 	bl	8011ed0 <sbrk_aligned>
 8011f84:	3001      	adds	r0, #1
 8011f86:	d03a      	beq.n	8011ffe <_malloc_r+0xea>
 8011f88:	6823      	ldr	r3, [r4, #0]
 8011f8a:	442b      	add	r3, r5
 8011f8c:	6023      	str	r3, [r4, #0]
 8011f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8011f92:	685a      	ldr	r2, [r3, #4]
 8011f94:	bb62      	cbnz	r2, 8011ff0 <_malloc_r+0xdc>
 8011f96:	f8c8 7000 	str.w	r7, [r8]
 8011f9a:	e00f      	b.n	8011fbc <_malloc_r+0xa8>
 8011f9c:	6822      	ldr	r2, [r4, #0]
 8011f9e:	1b52      	subs	r2, r2, r5
 8011fa0:	d420      	bmi.n	8011fe4 <_malloc_r+0xd0>
 8011fa2:	2a0b      	cmp	r2, #11
 8011fa4:	d917      	bls.n	8011fd6 <_malloc_r+0xc2>
 8011fa6:	1961      	adds	r1, r4, r5
 8011fa8:	42a3      	cmp	r3, r4
 8011faa:	6025      	str	r5, [r4, #0]
 8011fac:	bf18      	it	ne
 8011fae:	6059      	strne	r1, [r3, #4]
 8011fb0:	6863      	ldr	r3, [r4, #4]
 8011fb2:	bf08      	it	eq
 8011fb4:	f8c8 1000 	streq.w	r1, [r8]
 8011fb8:	5162      	str	r2, [r4, r5]
 8011fba:	604b      	str	r3, [r1, #4]
 8011fbc:	4630      	mov	r0, r6
 8011fbe:	f000 f82f 	bl	8012020 <__malloc_unlock>
 8011fc2:	f104 000b 	add.w	r0, r4, #11
 8011fc6:	1d23      	adds	r3, r4, #4
 8011fc8:	f020 0007 	bic.w	r0, r0, #7
 8011fcc:	1ac2      	subs	r2, r0, r3
 8011fce:	bf1c      	itt	ne
 8011fd0:	1a1b      	subne	r3, r3, r0
 8011fd2:	50a3      	strne	r3, [r4, r2]
 8011fd4:	e7af      	b.n	8011f36 <_malloc_r+0x22>
 8011fd6:	6862      	ldr	r2, [r4, #4]
 8011fd8:	42a3      	cmp	r3, r4
 8011fda:	bf0c      	ite	eq
 8011fdc:	f8c8 2000 	streq.w	r2, [r8]
 8011fe0:	605a      	strne	r2, [r3, #4]
 8011fe2:	e7eb      	b.n	8011fbc <_malloc_r+0xa8>
 8011fe4:	4623      	mov	r3, r4
 8011fe6:	6864      	ldr	r4, [r4, #4]
 8011fe8:	e7ae      	b.n	8011f48 <_malloc_r+0x34>
 8011fea:	463c      	mov	r4, r7
 8011fec:	687f      	ldr	r7, [r7, #4]
 8011fee:	e7b6      	b.n	8011f5e <_malloc_r+0x4a>
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	42a3      	cmp	r3, r4
 8011ff6:	d1fb      	bne.n	8011ff0 <_malloc_r+0xdc>
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	6053      	str	r3, [r2, #4]
 8011ffc:	e7de      	b.n	8011fbc <_malloc_r+0xa8>
 8011ffe:	230c      	movs	r3, #12
 8012000:	6033      	str	r3, [r6, #0]
 8012002:	4630      	mov	r0, r6
 8012004:	f000 f80c 	bl	8012020 <__malloc_unlock>
 8012008:	e794      	b.n	8011f34 <_malloc_r+0x20>
 801200a:	6005      	str	r5, [r0, #0]
 801200c:	e7d6      	b.n	8011fbc <_malloc_r+0xa8>
 801200e:	bf00      	nop
 8012010:	200021d0 	.word	0x200021d0

08012014 <__malloc_lock>:
 8012014:	4801      	ldr	r0, [pc, #4]	@ (801201c <__malloc_lock+0x8>)
 8012016:	f7ff bf00 	b.w	8011e1a <__retarget_lock_acquire_recursive>
 801201a:	bf00      	nop
 801201c:	200021c8 	.word	0x200021c8

08012020 <__malloc_unlock>:
 8012020:	4801      	ldr	r0, [pc, #4]	@ (8012028 <__malloc_unlock+0x8>)
 8012022:	f7ff befb 	b.w	8011e1c <__retarget_lock_release_recursive>
 8012026:	bf00      	nop
 8012028:	200021c8 	.word	0x200021c8

0801202c <__sfputc_r>:
 801202c:	6893      	ldr	r3, [r2, #8]
 801202e:	3b01      	subs	r3, #1
 8012030:	2b00      	cmp	r3, #0
 8012032:	b410      	push	{r4}
 8012034:	6093      	str	r3, [r2, #8]
 8012036:	da08      	bge.n	801204a <__sfputc_r+0x1e>
 8012038:	6994      	ldr	r4, [r2, #24]
 801203a:	42a3      	cmp	r3, r4
 801203c:	db01      	blt.n	8012042 <__sfputc_r+0x16>
 801203e:	290a      	cmp	r1, #10
 8012040:	d103      	bne.n	801204a <__sfputc_r+0x1e>
 8012042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012046:	f7ff bdc4 	b.w	8011bd2 <__swbuf_r>
 801204a:	6813      	ldr	r3, [r2, #0]
 801204c:	1c58      	adds	r0, r3, #1
 801204e:	6010      	str	r0, [r2, #0]
 8012050:	7019      	strb	r1, [r3, #0]
 8012052:	4608      	mov	r0, r1
 8012054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012058:	4770      	bx	lr

0801205a <__sfputs_r>:
 801205a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801205c:	4606      	mov	r6, r0
 801205e:	460f      	mov	r7, r1
 8012060:	4614      	mov	r4, r2
 8012062:	18d5      	adds	r5, r2, r3
 8012064:	42ac      	cmp	r4, r5
 8012066:	d101      	bne.n	801206c <__sfputs_r+0x12>
 8012068:	2000      	movs	r0, #0
 801206a:	e007      	b.n	801207c <__sfputs_r+0x22>
 801206c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012070:	463a      	mov	r2, r7
 8012072:	4630      	mov	r0, r6
 8012074:	f7ff ffda 	bl	801202c <__sfputc_r>
 8012078:	1c43      	adds	r3, r0, #1
 801207a:	d1f3      	bne.n	8012064 <__sfputs_r+0xa>
 801207c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012080 <_vfiprintf_r>:
 8012080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012084:	460d      	mov	r5, r1
 8012086:	b09d      	sub	sp, #116	@ 0x74
 8012088:	4614      	mov	r4, r2
 801208a:	4698      	mov	r8, r3
 801208c:	4606      	mov	r6, r0
 801208e:	b118      	cbz	r0, 8012098 <_vfiprintf_r+0x18>
 8012090:	6a03      	ldr	r3, [r0, #32]
 8012092:	b90b      	cbnz	r3, 8012098 <_vfiprintf_r+0x18>
 8012094:	f7ff fcac 	bl	80119f0 <__sinit>
 8012098:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801209a:	07d9      	lsls	r1, r3, #31
 801209c:	d405      	bmi.n	80120aa <_vfiprintf_r+0x2a>
 801209e:	89ab      	ldrh	r3, [r5, #12]
 80120a0:	059a      	lsls	r2, r3, #22
 80120a2:	d402      	bmi.n	80120aa <_vfiprintf_r+0x2a>
 80120a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80120a6:	f7ff feb8 	bl	8011e1a <__retarget_lock_acquire_recursive>
 80120aa:	89ab      	ldrh	r3, [r5, #12]
 80120ac:	071b      	lsls	r3, r3, #28
 80120ae:	d501      	bpl.n	80120b4 <_vfiprintf_r+0x34>
 80120b0:	692b      	ldr	r3, [r5, #16]
 80120b2:	b99b      	cbnz	r3, 80120dc <_vfiprintf_r+0x5c>
 80120b4:	4629      	mov	r1, r5
 80120b6:	4630      	mov	r0, r6
 80120b8:	f7ff fdca 	bl	8011c50 <__swsetup_r>
 80120bc:	b170      	cbz	r0, 80120dc <_vfiprintf_r+0x5c>
 80120be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120c0:	07dc      	lsls	r4, r3, #31
 80120c2:	d504      	bpl.n	80120ce <_vfiprintf_r+0x4e>
 80120c4:	f04f 30ff 	mov.w	r0, #4294967295
 80120c8:	b01d      	add	sp, #116	@ 0x74
 80120ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ce:	89ab      	ldrh	r3, [r5, #12]
 80120d0:	0598      	lsls	r0, r3, #22
 80120d2:	d4f7      	bmi.n	80120c4 <_vfiprintf_r+0x44>
 80120d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80120d6:	f7ff fea1 	bl	8011e1c <__retarget_lock_release_recursive>
 80120da:	e7f3      	b.n	80120c4 <_vfiprintf_r+0x44>
 80120dc:	2300      	movs	r3, #0
 80120de:	9309      	str	r3, [sp, #36]	@ 0x24
 80120e0:	2320      	movs	r3, #32
 80120e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80120e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80120ea:	2330      	movs	r3, #48	@ 0x30
 80120ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801229c <_vfiprintf_r+0x21c>
 80120f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80120f4:	f04f 0901 	mov.w	r9, #1
 80120f8:	4623      	mov	r3, r4
 80120fa:	469a      	mov	sl, r3
 80120fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012100:	b10a      	cbz	r2, 8012106 <_vfiprintf_r+0x86>
 8012102:	2a25      	cmp	r2, #37	@ 0x25
 8012104:	d1f9      	bne.n	80120fa <_vfiprintf_r+0x7a>
 8012106:	ebba 0b04 	subs.w	fp, sl, r4
 801210a:	d00b      	beq.n	8012124 <_vfiprintf_r+0xa4>
 801210c:	465b      	mov	r3, fp
 801210e:	4622      	mov	r2, r4
 8012110:	4629      	mov	r1, r5
 8012112:	4630      	mov	r0, r6
 8012114:	f7ff ffa1 	bl	801205a <__sfputs_r>
 8012118:	3001      	adds	r0, #1
 801211a:	f000 80a7 	beq.w	801226c <_vfiprintf_r+0x1ec>
 801211e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012120:	445a      	add	r2, fp
 8012122:	9209      	str	r2, [sp, #36]	@ 0x24
 8012124:	f89a 3000 	ldrb.w	r3, [sl]
 8012128:	2b00      	cmp	r3, #0
 801212a:	f000 809f 	beq.w	801226c <_vfiprintf_r+0x1ec>
 801212e:	2300      	movs	r3, #0
 8012130:	f04f 32ff 	mov.w	r2, #4294967295
 8012134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012138:	f10a 0a01 	add.w	sl, sl, #1
 801213c:	9304      	str	r3, [sp, #16]
 801213e:	9307      	str	r3, [sp, #28]
 8012140:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012144:	931a      	str	r3, [sp, #104]	@ 0x68
 8012146:	4654      	mov	r4, sl
 8012148:	2205      	movs	r2, #5
 801214a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801214e:	4853      	ldr	r0, [pc, #332]	@ (801229c <_vfiprintf_r+0x21c>)
 8012150:	f7ee f81e 	bl	8000190 <memchr>
 8012154:	9a04      	ldr	r2, [sp, #16]
 8012156:	b9d8      	cbnz	r0, 8012190 <_vfiprintf_r+0x110>
 8012158:	06d1      	lsls	r1, r2, #27
 801215a:	bf44      	itt	mi
 801215c:	2320      	movmi	r3, #32
 801215e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012162:	0713      	lsls	r3, r2, #28
 8012164:	bf44      	itt	mi
 8012166:	232b      	movmi	r3, #43	@ 0x2b
 8012168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801216c:	f89a 3000 	ldrb.w	r3, [sl]
 8012170:	2b2a      	cmp	r3, #42	@ 0x2a
 8012172:	d015      	beq.n	80121a0 <_vfiprintf_r+0x120>
 8012174:	9a07      	ldr	r2, [sp, #28]
 8012176:	4654      	mov	r4, sl
 8012178:	2000      	movs	r0, #0
 801217a:	f04f 0c0a 	mov.w	ip, #10
 801217e:	4621      	mov	r1, r4
 8012180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012184:	3b30      	subs	r3, #48	@ 0x30
 8012186:	2b09      	cmp	r3, #9
 8012188:	d94b      	bls.n	8012222 <_vfiprintf_r+0x1a2>
 801218a:	b1b0      	cbz	r0, 80121ba <_vfiprintf_r+0x13a>
 801218c:	9207      	str	r2, [sp, #28]
 801218e:	e014      	b.n	80121ba <_vfiprintf_r+0x13a>
 8012190:	eba0 0308 	sub.w	r3, r0, r8
 8012194:	fa09 f303 	lsl.w	r3, r9, r3
 8012198:	4313      	orrs	r3, r2
 801219a:	9304      	str	r3, [sp, #16]
 801219c:	46a2      	mov	sl, r4
 801219e:	e7d2      	b.n	8012146 <_vfiprintf_r+0xc6>
 80121a0:	9b03      	ldr	r3, [sp, #12]
 80121a2:	1d19      	adds	r1, r3, #4
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	9103      	str	r1, [sp, #12]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	bfbb      	ittet	lt
 80121ac:	425b      	neglt	r3, r3
 80121ae:	f042 0202 	orrlt.w	r2, r2, #2
 80121b2:	9307      	strge	r3, [sp, #28]
 80121b4:	9307      	strlt	r3, [sp, #28]
 80121b6:	bfb8      	it	lt
 80121b8:	9204      	strlt	r2, [sp, #16]
 80121ba:	7823      	ldrb	r3, [r4, #0]
 80121bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80121be:	d10a      	bne.n	80121d6 <_vfiprintf_r+0x156>
 80121c0:	7863      	ldrb	r3, [r4, #1]
 80121c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80121c4:	d132      	bne.n	801222c <_vfiprintf_r+0x1ac>
 80121c6:	9b03      	ldr	r3, [sp, #12]
 80121c8:	1d1a      	adds	r2, r3, #4
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	9203      	str	r2, [sp, #12]
 80121ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80121d2:	3402      	adds	r4, #2
 80121d4:	9305      	str	r3, [sp, #20]
 80121d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80122ac <_vfiprintf_r+0x22c>
 80121da:	7821      	ldrb	r1, [r4, #0]
 80121dc:	2203      	movs	r2, #3
 80121de:	4650      	mov	r0, sl
 80121e0:	f7ed ffd6 	bl	8000190 <memchr>
 80121e4:	b138      	cbz	r0, 80121f6 <_vfiprintf_r+0x176>
 80121e6:	9b04      	ldr	r3, [sp, #16]
 80121e8:	eba0 000a 	sub.w	r0, r0, sl
 80121ec:	2240      	movs	r2, #64	@ 0x40
 80121ee:	4082      	lsls	r2, r0
 80121f0:	4313      	orrs	r3, r2
 80121f2:	3401      	adds	r4, #1
 80121f4:	9304      	str	r3, [sp, #16]
 80121f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121fa:	4829      	ldr	r0, [pc, #164]	@ (80122a0 <_vfiprintf_r+0x220>)
 80121fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012200:	2206      	movs	r2, #6
 8012202:	f7ed ffc5 	bl	8000190 <memchr>
 8012206:	2800      	cmp	r0, #0
 8012208:	d03f      	beq.n	801228a <_vfiprintf_r+0x20a>
 801220a:	4b26      	ldr	r3, [pc, #152]	@ (80122a4 <_vfiprintf_r+0x224>)
 801220c:	bb1b      	cbnz	r3, 8012256 <_vfiprintf_r+0x1d6>
 801220e:	9b03      	ldr	r3, [sp, #12]
 8012210:	3307      	adds	r3, #7
 8012212:	f023 0307 	bic.w	r3, r3, #7
 8012216:	3308      	adds	r3, #8
 8012218:	9303      	str	r3, [sp, #12]
 801221a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801221c:	443b      	add	r3, r7
 801221e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012220:	e76a      	b.n	80120f8 <_vfiprintf_r+0x78>
 8012222:	fb0c 3202 	mla	r2, ip, r2, r3
 8012226:	460c      	mov	r4, r1
 8012228:	2001      	movs	r0, #1
 801222a:	e7a8      	b.n	801217e <_vfiprintf_r+0xfe>
 801222c:	2300      	movs	r3, #0
 801222e:	3401      	adds	r4, #1
 8012230:	9305      	str	r3, [sp, #20]
 8012232:	4619      	mov	r1, r3
 8012234:	f04f 0c0a 	mov.w	ip, #10
 8012238:	4620      	mov	r0, r4
 801223a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801223e:	3a30      	subs	r2, #48	@ 0x30
 8012240:	2a09      	cmp	r2, #9
 8012242:	d903      	bls.n	801224c <_vfiprintf_r+0x1cc>
 8012244:	2b00      	cmp	r3, #0
 8012246:	d0c6      	beq.n	80121d6 <_vfiprintf_r+0x156>
 8012248:	9105      	str	r1, [sp, #20]
 801224a:	e7c4      	b.n	80121d6 <_vfiprintf_r+0x156>
 801224c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012250:	4604      	mov	r4, r0
 8012252:	2301      	movs	r3, #1
 8012254:	e7f0      	b.n	8012238 <_vfiprintf_r+0x1b8>
 8012256:	ab03      	add	r3, sp, #12
 8012258:	9300      	str	r3, [sp, #0]
 801225a:	462a      	mov	r2, r5
 801225c:	4b12      	ldr	r3, [pc, #72]	@ (80122a8 <_vfiprintf_r+0x228>)
 801225e:	a904      	add	r1, sp, #16
 8012260:	4630      	mov	r0, r6
 8012262:	f3af 8000 	nop.w
 8012266:	4607      	mov	r7, r0
 8012268:	1c78      	adds	r0, r7, #1
 801226a:	d1d6      	bne.n	801221a <_vfiprintf_r+0x19a>
 801226c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801226e:	07d9      	lsls	r1, r3, #31
 8012270:	d405      	bmi.n	801227e <_vfiprintf_r+0x1fe>
 8012272:	89ab      	ldrh	r3, [r5, #12]
 8012274:	059a      	lsls	r2, r3, #22
 8012276:	d402      	bmi.n	801227e <_vfiprintf_r+0x1fe>
 8012278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801227a:	f7ff fdcf 	bl	8011e1c <__retarget_lock_release_recursive>
 801227e:	89ab      	ldrh	r3, [r5, #12]
 8012280:	065b      	lsls	r3, r3, #25
 8012282:	f53f af1f 	bmi.w	80120c4 <_vfiprintf_r+0x44>
 8012286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012288:	e71e      	b.n	80120c8 <_vfiprintf_r+0x48>
 801228a:	ab03      	add	r3, sp, #12
 801228c:	9300      	str	r3, [sp, #0]
 801228e:	462a      	mov	r2, r5
 8012290:	4b05      	ldr	r3, [pc, #20]	@ (80122a8 <_vfiprintf_r+0x228>)
 8012292:	a904      	add	r1, sp, #16
 8012294:	4630      	mov	r0, r6
 8012296:	f000 f879 	bl	801238c <_printf_i>
 801229a:	e7e4      	b.n	8012266 <_vfiprintf_r+0x1e6>
 801229c:	0801416d 	.word	0x0801416d
 80122a0:	08014177 	.word	0x08014177
 80122a4:	00000000 	.word	0x00000000
 80122a8:	0801205b 	.word	0x0801205b
 80122ac:	08014173 	.word	0x08014173

080122b0 <_printf_common>:
 80122b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122b4:	4616      	mov	r6, r2
 80122b6:	4698      	mov	r8, r3
 80122b8:	688a      	ldr	r2, [r1, #8]
 80122ba:	690b      	ldr	r3, [r1, #16]
 80122bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80122c0:	4293      	cmp	r3, r2
 80122c2:	bfb8      	it	lt
 80122c4:	4613      	movlt	r3, r2
 80122c6:	6033      	str	r3, [r6, #0]
 80122c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80122cc:	4607      	mov	r7, r0
 80122ce:	460c      	mov	r4, r1
 80122d0:	b10a      	cbz	r2, 80122d6 <_printf_common+0x26>
 80122d2:	3301      	adds	r3, #1
 80122d4:	6033      	str	r3, [r6, #0]
 80122d6:	6823      	ldr	r3, [r4, #0]
 80122d8:	0699      	lsls	r1, r3, #26
 80122da:	bf42      	ittt	mi
 80122dc:	6833      	ldrmi	r3, [r6, #0]
 80122de:	3302      	addmi	r3, #2
 80122e0:	6033      	strmi	r3, [r6, #0]
 80122e2:	6825      	ldr	r5, [r4, #0]
 80122e4:	f015 0506 	ands.w	r5, r5, #6
 80122e8:	d106      	bne.n	80122f8 <_printf_common+0x48>
 80122ea:	f104 0a19 	add.w	sl, r4, #25
 80122ee:	68e3      	ldr	r3, [r4, #12]
 80122f0:	6832      	ldr	r2, [r6, #0]
 80122f2:	1a9b      	subs	r3, r3, r2
 80122f4:	42ab      	cmp	r3, r5
 80122f6:	dc26      	bgt.n	8012346 <_printf_common+0x96>
 80122f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80122fc:	6822      	ldr	r2, [r4, #0]
 80122fe:	3b00      	subs	r3, #0
 8012300:	bf18      	it	ne
 8012302:	2301      	movne	r3, #1
 8012304:	0692      	lsls	r2, r2, #26
 8012306:	d42b      	bmi.n	8012360 <_printf_common+0xb0>
 8012308:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801230c:	4641      	mov	r1, r8
 801230e:	4638      	mov	r0, r7
 8012310:	47c8      	blx	r9
 8012312:	3001      	adds	r0, #1
 8012314:	d01e      	beq.n	8012354 <_printf_common+0xa4>
 8012316:	6823      	ldr	r3, [r4, #0]
 8012318:	6922      	ldr	r2, [r4, #16]
 801231a:	f003 0306 	and.w	r3, r3, #6
 801231e:	2b04      	cmp	r3, #4
 8012320:	bf02      	ittt	eq
 8012322:	68e5      	ldreq	r5, [r4, #12]
 8012324:	6833      	ldreq	r3, [r6, #0]
 8012326:	1aed      	subeq	r5, r5, r3
 8012328:	68a3      	ldr	r3, [r4, #8]
 801232a:	bf0c      	ite	eq
 801232c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012330:	2500      	movne	r5, #0
 8012332:	4293      	cmp	r3, r2
 8012334:	bfc4      	itt	gt
 8012336:	1a9b      	subgt	r3, r3, r2
 8012338:	18ed      	addgt	r5, r5, r3
 801233a:	2600      	movs	r6, #0
 801233c:	341a      	adds	r4, #26
 801233e:	42b5      	cmp	r5, r6
 8012340:	d11a      	bne.n	8012378 <_printf_common+0xc8>
 8012342:	2000      	movs	r0, #0
 8012344:	e008      	b.n	8012358 <_printf_common+0xa8>
 8012346:	2301      	movs	r3, #1
 8012348:	4652      	mov	r2, sl
 801234a:	4641      	mov	r1, r8
 801234c:	4638      	mov	r0, r7
 801234e:	47c8      	blx	r9
 8012350:	3001      	adds	r0, #1
 8012352:	d103      	bne.n	801235c <_printf_common+0xac>
 8012354:	f04f 30ff 	mov.w	r0, #4294967295
 8012358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801235c:	3501      	adds	r5, #1
 801235e:	e7c6      	b.n	80122ee <_printf_common+0x3e>
 8012360:	18e1      	adds	r1, r4, r3
 8012362:	1c5a      	adds	r2, r3, #1
 8012364:	2030      	movs	r0, #48	@ 0x30
 8012366:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801236a:	4422      	add	r2, r4
 801236c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012370:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012374:	3302      	adds	r3, #2
 8012376:	e7c7      	b.n	8012308 <_printf_common+0x58>
 8012378:	2301      	movs	r3, #1
 801237a:	4622      	mov	r2, r4
 801237c:	4641      	mov	r1, r8
 801237e:	4638      	mov	r0, r7
 8012380:	47c8      	blx	r9
 8012382:	3001      	adds	r0, #1
 8012384:	d0e6      	beq.n	8012354 <_printf_common+0xa4>
 8012386:	3601      	adds	r6, #1
 8012388:	e7d9      	b.n	801233e <_printf_common+0x8e>
	...

0801238c <_printf_i>:
 801238c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012390:	7e0f      	ldrb	r7, [r1, #24]
 8012392:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012394:	2f78      	cmp	r7, #120	@ 0x78
 8012396:	4691      	mov	r9, r2
 8012398:	4680      	mov	r8, r0
 801239a:	460c      	mov	r4, r1
 801239c:	469a      	mov	sl, r3
 801239e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80123a2:	d807      	bhi.n	80123b4 <_printf_i+0x28>
 80123a4:	2f62      	cmp	r7, #98	@ 0x62
 80123a6:	d80a      	bhi.n	80123be <_printf_i+0x32>
 80123a8:	2f00      	cmp	r7, #0
 80123aa:	f000 80d1 	beq.w	8012550 <_printf_i+0x1c4>
 80123ae:	2f58      	cmp	r7, #88	@ 0x58
 80123b0:	f000 80b8 	beq.w	8012524 <_printf_i+0x198>
 80123b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80123b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80123bc:	e03a      	b.n	8012434 <_printf_i+0xa8>
 80123be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80123c2:	2b15      	cmp	r3, #21
 80123c4:	d8f6      	bhi.n	80123b4 <_printf_i+0x28>
 80123c6:	a101      	add	r1, pc, #4	@ (adr r1, 80123cc <_printf_i+0x40>)
 80123c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80123cc:	08012425 	.word	0x08012425
 80123d0:	08012439 	.word	0x08012439
 80123d4:	080123b5 	.word	0x080123b5
 80123d8:	080123b5 	.word	0x080123b5
 80123dc:	080123b5 	.word	0x080123b5
 80123e0:	080123b5 	.word	0x080123b5
 80123e4:	08012439 	.word	0x08012439
 80123e8:	080123b5 	.word	0x080123b5
 80123ec:	080123b5 	.word	0x080123b5
 80123f0:	080123b5 	.word	0x080123b5
 80123f4:	080123b5 	.word	0x080123b5
 80123f8:	08012537 	.word	0x08012537
 80123fc:	08012463 	.word	0x08012463
 8012400:	080124f1 	.word	0x080124f1
 8012404:	080123b5 	.word	0x080123b5
 8012408:	080123b5 	.word	0x080123b5
 801240c:	08012559 	.word	0x08012559
 8012410:	080123b5 	.word	0x080123b5
 8012414:	08012463 	.word	0x08012463
 8012418:	080123b5 	.word	0x080123b5
 801241c:	080123b5 	.word	0x080123b5
 8012420:	080124f9 	.word	0x080124f9
 8012424:	6833      	ldr	r3, [r6, #0]
 8012426:	1d1a      	adds	r2, r3, #4
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	6032      	str	r2, [r6, #0]
 801242c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012430:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012434:	2301      	movs	r3, #1
 8012436:	e09c      	b.n	8012572 <_printf_i+0x1e6>
 8012438:	6833      	ldr	r3, [r6, #0]
 801243a:	6820      	ldr	r0, [r4, #0]
 801243c:	1d19      	adds	r1, r3, #4
 801243e:	6031      	str	r1, [r6, #0]
 8012440:	0606      	lsls	r6, r0, #24
 8012442:	d501      	bpl.n	8012448 <_printf_i+0xbc>
 8012444:	681d      	ldr	r5, [r3, #0]
 8012446:	e003      	b.n	8012450 <_printf_i+0xc4>
 8012448:	0645      	lsls	r5, r0, #25
 801244a:	d5fb      	bpl.n	8012444 <_printf_i+0xb8>
 801244c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012450:	2d00      	cmp	r5, #0
 8012452:	da03      	bge.n	801245c <_printf_i+0xd0>
 8012454:	232d      	movs	r3, #45	@ 0x2d
 8012456:	426d      	negs	r5, r5
 8012458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801245c:	4858      	ldr	r0, [pc, #352]	@ (80125c0 <_printf_i+0x234>)
 801245e:	230a      	movs	r3, #10
 8012460:	e011      	b.n	8012486 <_printf_i+0xfa>
 8012462:	6821      	ldr	r1, [r4, #0]
 8012464:	6833      	ldr	r3, [r6, #0]
 8012466:	0608      	lsls	r0, r1, #24
 8012468:	f853 5b04 	ldr.w	r5, [r3], #4
 801246c:	d402      	bmi.n	8012474 <_printf_i+0xe8>
 801246e:	0649      	lsls	r1, r1, #25
 8012470:	bf48      	it	mi
 8012472:	b2ad      	uxthmi	r5, r5
 8012474:	2f6f      	cmp	r7, #111	@ 0x6f
 8012476:	4852      	ldr	r0, [pc, #328]	@ (80125c0 <_printf_i+0x234>)
 8012478:	6033      	str	r3, [r6, #0]
 801247a:	bf14      	ite	ne
 801247c:	230a      	movne	r3, #10
 801247e:	2308      	moveq	r3, #8
 8012480:	2100      	movs	r1, #0
 8012482:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012486:	6866      	ldr	r6, [r4, #4]
 8012488:	60a6      	str	r6, [r4, #8]
 801248a:	2e00      	cmp	r6, #0
 801248c:	db05      	blt.n	801249a <_printf_i+0x10e>
 801248e:	6821      	ldr	r1, [r4, #0]
 8012490:	432e      	orrs	r6, r5
 8012492:	f021 0104 	bic.w	r1, r1, #4
 8012496:	6021      	str	r1, [r4, #0]
 8012498:	d04b      	beq.n	8012532 <_printf_i+0x1a6>
 801249a:	4616      	mov	r6, r2
 801249c:	fbb5 f1f3 	udiv	r1, r5, r3
 80124a0:	fb03 5711 	mls	r7, r3, r1, r5
 80124a4:	5dc7      	ldrb	r7, [r0, r7]
 80124a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80124aa:	462f      	mov	r7, r5
 80124ac:	42bb      	cmp	r3, r7
 80124ae:	460d      	mov	r5, r1
 80124b0:	d9f4      	bls.n	801249c <_printf_i+0x110>
 80124b2:	2b08      	cmp	r3, #8
 80124b4:	d10b      	bne.n	80124ce <_printf_i+0x142>
 80124b6:	6823      	ldr	r3, [r4, #0]
 80124b8:	07df      	lsls	r7, r3, #31
 80124ba:	d508      	bpl.n	80124ce <_printf_i+0x142>
 80124bc:	6923      	ldr	r3, [r4, #16]
 80124be:	6861      	ldr	r1, [r4, #4]
 80124c0:	4299      	cmp	r1, r3
 80124c2:	bfde      	ittt	le
 80124c4:	2330      	movle	r3, #48	@ 0x30
 80124c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80124ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80124ce:	1b92      	subs	r2, r2, r6
 80124d0:	6122      	str	r2, [r4, #16]
 80124d2:	f8cd a000 	str.w	sl, [sp]
 80124d6:	464b      	mov	r3, r9
 80124d8:	aa03      	add	r2, sp, #12
 80124da:	4621      	mov	r1, r4
 80124dc:	4640      	mov	r0, r8
 80124de:	f7ff fee7 	bl	80122b0 <_printf_common>
 80124e2:	3001      	adds	r0, #1
 80124e4:	d14a      	bne.n	801257c <_printf_i+0x1f0>
 80124e6:	f04f 30ff 	mov.w	r0, #4294967295
 80124ea:	b004      	add	sp, #16
 80124ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124f0:	6823      	ldr	r3, [r4, #0]
 80124f2:	f043 0320 	orr.w	r3, r3, #32
 80124f6:	6023      	str	r3, [r4, #0]
 80124f8:	4832      	ldr	r0, [pc, #200]	@ (80125c4 <_printf_i+0x238>)
 80124fa:	2778      	movs	r7, #120	@ 0x78
 80124fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012500:	6823      	ldr	r3, [r4, #0]
 8012502:	6831      	ldr	r1, [r6, #0]
 8012504:	061f      	lsls	r7, r3, #24
 8012506:	f851 5b04 	ldr.w	r5, [r1], #4
 801250a:	d402      	bmi.n	8012512 <_printf_i+0x186>
 801250c:	065f      	lsls	r7, r3, #25
 801250e:	bf48      	it	mi
 8012510:	b2ad      	uxthmi	r5, r5
 8012512:	6031      	str	r1, [r6, #0]
 8012514:	07d9      	lsls	r1, r3, #31
 8012516:	bf44      	itt	mi
 8012518:	f043 0320 	orrmi.w	r3, r3, #32
 801251c:	6023      	strmi	r3, [r4, #0]
 801251e:	b11d      	cbz	r5, 8012528 <_printf_i+0x19c>
 8012520:	2310      	movs	r3, #16
 8012522:	e7ad      	b.n	8012480 <_printf_i+0xf4>
 8012524:	4826      	ldr	r0, [pc, #152]	@ (80125c0 <_printf_i+0x234>)
 8012526:	e7e9      	b.n	80124fc <_printf_i+0x170>
 8012528:	6823      	ldr	r3, [r4, #0]
 801252a:	f023 0320 	bic.w	r3, r3, #32
 801252e:	6023      	str	r3, [r4, #0]
 8012530:	e7f6      	b.n	8012520 <_printf_i+0x194>
 8012532:	4616      	mov	r6, r2
 8012534:	e7bd      	b.n	80124b2 <_printf_i+0x126>
 8012536:	6833      	ldr	r3, [r6, #0]
 8012538:	6825      	ldr	r5, [r4, #0]
 801253a:	6961      	ldr	r1, [r4, #20]
 801253c:	1d18      	adds	r0, r3, #4
 801253e:	6030      	str	r0, [r6, #0]
 8012540:	062e      	lsls	r6, r5, #24
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	d501      	bpl.n	801254a <_printf_i+0x1be>
 8012546:	6019      	str	r1, [r3, #0]
 8012548:	e002      	b.n	8012550 <_printf_i+0x1c4>
 801254a:	0668      	lsls	r0, r5, #25
 801254c:	d5fb      	bpl.n	8012546 <_printf_i+0x1ba>
 801254e:	8019      	strh	r1, [r3, #0]
 8012550:	2300      	movs	r3, #0
 8012552:	6123      	str	r3, [r4, #16]
 8012554:	4616      	mov	r6, r2
 8012556:	e7bc      	b.n	80124d2 <_printf_i+0x146>
 8012558:	6833      	ldr	r3, [r6, #0]
 801255a:	1d1a      	adds	r2, r3, #4
 801255c:	6032      	str	r2, [r6, #0]
 801255e:	681e      	ldr	r6, [r3, #0]
 8012560:	6862      	ldr	r2, [r4, #4]
 8012562:	2100      	movs	r1, #0
 8012564:	4630      	mov	r0, r6
 8012566:	f7ed fe13 	bl	8000190 <memchr>
 801256a:	b108      	cbz	r0, 8012570 <_printf_i+0x1e4>
 801256c:	1b80      	subs	r0, r0, r6
 801256e:	6060      	str	r0, [r4, #4]
 8012570:	6863      	ldr	r3, [r4, #4]
 8012572:	6123      	str	r3, [r4, #16]
 8012574:	2300      	movs	r3, #0
 8012576:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801257a:	e7aa      	b.n	80124d2 <_printf_i+0x146>
 801257c:	6923      	ldr	r3, [r4, #16]
 801257e:	4632      	mov	r2, r6
 8012580:	4649      	mov	r1, r9
 8012582:	4640      	mov	r0, r8
 8012584:	47d0      	blx	sl
 8012586:	3001      	adds	r0, #1
 8012588:	d0ad      	beq.n	80124e6 <_printf_i+0x15a>
 801258a:	6823      	ldr	r3, [r4, #0]
 801258c:	079b      	lsls	r3, r3, #30
 801258e:	d413      	bmi.n	80125b8 <_printf_i+0x22c>
 8012590:	68e0      	ldr	r0, [r4, #12]
 8012592:	9b03      	ldr	r3, [sp, #12]
 8012594:	4298      	cmp	r0, r3
 8012596:	bfb8      	it	lt
 8012598:	4618      	movlt	r0, r3
 801259a:	e7a6      	b.n	80124ea <_printf_i+0x15e>
 801259c:	2301      	movs	r3, #1
 801259e:	4632      	mov	r2, r6
 80125a0:	4649      	mov	r1, r9
 80125a2:	4640      	mov	r0, r8
 80125a4:	47d0      	blx	sl
 80125a6:	3001      	adds	r0, #1
 80125a8:	d09d      	beq.n	80124e6 <_printf_i+0x15a>
 80125aa:	3501      	adds	r5, #1
 80125ac:	68e3      	ldr	r3, [r4, #12]
 80125ae:	9903      	ldr	r1, [sp, #12]
 80125b0:	1a5b      	subs	r3, r3, r1
 80125b2:	42ab      	cmp	r3, r5
 80125b4:	dcf2      	bgt.n	801259c <_printf_i+0x210>
 80125b6:	e7eb      	b.n	8012590 <_printf_i+0x204>
 80125b8:	2500      	movs	r5, #0
 80125ba:	f104 0619 	add.w	r6, r4, #25
 80125be:	e7f5      	b.n	80125ac <_printf_i+0x220>
 80125c0:	0801417e 	.word	0x0801417e
 80125c4:	0801418f 	.word	0x0801418f

080125c8 <__sflush_r>:
 80125c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80125cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125d0:	0716      	lsls	r6, r2, #28
 80125d2:	4605      	mov	r5, r0
 80125d4:	460c      	mov	r4, r1
 80125d6:	d454      	bmi.n	8012682 <__sflush_r+0xba>
 80125d8:	684b      	ldr	r3, [r1, #4]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	dc02      	bgt.n	80125e4 <__sflush_r+0x1c>
 80125de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	dd48      	ble.n	8012676 <__sflush_r+0xae>
 80125e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80125e6:	2e00      	cmp	r6, #0
 80125e8:	d045      	beq.n	8012676 <__sflush_r+0xae>
 80125ea:	2300      	movs	r3, #0
 80125ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80125f0:	682f      	ldr	r7, [r5, #0]
 80125f2:	6a21      	ldr	r1, [r4, #32]
 80125f4:	602b      	str	r3, [r5, #0]
 80125f6:	d030      	beq.n	801265a <__sflush_r+0x92>
 80125f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80125fa:	89a3      	ldrh	r3, [r4, #12]
 80125fc:	0759      	lsls	r1, r3, #29
 80125fe:	d505      	bpl.n	801260c <__sflush_r+0x44>
 8012600:	6863      	ldr	r3, [r4, #4]
 8012602:	1ad2      	subs	r2, r2, r3
 8012604:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012606:	b10b      	cbz	r3, 801260c <__sflush_r+0x44>
 8012608:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801260a:	1ad2      	subs	r2, r2, r3
 801260c:	2300      	movs	r3, #0
 801260e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012610:	6a21      	ldr	r1, [r4, #32]
 8012612:	4628      	mov	r0, r5
 8012614:	47b0      	blx	r6
 8012616:	1c43      	adds	r3, r0, #1
 8012618:	89a3      	ldrh	r3, [r4, #12]
 801261a:	d106      	bne.n	801262a <__sflush_r+0x62>
 801261c:	6829      	ldr	r1, [r5, #0]
 801261e:	291d      	cmp	r1, #29
 8012620:	d82b      	bhi.n	801267a <__sflush_r+0xb2>
 8012622:	4a2a      	ldr	r2, [pc, #168]	@ (80126cc <__sflush_r+0x104>)
 8012624:	40ca      	lsrs	r2, r1
 8012626:	07d6      	lsls	r6, r2, #31
 8012628:	d527      	bpl.n	801267a <__sflush_r+0xb2>
 801262a:	2200      	movs	r2, #0
 801262c:	6062      	str	r2, [r4, #4]
 801262e:	04d9      	lsls	r1, r3, #19
 8012630:	6922      	ldr	r2, [r4, #16]
 8012632:	6022      	str	r2, [r4, #0]
 8012634:	d504      	bpl.n	8012640 <__sflush_r+0x78>
 8012636:	1c42      	adds	r2, r0, #1
 8012638:	d101      	bne.n	801263e <__sflush_r+0x76>
 801263a:	682b      	ldr	r3, [r5, #0]
 801263c:	b903      	cbnz	r3, 8012640 <__sflush_r+0x78>
 801263e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012642:	602f      	str	r7, [r5, #0]
 8012644:	b1b9      	cbz	r1, 8012676 <__sflush_r+0xae>
 8012646:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801264a:	4299      	cmp	r1, r3
 801264c:	d002      	beq.n	8012654 <__sflush_r+0x8c>
 801264e:	4628      	mov	r0, r5
 8012650:	f7ff fbf4 	bl	8011e3c <_free_r>
 8012654:	2300      	movs	r3, #0
 8012656:	6363      	str	r3, [r4, #52]	@ 0x34
 8012658:	e00d      	b.n	8012676 <__sflush_r+0xae>
 801265a:	2301      	movs	r3, #1
 801265c:	4628      	mov	r0, r5
 801265e:	47b0      	blx	r6
 8012660:	4602      	mov	r2, r0
 8012662:	1c50      	adds	r0, r2, #1
 8012664:	d1c9      	bne.n	80125fa <__sflush_r+0x32>
 8012666:	682b      	ldr	r3, [r5, #0]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d0c6      	beq.n	80125fa <__sflush_r+0x32>
 801266c:	2b1d      	cmp	r3, #29
 801266e:	d001      	beq.n	8012674 <__sflush_r+0xac>
 8012670:	2b16      	cmp	r3, #22
 8012672:	d11e      	bne.n	80126b2 <__sflush_r+0xea>
 8012674:	602f      	str	r7, [r5, #0]
 8012676:	2000      	movs	r0, #0
 8012678:	e022      	b.n	80126c0 <__sflush_r+0xf8>
 801267a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801267e:	b21b      	sxth	r3, r3
 8012680:	e01b      	b.n	80126ba <__sflush_r+0xf2>
 8012682:	690f      	ldr	r7, [r1, #16]
 8012684:	2f00      	cmp	r7, #0
 8012686:	d0f6      	beq.n	8012676 <__sflush_r+0xae>
 8012688:	0793      	lsls	r3, r2, #30
 801268a:	680e      	ldr	r6, [r1, #0]
 801268c:	bf08      	it	eq
 801268e:	694b      	ldreq	r3, [r1, #20]
 8012690:	600f      	str	r7, [r1, #0]
 8012692:	bf18      	it	ne
 8012694:	2300      	movne	r3, #0
 8012696:	eba6 0807 	sub.w	r8, r6, r7
 801269a:	608b      	str	r3, [r1, #8]
 801269c:	f1b8 0f00 	cmp.w	r8, #0
 80126a0:	dde9      	ble.n	8012676 <__sflush_r+0xae>
 80126a2:	6a21      	ldr	r1, [r4, #32]
 80126a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80126a6:	4643      	mov	r3, r8
 80126a8:	463a      	mov	r2, r7
 80126aa:	4628      	mov	r0, r5
 80126ac:	47b0      	blx	r6
 80126ae:	2800      	cmp	r0, #0
 80126b0:	dc08      	bgt.n	80126c4 <__sflush_r+0xfc>
 80126b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80126ba:	81a3      	strh	r3, [r4, #12]
 80126bc:	f04f 30ff 	mov.w	r0, #4294967295
 80126c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126c4:	4407      	add	r7, r0
 80126c6:	eba8 0800 	sub.w	r8, r8, r0
 80126ca:	e7e7      	b.n	801269c <__sflush_r+0xd4>
 80126cc:	20400001 	.word	0x20400001

080126d0 <_fflush_r>:
 80126d0:	b538      	push	{r3, r4, r5, lr}
 80126d2:	690b      	ldr	r3, [r1, #16]
 80126d4:	4605      	mov	r5, r0
 80126d6:	460c      	mov	r4, r1
 80126d8:	b913      	cbnz	r3, 80126e0 <_fflush_r+0x10>
 80126da:	2500      	movs	r5, #0
 80126dc:	4628      	mov	r0, r5
 80126de:	bd38      	pop	{r3, r4, r5, pc}
 80126e0:	b118      	cbz	r0, 80126ea <_fflush_r+0x1a>
 80126e2:	6a03      	ldr	r3, [r0, #32]
 80126e4:	b90b      	cbnz	r3, 80126ea <_fflush_r+0x1a>
 80126e6:	f7ff f983 	bl	80119f0 <__sinit>
 80126ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d0f3      	beq.n	80126da <_fflush_r+0xa>
 80126f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80126f4:	07d0      	lsls	r0, r2, #31
 80126f6:	d404      	bmi.n	8012702 <_fflush_r+0x32>
 80126f8:	0599      	lsls	r1, r3, #22
 80126fa:	d402      	bmi.n	8012702 <_fflush_r+0x32>
 80126fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80126fe:	f7ff fb8c 	bl	8011e1a <__retarget_lock_acquire_recursive>
 8012702:	4628      	mov	r0, r5
 8012704:	4621      	mov	r1, r4
 8012706:	f7ff ff5f 	bl	80125c8 <__sflush_r>
 801270a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801270c:	07da      	lsls	r2, r3, #31
 801270e:	4605      	mov	r5, r0
 8012710:	d4e4      	bmi.n	80126dc <_fflush_r+0xc>
 8012712:	89a3      	ldrh	r3, [r4, #12]
 8012714:	059b      	lsls	r3, r3, #22
 8012716:	d4e1      	bmi.n	80126dc <_fflush_r+0xc>
 8012718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801271a:	f7ff fb7f 	bl	8011e1c <__retarget_lock_release_recursive>
 801271e:	e7dd      	b.n	80126dc <_fflush_r+0xc>

08012720 <__swhatbuf_r>:
 8012720:	b570      	push	{r4, r5, r6, lr}
 8012722:	460c      	mov	r4, r1
 8012724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012728:	2900      	cmp	r1, #0
 801272a:	b096      	sub	sp, #88	@ 0x58
 801272c:	4615      	mov	r5, r2
 801272e:	461e      	mov	r6, r3
 8012730:	da0d      	bge.n	801274e <__swhatbuf_r+0x2e>
 8012732:	89a3      	ldrh	r3, [r4, #12]
 8012734:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012738:	f04f 0100 	mov.w	r1, #0
 801273c:	bf14      	ite	ne
 801273e:	2340      	movne	r3, #64	@ 0x40
 8012740:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012744:	2000      	movs	r0, #0
 8012746:	6031      	str	r1, [r6, #0]
 8012748:	602b      	str	r3, [r5, #0]
 801274a:	b016      	add	sp, #88	@ 0x58
 801274c:	bd70      	pop	{r4, r5, r6, pc}
 801274e:	466a      	mov	r2, sp
 8012750:	f000 f88a 	bl	8012868 <_fstat_r>
 8012754:	2800      	cmp	r0, #0
 8012756:	dbec      	blt.n	8012732 <__swhatbuf_r+0x12>
 8012758:	9901      	ldr	r1, [sp, #4]
 801275a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801275e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012762:	4259      	negs	r1, r3
 8012764:	4159      	adcs	r1, r3
 8012766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801276a:	e7eb      	b.n	8012744 <__swhatbuf_r+0x24>

0801276c <__smakebuf_r>:
 801276c:	898b      	ldrh	r3, [r1, #12]
 801276e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012770:	079d      	lsls	r5, r3, #30
 8012772:	4606      	mov	r6, r0
 8012774:	460c      	mov	r4, r1
 8012776:	d507      	bpl.n	8012788 <__smakebuf_r+0x1c>
 8012778:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801277c:	6023      	str	r3, [r4, #0]
 801277e:	6123      	str	r3, [r4, #16]
 8012780:	2301      	movs	r3, #1
 8012782:	6163      	str	r3, [r4, #20]
 8012784:	b003      	add	sp, #12
 8012786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012788:	ab01      	add	r3, sp, #4
 801278a:	466a      	mov	r2, sp
 801278c:	f7ff ffc8 	bl	8012720 <__swhatbuf_r>
 8012790:	9f00      	ldr	r7, [sp, #0]
 8012792:	4605      	mov	r5, r0
 8012794:	4639      	mov	r1, r7
 8012796:	4630      	mov	r0, r6
 8012798:	f7ff fbbc 	bl	8011f14 <_malloc_r>
 801279c:	b948      	cbnz	r0, 80127b2 <__smakebuf_r+0x46>
 801279e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127a2:	059a      	lsls	r2, r3, #22
 80127a4:	d4ee      	bmi.n	8012784 <__smakebuf_r+0x18>
 80127a6:	f023 0303 	bic.w	r3, r3, #3
 80127aa:	f043 0302 	orr.w	r3, r3, #2
 80127ae:	81a3      	strh	r3, [r4, #12]
 80127b0:	e7e2      	b.n	8012778 <__smakebuf_r+0xc>
 80127b2:	89a3      	ldrh	r3, [r4, #12]
 80127b4:	6020      	str	r0, [r4, #0]
 80127b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80127ba:	81a3      	strh	r3, [r4, #12]
 80127bc:	9b01      	ldr	r3, [sp, #4]
 80127be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80127c2:	b15b      	cbz	r3, 80127dc <__smakebuf_r+0x70>
 80127c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127c8:	4630      	mov	r0, r6
 80127ca:	f000 f85f 	bl	801288c <_isatty_r>
 80127ce:	b128      	cbz	r0, 80127dc <__smakebuf_r+0x70>
 80127d0:	89a3      	ldrh	r3, [r4, #12]
 80127d2:	f023 0303 	bic.w	r3, r3, #3
 80127d6:	f043 0301 	orr.w	r3, r3, #1
 80127da:	81a3      	strh	r3, [r4, #12]
 80127dc:	89a3      	ldrh	r3, [r4, #12]
 80127de:	431d      	orrs	r5, r3
 80127e0:	81a5      	strh	r5, [r4, #12]
 80127e2:	e7cf      	b.n	8012784 <__smakebuf_r+0x18>

080127e4 <_putc_r>:
 80127e4:	b570      	push	{r4, r5, r6, lr}
 80127e6:	460d      	mov	r5, r1
 80127e8:	4614      	mov	r4, r2
 80127ea:	4606      	mov	r6, r0
 80127ec:	b118      	cbz	r0, 80127f6 <_putc_r+0x12>
 80127ee:	6a03      	ldr	r3, [r0, #32]
 80127f0:	b90b      	cbnz	r3, 80127f6 <_putc_r+0x12>
 80127f2:	f7ff f8fd 	bl	80119f0 <__sinit>
 80127f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80127f8:	07d8      	lsls	r0, r3, #31
 80127fa:	d405      	bmi.n	8012808 <_putc_r+0x24>
 80127fc:	89a3      	ldrh	r3, [r4, #12]
 80127fe:	0599      	lsls	r1, r3, #22
 8012800:	d402      	bmi.n	8012808 <_putc_r+0x24>
 8012802:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012804:	f7ff fb09 	bl	8011e1a <__retarget_lock_acquire_recursive>
 8012808:	68a3      	ldr	r3, [r4, #8]
 801280a:	3b01      	subs	r3, #1
 801280c:	2b00      	cmp	r3, #0
 801280e:	60a3      	str	r3, [r4, #8]
 8012810:	da05      	bge.n	801281e <_putc_r+0x3a>
 8012812:	69a2      	ldr	r2, [r4, #24]
 8012814:	4293      	cmp	r3, r2
 8012816:	db12      	blt.n	801283e <_putc_r+0x5a>
 8012818:	b2eb      	uxtb	r3, r5
 801281a:	2b0a      	cmp	r3, #10
 801281c:	d00f      	beq.n	801283e <_putc_r+0x5a>
 801281e:	6823      	ldr	r3, [r4, #0]
 8012820:	1c5a      	adds	r2, r3, #1
 8012822:	6022      	str	r2, [r4, #0]
 8012824:	701d      	strb	r5, [r3, #0]
 8012826:	b2ed      	uxtb	r5, r5
 8012828:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801282a:	07da      	lsls	r2, r3, #31
 801282c:	d405      	bmi.n	801283a <_putc_r+0x56>
 801282e:	89a3      	ldrh	r3, [r4, #12]
 8012830:	059b      	lsls	r3, r3, #22
 8012832:	d402      	bmi.n	801283a <_putc_r+0x56>
 8012834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012836:	f7ff faf1 	bl	8011e1c <__retarget_lock_release_recursive>
 801283a:	4628      	mov	r0, r5
 801283c:	bd70      	pop	{r4, r5, r6, pc}
 801283e:	4629      	mov	r1, r5
 8012840:	4622      	mov	r2, r4
 8012842:	4630      	mov	r0, r6
 8012844:	f7ff f9c5 	bl	8011bd2 <__swbuf_r>
 8012848:	4605      	mov	r5, r0
 801284a:	e7ed      	b.n	8012828 <_putc_r+0x44>

0801284c <strchr>:
 801284c:	b2c9      	uxtb	r1, r1
 801284e:	4603      	mov	r3, r0
 8012850:	4618      	mov	r0, r3
 8012852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012856:	b112      	cbz	r2, 801285e <strchr+0x12>
 8012858:	428a      	cmp	r2, r1
 801285a:	d1f9      	bne.n	8012850 <strchr+0x4>
 801285c:	4770      	bx	lr
 801285e:	2900      	cmp	r1, #0
 8012860:	bf18      	it	ne
 8012862:	2000      	movne	r0, #0
 8012864:	4770      	bx	lr
	...

08012868 <_fstat_r>:
 8012868:	b538      	push	{r3, r4, r5, lr}
 801286a:	4d07      	ldr	r5, [pc, #28]	@ (8012888 <_fstat_r+0x20>)
 801286c:	2300      	movs	r3, #0
 801286e:	4604      	mov	r4, r0
 8012870:	4608      	mov	r0, r1
 8012872:	4611      	mov	r1, r2
 8012874:	602b      	str	r3, [r5, #0]
 8012876:	f7f0 fa20 	bl	8002cba <_fstat>
 801287a:	1c43      	adds	r3, r0, #1
 801287c:	d102      	bne.n	8012884 <_fstat_r+0x1c>
 801287e:	682b      	ldr	r3, [r5, #0]
 8012880:	b103      	cbz	r3, 8012884 <_fstat_r+0x1c>
 8012882:	6023      	str	r3, [r4, #0]
 8012884:	bd38      	pop	{r3, r4, r5, pc}
 8012886:	bf00      	nop
 8012888:	200021c4 	.word	0x200021c4

0801288c <_isatty_r>:
 801288c:	b538      	push	{r3, r4, r5, lr}
 801288e:	4d06      	ldr	r5, [pc, #24]	@ (80128a8 <_isatty_r+0x1c>)
 8012890:	2300      	movs	r3, #0
 8012892:	4604      	mov	r4, r0
 8012894:	4608      	mov	r0, r1
 8012896:	602b      	str	r3, [r5, #0]
 8012898:	f7f0 fa1f 	bl	8002cda <_isatty>
 801289c:	1c43      	adds	r3, r0, #1
 801289e:	d102      	bne.n	80128a6 <_isatty_r+0x1a>
 80128a0:	682b      	ldr	r3, [r5, #0]
 80128a2:	b103      	cbz	r3, 80128a6 <_isatty_r+0x1a>
 80128a4:	6023      	str	r3, [r4, #0]
 80128a6:	bd38      	pop	{r3, r4, r5, pc}
 80128a8:	200021c4 	.word	0x200021c4

080128ac <_sbrk_r>:
 80128ac:	b538      	push	{r3, r4, r5, lr}
 80128ae:	4d06      	ldr	r5, [pc, #24]	@ (80128c8 <_sbrk_r+0x1c>)
 80128b0:	2300      	movs	r3, #0
 80128b2:	4604      	mov	r4, r0
 80128b4:	4608      	mov	r0, r1
 80128b6:	602b      	str	r3, [r5, #0]
 80128b8:	f7f0 fa28 	bl	8002d0c <_sbrk>
 80128bc:	1c43      	adds	r3, r0, #1
 80128be:	d102      	bne.n	80128c6 <_sbrk_r+0x1a>
 80128c0:	682b      	ldr	r3, [r5, #0]
 80128c2:	b103      	cbz	r3, 80128c6 <_sbrk_r+0x1a>
 80128c4:	6023      	str	r3, [r4, #0]
 80128c6:	bd38      	pop	{r3, r4, r5, pc}
 80128c8:	200021c4 	.word	0x200021c4

080128cc <_init>:
 80128cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128ce:	bf00      	nop
 80128d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128d2:	bc08      	pop	{r3}
 80128d4:	469e      	mov	lr, r3
 80128d6:	4770      	bx	lr

080128d8 <_fini>:
 80128d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128da:	bf00      	nop
 80128dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80128de:	bc08      	pop	{r3}
 80128e0:	469e      	mov	lr, r3
 80128e2:	4770      	bx	lr
