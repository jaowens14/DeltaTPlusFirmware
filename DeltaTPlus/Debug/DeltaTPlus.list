
DeltaTPlus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004654  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004790  08004790  00005790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800483c  0800483c  0000583c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08004840  08004840  00005840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000000c  20000008  08004844  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000414  20000014  08004850  00006014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000428  08004850  00006428  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c084  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004432  00000000  00000000  000220c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001b50  00000000  00000000  00026500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000149b  00000000  00000000  00028050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00027628  00000000  00000000  000294eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001d7d4  00000000  00000000  00050b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000e3686  00000000  00000000  0006e2e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0015196d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000070cc  00000000  00000000  001519b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006e  00000000  00000000  00158a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08004778 	.word	0x08004778

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08004778 	.word	0x08004778

0800017c <_ZN14STM32_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
    @param  spi_mosi Bitbang SPI MOSI
    @param  spi_miso Bitbang SPI MISO
    @param  spi_clk Bitbang SPI Clock
*/
/**************************************************************************/
STM32_MAX31856::STM32_MAX31856(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin){
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	60f8      	str	r0, [r7, #12]
 8000184:	60b9      	str	r1, [r7, #8]
 8000186:	607a      	str	r2, [r7, #4]
 8000188:	807b      	strh	r3, [r7, #2]
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	2200      	movs	r2, #0
 800018e:	729a      	strb	r2, [r3, #10]
	_hspi = hspi;
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	68ba      	ldr	r2, [r7, #8]
 8000194:	601a      	str	r2, [r3, #0]
	_cs_port = cs_port;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	687a      	ldr	r2, [r7, #4]
 800019a:	605a      	str	r2, [r3, #4]
	_cs_pin = cs_pin;
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	887a      	ldrh	r2, [r7, #2]
 80001a0:	811a      	strh	r2, [r3, #8]
}
 80001a2:	68fb      	ldr	r3, [r7, #12]
 80001a4:	4618      	mov	r0, r3
 80001a6:	3714      	adds	r7, #20
 80001a8:	46bd      	mov	sp, r7
 80001aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ae:	4770      	bx	lr

080001b0 <_ZN14STM32_MAX318568csSelectEv>:

void STM32_MAX31856::csSelect(){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_RESET);
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	6858      	ldr	r0, [r3, #4]
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	891b      	ldrh	r3, [r3, #8]
 80001c0:	2200      	movs	r2, #0
 80001c2:	4619      	mov	r1, r3
 80001c4:	f001 f9a8 	bl	8001518 <HAL_GPIO_WritePin>
}
 80001c8:	bf00      	nop
 80001ca:	3708      	adds	r7, #8
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <_ZN14STM32_MAX3185610csDeselectEv>:
void STM32_MAX31856::csDeselect(){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_SET);
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	6858      	ldr	r0, [r3, #4]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	891b      	ldrh	r3, [r3, #8]
 80001e0:	2201      	movs	r2, #1
 80001e2:	4619      	mov	r1, r3
 80001e4:	f001 f998 	bl	8001518 <HAL_GPIO_WritePin>
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <_ZN14STM32_MAX318565beginEv>:
   thermocouple
    @returns Always returns true at this time (no known way of detecting chip
   ID)
*/
/**************************************************************************/
bool STM32_MAX31856::begin(void) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  //initialized = spi_dev.begin();
	initialized = true;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2201      	movs	r2, #1
 80001fc:	729a      	strb	r2, [r3, #10]
  if (!initialized)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	7a9b      	ldrb	r3, [r3, #10]
 8000202:	f083 0301 	eor.w	r3, r3, #1
 8000206:	b2db      	uxtb	r3, r3
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <_ZN14STM32_MAX318565beginEv+0x20>
    return false;
 800020c:	2300      	movs	r3, #0
 800020e:	e017      	b.n	8000240 <_ZN14STM32_MAX318565beginEv+0x50>

  // assert on any fault
  writeRegister8(MAX31856_MASK_REG, 0x0);
 8000210:	2200      	movs	r2, #0
 8000212:	2102      	movs	r1, #2
 8000214:	6878      	ldr	r0, [r7, #4]
 8000216:	f000 f8be 	bl	8000396 <_ZN14STM32_MAX3185614writeRegister8Ehh>

  // enable open circuit fault detection
  writeRegister8(MAX31856_CR0_REG, MAX31856_CR0_OCFAULT0);
 800021a:	2210      	movs	r2, #16
 800021c:	2100      	movs	r1, #0
 800021e:	6878      	ldr	r0, [r7, #4]
 8000220:	f000 f8b9 	bl	8000396 <_ZN14STM32_MAX3185614writeRegister8Ehh>

  // set cold junction temperature offset to zero
  writeRegister8(MAX31856_CJTO_REG, 0x0);
 8000224:	2200      	movs	r2, #0
 8000226:	2109      	movs	r1, #9
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f000 f8b4 	bl	8000396 <_ZN14STM32_MAX3185614writeRegister8Ehh>

  // set Type K by default
  setThermocoupleType(MAX31856_TCTYPE_K);
 800022e:	2103      	movs	r1, #3
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f000 f837 	bl	80002a4 <_ZN14STM32_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>

  // set One-Shot conversion mode
  setConversionMode(MAX31856_ONESHOT);
 8000236:	2100      	movs	r1, #0
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f000 f805 	bl	8000248 <_ZN14STM32_MAX3185617setConversionModeE26max31856_conversion_mode_t>

  return true;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <_ZN14STM32_MAX3185617setConversionModeE26max31856_conversion_mode_t>:
/*!
    @brief  Set temperature conversion mode
    @param mode The conversion mode
*/
/**************************************************************************/
void STM32_MAX31856::setConversionMode(max31856_conversion_mode_t mode) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	460b      	mov	r3, r1
 8000252:	70fb      	strb	r3, [r7, #3]
  conversionMode = mode;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	78fa      	ldrb	r2, [r7, #3]
 8000258:	72da      	strb	r2, [r3, #11]
  uint8_t t = readRegister8(MAX31856_CR0_REG); // get current register value
 800025a:	2100      	movs	r1, #0
 800025c:	6878      	ldr	r0, [r7, #4]
 800025e:	f000 f862 	bl	8000326 <_ZN14STM32_MAX3185613readRegister8Eh>
 8000262:	4603      	mov	r3, r0
 8000264:	73fb      	strb	r3, [r7, #15]
  if (conversionMode == MAX31856_CONTINUOUS) {
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	7adb      	ldrb	r3, [r3, #11]
 800026a:	2b02      	cmp	r3, #2
 800026c:	d108      	bne.n	8000280 <_ZN14STM32_MAX3185617setConversionModeE26max31856_conversion_mode_t+0x38>
    t |= MAX31856_CR0_AUTOCONVERT; // turn on automatic
 800026e:	7bfb      	ldrb	r3, [r7, #15]
 8000270:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000274:	73fb      	strb	r3, [r7, #15]
    t &= ~MAX31856_CR0_1SHOT;      // turn off one-shot
 8000276:	7bfb      	ldrb	r3, [r7, #15]
 8000278:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800027c:	73fb      	strb	r3, [r7, #15]
 800027e:	e007      	b.n	8000290 <_ZN14STM32_MAX3185617setConversionModeE26max31856_conversion_mode_t+0x48>
  } else {
    t &= ~MAX31856_CR0_AUTOCONVERT; // turn off automatic
 8000280:	7bfb      	ldrb	r3, [r7, #15]
 8000282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000286:	73fb      	strb	r3, [r7, #15]
    t |= MAX31856_CR0_1SHOT;        // turn on one-shot
 8000288:	7bfb      	ldrb	r3, [r7, #15]
 800028a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800028e:	73fb      	strb	r3, [r7, #15]
  }
  writeRegister8(MAX31856_CR0_REG, t); // write value back to register
 8000290:	7bfb      	ldrb	r3, [r7, #15]
 8000292:	461a      	mov	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f000 f87d 	bl	8000396 <_ZN14STM32_MAX3185614writeRegister8Ehh>
}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <_ZN14STM32_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>:
/*!
    @brief  Set which kind of Thermocouple (K, J, T, etc) to detect & decode
    @param type The enumeration type of the thermocouple
*/
/**************************************************************************/
void STM32_MAX31856::setThermocoupleType(max31856_thermocoupletype_t type) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	460b      	mov	r3, r1
 80002ae:	70fb      	strb	r3, [r7, #3]
  uint8_t t = readRegister8(MAX31856_CR1_REG);
 80002b0:	2101      	movs	r1, #1
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f000 f837 	bl	8000326 <_ZN14STM32_MAX3185613readRegister8Eh>
 80002b8:	4603      	mov	r3, r0
 80002ba:	73fb      	strb	r3, [r7, #15]
  t &= 0xF0; // mask off bottom 4 bits
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
 80002be:	f023 030f 	bic.w	r3, r3, #15
 80002c2:	73fb      	strb	r3, [r7, #15]
  t |= (uint8_t)type & 0x0F;
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	f003 030f 	and.w	r3, r3, #15
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	4313      	orrs	r3, r2
 80002d0:	73fb      	strb	r3, [r7, #15]
  writeRegister8(MAX31856_CR1_REG, t);
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
 80002d4:	461a      	mov	r2, r3
 80002d6:	2101      	movs	r1, #1
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	f000 f85c 	bl	8000396 <_ZN14STM32_MAX3185614writeRegister8Ehh>
}
 80002de:	bf00      	nop
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <_ZN14STM32_MAX3185619getThermocoupleTypeEv>:
/*!
    @brief  Get which kind of Thermocouple (K, J, T, etc) we are using
    @returns The enumeration type of the thermocouple
*/
/**************************************************************************/
max31856_thermocoupletype_t STM32_MAX31856::getThermocoupleType(void) {
 80002e6:	b580      	push	{r7, lr}
 80002e8:	b084      	sub	sp, #16
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	6078      	str	r0, [r7, #4]
  uint8_t t = readRegister8(MAX31856_CR1_REG);
 80002ee:	2101      	movs	r1, #1
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f000 f818 	bl	8000326 <_ZN14STM32_MAX3185613readRegister8Eh>
 80002f6:	4603      	mov	r3, r0
 80002f8:	73fb      	strb	r3, [r7, #15]
  t &= 0x0F;
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	73fb      	strb	r3, [r7, #15]

  return (max31856_thermocoupletype_t)(t);
 8000302:	7bfb      	ldrb	r3, [r7, #15]
}
 8000304:	4618      	mov	r0, r3
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <_ZN14STM32_MAX318569readFaultEv>:
/*!
    @brief  Read the fault register (8 bits)
    @returns 8 bits of fault register data
*/
/**************************************************************************/
uint8_t STM32_MAX31856::readFault(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  return readRegister8(MAX31856_SR_REG);
 8000314:	210f      	movs	r1, #15
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f000 f805 	bl	8000326 <_ZN14STM32_MAX3185613readRegister8Eh>
 800031c:	4603      	mov	r3, r0
}
 800031e:	4618      	mov	r0, r3
 8000320:	3708      	adds	r7, #8
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}

08000326 <_ZN14STM32_MAX3185613readRegister8Eh>:
  return temp24 * 0.0078125;
}

/**********************************************/

uint8_t STM32_MAX31856::readRegister8(uint8_t addr) {
 8000326:	b580      	push	{r7, lr}
 8000328:	b084      	sub	sp, #16
 800032a:	af00      	add	r7, sp, #0
 800032c:	6078      	str	r0, [r7, #4]
 800032e:	460b      	mov	r3, r1
 8000330:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8000332:	2300      	movs	r3, #0
 8000334:	73fb      	strb	r3, [r7, #15]
  readRegisterN(addr, &ret, 1);
 8000336:	f107 020f 	add.w	r2, r7, #15
 800033a:	78f9      	ldrb	r1, [r7, #3]
 800033c:	2301      	movs	r3, #1
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f000 f805 	bl	800034e <_ZN14STM32_MAX3185613readRegisterNEhPhh>

  return ret;
 8000344:	7bfb      	ldrb	r3, [r7, #15]
}
 8000346:	4618      	mov	r0, r3
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <_ZN14STM32_MAX3185613readRegisterNEhPhh>:

  return ret;
}

void STM32_MAX31856::readRegisterN(uint8_t addr, uint8_t buffer[],
                                      uint8_t n) {
 800034e:	b580      	push	{r7, lr}
 8000350:	b086      	sub	sp, #24
 8000352:	af02      	add	r7, sp, #8
 8000354:	60f8      	str	r0, [r7, #12]
 8000356:	607a      	str	r2, [r7, #4]
 8000358:	461a      	mov	r2, r3
 800035a:	460b      	mov	r3, r1
 800035c:	72fb      	strb	r3, [r7, #11]
 800035e:	4613      	mov	r3, r2
 8000360:	72bb      	strb	r3, [r7, #10]
  addr &= 0x7F; // MSB=0 for read, make sure top bit is not set
 8000362:	7afb      	ldrb	r3, [r7, #11]
 8000364:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000368:	b2db      	uxtb	r3, r3
 800036a:	72fb      	strb	r3, [r7, #11]
  csSelect();
 800036c:	68f8      	ldr	r0, [r7, #12]
 800036e:	f7ff ff1f 	bl	80001b0 <_ZN14STM32_MAX318568csSelectEv>
  //HAL_SPI_Transmit(_hspi, &addr, 1, 100);
  //HAL_SPI_Receive(_hspi,buffer,n,100);

  HAL_SPI_TransmitReceive(_hspi, (uint8_t *)&addr, (uint8_t *)buffer, n , 100);
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	6818      	ldr	r0, [r3, #0]
 8000376:	7abb      	ldrb	r3, [r7, #10]
 8000378:	b29b      	uxth	r3, r3
 800037a:	f107 010b 	add.w	r1, r7, #11
 800037e:	2264      	movs	r2, #100	@ 0x64
 8000380:	9200      	str	r2, [sp, #0]
 8000382:	687a      	ldr	r2, [r7, #4]
 8000384:	f003 fe0f 	bl	8003fa6 <HAL_SPI_TransmitReceive>

  csDeselect();
 8000388:	68f8      	ldr	r0, [r7, #12]
 800038a:	f7ff ff21 	bl	80001d0 <_ZN14STM32_MAX3185610csDeselectEv>
  //spi_dev.write_then_read(&addr, 1, buffer, n);
}
 800038e:	bf00      	nop
 8000390:	3710      	adds	r7, #16
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <_ZN14STM32_MAX3185614writeRegister8Ehh>:

void STM32_MAX31856::writeRegister8(uint8_t addr, uint8_t data) {
 8000396:	b580      	push	{r7, lr}
 8000398:	b084      	sub	sp, #16
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
 800039e:	460b      	mov	r3, r1
 80003a0:	70fb      	strb	r3, [r7, #3]
 80003a2:	4613      	mov	r3, r2
 80003a4:	70bb      	strb	r3, [r7, #2]

  addr |= 0x80; // MSB=1 for write, make sure top bit is set
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80003ac:	70fb      	strb	r3, [r7, #3]

  uint8_t buffer[2] = {addr, data};
 80003ae:	78fb      	ldrb	r3, [r7, #3]
 80003b0:	733b      	strb	r3, [r7, #12]
 80003b2:	78bb      	ldrb	r3, [r7, #2]
 80003b4:	737b      	strb	r3, [r7, #13]

  csSelect();
 80003b6:	6878      	ldr	r0, [r7, #4]
 80003b8:	f7ff fefa 	bl	80001b0 <_ZN14STM32_MAX318568csSelectEv>
  HAL_SPI_Transmit(_hspi, buffer, 2, 100);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	6818      	ldr	r0, [r3, #0]
 80003c0:	f107 010c 	add.w	r1, r7, #12
 80003c4:	2364      	movs	r3, #100	@ 0x64
 80003c6:	2202      	movs	r2, #2
 80003c8:	f003 fc77 	bl	8003cba <HAL_SPI_Transmit>
  csDeselect();
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f7ff feff 	bl	80001d0 <_ZN14STM32_MAX3185610csDeselectEv>

  //spi_dev.write(buffer, 2);
}
 80003d2:	bf00      	nop
 80003d4:	3710      	adds	r7, #16
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003da:	b480      	push	{r7}
 80003dc:	b085      	sub	sp, #20
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80003e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80003e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4313      	orrs	r3, r2
 80003f0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80003f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4013      	ands	r3, r2
 80003fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003fe:	68fb      	ldr	r3, [r7, #12]
}
 8000400:	bf00      	nop
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <MX_GPIO_Init>:
        * EXTI
     PB6   ------> USART1_TX
     PB7   ------> USART1_RX
*/
void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000420:	2004      	movs	r0, #4
 8000422:	f7ff ffda 	bl	80003da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000426:	2002      	movs	r0, #2
 8000428:	f7ff ffd7 	bl	80003da <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	2001      	movs	r0, #1
 800042e:	f7ff ffd4 	bl	80003da <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000432:	2200      	movs	r2, #0
 8000434:	f240 111f 	movw	r1, #287	@ 0x11f
 8000438:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800043c:	f001 f86c 	bl	8001518 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000440:	f240 131f 	movw	r3, #287	@ 0x11f
 8000444:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	2301      	movs	r3, #1
 8000448:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	2300      	movs	r3, #0
 8000450:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	4619      	mov	r1, r3
 8000456:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800045a:	f000 feed 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800045e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000462:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000464:	2300      	movs	r3, #0
 8000466:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	4619      	mov	r1, r3
 8000470:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000474:	f000 fee0 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000478:	2304      	movs	r3, #4
 800047a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047c:	2300      	movs	r3, #0
 800047e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	4619      	mov	r1, r3
 8000488:	480a      	ldr	r0, [pc, #40]	@ (80004b4 <MX_GPIO_Init+0xa8>)
 800048a:	f000 fed5 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800048e:	23c0      	movs	r3, #192	@ 0xc0
 8000490:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000492:	2302      	movs	r3, #2
 8000494:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800049e:	2307      	movs	r3, #7
 80004a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	4619      	mov	r1, r3
 80004a6:	4803      	ldr	r0, [pc, #12]	@ (80004b4 <MX_GPIO_Init+0xa8>)
 80004a8:	f000 fec6 	bl	8001238 <HAL_GPIO_Init>

}
 80004ac:	bf00      	nop
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	48000400 	.word	0x48000400

080004b8 <LL_AHB2_GRP1_EnableClock>:
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4013      	ands	r3, r2
 80004da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004dc:	68fb      	ldr	r3, [r7, #12]
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b085      	sub	sp, #20
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80004f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80004f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80004f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4313      	orrs	r3, r2
 8000500:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000506:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4013      	ands	r3, r2
 800050c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000520:	4b1b      	ldr	r3, [pc, #108]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000522:	4a1c      	ldr	r2, [pc, #112]	@ (8000594 <MX_I2C1_Init+0x78>)
 8000524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8000526:	4b1a      	ldr	r3, [pc, #104]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000528:	4a1b      	ldr	r2, [pc, #108]	@ (8000598 <MX_I2C1_Init+0x7c>)
 800052a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800052c:	4b18      	ldr	r3, [pc, #96]	@ (8000590 <MX_I2C1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000532:	4b17      	ldr	r3, [pc, #92]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000534:	2201      	movs	r2, #1
 8000536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000538:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <MX_I2C1_Init+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800053e:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000540:	2200      	movs	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000544:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000546:	2200      	movs	r2, #0
 8000548:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800054a:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <MX_I2C1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000550:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000556:	480e      	ldr	r0, [pc, #56]	@ (8000590 <MX_I2C1_Init+0x74>)
 8000558:	f001 f81a 	bl	8001590 <HAL_I2C_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000562:	f000 f9de 	bl	8000922 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000566:	2100      	movs	r1, #0
 8000568:	4809      	ldr	r0, [pc, #36]	@ (8000590 <MX_I2C1_Init+0x74>)
 800056a:	f001 f8ac 	bl	80016c6 <HAL_I2CEx_ConfigAnalogFilter>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000574:	f000 f9d5 	bl	8000922 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000578:	2100      	movs	r1, #0
 800057a:	4805      	ldr	r0, [pc, #20]	@ (8000590 <MX_I2C1_Init+0x74>)
 800057c:	f001 f8ee 	bl	800175c <HAL_I2CEx_ConfigDigitalFilter>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000586:	f000 f9cc 	bl	8000922 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000030 	.word	0x20000030
 8000594:	40005400 	.word	0x40005400
 8000598:	00b07cb4 	.word	0x00b07cb4

0800059c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b09c      	sub	sp, #112	@ 0x70
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2250      	movs	r2, #80	@ 0x50
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 f8ae 	bl	800471e <memset>
  if(i2cHandle->Instance==I2C1)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a17      	ldr	r2, [pc, #92]	@ (8000624 <HAL_I2C_MspInit+0x88>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d126      	bne.n	800061a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005cc:	2304      	movs	r3, #4
 80005ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005d0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80005d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fe32 	bl	8003244 <HAL_RCCEx_PeriphCLKConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80005e6:	f000 f99c 	bl	8000922 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	2002      	movs	r0, #2
 80005ec:	f7ff ff64 	bl	80004b8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80005f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f6:	2312      	movs	r3, #18
 80005f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2300      	movs	r3, #0
 8000600:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000602:	2304      	movs	r3, #4
 8000604:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000606:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800060a:	4619      	mov	r1, r3
 800060c:	4806      	ldr	r0, [pc, #24]	@ (8000628 <HAL_I2C_MspInit+0x8c>)
 800060e:	f000 fe13 	bl	8001238 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000612:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000616:	f7ff ff68 	bl	80004ea <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800061a:	bf00      	nop
 800061c:	3770      	adds	r7, #112	@ 0x70
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40005400 	.word	0x40005400
 8000628:	48000400 	.word	0x48000400

0800062c <LL_AHB3_GRP1_EnableClock>:
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000638:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800063a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4313      	orrs	r3, r2
 8000642:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000648:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4013      	ands	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000650:	68fb      	ldr	r3, [r7, #12]
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000664:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <MX_IPCC_Init+0x20>)
 8000666:	4a07      	ldr	r2, [pc, #28]	@ (8000684 <MX_IPCC_Init+0x24>)
 8000668:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <MX_IPCC_Init+0x20>)
 800066c:	f001 f8c2 	bl	80017f4 <HAL_IPCC_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000676:	f000 f954 	bl	8000922 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000084 	.word	0x20000084
 8000684:	58000c00 	.word	0x58000c00

08000688 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a0d      	ldr	r2, [pc, #52]	@ (80006cc <HAL_IPCC_MspInit+0x44>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d113      	bne.n	80006c2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800069a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800069e:	f7ff ffc5 	bl	800062c <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	202c      	movs	r0, #44	@ 0x2c
 80006a8:	f000 fd91 	bl	80011ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80006ac:	202c      	movs	r0, #44	@ 0x2c
 80006ae:	f000 fda8 	bl	8001202 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2100      	movs	r1, #0
 80006b6:	202d      	movs	r0, #45	@ 0x2d
 80006b8:	f000 fd89 	bl	80011ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80006bc:	202d      	movs	r0, #45	@ 0x2d
 80006be:	f000 fda0 	bl	8001202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	58000c00 	.word	0x58000c00

080006d0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80006d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80006dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80006e0:	f023 0218 	bic.w	r2, r3, #24
 80006e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f000 fc03 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f867 	bl	80007d8 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800070a:	f000 f8e5 	bl	80008d8 <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800070e:	f7ff ffa7 	bl	8000660 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000712:	f7ff fe7b 	bl	800040c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000716:	f7ff ff01 	bl	800051c <MX_I2C1_Init>
  MX_USB_PCD_Init();
 800071a:	f000 fb3f 	bl	8000d9c <MX_USB_PCD_Init>
  MX_RTC_Init();
 800071e:	f000 f937 	bl	8000990 <MX_RTC_Init>
  MX_SPI1_Init();
 8000722:	f000 f9cd 	bl	8000ac0 <MX_SPI1_Init>
  MX_RF_Init();
 8000726:	f000 f902 	bl	800092e <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  STM32_MAX31856 max31856(&hspi1, GPIOA, GPIO_PIN_4);
 800072a:	4638      	mov	r0, r7
 800072c:	2310      	movs	r3, #16
 800072e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000732:	4928      	ldr	r1, [pc, #160]	@ (80007d4 <main+0xd8>)
 8000734:	f7ff fd22 	bl	800017c <_ZN14STM32_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>

  max31856.begin();
 8000738:	463b      	mov	r3, r7
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fd58 	bl	80001f0 <_ZN14STM32_MAX318565beginEv>

  uint8_t fault = max31856.readFault();
 8000740:	463b      	mov	r3, r7
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fde2 	bl	800030c <_ZN14STM32_MAX318569readFaultEv>
 8000748:	4603      	mov	r3, r0
 800074a:	73fb      	strb	r3, [r7, #15]

  int8_t err = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	73bb      	strb	r3, [r7, #14]

  if (fault) {
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d036      	beq.n	80007c4 <main+0xc8>
    if (fault & MAX31856_FAULT_CJRANGE) err = -1;
 8000756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800075a:	2b00      	cmp	r3, #0
 800075c:	da01      	bge.n	8000762 <main+0x66>
 800075e:	23ff      	movs	r3, #255	@ 0xff
 8000760:	73bb      	strb	r3, [r7, #14]
    if (fault & MAX31856_FAULT_TCRANGE) err = -2;
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <main+0x74>
 800076c:	23fe      	movs	r3, #254	@ 0xfe
 800076e:	73bb      	strb	r3, [r7, #14]
    if (fault & MAX31856_FAULT_CJHIGH)  err = -3;
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	f003 0320 	and.w	r3, r3, #32
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <main+0x82>
 800077a:	23fd      	movs	r3, #253	@ 0xfd
 800077c:	73bb      	strb	r3, [r7, #14]
    if (fault & MAX31856_FAULT_CJLOW)   err = -4;
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	f003 0310 	and.w	r3, r3, #16
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <main+0x90>
 8000788:	23fc      	movs	r3, #252	@ 0xfc
 800078a:	73bb      	strb	r3, [r7, #14]
    if (fault & MAX31856_FAULT_TCHIGH)  err = -5;
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <main+0x9e>
 8000796:	23fb      	movs	r3, #251	@ 0xfb
 8000798:	73bb      	strb	r3, [r7, #14]
    if (fault & MAX31856_FAULT_TCLOW)   err = -6;
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <main+0xac>
 80007a4:	23fa      	movs	r3, #250	@ 0xfa
 80007a6:	73bb      	strb	r3, [r7, #14]
    if (fault & MAX31856_FAULT_OVUV)    err = -7;
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <main+0xba>
 80007b2:	23f9      	movs	r3, #249	@ 0xf9
 80007b4:	73bb      	strb	r3, [r7, #14]
    if (fault & MAX31856_FAULT_OPEN)    err = -8;
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <main+0xc8>
 80007c0:	23f8      	movs	r3, #248	@ 0xf8
 80007c2:	73bb      	strb	r3, [r7, #14]
  }

  uint8_t type = max31856.getThermocoupleType();
 80007c4:	463b      	mov	r3, r7
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fd8d 	bl	80002e6 <_ZN14STM32_MAX3185619getThermocoupleTypeEv>
 80007cc:	4603      	mov	r3, r0
 80007ce:	737b      	strb	r3, [r7, #13]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <main+0xd4>
 80007d4:	200000e4 	.word	0x200000e4

080007d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09a      	sub	sp, #104	@ 0x68
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2248      	movs	r2, #72	@ 0x48
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 ff99 	bl	800471e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
 80007fa:	615a      	str	r2, [r3, #20]
 80007fc:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80007fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800080c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800080e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	f023 0303 	bic.w	r3, r3, #3
 8000818:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000822:	f001 f9ff 	bl	8001c24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8000826:	2010      	movs	r0, #16
 8000828:	f7ff ff52 	bl	80006d0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082c:	4b29      	ldr	r3, [pc, #164]	@ (80008d4 <_Z18SystemClock_Configv+0xfc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000834:	4a27      	ldr	r2, [pc, #156]	@ (80008d4 <_Z18SystemClock_Configv+0xfc>)
 8000836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b25      	ldr	r3, [pc, #148]	@ (80008d4 <_Z18SystemClock_Configv+0xfc>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000848:	2327      	movs	r3, #39	@ 0x27
 800084a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800084c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000852:	2301      	movs	r3, #1
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800085a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000860:	2340      	movs	r3, #64	@ 0x40
 8000862:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000864:	2300      	movs	r3, #0
 8000866:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000868:	2360      	movs	r3, #96	@ 0x60
 800086a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800086c:	2300      	movs	r3, #0
 800086e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fd51 	bl	800231c <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	bf14      	ite	ne
 8000880:	2301      	movne	r3, #1
 8000882:	2300      	moveq	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 800088a:	f000 f84a 	bl	8000922 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800088e:	236f      	movs	r3, #111	@ 0x6f
 8000890:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000892:	2302      	movs	r3, #2
 8000894:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 f8a8 	bl	8002a04 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <_Z18SystemClock_Configv+0xf0>
  {
    Error_Handler();
 80008c4:	f000 f82d 	bl	8000922 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80008c8:	f002 fe32 	bl	8003530 <HAL_RCCEx_EnableMSIPLLMode>
}
 80008cc:	bf00      	nop
 80008ce:	3768      	adds	r7, #104	@ 0x68
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	58000400 	.word	0x58000400

080008d8 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b094      	sub	sp, #80	@ 0x50
 80008dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008de:	463b      	mov	r3, r7
 80008e0:	2250      	movs	r2, #80	@ 0x50
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f003 ff1a 	bl	800471e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80008ea:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80008ee:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80008f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80008f4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80008f6:	2302      	movs	r3, #2
 80008f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80008fa:	2310      	movs	r3, #16
 80008fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008fe:	463b      	mov	r3, r7
 8000900:	4618      	mov	r0, r3
 8000902:	f002 fc9f 	bl	8003244 <HAL_RCCEx_PeriphCLKConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	bf14      	ite	ne
 800090c:	2301      	movne	r3, #1
 800090e:	2300      	moveq	r3, #0
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 8000916:	f000 f804 	bl	8000922 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	@ 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000926:	b672      	cpsid	i
}
 8000928:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092a:	bf00      	nop
 800092c:	e7fd      	b.n	800092a <Error_Handler+0x8>

0800092e <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000948:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800094c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <LL_APB1_GRP1_EnableClock>:
{
 800095e:	b480      	push	{r7}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800096a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800096c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4313      	orrs	r3, r2
 8000974:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800097a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4013      	ands	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000982:	68fb      	ldr	r3, [r7, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000994:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <MX_RTC_Init+0x5c>)
 8000996:	4a16      	ldr	r2, [pc, #88]	@ (80009f0 <MX_RTC_Init+0x60>)
 8000998:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800099a:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_RTC_Init+0x5c>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_RTC_Init+0x5c>)
 80009a2:	227f      	movs	r2, #127	@ 0x7f
 80009a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_RTC_Init+0x5c>)
 80009a8:	22ff      	movs	r2, #255	@ 0xff
 80009aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_RTC_Init+0x5c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MX_RTC_Init+0x5c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <MX_RTC_Init+0x5c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <MX_RTC_Init+0x5c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009c4:	4809      	ldr	r0, [pc, #36]	@ (80009ec <MX_RTC_Init+0x5c>)
 80009c6:	f002 feca 	bl	800375e <HAL_RTC_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80009d0:	f7ff ffa7 	bl	8000922 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_RTC_Init+0x5c>)
 80009da:	f002 ffcf 	bl	800397c <HAL_RTCEx_SetWakeUpTimer_IT>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80009e4:	f7ff ff9d 	bl	8000922 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200000c0 	.word	0x200000c0
 80009f0:	40002800 	.word	0x40002800

080009f4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b096      	sub	sp, #88	@ 0x58
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009fc:	f107 0308 	add.w	r3, r7, #8
 8000a00:	2250      	movs	r2, #80	@ 0x50
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 fe8a 	bl	800471e <memset>
  if(rtcHandle->Instance==RTC)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a12      	ldr	r2, [pc, #72]	@ (8000a58 <HAL_RTC_MspInit+0x64>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d11d      	bne.n	8000a50 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a18:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 fc0d 	bl	8003244 <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000a30:	f7ff ff77 	bl	8000922 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a34:	f7ff ff82 	bl	800093c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000a38:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000a3c:	f7ff ff8f 	bl	800095e <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 fbc2 	bl	80011ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000a4a:	2003      	movs	r0, #3
 8000a4c:	f000 fbd9 	bl	8001202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a50:	bf00      	nop
 8000a52:	3758      	adds	r7, #88	@ 0x58
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40002800 	.word	0x40002800

08000a5c <LL_AHB2_GRP1_EnableClock>:
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a80:	68fb      	ldr	r3, [r7, #12]
}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b085      	sub	sp, #20
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a9a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000aa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000aaa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b38 <MX_SPI1_Init+0x78>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000acc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ad0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000ada:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ade:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aec:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000aee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000af2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000af6:	2220      	movs	r2, #32
 8000af8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000b0e:	2207      	movs	r2, #7
 8000b10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_SPI1_Init+0x74>)
 8000b20:	f003 f828 	bl	8003b74 <HAL_SPI_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b2a:	f7ff fefa 	bl	8000922 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000e4 	.word	0x200000e4
 8000b38:	40013000 	.word	0x40013000

08000b3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0f      	ldr	r2, [pc, #60]	@ (8000b98 <HAL_SPI_MspInit+0x5c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d117      	bne.n	8000b8e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b5e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000b62:	f7ff ff94 	bl	8000a8e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2001      	movs	r0, #1
 8000b68:	f7ff ff78 	bl	8000a5c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b6c:	23e0      	movs	r3, #224	@ 0xe0
 8000b6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	4619      	mov	r1, r3
 8000b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b8a:	f000 fb55 	bl	8001238 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3720      	adds	r7, #32
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40013000 	.word	0x40013000

08000b9c <LL_AHB3_GRP1_EnableClock>:
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ba8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000baa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
}
 8000bc2:	bf00      	nop
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000bd2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000bd6:	f7ff ffe1 	bl	8000b9c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	202e      	movs	r0, #46	@ 0x2e
 8000be0:	f000 faf5 	bl	80011ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000be4:	202e      	movs	r0, #46	@ 0x2e
 8000be6:	f000 fb0c 	bl	8001202 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}

08000bee <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf2:	bf00      	nop
 8000bf4:	e7fd      	b.n	8000bf2 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	bf00      	nop
 8000bfc:	e7fd      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c02:	bf00      	nop
 8000c04:	e7fd      	b.n	8000c02 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	bf00      	nop
 8000c0c:	e7fd      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c12:	bf00      	nop
 8000c14:	e7fd      	b.n	8000c12 <UsageFault_Handler+0x4>

08000c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c44:	f000 f9bc 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000c50:	4802      	ldr	r0, [pc, #8]	@ (8000c5c <RTC_WKUP_IRQHandler+0x10>)
 8000c52:	f002 ff5f 	bl	8003b14 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000c0 	.word	0x200000c0

08000c60 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <IPCC_C1_RX_IRQHandler+0x10>)
 8000c66:	f000 fe45 	bl	80018f4 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000084 	.word	0x20000084

08000c74 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <IPCC_C1_TX_IRQHandler+0x10>)
 8000c7a:	f000 fded 	bl	8001858 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000084 	.word	0x20000084

08000c88 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000c8c:	f000 fc5c 	bl	8001548 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <SystemInit+0x98>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9e:	4a23      	ldr	r2, [pc, #140]	@ (8000d2c <SystemInit+0x98>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cbc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000cc0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ccc:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <SystemInit+0x9c>)
 8000cce:	4013      	ands	r3, r2
 8000cd0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cde:	f023 0305 	bic.w	r3, r3, #5
 8000ce2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000cee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000cf2:	f023 0301 	bic.w	r3, r3, #1
 8000cf6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cfe:	4a0d      	ldr	r2, [pc, #52]	@ (8000d34 <SystemInit+0xa0>)
 8000d00:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000d02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d06:	4a0b      	ldr	r2, [pc, #44]	@ (8000d34 <SystemInit+0xa0>)
 8000d08:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000d14:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000ed00 	.word	0xe000ed00
 8000d30:	faf6fefb 	.word	0xfaf6fefb
 8000d34:	22041000 	.word	0x22041000

08000d38 <LL_AHB2_GRP1_EnableClock>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <LL_APB1_GRP1_EnableClock>:
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <MX_USB_PCD_Init+0x48>)
 8000da2:	4a11      	ldr	r2, [pc, #68]	@ (8000de8 <MX_USB_PCD_Init+0x4c>)
 8000da4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_USB_PCD_Init+0x48>)
 8000da8:	2208      	movs	r2, #8
 8000daa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000dac:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <MX_USB_PCD_Init+0x48>)
 8000dae:	2202      	movs	r2, #2
 8000db0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_USB_PCD_Init+0x48>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <MX_USB_PCD_Init+0x48>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_USB_PCD_Init+0x48>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <MX_USB_PCD_Init+0x48>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_USB_PCD_Init+0x48>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	@ (8000de4 <MX_USB_PCD_Init+0x48>)
 8000dd2:	f000 fe2f 	bl	8001a34 <HAL_PCD_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ddc:	f7ff fda1 	bl	8000922 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000148 	.word	0x20000148
 8000de8:	40006800 	.word	0x40006800

08000dec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b09c      	sub	sp, #112	@ 0x70
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	2250      	movs	r2, #80	@ 0x50
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f003 fc86 	bl	800471e <memset>
  if(pcdHandle->Instance==USB)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a1f      	ldr	r2, [pc, #124]	@ (8000e94 <HAL_PCD_MspInit+0xa8>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d136      	bne.n	8000e8a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e20:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000e22:	2318      	movs	r3, #24
 8000e24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000e26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e2a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000e2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000e32:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e36:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000e38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e3c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000e3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000e42:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 f9fb 	bl	8003244 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000e54:	f7ff fd65 	bl	8000922 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f7ff ff6d 	bl	8000d38 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e5e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000e70:	230a      	movs	r3, #10
 8000e72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7e:	f000 f9db 	bl	8001238 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e82:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000e86:	f7ff ff70 	bl	8000d6a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3770      	adds	r7, #112	@ 0x70
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40006800 	.word	0x40006800

08000e98 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000e98:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9c:	3304      	adds	r3, #4

08000e9e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000ea2:	d3f9      	bcc.n	8000e98 <CopyDataInit>
  bx lr
 8000ea4:	4770      	bx	lr

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000ea6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ea8:	3004      	adds	r0, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000eaa:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>
  bx lr
 8000eae:	4770      	bx	lr

08000eb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb0:	480c      	ldr	r0, [pc, #48]	@ (8000ee4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eb4:	f7ff feee 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000eb8:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <LoopForever+0x6>)
 8000eba:	490c      	ldr	r1, [pc, #48]	@ (8000eec <LoopForever+0xa>)
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef0 <LoopForever+0xe>)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f7ff ffed 	bl	8000e9e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ec4:	480b      	ldr	r0, [pc, #44]	@ (8000ef4 <LoopForever+0x12>)
 8000ec6:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <LoopForever+0x16>)
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8000efc <LoopForever+0x1a>)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f7ff ffe7 	bl	8000e9e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ed0:	480b      	ldr	r0, [pc, #44]	@ (8000f00 <LoopForever+0x1e>)
 8000ed2:	490c      	ldr	r1, [pc, #48]	@ (8000f04 <LoopForever+0x22>)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f7ff ffe8 	bl	8000eaa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eda:	f003 fc29 	bl	8004730 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ede:	f7ff fc0d 	bl	80006fc <main>

08000ee2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ee2:	e7fe      	b.n	8000ee2 <LoopForever>
  ldr   r0, =_estack
 8000ee4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000ee8:	20000008 	.word	0x20000008
 8000eec:	20000014 	.word	0x20000014
 8000ef0:	08004844 	.word	0x08004844
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ef4:	20030000 	.word	0x20030000
 8000ef8:	20030000 	.word	0x20030000
 8000efc:	08004850 	.word	0x08004850
  INIT_BSS _sbss, _ebss
 8000f00:	20000014 	.word	0x20000014
 8000f04:	20000428 	.word	0x20000428

08000f08 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC1_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f16:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <HAL_Init+0x3c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f48 <HAL_Init+0x3c>)
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f22:	2003      	movs	r0, #3
 8000f24:	f000 f948 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f000 f80f 	bl	8000f4c <HAL_InitTick>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	e001      	b.n	8000f3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f3a:	f7ff fe48 	bl	8000bce <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	58004000 	.word	0x58004000

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000f58:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_InitTick+0x6c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d024      	beq.n	8000faa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f60:	f001 fefc 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8000f64:	4602      	mov	r2, r0
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_InitTick+0x6c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f70:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 f950 	bl	800121e <HAL_SYSTICK_Config>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10f      	bne.n	8000fa4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b0f      	cmp	r3, #15
 8000f88:	d809      	bhi.n	8000f9e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f92:	f000 f91c 	bl	80011ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f96:	4a09      	ldr	r2, [pc, #36]	@ (8000fbc <HAL_InitTick+0x70>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	e007      	b.n	8000fae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	e004      	b.n	8000fae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	e001      	b.n	8000fae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000010 	.word	0x20000010
 8000fbc:	2000000c 	.word	0x2000000c

08000fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000010 	.word	0x20000010
 8000fe4:	20000424 	.word	0x20000424

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000424 	.word	0x20000424

08001000 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <HAL_GetTickPrio+0x14>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	2000000c 	.word	0x2000000c

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	@ (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	@ (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4907      	ldr	r1, [pc, #28]	@ (80010b4 <__NVIC_EnableIRQ+0x38>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	@ (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	@ (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	@ 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	@ 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f7ff ff8e 	bl	80010b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff29 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011dc:	f7ff ff40 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	6978      	ldr	r0, [r7, #20]
 80011e8:	f7ff ff90 	bl	800110c <NVIC_EncodePriority>
 80011ec:	4602      	mov	r2, r0
 80011ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff5f 	bl	80010b8 <__NVIC_SetPriority>
}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff33 	bl	800107c <__NVIC_EnableIRQ>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffa4 	bl	8001174 <SysTick_Config>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e14c      	b.n	80014e2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 813e 	beq.w	80014dc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d005      	beq.n	8001278 <HAL_GPIO_Init+0x40>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d130      	bne.n	80012da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ae:	2201      	movs	r2, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	f003 0201 	and.w	r2, r3, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d017      	beq.n	8001316 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d123      	bne.n	800136a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	08da      	lsrs	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3208      	adds	r2, #8
 8001364:	6939      	ldr	r1, [r7, #16]
 8001366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0203 	and.w	r2, r3, #3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8098 	beq.w	80014dc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80013ac:	4a54      	ldr	r2, [pc, #336]	@ (8001500 <HAL_GPIO_Init+0x2c8>)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3302      	adds	r3, #2
 80013b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	220f      	movs	r2, #15
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013d6:	d019      	beq.n	800140c <HAL_GPIO_Init+0x1d4>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a4a      	ldr	r2, [pc, #296]	@ (8001504 <HAL_GPIO_Init+0x2cc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d013      	beq.n	8001408 <HAL_GPIO_Init+0x1d0>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a49      	ldr	r2, [pc, #292]	@ (8001508 <HAL_GPIO_Init+0x2d0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d00d      	beq.n	8001404 <HAL_GPIO_Init+0x1cc>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a48      	ldr	r2, [pc, #288]	@ (800150c <HAL_GPIO_Init+0x2d4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d007      	beq.n	8001400 <HAL_GPIO_Init+0x1c8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a47      	ldr	r2, [pc, #284]	@ (8001510 <HAL_GPIO_Init+0x2d8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d101      	bne.n	80013fc <HAL_GPIO_Init+0x1c4>
 80013f8:	2304      	movs	r3, #4
 80013fa:	e008      	b.n	800140e <HAL_GPIO_Init+0x1d6>
 80013fc:	2307      	movs	r3, #7
 80013fe:	e006      	b.n	800140e <HAL_GPIO_Init+0x1d6>
 8001400:	2303      	movs	r3, #3
 8001402:	e004      	b.n	800140e <HAL_GPIO_Init+0x1d6>
 8001404:	2302      	movs	r3, #2
 8001406:	e002      	b.n	800140e <HAL_GPIO_Init+0x1d6>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_GPIO_Init+0x1d6>
 800140c:	2300      	movs	r3, #0
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	f002 0203 	and.w	r2, r2, #3
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	4093      	lsls	r3, r2
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800141e:	4938      	ldr	r1, [pc, #224]	@ (8001500 <HAL_GPIO_Init+0x2c8>)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3302      	adds	r3, #2
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800142c:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <HAL_GPIO_Init+0x2dc>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001450:	4a30      	ldr	r2, [pc, #192]	@ (8001514 <HAL_GPIO_Init+0x2dc>)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001456:	4b2f      	ldr	r3, [pc, #188]	@ (8001514 <HAL_GPIO_Init+0x2dc>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43db      	mvns	r3, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800147a:	4a26      	ldr	r2, [pc, #152]	@ (8001514 <HAL_GPIO_Init+0x2dc>)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001480:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <HAL_GPIO_Init+0x2dc>)
 8001482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001514 <HAL_GPIO_Init+0x2dc>)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80014ae:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <HAL_GPIO_Init+0x2dc>)
 80014b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001514 <HAL_GPIO_Init+0x2dc>)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3301      	adds	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f47f aeab 	bne.w	8001248 <HAL_GPIO_Init+0x10>
  }
}
 80014f2:	bf00      	nop
 80014f4:	bf00      	nop
 80014f6:	371c      	adds	r7, #28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40010000 	.word	0x40010000
 8001504:	48000400 	.word	0x48000400
 8001508:	48000800 	.word	0x48000800
 800150c:	48000c00 	.word	0x48000c00
 8001510:	48001000 	.word	0x48001000
 8001514:	58000800 	.word	0x58000800

08001518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
 8001524:	4613      	mov	r3, r2
 8001526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001528:	787b      	ldrb	r3, [r7, #1]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001534:	e002      	b.n	800153c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800154e:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <HAL_HSEM_IRQHandler+0x30>)
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <HAL_HSEM_IRQHandler+0x30>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	43db      	mvns	r3, r3
 800155c:	4906      	ldr	r1, [pc, #24]	@ (8001578 <HAL_HSEM_IRQHandler+0x30>)
 800155e:	4013      	ands	r3, r2
 8001560:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001562:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <HAL_HSEM_IRQHandler+0x30>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f807 	bl	800157c <HAL_HSEM_FreeCallback>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	58001500 	.word	0x58001500

0800157c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d101      	bne.n	80015a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e08d      	b.n	80016be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d106      	bne.n	80015bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7fe fff0 	bl	800059c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2224      	movs	r2, #36	@ 0x24
 80015c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0201 	bic.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d107      	bne.n	800160a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	e006      	b.n	8001618 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001616:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b02      	cmp	r3, #2
 800161e:	d108      	bne.n	8001632 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	e007      	b.n	8001642 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001640:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001650:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001654:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001664:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691a      	ldr	r2, [r3, #16]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69d9      	ldr	r1, [r3, #28]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1a      	ldr	r2, [r3, #32]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0201 	orr.w	r2, r2, #1
 800169e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2220      	movs	r2, #32
 80016aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b20      	cmp	r3, #32
 80016da:	d138      	bne.n	800174e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e032      	b.n	8001750 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2224      	movs	r2, #36	@ 0x24
 80016f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0201 	bic.w	r2, r2, #1
 8001708:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001718:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6819      	ldr	r1, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 0201 	orr.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2220      	movs	r2, #32
 800173e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800174e:	2302      	movs	r3, #2
  }
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b20      	cmp	r3, #32
 8001770:	d139      	bne.n	80017e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800177c:	2302      	movs	r3, #2
 800177e:	e033      	b.n	80017e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2224      	movs	r2, #36	@ 0x24
 800178c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 0201 	orr.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2220      	movs	r2, #32
 80017d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e000      	b.n	80017e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017e6:	2302      	movs	r3, #2
  }
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d01e      	beq.n	8001844 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001806:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <HAL_IPCC_Init+0x60>)
 8001808:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7fe ff36 	bl	8000688 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800181c:	68b8      	ldr	r0, [r7, #8]
 800181e:	f000 f8f5 	bl	8001a0c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 f8c6 	bl	80019c0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001842:	e001      	b.n	8001848 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	58000c00 	.word	0x58000c00

08001858 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001864:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <HAL_IPCC_TX_IRQHandler+0x98>)
 8001866:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	43db      	mvns	r3, r3
 800186e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8001872:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	041b      	lsls	r3, r3, #16
 800187a:	43db      	mvns	r3, r3
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	4013      	ands	r3, r2
 8001880:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001882:	e02c      	b.n	80018de <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_MASK));
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3310      	adds	r3, #16
 800188c:	2201      	movs	r2, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	4013      	ands	r3, r2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d01c      	beq.n	80018d8 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	3306      	adds	r3, #6
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	3306      	adds	r3, #6
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	6939      	ldr	r1, [r7, #16]
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4013      	ands	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	3301      	adds	r3, #1
 80018dc:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1cf      	bne.n	8001884 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	58000c00 	.word	0x58000c00

080018f4 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001900:	4b20      	ldr	r3, [pc, #128]	@ (8001984 <HAL_IPCC_RX_IRQHandler+0x90>)
 8001902:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 8001904:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <HAL_IPCC_RX_IRQHandler+0x94>)
 8001906:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	43db      	mvns	r3, r3
 800190e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001912:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	4013      	ands	r3, r2
 800191c:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800191e:	e029      	b.n	8001974 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	2201      	movs	r2, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01a      	beq.n	800196e <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	431a      	orrs	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d008      	beq.n	8001964 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	69b9      	ldr	r1, [r7, #24]
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43db      	mvns	r3, r3
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	4013      	ands	r3, r2
 800196c:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	3301      	adds	r3, #1
 8001972:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1d2      	bne.n	8001920 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 800197a:	bf00      	nop
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	58000c00 	.word	0x58000c00
 8001988:	58000c10 	.word	0x58000c10

0800198c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	4613      	mov	r3, r2
 8001998:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	4613      	mov	r3, r2
 80019b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	e00f      	b.n	80019ee <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001a04 <IPCC_SetDefaultCallbacks+0x44>)
 80019d8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	3306      	adds	r3, #6
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	4a08      	ldr	r2, [pc, #32]	@ (8001a08 <IPCC_SetDefaultCallbacks+0x48>)
 80019e6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3301      	adds	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d9ec      	bls.n	80019ce <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	0800198d 	.word	0x0800198d
 8001a08:	080019a7 	.word	0x080019a7

08001a0c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8001a20:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	223f      	movs	r2, #63	@ 0x3f
 8001a26:	609a      	str	r2, [r3, #8]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0c0      	b.n	8001bc8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d106      	bne.n	8001a60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff f9c6 	bl	8000dec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2203      	movs	r2, #3
 8001a64:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 fe1d 	bl	80046ac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	e03e      	b.n	8001af6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	440b      	add	r3, r1
 8001a86:	3311      	adds	r3, #17
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a8c:	7bfa      	ldrb	r2, [r7, #15]
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	3310      	adds	r3, #16
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	3313      	adds	r3, #19
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ab4:	7bfa      	ldrb	r2, [r7, #15]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3320      	adds	r3, #32
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ac8:	7bfa      	ldrb	r2, [r7, #15]
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3324      	adds	r3, #36	@ 0x24
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	440b      	add	r3, r1
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	3301      	adds	r3, #1
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	791b      	ldrb	r3, [r3, #4]
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d3bb      	bcc.n	8001a78 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e044      	b.n	8001b90 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	440b      	add	r3, r1
 8001b14:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b1c:	7bfa      	ldrb	r2, [r7, #15]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	440b      	add	r3, r1
 8001b2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b48:	7bfa      	ldrb	r2, [r7, #15]
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	440b      	add	r3, r1
 8001b56:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b5e:	7bfa      	ldrb	r2, [r7, #15]
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b74:	7bfa      	ldrb	r2, [r7, #15]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	791b      	ldrb	r3, [r3, #4]
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d3b5      	bcc.n	8001b06 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001ba6:	f002 fd9c 	bl	80046e2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7a9b      	ldrb	r3, [r3, #10]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d102      	bne.n	8001bc6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f805 	bl	8001bd0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	f043 0302 	orr.w	r3, r3, #2
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a04      	ldr	r2, [pc, #16]	@ (8001c40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	58000400 	.word	0x58000400

08001c44 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001c48:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <HAL_PWREx_GetVoltageRange+0x18>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	58000400 	.word	0x58000400

08001c60 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c72:	d101      	bne.n	8001c78 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_RCC_HSE_Enable>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_RCC_HSE_Disable>:
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cb4:	6013      	str	r3, [r2, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_RCC_HSE_IsReady>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001cc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001cd2:	d101      	bne.n	8001cd8 <LL_RCC_HSE_IsReady+0x18>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <LL_RCC_HSE_IsReady+0x1a>
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_RCC_HSI_Enable>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf6:	6013      	str	r3, [r2, #0]
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_RCC_HSI_Disable>:
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d14:	6013      	str	r3, [r2, #0]
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_RCC_HSI_IsReady>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d32:	d101      	bne.n	8001d38 <LL_RCC_HSI_IsReady+0x18>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <LL_RCC_HSI_IsReady+0x1a>
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	061b      	lsls	r3, r3, #24
 8001d5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_RCC_HSI48_Enable>:
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_RCC_HSI48_Disable>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001d9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_RCC_HSI48_IsReady>:
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d101      	bne.n	8001dca <LL_RCC_HSI48_IsReady+0x18>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <LL_RCC_HSI48_IsReady+0x1a>
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_RCC_LSE_Enable>:
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <LL_RCC_LSE_Disable>:
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_RCC_LSE_EnableBypass>:
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_RCC_LSE_DisableBypass>:
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e4c:	f023 0304 	bic.w	r3, r3, #4
 8001e50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <LL_RCC_LSE_IsReady>:
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d101      	bne.n	8001e76 <LL_RCC_LSE_IsReady+0x18>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <LL_RCC_LSE_IsReady+0x1a>
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_RCC_LSI1_Enable>:
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_RCC_LSI1_Disable>:
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_RCC_LSI1_IsReady>:
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d101      	bne.n	8001ede <LL_RCC_LSI1_IsReady+0x18>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <LL_RCC_LSI1_IsReady+0x1a>
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <LL_RCC_LSI2_Enable>:
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_RCC_LSI2_Disable>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_RCC_LSI2_IsReady>:
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d101      	bne.n	8001f46 <LL_RCC_LSI2_IsReady+0x18>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <LL_RCC_LSI2_IsReady+0x1a>
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <LL_RCC_LSI2_SetTrimming>:
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001f5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_RCC_MSI_Enable>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_RCC_MSI_Disable>:
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fac:	f023 0301 	bic.w	r3, r3, #1
 8001fb0:	6013      	str	r3, [r2, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_RCC_MSI_IsReady>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d101      	bne.n	8001fd2 <LL_RCC_MSI_IsReady+0x16>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <LL_RCC_MSI_IsReady+0x18>
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_RCC_MSI_SetRange>:
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <LL_RCC_MSI_GetRange>:
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800200c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002016:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2bb0      	cmp	r3, #176	@ 0xb0
 800201c:	d901      	bls.n	8002022 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800201e:	23b0      	movs	r3, #176	@ 0xb0
 8002020:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002022:	687b      	ldr	r3, [r7, #4]
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_RCC_SetSysClkSource>:
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 0203 	bic.w	r2, r3, #3
 800206c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4313      	orrs	r3, r2
 8002074:	608b      	str	r3, [r1, #8]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_RCC_GetSysClkSource>:
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 030c 	and.w	r3, r3, #12
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_RCC_SetAHBPrescaler>:
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80020a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80020ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80020d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_RCC_SetAHB4Prescaler>:
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80020fe:	f023 020f 	bic.w	r2, r3, #15
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_RCC_SetAPB1Prescaler>:
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800212e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_RCC_SetAPB2Prescaler>:
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002156:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4313      	orrs	r3, r2
 800215e:	608b      	str	r3, [r1, #8]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_RCC_GetAHBPrescaler>:
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_RCC_GetAHB4Prescaler>:
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800218c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80021a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80021c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021d0:	6013      	str	r3, [r2, #0]
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021ee:	d101      	bne.n	80021f4 <LL_RCC_PLL_IsReady+0x18>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <LL_RCC_PLL_IsReady+0x1a>
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800221e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002240:	4618      	mov	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800224e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0303 	and.w	r3, r3, #3
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002274:	d101      	bne.n	800227a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800228a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800228e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800229a:	d101      	bne.n	80022a0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80022b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80022b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c0:	d101      	bne.n	80022c6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80022d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022e4:	d101      	bne.n	80022ea <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002304:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002308:	d101      	bne.n	800230e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b08d      	sub	sp, #52	@ 0x34
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e363      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 808d 	beq.w	8002456 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800233c:	f7ff fea1 	bl	8002082 <LL_RCC_GetSysClkSource>
 8002340:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002342:	f7ff ff82 	bl	800224a <LL_RCC_PLL_GetMainSource>
 8002346:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_RCC_OscConfig+0x3e>
 800234e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002350:	2b0c      	cmp	r3, #12
 8002352:	d147      	bne.n	80023e4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002356:	2b01      	cmp	r3, #1
 8002358:	d144      	bne.n	80023e4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e347      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800236a:	f7ff fe4c 	bl	8002006 <LL_RCC_MSI_GetRange>
 800236e:	4603      	mov	r3, r0
 8002370:	429c      	cmp	r4, r3
 8002372:	d914      	bls.n	800239e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fd03 	bl	8002d84 <RCC_SetFlashLatencyFromMSIRange>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e336      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fe26 	bl	8001fde <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fe4a 	bl	8002030 <LL_RCC_MSI_SetCalibTrimming>
 800239c:	e013      	b.n	80023c6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fe1b 	bl	8001fde <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fe3f 	bl	8002030 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fce4 	bl	8002d84 <RCC_SetFlashLatencyFromMSIRange>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e317      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80023c6:	f000 fcc9 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4aa4      	ldr	r2, [pc, #656]	@ (8002660 <HAL_RCC_OscConfig+0x344>)
 80023ce:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023d0:	4ba4      	ldr	r3, [pc, #656]	@ (8002664 <HAL_RCC_OscConfig+0x348>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fdb9 	bl	8000f4c <HAL_InitTick>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d039      	beq.n	8002454 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e308      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01e      	beq.n	800242a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023ec:	f7ff fdc8 	bl	8001f80 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fdfa 	bl	8000fe8 <HAL_GetTick>
 80023f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023f8:	f7fe fdf6 	bl	8000fe8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e2f5      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800240a:	f7ff fdd7 	bl	8001fbc <LL_RCC_MSI_IsReady>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f1      	beq.n	80023f8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fde0 	bl	8001fde <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fe04 	bl	8002030 <LL_RCC_MSI_SetCalibTrimming>
 8002428:	e015      	b.n	8002456 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800242a:	f7ff fdb8 	bl	8001f9e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800242e:	f7fe fddb 	bl	8000fe8 <HAL_GetTick>
 8002432:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002436:	f7fe fdd7 	bl	8000fe8 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e2d6      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002448:	f7ff fdb8 	bl	8001fbc <LL_RCC_MSI_IsReady>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f1      	bne.n	8002436 <HAL_RCC_OscConfig+0x11a>
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002454:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d047      	beq.n	80024f2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002462:	f7ff fe0e 	bl	8002082 <LL_RCC_GetSysClkSource>
 8002466:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002468:	f7ff feef 	bl	800224a <LL_RCC_PLL_GetMainSource>
 800246c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d005      	beq.n	8002480 <HAL_RCC_OscConfig+0x164>
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	2b0c      	cmp	r3, #12
 8002478:	d108      	bne.n	800248c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d105      	bne.n	800248c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d134      	bne.n	80024f2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e2b4      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002494:	d102      	bne.n	800249c <HAL_RCC_OscConfig+0x180>
 8002496:	f7ff fbf5 	bl	8001c84 <LL_RCC_HSE_Enable>
 800249a:	e001      	b.n	80024a0 <HAL_RCC_OscConfig+0x184>
 800249c:	f7ff fc01 	bl	8001ca2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d012      	beq.n	80024ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe fd9e 	bl	8000fe8 <HAL_GetTick>
 80024ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b0:	f7fe fd9a 	bl	8000fe8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b64      	cmp	r3, #100	@ 0x64
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e299      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80024c2:	f7ff fbfd 	bl	8001cc0 <LL_RCC_HSE_IsReady>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f1      	beq.n	80024b0 <HAL_RCC_OscConfig+0x194>
 80024cc:	e011      	b.n	80024f2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7fe fd8b 	bl	8000fe8 <HAL_GetTick>
 80024d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d6:	f7fe fd87 	bl	8000fe8 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	@ 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e286      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80024e8:	f7ff fbea 	bl	8001cc0 <LL_RCC_HSE_IsReady>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f1      	bne.n	80024d6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d04c      	beq.n	8002598 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fe:	f7ff fdc0 	bl	8002082 <LL_RCC_GetSysClkSource>
 8002502:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002504:	f7ff fea1 	bl	800224a <LL_RCC_PLL_GetMainSource>
 8002508:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d005      	beq.n	800251c <HAL_RCC_OscConfig+0x200>
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d10e      	bne.n	8002534 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d10b      	bne.n	8002534 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e266      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fc09 	bl	8001d44 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002532:	e031      	b.n	8002598 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d019      	beq.n	8002570 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800253c:	f7ff fbd2 	bl	8001ce4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7fe fd52 	bl	8000fe8 <HAL_GetTick>
 8002544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002548:	f7fe fd4e 	bl	8000fe8 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e24d      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800255a:	f7ff fbe1 	bl	8001d20 <LL_RCC_HSI_IsReady>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f1      	beq.n	8002548 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fbeb 	bl	8001d44 <LL_RCC_HSI_SetCalibTrimming>
 800256e:	e013      	b.n	8002598 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002570:	f7ff fbc7 	bl	8001d02 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fd38 	bl	8000fe8 <HAL_GetTick>
 8002578:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257c:	f7fe fd34 	bl	8000fe8 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e233      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800258e:	f7ff fbc7 	bl	8001d20 <LL_RCC_HSI_IsReady>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f1      	bne.n	800257c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80a3 	beq.w	80026f8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d076      	beq.n	80026a8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d046      	beq.n	8002654 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80025c6:	f7ff fc7e 	bl	8001ec6 <LL_RCC_LSI1_IsReady>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d113      	bne.n	80025f8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80025d0:	f7ff fc57 	bl	8001e82 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025d4:	f7fe fd08 	bl	8000fe8 <HAL_GetTick>
 80025d8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025dc:	f7fe fd04 	bl	8000fe8 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e203      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025ee:	f7ff fc6a 	bl	8001ec6 <LL_RCC_LSI1_IsReady>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f1      	beq.n	80025dc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80025f8:	f7ff fc77 	bl	8001eea <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fcf4 	bl	8000fe8 <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002604:	f7fe fcf0 	bl	8000fe8 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b03      	cmp	r3, #3
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e1ef      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002616:	f7ff fc8a 	bl	8001f2e <LL_RCC_LSI2_IsReady>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f1      	beq.n	8002604 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fc94 	bl	8001f52 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800262a:	f7ff fc3b 	bl	8001ea4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe fcdb 	bl	8000fe8 <HAL_GetTick>
 8002632:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002636:	f7fe fcd7 	bl	8000fe8 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e1d6      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002648:	f7ff fc3d 	bl	8001ec6 <LL_RCC_LSI1_IsReady>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f1      	bne.n	8002636 <HAL_RCC_OscConfig+0x31a>
 8002652:	e051      	b.n	80026f8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002654:	f7ff fc15 	bl	8001e82 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fcc6 	bl	8000fe8 <HAL_GetTick>
 800265c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800265e:	e00c      	b.n	800267a <HAL_RCC_OscConfig+0x35e>
 8002660:	20000008 	.word	0x20000008
 8002664:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002668:	f7fe fcbe 	bl	8000fe8 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e1bd      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800267a:	f7ff fc24 	bl	8001ec6 <LL_RCC_LSI1_IsReady>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f1      	beq.n	8002668 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002684:	f7ff fc42 	bl	8001f0c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800268a:	f7fe fcad 	bl	8000fe8 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b03      	cmp	r3, #3
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e1ac      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800269c:	f7ff fc47 	bl	8001f2e <LL_RCC_LSI2_IsReady>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f1      	bne.n	800268a <HAL_RCC_OscConfig+0x36e>
 80026a6:	e027      	b.n	80026f8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80026a8:	f7ff fc30 	bl	8001f0c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fe fc9c 	bl	8000fe8 <HAL_GetTick>
 80026b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80026b4:	f7fe fc98 	bl	8000fe8 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e197      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80026c6:	f7ff fc32 	bl	8001f2e <LL_RCC_LSI2_IsReady>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f1      	bne.n	80026b4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80026d0:	f7ff fbe8 	bl	8001ea4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7fe fc88 	bl	8000fe8 <HAL_GetTick>
 80026d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026dc:	f7fe fc84 	bl	8000fe8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e183      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026ee:	f7ff fbea 	bl	8001ec6 <LL_RCC_LSI1_IsReady>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f1      	bne.n	80026dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d05b      	beq.n	80027bc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002704:	4ba7      	ldr	r3, [pc, #668]	@ (80029a4 <HAL_RCC_OscConfig+0x688>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d114      	bne.n	800273a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002710:	f7ff fa88 	bl	8001c24 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002714:	f7fe fc68 	bl	8000fe8 <HAL_GetTick>
 8002718:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271c:	f7fe fc64 	bl	8000fe8 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e163      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272e:	4b9d      	ldr	r3, [pc, #628]	@ (80029a4 <HAL_RCC_OscConfig+0x688>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d102      	bne.n	8002748 <HAL_RCC_OscConfig+0x42c>
 8002742:	f7ff fb48 	bl	8001dd6 <LL_RCC_LSE_Enable>
 8002746:	e00c      	b.n	8002762 <HAL_RCC_OscConfig+0x446>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b05      	cmp	r3, #5
 800274e:	d104      	bne.n	800275a <HAL_RCC_OscConfig+0x43e>
 8002750:	f7ff fb63 	bl	8001e1a <LL_RCC_LSE_EnableBypass>
 8002754:	f7ff fb3f 	bl	8001dd6 <LL_RCC_LSE_Enable>
 8002758:	e003      	b.n	8002762 <HAL_RCC_OscConfig+0x446>
 800275a:	f7ff fb4d 	bl	8001df8 <LL_RCC_LSE_Disable>
 800275e:	f7ff fb6d 	bl	8001e3c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d014      	beq.n	8002794 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276a:	f7fe fc3d 	bl	8000fe8 <HAL_GetTick>
 800276e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002770:	e00a      	b.n	8002788 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002772:	f7fe fc39 	bl	8000fe8 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002780:	4293      	cmp	r3, r2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e136      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002788:	f7ff fb69 	bl	8001e5e <LL_RCC_LSE_IsReady>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0ef      	beq.n	8002772 <HAL_RCC_OscConfig+0x456>
 8002792:	e013      	b.n	80027bc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe fc28 	bl	8000fe8 <HAL_GetTick>
 8002798:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279c:	f7fe fc24 	bl	8000fe8 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e121      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80027b2:	f7ff fb54 	bl	8001e5e <LL_RCC_LSE_IsReady>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ef      	bne.n	800279c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d02c      	beq.n	8002822 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d014      	beq.n	80027fa <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027d0:	f7ff facd 	bl	8001d6e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe fc08 	bl	8000fe8 <HAL_GetTick>
 80027d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027dc:	f7fe fc04 	bl	8000fe8 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e103      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027ee:	f7ff fae0 	bl	8001db2 <LL_RCC_HSI48_IsReady>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f1      	beq.n	80027dc <HAL_RCC_OscConfig+0x4c0>
 80027f8:	e013      	b.n	8002822 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027fa:	f7ff fac9 	bl	8001d90 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7fe fbf3 	bl	8000fe8 <HAL_GetTick>
 8002802:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002806:	f7fe fbef 	bl	8000fe8 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0ee      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002818:	f7ff facb 	bl	8001db2 <LL_RCC_HSI48_IsReady>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f1      	bne.n	8002806 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80e4 	beq.w	80029f4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800282c:	f7ff fc29 	bl	8002082 <LL_RCC_GetSysClkSource>
 8002830:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283e:	2b02      	cmp	r3, #2
 8002840:	f040 80b4 	bne.w	80029ac <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0203 	and.w	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	429a      	cmp	r2, r3
 8002850:	d123      	bne.n	800289a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d11c      	bne.n	800289a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d114      	bne.n	800289a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d10d      	bne.n	800289a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d05d      	beq.n	8002956 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b0c      	cmp	r3, #12
 800289e:	d058      	beq.n	8002952 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0a1      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028b2:	f7ff fc84 	bl	80021be <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028b6:	f7fe fb97 	bl	8000fe8 <HAL_GetTick>
 80028ba:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028be:	f7fe fb93 	bl	8000fe8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e092      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ef      	bne.n	80028be <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	4b30      	ldr	r3, [pc, #192]	@ (80029a8 <HAL_RCC_OscConfig+0x68c>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028f0:	4311      	orrs	r1, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028f6:	0212      	lsls	r2, r2, #8
 80028f8:	4311      	orrs	r1, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028fe:	4311      	orrs	r1, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002904:	4311      	orrs	r1, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800290a:	430a      	orrs	r2, r1
 800290c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002910:	4313      	orrs	r3, r2
 8002912:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002914:	f7ff fc44 	bl	80021a0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002926:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002928:	f7fe fb5e 	bl	8000fe8 <HAL_GetTick>
 800292c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002930:	f7fe fb5a 	bl	8000fe8 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e059      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0ef      	beq.n	8002930 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002950:	e050      	b.n	80029f4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e04f      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d147      	bne.n	80029f4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002964:	f7ff fc1c 	bl	80021a0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002976:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002978:	f7fe fb36 	bl	8000fe8 <HAL_GetTick>
 800297c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe fb32 	bl	8000fe8 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e031      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ef      	beq.n	8002980 <HAL_RCC_OscConfig+0x664>
 80029a0:	e028      	b.n	80029f4 <HAL_RCC_OscConfig+0x6d8>
 80029a2:	bf00      	nop
 80029a4:	58000400 	.word	0x58000400
 80029a8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d01e      	beq.n	80029f0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b2:	f7ff fc04 	bl	80021be <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe fb17 	bl	8000fe8 <HAL_GetTick>
 80029ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029be:	f7fe fb13 	bl	8000fe8 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e012      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ef      	bne.n	80029be <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80029de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029e8:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <HAL_RCC_OscConfig+0x6e4>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	60cb      	str	r3, [r1, #12]
 80029ee:	e001      	b.n	80029f4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3734      	adds	r7, #52	@ 0x34
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd90      	pop	{r4, r7, pc}
 80029fe:	bf00      	nop
 8002a00:	eefefffc 	.word	0xeefefffc

08002a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e12d      	b.n	8002c74 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a18:	4b98      	ldr	r3, [pc, #608]	@ (8002c7c <HAL_RCC_ClockConfig+0x278>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d91b      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a26:	4b95      	ldr	r3, [pc, #596]	@ (8002c7c <HAL_RCC_ClockConfig+0x278>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 0207 	bic.w	r2, r3, #7
 8002a2e:	4993      	ldr	r1, [pc, #588]	@ (8002c7c <HAL_RCC_ClockConfig+0x278>)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a36:	f7fe fad7 	bl	8000fe8 <HAL_GetTick>
 8002a3a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a3e:	f7fe fad3 	bl	8000fe8 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e111      	b.n	8002c74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a50:	4b8a      	ldr	r3, [pc, #552]	@ (8002c7c <HAL_RCC_ClockConfig+0x278>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d1ef      	bne.n	8002a3e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fb13 	bl	800209a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a74:	f7fe fab8 	bl	8000fe8 <HAL_GetTick>
 8002a78:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a7c:	f7fe fab4 	bl	8000fe8 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e0f2      	b.n	8002c74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a8e:	f7ff fbe8 	bl	8002262 <LL_RCC_IsActiveFlag_HPRE>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f1      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d016      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fb0a 	bl	80020c2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002aae:	f7fe fa9b 	bl	8000fe8 <HAL_GetTick>
 8002ab2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ab6:	f7fe fa97 	bl	8000fe8 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0d5      	b.n	8002c74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002ac8:	f7ff fbdd 	bl	8002286 <LL_RCC_IsActiveFlag_C2HPRE>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f1      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d016      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fb03 	bl	80020ee <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ae8:	f7fe fa7e 	bl	8000fe8 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002af0:	f7fe fa7a 	bl	8000fe8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0b8      	b.n	8002c74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002b02:	f7ff fbd3 	bl	80022ac <LL_RCC_IsActiveFlag_SHDHPRE>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f1      	beq.n	8002af0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d016      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fafd 	bl	800211c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b22:	f7fe fa61 	bl	8000fe8 <HAL_GetTick>
 8002b26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b2a:	f7fe fa5d 	bl	8000fe8 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e09b      	b.n	8002c74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b3c:	f7ff fbc9 	bl	80022d2 <LL_RCC_IsActiveFlag_PPRE1>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f1      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d017      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff faf3 	bl	8002144 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b5e:	f7fe fa43 	bl	8000fe8 <HAL_GetTick>
 8002b62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b66:	f7fe fa3f 	bl	8000fe8 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e07d      	b.n	8002c74 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b78:	f7ff fbbd 	bl	80022f6 <LL_RCC_IsActiveFlag_PPRE2>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f1      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d043      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d106      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b96:	f7ff f893 	bl	8001cc0 <LL_RCC_HSE_IsReady>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d11e      	bne.n	8002bde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e067      	b.n	8002c74 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d106      	bne.n	8002bba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002bac:	f7ff fb16 	bl	80021dc <LL_RCC_PLL_IsReady>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d113      	bne.n	8002bde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e05c      	b.n	8002c74 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002bc2:	f7ff f9fb 	bl	8001fbc <LL_RCC_MSI_IsReady>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d108      	bne.n	8002bde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e051      	b.n	8002c74 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002bd0:	f7ff f8a6 	bl	8001d20 <LL_RCC_HSI_IsReady>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e04a      	b.n	8002c74 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fa39 	bl	800205a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be8:	f7fe f9fe 	bl	8000fe8 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe f9fa 	bl	8000fe8 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e036      	b.n	8002c74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	f7ff fa3c 	bl	8002082 <LL_RCC_GetSysClkSource>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d1ec      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c16:	4b19      	ldr	r3, [pc, #100]	@ (8002c7c <HAL_RCC_ClockConfig+0x278>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d21b      	bcs.n	8002c5c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c24:	4b15      	ldr	r3, [pc, #84]	@ (8002c7c <HAL_RCC_ClockConfig+0x278>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f023 0207 	bic.w	r2, r3, #7
 8002c2c:	4913      	ldr	r1, [pc, #76]	@ (8002c7c <HAL_RCC_ClockConfig+0x278>)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c34:	f7fe f9d8 	bl	8000fe8 <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c3c:	f7fe f9d4 	bl	8000fe8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e012      	b.n	8002c74 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <HAL_RCC_ClockConfig+0x278>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d1ef      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c5c:	f000 f87e 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4a07      	ldr	r2, [pc, #28]	@ (8002c80 <HAL_RCC_ClockConfig+0x27c>)
 8002c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002c66:	f7fe f9cb 	bl	8001000 <HAL_GetTickPrio>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe f96d 	bl	8000f4c <HAL_InitTick>
 8002c72:	4603      	mov	r3, r0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	58004000 	.word	0x58004000
 8002c80:	20000008 	.word	0x20000008

08002c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c8a:	f7ff f9fa 	bl	8002082 <LL_RCC_GetSysClkSource>
 8002c8e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10a      	bne.n	8002cac <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c96:	f7ff f9b6 	bl	8002006 <LL_RCC_MSI_GetRange>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	4a2b      	ldr	r2, [pc, #172]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	e04b      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d102      	bne.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cb2:	4b28      	ldr	r3, [pc, #160]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	e045      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d10a      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cbe:	f7fe ffcf 	bl	8001c60 <LL_RCC_HSE_IsEnabledDiv2>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d102      	bne.n	8002cce <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002cc8:	4b22      	ldr	r3, [pc, #136]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	e03a      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002cce:	4b22      	ldr	r3, [pc, #136]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e037      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002cd4:	f7ff fab9 	bl	800224a <LL_RCC_PLL_GetMainSource>
 8002cd8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d003      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x64>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x6a>
 8002ce6:	e00d      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cea:	60bb      	str	r3, [r7, #8]
        break;
 8002cec:	e015      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cee:	f7fe ffb7 	bl	8001c60 <LL_RCC_HSE_IsEnabledDiv2>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d102      	bne.n	8002cfe <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002cf8:	4b16      	ldr	r3, [pc, #88]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cfa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002cfc:	e00d      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002cfe:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d00:	60bb      	str	r3, [r7, #8]
        break;
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002d04:	f7ff f97f 	bl	8002006 <LL_RCC_MSI_GetRange>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	4a0f      	ldr	r2, [pc, #60]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d16:	60bb      	str	r3, [r7, #8]
        break;
 8002d18:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002d1a:	f7ff fa71 	bl	8002200 <LL_RCC_PLL_GetN>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	fb03 f402 	mul.w	r4, r3, r2
 8002d26:	f7ff fa84 	bl	8002232 <LL_RCC_PLL_GetDivider>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	3301      	adds	r3, #1
 8002d30:	fbb4 f4f3 	udiv	r4, r4, r3
 8002d34:	f7ff fa71 	bl	800221a <LL_RCC_PLL_GetR>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	0f5b      	lsrs	r3, r3, #29
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d42:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002d44:	68fb      	ldr	r3, [r7, #12]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd90      	pop	{r4, r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	080047fc 	.word	0x080047fc
 8002d54:	00f42400 	.word	0x00f42400
 8002d58:	01e84800 	.word	0x01e84800

08002d5c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d5c:	b598      	push	{r3, r4, r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002d60:	f7ff ff90 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002d64:	4604      	mov	r4, r0
 8002d66:	f7ff fa01 	bl	800216c <LL_RCC_GetAHBPrescaler>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	4a03      	ldr	r2, [pc, #12]	@ (8002d80 <HAL_RCC_GetHCLKFreq+0x24>)
 8002d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d78:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd98      	pop	{r3, r4, r7, pc}
 8002d80:	080047bc 	.word	0x080047bc

08002d84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2bb0      	cmp	r3, #176	@ 0xb0
 8002d90:	d903      	bls.n	8002d9a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002d92:	4b15      	ldr	r3, [pc, #84]	@ (8002de8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e007      	b.n	8002daa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	4a11      	ldr	r2, [pc, #68]	@ (8002de8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002daa:	f7ff f9eb 	bl	8002184 <LL_RCC_GetAHB4Prescaler>
 8002dae:	4603      	mov	r3, r0
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	4a0d      	ldr	r2, [pc, #52]	@ (8002dec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	0c9c      	lsrs	r4, r3, #18
 8002dce:	f7fe ff39 	bl	8001c44 <HAL_PWREx_GetVoltageRange>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	f000 f80c 	bl	8002df4 <RCC_SetFlashLatency>
 8002ddc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd90      	pop	{r4, r7, pc}
 8002de6:	bf00      	nop
 8002de8:	080047fc 	.word	0x080047fc
 8002dec:	080047bc 	.word	0x080047bc
 8002df0:	431bde83 	.word	0x431bde83

08002df4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b093      	sub	sp, #76	@ 0x4c
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002dfe:	4b37      	ldr	r3, [pc, #220]	@ (8002edc <RCC_SetFlashLatency+0xe8>)
 8002e00:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002e0a:	4a35      	ldr	r2, [pc, #212]	@ (8002ee0 <RCC_SetFlashLatency+0xec>)
 8002e0c:	f107 031c 	add.w	r3, r7, #28
 8002e10:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002e16:	4b33      	ldr	r3, [pc, #204]	@ (8002ee4 <RCC_SetFlashLatency+0xf0>)
 8002e18:	f107 040c 	add.w	r4, r7, #12
 8002e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002e22:	2300      	movs	r3, #0
 8002e24:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e2c:	d11a      	bne.n	8002e64 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e32:	e013      	b.n	8002e5c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	3348      	adds	r3, #72	@ 0x48
 8002e3a:	443b      	add	r3, r7
 8002e3c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d807      	bhi.n	8002e56 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	3348      	adds	r3, #72	@ 0x48
 8002e4c:	443b      	add	r3, r7
 8002e4e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e52:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002e54:	e020      	b.n	8002e98 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e58:	3301      	adds	r3, #1
 8002e5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d9e8      	bls.n	8002e34 <RCC_SetFlashLatency+0x40>
 8002e62:	e019      	b.n	8002e98 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e68:	e013      	b.n	8002e92 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	3348      	adds	r3, #72	@ 0x48
 8002e70:	443b      	add	r3, r7
 8002e72:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d807      	bhi.n	8002e8c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	3348      	adds	r3, #72	@ 0x48
 8002e82:	443b      	add	r3, r7
 8002e84:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e88:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002e8a:	e005      	b.n	8002e98 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e8e:	3301      	adds	r3, #1
 8002e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d9e8      	bls.n	8002e6a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002e98:	4b13      	ldr	r3, [pc, #76]	@ (8002ee8 <RCC_SetFlashLatency+0xf4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 0207 	bic.w	r2, r3, #7
 8002ea0:	4911      	ldr	r1, [pc, #68]	@ (8002ee8 <RCC_SetFlashLatency+0xf4>)
 8002ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ea8:	f7fe f89e 	bl	8000fe8 <HAL_GetTick>
 8002eac:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002eae:	e008      	b.n	8002ec2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002eb0:	f7fe f89a 	bl	8000fe8 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e007      	b.n	8002ed2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <RCC_SetFlashLatency+0xf4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d1ef      	bne.n	8002eb0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	374c      	adds	r7, #76	@ 0x4c
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd90      	pop	{r4, r7, pc}
 8002eda:	bf00      	nop
 8002edc:	08004790 	.word	0x08004790
 8002ee0:	080047a0 	.word	0x080047a0
 8002ee4:	080047ac 	.word	0x080047ac
 8002ee8:	58004000 	.word	0x58004000

08002eec <LL_RCC_LSE_IsEnabled>:
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <LL_RCC_LSE_IsEnabled+0x18>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <LL_RCC_LSE_IsEnabled+0x1a>
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_RCC_LSE_IsReady>:
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d101      	bne.n	8002f28 <LL_RCC_LSE_IsReady+0x18>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <LL_RCC_LSE_IsReady+0x1a>
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_RCC_MSI_EnablePLLMode>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f42:	f043 0304 	orr.w	r3, r3, #4
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_RCC_SetRFWKPClockSource>:
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f62:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <LL_RCC_SetSMPSClockSource>:
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	f023 0203 	bic.w	r2, r3, #3
 8002f90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_RCC_SetSMPSPrescaler>:
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002fb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <LL_RCC_SetUSARTClockSource>:
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002fd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fde:	f023 0203 	bic.w	r2, r3, #3
 8002fe2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_RCC_SetLPUARTClockSource>:
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800300e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <LL_RCC_SetI2CClockSource>:
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003032:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800303e:	43db      	mvns	r3, r3
 8003040:	401a      	ands	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800304a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_RCC_SetLPTIMClockSource>:
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	0c1b      	lsrs	r3, r3, #16
 8003074:	041b      	lsls	r3, r3, #16
 8003076:	43db      	mvns	r3, r3
 8003078:	401a      	ands	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	041b      	lsls	r3, r3, #16
 800307e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_RCC_SetSAIClockSource>:
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800309c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_RCC_SetRNGClockSource>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80030d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <LL_RCC_SetCLK48ClockSource>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80030f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003100:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_RCC_SetUSBClockSource>:
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ffe3 	bl	80030ec <LL_RCC_SetCLK48ClockSource>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <LL_RCC_SetADCClockSource>:
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003142:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <LL_RCC_SetRTCClockSource>:
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800316e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <LL_RCC_GetRTCClockSource>:
{
 8003186:	b480      	push	{r7}
 8003188:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800318a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003196:	4618      	mov	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <LL_RCC_ForceBackupDomainReset>:
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80031a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80031c2:	b480      	push	{r7}
 80031c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80031da:	bf00      	nop
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_RCC_PLLSAI1_Enable>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80031e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80031f6:	6013      	str	r3, [r2, #0]
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <LL_RCC_PLLSAI1_Disable>:
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003210:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003214:	6013      	str	r3, [r2, #0]
}
 8003216:	bf00      	nop
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <LL_RCC_PLLSAI1_IsReady>:
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800322e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003232:	d101      	bne.n	8003238 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800324c:	2300      	movs	r3, #0
 800324e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003250:	2300      	movs	r3, #0
 8003252:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325c:	2b00      	cmp	r3, #0
 800325e:	d034      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003268:	d021      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800326a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800326e:	d81b      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003270:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003274:	d01d      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003276:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800327a:	d815      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00b      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003280:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003284:	d110      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003294:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003296:	e00d      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	4618      	mov	r0, r3
 800329e:	f000 f94d 	bl	800353c <RCCEx_PLLSAI1_ConfigNP>
 80032a2:	4603      	mov	r3, r0
 80032a4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80032a6:	e005      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	77fb      	strb	r3, [r7, #31]
        break;
 80032ac:	e002      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80032ae:	bf00      	nop
 80032b0:	e000      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80032b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b4:	7ffb      	ldrb	r3, [r7, #31]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d105      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fee8 	bl	8003094 <LL_RCC_SetSAIClockSource>
 80032c4:	e001      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c6:	7ffb      	ldrb	r3, [r7, #31]
 80032c8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d046      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80032d6:	f7ff ff56 	bl	8003186 <LL_RCC_GetRTCClockSource>
 80032da:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d03c      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80032e6:	f7fe fc9d 	bl	8001c24 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff30 	bl	800315a <LL_RCC_SetRTCClockSource>
 80032fa:	e02e      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80032fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003304:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003306:	f7ff ff4b 	bl	80031a0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800330a:	f7ff ff5a 	bl	80031c2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800331c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003326:	f7ff fde1 	bl	8002eec <LL_RCC_LSE_IsEnabled>
 800332a:	4603      	mov	r3, r0
 800332c:	2b01      	cmp	r3, #1
 800332e:	d114      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003330:	f7fd fe5a 	bl	8000fe8 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003336:	e00b      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003338:	f7fd fe56 	bl	8000fe8 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003346:	4293      	cmp	r3, r2
 8003348:	d902      	bls.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	77fb      	strb	r3, [r7, #31]
              break;
 800334e:	e004      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003350:	f7ff fdde 	bl	8002f10 <LL_RCC_LSE_IsReady>
 8003354:	4603      	mov	r3, r0
 8003356:	2b01      	cmp	r3, #1
 8003358:	d1ee      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800335a:	7ffb      	ldrb	r3, [r7, #31]
 800335c:	77bb      	strb	r3, [r7, #30]
 800335e:	e001      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003360:	7ffb      	ldrb	r3, [r7, #31]
 8003362:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d004      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fe2a 	bl	8002fce <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fe35 	bl	8002ffa <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fe5d 	bl	8003060 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0320 	and.w	r3, r3, #32
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fe52 	bl	8003060 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fe2a 	bl	8003026 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fe1f 	bl	8003026 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d022      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fe8d 	bl	8003118 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003402:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003406:	d107      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003412:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003416:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800341c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003420:	d10b      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f8e3 	bl	80035f2 <RCCEx_PLLSAI1_ConfigNQ>
 800342c:	4603      	mov	r3, r0
 800342e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003430:	7ffb      	ldrb	r3, [r7, #31]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003436:	7ffb      	ldrb	r3, [r7, #31]
 8003438:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003442:	2b00      	cmp	r3, #0
 8003444:	d02b      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344e:	d008      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003454:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003458:	d003      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345e:	2b00      	cmp	r3, #0
 8003460:	d105      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fe2a 	bl	80030c0 <LL_RCC_SetRNGClockSource>
 800346c:	e00a      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003472:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	2000      	movs	r0, #0
 800347a:	f7ff fe21 	bl	80030c0 <LL_RCC_SetRNGClockSource>
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f7ff fe34 	bl	80030ec <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003488:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800348c:	d107      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800348e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003498:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800349c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d022      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fe3d 	bl	800312e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034bc:	d107      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034cc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034d6:	d10b      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f8e3 	bl	80036a8 <RCCEx_PLLSAI1_ConfigNR>
 80034e2:	4603      	mov	r3, r0
 80034e4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80034e6:	7ffb      	ldrb	r3, [r7, #31]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80034ec:	7ffb      	ldrb	r3, [r7, #31]
 80034ee:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d004      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fd26 	bl	8002f52 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff fd45 	bl	8002fa6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fd2c 	bl	8002f7e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003526:	7fbb      	ldrb	r3, [r7, #30]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003534:	f7ff fcfe 	bl	8002f34 <LL_RCC_MSI_EnablePLLMode>
}
 8003538:	bf00      	nop
 800353a:	bd80      	pop	{r7, pc}

0800353c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003548:	f7ff fe5b 	bl	8003202 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800354c:	f7fd fd4c 	bl	8000fe8 <HAL_GetTick>
 8003550:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003552:	e009      	b.n	8003568 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003554:	f7fd fd48 	bl	8000fe8 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d902      	bls.n	8003568 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	73fb      	strb	r3, [r7, #15]
      break;
 8003566:	e004      	b.n	8003572 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003568:	f7ff fe5a 	bl	8003220 <LL_RCC_PLLSAI1_IsReady>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003572:	7bfb      	ldrb	r3, [r7, #15]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d137      	bne.n	80035e8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800358c:	4313      	orrs	r3, r2
 800358e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035a2:	4313      	orrs	r3, r2
 80035a4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80035a6:	f7ff fe1d 	bl	80031e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035aa:	f7fd fd1d 	bl	8000fe8 <HAL_GetTick>
 80035ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035b0:	e009      	b.n	80035c6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035b2:	f7fd fd19 	bl	8000fe8 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d902      	bls.n	80035c6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	73fb      	strb	r3, [r7, #15]
        break;
 80035c4:	e004      	b.n	80035d0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035c6:	f7ff fe2b 	bl	8003220 <LL_RCC_PLLSAI1_IsReady>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d1f0      	bne.n	80035b2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d108      	bne.n	80035e8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80035d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035e4:	4313      	orrs	r3, r2
 80035e6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80035fe:	f7ff fe00 	bl	8003202 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003602:	f7fd fcf1 	bl	8000fe8 <HAL_GetTick>
 8003606:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003608:	e009      	b.n	800361e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800360a:	f7fd fced 	bl	8000fe8 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d902      	bls.n	800361e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	73fb      	strb	r3, [r7, #15]
      break;
 800361c:	e004      	b.n	8003628 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800361e:	f7ff fdff 	bl	8003220 <LL_RCC_PLLSAI1_IsReady>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f0      	bne.n	800360a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d137      	bne.n	800369e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800362e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003642:	4313      	orrs	r3, r2
 8003644:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003658:	4313      	orrs	r3, r2
 800365a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800365c:	f7ff fdc2 	bl	80031e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003660:	f7fd fcc2 	bl	8000fe8 <HAL_GetTick>
 8003664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003666:	e009      	b.n	800367c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003668:	f7fd fcbe 	bl	8000fe8 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d902      	bls.n	800367c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	73fb      	strb	r3, [r7, #15]
        break;
 800367a:	e004      	b.n	8003686 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800367c:	f7ff fdd0 	bl	8003220 <LL_RCC_PLLSAI1_IsReady>
 8003680:	4603      	mov	r3, r0
 8003682:	2b01      	cmp	r3, #1
 8003684:	d1f0      	bne.n	8003668 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d108      	bne.n	800369e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800368c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800369a:	4313      	orrs	r3, r2
 800369c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800369e:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80036b4:	f7ff fda5 	bl	8003202 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036b8:	f7fd fc96 	bl	8000fe8 <HAL_GetTick>
 80036bc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036be:	e009      	b.n	80036d4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c0:	f7fd fc92 	bl	8000fe8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d902      	bls.n	80036d4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	73fb      	strb	r3, [r7, #15]
      break;
 80036d2:	e004      	b.n	80036de <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036d4:	f7ff fda4 	bl	8003220 <LL_RCC_PLLSAI1_IsReady>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d137      	bne.n	8003754 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80036e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036f8:	4313      	orrs	r3, r2
 80036fa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80036fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800370e:	4313      	orrs	r3, r2
 8003710:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003712:	f7ff fd67 	bl	80031e4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003716:	f7fd fc67 	bl	8000fe8 <HAL_GetTick>
 800371a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800371c:	e009      	b.n	8003732 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800371e:	f7fd fc63 	bl	8000fe8 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d902      	bls.n	8003732 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	73fb      	strb	r3, [r7, #15]
        break;
 8003730:	e004      	b.n	800373c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003732:	f7ff fd75 	bl	8003220 <LL_RCC_PLLSAI1_IsReady>
 8003736:	4603      	mov	r3, r0
 8003738:	2b01      	cmp	r3, #1
 800373a:	d1f0      	bne.n	800371e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003750:	4313      	orrs	r3, r2
 8003752:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b084      	sub	sp, #16
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e07a      	b.n	800386a <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d106      	bne.n	800378e <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7fd f933 	bl	80009f4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2202      	movs	r2, #2
 8003792:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d058      	beq.n	8003856 <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	22ca      	movs	r2, #202	@ 0xca
 80037aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2253      	movs	r2, #83	@ 0x53
 80037b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f883 	bl	80038c0 <RTC_EnterInitMode>
 80037ba:	4603      	mov	r3, r0
 80037bc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d12c      	bne.n	800381e <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80037d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037d6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6899      	ldr	r1, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68d2      	ldr	r2, [r2, #12]
 80037fe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6919      	ldr	r1, [r3, #16]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	041a      	lsls	r2, r3, #16
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f88b 	bl	8003930 <RTC_ExitInitMode>
 800381a:	4603      	mov	r3, r0
 800381c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d113      	bne.n	800384c <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0203 	bic.w	r2, r2, #3
 8003832:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	22ff      	movs	r2, #255	@ 0xff
 8003852:	625a      	str	r2, [r3, #36]	@ 0x24
 8003854:	e001      	b.n	800385a <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d103      	bne.n	8003868 <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a0d      	ldr	r2, [pc, #52]	@ (80038bc <HAL_RTC_WaitForSynchro+0x48>)
 8003886:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003888:	f7fd fbae 	bl	8000fe8 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800388e:	e009      	b.n	80038a4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003890:	f7fd fbaa 	bl	8000fe8 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800389e:	d901      	bls.n	80038a4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e007      	b.n	80038b4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0ee      	beq.n	8003890 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	0001ff5f 	.word	0x0001ff5f

080038c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d123      	bne.n	8003926 <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038ee:	f7fd fb7b 	bl	8000fe8 <HAL_GetTick>
 80038f2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038f4:	e00d      	b.n	8003912 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038f6:	f7fd fb77 	bl	8000fe8 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003904:	d905      	bls.n	8003912 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2204      	movs	r2, #4
 800390a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d102      	bne.n	8003926 <RTC_EnterInitMode+0x66>
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d1e7      	bne.n	80038f6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003926:	7bfb      	ldrb	r3, [r7, #15]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800394a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff ff8a 	bl	8003874 <HAL_RTC_WaitForSynchro>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2204      	movs	r2, #4
 800396a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003988:	4b5f      	ldr	r3, [pc, #380]	@ (8003b08 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a5f      	ldr	r2, [pc, #380]	@ (8003b0c <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	0adb      	lsrs	r3, r3, #11
 8003994:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003998:	fb02 f303 	mul.w	r3, r2, r3
 800399c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e0a7      	b.n	8003afc <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	22ca      	movs	r2, #202	@ 0xca
 80039c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2253      	movs	r2, #83	@ 0x53
 80039ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01a      	beq.n	8003a10 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	3b01      	subs	r3, #1
 80039de:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10d      	bne.n	8003a02 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	22ff      	movs	r2, #255	@ 0xff
 80039ec:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2203      	movs	r2, #3
 80039f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e07c      	b.n	8003afc <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e4      	bne.n	80039da <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a1e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003a30:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003a32:	4b35      	ldr	r3, [pc, #212]	@ (8003b08 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a35      	ldr	r2, [pc, #212]	@ (8003b0c <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 8003a38:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3c:	0adb      	lsrs	r3, r3, #11
 8003a3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10d      	bne.n	8003a70 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	22ff      	movs	r2, #255	@ 0xff
 8003a5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e045      	b.n	8003afc <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0e4      	beq.n	8003a48 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0207 	bic.w	r2, r2, #7
 8003a8c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6899      	ldr	r1, [r3, #8]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b10 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8003aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aac:	4a18      	ldr	r2, [pc, #96]	@ (8003b10 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8003aae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ab2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003ab6:	4b16      	ldr	r3, [pc, #88]	@ (8003b10 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a15      	ldr	r2, [pc, #84]	@ (8003b10 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 8003abc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ac0:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ad0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ae0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	22ff      	movs	r2, #255	@ 0xff
 8003ae8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	371c      	adds	r7, #28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	20000008 	.word	0x20000008
 8003b0c:	10624dd3 	.word	0x10624dd3
 8003b10:	58000800 	.word	0x58000800

08003b14 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b5c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003b1e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003b22:	60da      	str	r2, [r3, #12]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003b42:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f80b 	bl	8003b60 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	58000800 	.word	0x58000800

08003b60 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e095      	b.n	8003cb2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d108      	bne.n	8003ba0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b96:	d009      	beq.n	8003bac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	61da      	str	r2, [r3, #28]
 8003b9e:	e005      	b.n	8003bac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7fc ffb8 	bl	8000b3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003be2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bec:	d902      	bls.n	8003bf4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	e002      	b.n	8003bfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003c02:	d007      	beq.n	8003c14 <HAL_SPI_Init+0xa0>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c0c:	d002      	beq.n	8003c14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c56:	ea42 0103 	orr.w	r1, r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	0c1b      	lsrs	r3, r3, #16
 8003c70:	f003 0204 	and.w	r2, r3, #4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c90:	ea42 0103 	orr.w	r1, r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b088      	sub	sp, #32
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cca:	f7fd f98d 	bl	8000fe8 <HAL_GetTick>
 8003cce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d001      	beq.n	8003ce4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e15c      	b.n	8003f9e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_SPI_Transmit+0x36>
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e154      	b.n	8003f9e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_SPI_Transmit+0x48>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e14d      	b.n	8003f9e <HAL_SPI_Transmit+0x2e4>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	88fa      	ldrh	r2, [r7, #6]
 8003d22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	88fa      	ldrh	r2, [r7, #6]
 8003d28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d54:	d10f      	bne.n	8003d76 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d80:	2b40      	cmp	r3, #64	@ 0x40
 8003d82:	d007      	beq.n	8003d94 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d9c:	d952      	bls.n	8003e44 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <HAL_SPI_Transmit+0xf2>
 8003da6:	8b7b      	ldrh	r3, [r7, #26]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d145      	bne.n	8003e38 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db0:	881a      	ldrh	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbc:	1c9a      	adds	r2, r3, #2
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dd0:	e032      	b.n	8003e38 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d112      	bne.n	8003e06 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de4:	881a      	ldrh	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df0:	1c9a      	adds	r2, r3, #2
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e04:	e018      	b.n	8003e38 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e06:	f7fd f8ef 	bl	8000fe8 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d803      	bhi.n	8003e1e <HAL_SPI_Transmit+0x164>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d102      	bne.n	8003e24 <HAL_SPI_Transmit+0x16a>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0b2      	b.n	8003f9e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1c7      	bne.n	8003dd2 <HAL_SPI_Transmit+0x118>
 8003e42:	e083      	b.n	8003f4c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_SPI_Transmit+0x198>
 8003e4c:	8b7b      	ldrh	r3, [r7, #26]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d177      	bne.n	8003f42 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d912      	bls.n	8003e82 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e60:	881a      	ldrh	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e6c:	1c9a      	adds	r2, r3, #2
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b02      	subs	r3, #2
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e80:	e05f      	b.n	8003f42 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	7812      	ldrb	r2, [r2, #0]
 8003e8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ea8:	e04b      	b.n	8003f42 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d12b      	bne.n	8003f10 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d912      	bls.n	8003ee8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec6:	881a      	ldrh	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed2:	1c9a      	adds	r2, r3, #2
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b02      	subs	r3, #2
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ee6:	e02c      	b.n	8003f42 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	7812      	ldrb	r2, [r2, #0]
 8003ef4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003f0e:	e018      	b.n	8003f42 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f10:	f7fd f86a 	bl	8000fe8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d803      	bhi.n	8003f28 <HAL_SPI_Transmit+0x26e>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d102      	bne.n	8003f2e <HAL_SPI_Transmit+0x274>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e02d      	b.n	8003f9e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ae      	bne.n	8003eaa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	6839      	ldr	r1, [r7, #0]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 fb65 	bl	8004620 <SPI_EndRxTxTransaction>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10a      	bne.n	8003f80 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
  }
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3720      	adds	r7, #32
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b08a      	sub	sp, #40	@ 0x28
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fb8:	f7fd f816 	bl	8000fe8 <HAL_GetTick>
 8003fbc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003fc4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003fcc:	887b      	ldrh	r3, [r7, #2]
 8003fce:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003fd0:	887b      	ldrh	r3, [r7, #2]
 8003fd2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fd4:	7ffb      	ldrb	r3, [r7, #31]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_SPI_TransmitReceive+0x4e>
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fe0:	d106      	bne.n	8003ff0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d102      	bne.n	8003ff0 <HAL_SPI_TransmitReceive+0x4a>
 8003fea:	7ffb      	ldrb	r3, [r7, #31]
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d001      	beq.n	8003ff4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e1f3      	b.n	80043dc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x60>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x60>
 8004000:	887b      	ldrh	r3, [r7, #2]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e1e8      	b.n	80043dc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x72>
 8004014:	2302      	movs	r3, #2
 8004016:	e1e1      	b.n	80043dc <HAL_SPI_TransmitReceive+0x436>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b04      	cmp	r3, #4
 800402a:	d003      	beq.n	8004034 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2205      	movs	r2, #5
 8004030:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	887a      	ldrh	r2, [r7, #2]
 800404c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	887a      	ldrh	r2, [r7, #2]
 800405a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004076:	d802      	bhi.n	800407e <HAL_SPI_TransmitReceive+0xd8>
 8004078:	8abb      	ldrh	r3, [r7, #20]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d908      	bls.n	8004090 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	e007      	b.n	80040a0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800409e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040aa:	2b40      	cmp	r3, #64	@ 0x40
 80040ac:	d007      	beq.n	80040be <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80040c6:	f240 8083 	bls.w	80041d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_SPI_TransmitReceive+0x132>
 80040d2:	8afb      	ldrh	r3, [r7, #22]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d16f      	bne.n	80041b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040dc:	881a      	ldrh	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e8:	1c9a      	adds	r2, r3, #2
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040fc:	e05c      	b.n	80041b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b02      	cmp	r3, #2
 800410a:	d11b      	bne.n	8004144 <HAL_SPI_TransmitReceive+0x19e>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d016      	beq.n	8004144 <HAL_SPI_TransmitReceive+0x19e>
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	2b01      	cmp	r3, #1
 800411a:	d113      	bne.n	8004144 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	881a      	ldrh	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412c:	1c9a      	adds	r2, r3, #2
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b01      	cmp	r3, #1
 8004150:	d11c      	bne.n	800418c <HAL_SPI_TransmitReceive+0x1e6>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d016      	beq.n	800418c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004168:	b292      	uxth	r2, r2
 800416a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	1c9a      	adds	r2, r3, #2
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800417c:	b29b      	uxth	r3, r3
 800417e:	3b01      	subs	r3, #1
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004188:	2301      	movs	r3, #1
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800418c:	f7fc ff2c 	bl	8000fe8 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004198:	429a      	cmp	r2, r3
 800419a:	d80d      	bhi.n	80041b8 <HAL_SPI_TransmitReceive+0x212>
 800419c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d009      	beq.n	80041b8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e111      	b.n	80043dc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d19d      	bne.n	80040fe <HAL_SPI_TransmitReceive+0x158>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d197      	bne.n	80040fe <HAL_SPI_TransmitReceive+0x158>
 80041ce:	e0e5      	b.n	800439c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_SPI_TransmitReceive+0x23a>
 80041d8:	8afb      	ldrh	r3, [r7, #22]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	f040 80d1 	bne.w	8004382 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d912      	bls.n	8004210 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ee:	881a      	ldrh	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fa:	1c9a      	adds	r2, r3, #2
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b02      	subs	r3, #2
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800420e:	e0b8      	b.n	8004382 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	7812      	ldrb	r2, [r2, #0]
 800421c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004236:	e0a4      	b.n	8004382 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b02      	cmp	r3, #2
 8004244:	d134      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x30a>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d02f      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x30a>
 8004250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004252:	2b01      	cmp	r3, #1
 8004254:	d12c      	bne.n	80042b0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	d912      	bls.n	8004286 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004264:	881a      	ldrh	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004270:	1c9a      	adds	r2, r3, #2
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b02      	subs	r3, #2
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004284:	e012      	b.n	80042ac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d148      	bne.n	8004350 <HAL_SPI_TransmitReceive+0x3aa>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d042      	beq.n	8004350 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d923      	bls.n	800431e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	b292      	uxth	r2, r2
 80042e2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e8:	1c9a      	adds	r2, r3, #2
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b02      	subs	r3, #2
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d81f      	bhi.n	800434c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	e016      	b.n	800434c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f103 020c 	add.w	r2, r3, #12
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	7812      	ldrb	r2, [r2, #0]
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800434c:	2301      	movs	r3, #1
 800434e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004350:	f7fc fe4a 	bl	8000fe8 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800435c:	429a      	cmp	r2, r3
 800435e:	d803      	bhi.n	8004368 <HAL_SPI_TransmitReceive+0x3c2>
 8004360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004366:	d102      	bne.n	800436e <HAL_SPI_TransmitReceive+0x3c8>
 8004368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e02c      	b.n	80043dc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	f47f af55 	bne.w	8004238 <HAL_SPI_TransmitReceive+0x292>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	f47f af4e 	bne.w	8004238 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800439c:	6a3a      	ldr	r2, [r7, #32]
 800439e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 f93d 	bl	8004620 <SPI_EndRxTxTransaction>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e00e      	b.n	80043dc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80043da:	2300      	movs	r3, #0
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3728      	adds	r7, #40	@ 0x28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b088      	sub	sp, #32
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043f4:	f7fc fdf8 	bl	8000fe8 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fc:	1a9b      	subs	r3, r3, r2
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	4413      	add	r3, r2
 8004402:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004404:	f7fc fdf0 	bl	8000fe8 <HAL_GetTick>
 8004408:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800440a:	4b39      	ldr	r3, [pc, #228]	@ (80044f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	015b      	lsls	r3, r3, #5
 8004410:	0d1b      	lsrs	r3, r3, #20
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	fb02 f303 	mul.w	r3, r2, r3
 8004418:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800441a:	e054      	b.n	80044c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004422:	d050      	beq.n	80044c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004424:	f7fc fde0 	bl	8000fe8 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	429a      	cmp	r2, r3
 8004432:	d902      	bls.n	800443a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d13d      	bne.n	80044b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004448:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004452:	d111      	bne.n	8004478 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800445c:	d004      	beq.n	8004468 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004466:	d107      	bne.n	8004478 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004476:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004480:	d10f      	bne.n	80044a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e017      	b.n	80044e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4013      	ands	r3, r2
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	bf0c      	ite	eq
 80044d6:	2301      	moveq	r3, #1
 80044d8:	2300      	movne	r3, #0
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	79fb      	ldrb	r3, [r7, #7]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d19b      	bne.n	800441c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3720      	adds	r7, #32
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000008 	.word	0x20000008

080044f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	@ 0x28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
 8004500:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004506:	f7fc fd6f 	bl	8000fe8 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	4413      	add	r3, r2
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004516:	f7fc fd67 	bl	8000fe8 <HAL_GetTick>
 800451a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004524:	4b3d      	ldr	r3, [pc, #244]	@ (800461c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	00da      	lsls	r2, r3, #3
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	0d1b      	lsrs	r3, r3, #20
 8004534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004536:	fb02 f303 	mul.w	r3, r2, r3
 800453a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800453c:	e060      	b.n	8004600 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004544:	d107      	bne.n	8004556 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d104      	bne.n	8004556 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004554:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d050      	beq.n	8004600 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800455e:	f7fc fd43 	bl	8000fe8 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800456a:	429a      	cmp	r2, r3
 800456c:	d902      	bls.n	8004574 <SPI_WaitFifoStateUntilTimeout+0x80>
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	2b00      	cmp	r3, #0
 8004572:	d13d      	bne.n	80045f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004582:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800458c:	d111      	bne.n	80045b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004596:	d004      	beq.n	80045a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a0:	d107      	bne.n	80045b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ba:	d10f      	bne.n	80045dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e010      	b.n	8004612 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	4013      	ands	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d196      	bne.n	800453e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3728      	adds	r7, #40	@ 0x28
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000008 	.word	0x20000008

08004620 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2200      	movs	r2, #0
 8004634:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f7ff ff5b 	bl	80044f4 <SPI_WaitFifoStateUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d007      	beq.n	8004654 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004648:	f043 0220 	orr.w	r2, r3, #32
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e027      	b.n	80046a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2200      	movs	r2, #0
 800465c:	2180      	movs	r1, #128	@ 0x80
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f7ff fec0 	bl	80043e4 <SPI_WaitFlagStateUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d007      	beq.n	800467a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800466e:	f043 0220 	orr.w	r2, r3, #32
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e014      	b.n	80046a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2200      	movs	r2, #0
 8004682:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f7ff ff34 	bl	80044f4 <SPI_WaitFifoStateUntilTimeout>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d007      	beq.n	80046a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004696:	f043 0220 	orr.w	r2, r3, #32
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e000      	b.n	80046a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046b4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80046b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	4013      	ands	r3, r2
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	1d3b      	adds	r3, r7, #4
 80046ec:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <memset>:
 800471e:	4402      	add	r2, r0
 8004720:	4603      	mov	r3, r0
 8004722:	4293      	cmp	r3, r2
 8004724:	d100      	bne.n	8004728 <memset+0xa>
 8004726:	4770      	bx	lr
 8004728:	f803 1b01 	strb.w	r1, [r3], #1
 800472c:	e7f9      	b.n	8004722 <memset+0x4>
	...

08004730 <__libc_init_array>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	4d0d      	ldr	r5, [pc, #52]	@ (8004768 <__libc_init_array+0x38>)
 8004734:	4c0d      	ldr	r4, [pc, #52]	@ (800476c <__libc_init_array+0x3c>)
 8004736:	1b64      	subs	r4, r4, r5
 8004738:	10a4      	asrs	r4, r4, #2
 800473a:	2600      	movs	r6, #0
 800473c:	42a6      	cmp	r6, r4
 800473e:	d109      	bne.n	8004754 <__libc_init_array+0x24>
 8004740:	4d0b      	ldr	r5, [pc, #44]	@ (8004770 <__libc_init_array+0x40>)
 8004742:	4c0c      	ldr	r4, [pc, #48]	@ (8004774 <__libc_init_array+0x44>)
 8004744:	f000 f818 	bl	8004778 <_init>
 8004748:	1b64      	subs	r4, r4, r5
 800474a:	10a4      	asrs	r4, r4, #2
 800474c:	2600      	movs	r6, #0
 800474e:	42a6      	cmp	r6, r4
 8004750:	d105      	bne.n	800475e <__libc_init_array+0x2e>
 8004752:	bd70      	pop	{r4, r5, r6, pc}
 8004754:	f855 3b04 	ldr.w	r3, [r5], #4
 8004758:	4798      	blx	r3
 800475a:	3601      	adds	r6, #1
 800475c:	e7ee      	b.n	800473c <__libc_init_array+0xc>
 800475e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004762:	4798      	blx	r3
 8004764:	3601      	adds	r6, #1
 8004766:	e7f2      	b.n	800474e <__libc_init_array+0x1e>
 8004768:	0800483c 	.word	0x0800483c
 800476c:	0800483c 	.word	0x0800483c
 8004770:	0800483c 	.word	0x0800483c
 8004774:	08004840 	.word	0x08004840

08004778 <_init>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	bf00      	nop
 800477c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477e:	bc08      	pop	{r3}
 8004780:	469e      	mov	lr, r3
 8004782:	4770      	bx	lr

08004784 <_fini>:
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	bf00      	nop
 8004788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478a:	bc08      	pop	{r3}
 800478c:	469e      	mov	lr, r3
 800478e:	4770      	bx	lr
